
_new_test_5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a3dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b8  0801a49c  0801a49c  0002a49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b654  0801b654  00030158  2**0
                  CONTENTS
  4 .ARM          00000008  0801b654  0801b654  0002b654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b65c  0801b65c  00030158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b65c  0801b65c  0002b65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b660  0801b660  0002b660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  0801b664  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000153c  20000158  0801b7bc  00030158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001694  0801b7bc  00031694  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049042  00000000  00000000  00030180  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000083c3  00000000  00000000  000791c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002358  00000000  00000000  00081588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ff0  00000000  00000000  000838e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002405c  00000000  00000000  000858d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002a8d5  00000000  00000000  000a992c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a8654  00000000  00000000  000d4201  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017c855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008394  00000000  00000000  0017c8d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000158 	.word	0x20000158
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801a484 	.word	0x0801a484

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000015c 	.word	0x2000015c
 8000104:	0801a484 	.word	0x0801a484

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 fd71 	bl	8001eec <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 fcc9 	bl	8001dac <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 fd63 	bl	8001eec <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fd59 	bl	8001eec <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fceb 	bl	8001e24 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fce1 	bl	8001e24 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	1c08      	adds	r0, r1, #0
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 fad3 	bl	8000a24 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 fa55 	bl	8000938 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 fac5 	bl	8000a24 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fabb 	bl	8000a24 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fa63 	bl	8000988 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fa59 	bl	8000988 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__aeabi_uldivmod>:
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d111      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004e8:	2a00      	cmp	r2, #0
 80004ea:	d10f      	bne.n	800050c <__aeabi_uldivmod+0x28>
 80004ec:	2900      	cmp	r1, #0
 80004ee:	d100      	bne.n	80004f2 <__aeabi_uldivmod+0xe>
 80004f0:	2800      	cmp	r0, #0
 80004f2:	d002      	beq.n	80004fa <__aeabi_uldivmod+0x16>
 80004f4:	2100      	movs	r1, #0
 80004f6:	43c9      	mvns	r1, r1
 80004f8:	1c08      	adds	r0, r1, #0
 80004fa:	b407      	push	{r0, r1, r2}
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <__aeabi_uldivmod+0x24>)
 80004fe:	a102      	add	r1, pc, #8	; (adr r1, 8000508 <__aeabi_uldivmod+0x24>)
 8000500:	1840      	adds	r0, r0, r1
 8000502:	9002      	str	r0, [sp, #8]
 8000504:	bd03      	pop	{r0, r1, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	fffffee9 	.word	0xfffffee9
 800050c:	b403      	push	{r0, r1}
 800050e:	4668      	mov	r0, sp
 8000510:	b501      	push	{r0, lr}
 8000512:	9802      	ldr	r0, [sp, #8]
 8000514:	f000 f83c 	bl	8000590 <__udivmoddi4>
 8000518:	9b01      	ldr	r3, [sp, #4]
 800051a:	469e      	mov	lr, r3
 800051c:	b002      	add	sp, #8
 800051e:	bc0c      	pop	{r2, r3}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			; (mov r8, r8)

08000524 <__aeabi_f2uiz>:
 8000524:	219e      	movs	r1, #158	; 0x9e
 8000526:	b510      	push	{r4, lr}
 8000528:	05c9      	lsls	r1, r1, #23
 800052a:	1c04      	adds	r4, r0, #0
 800052c:	f7ff ffd0 	bl	80004d0 <__aeabi_fcmpge>
 8000530:	2800      	cmp	r0, #0
 8000532:	d103      	bne.n	800053c <__aeabi_f2uiz+0x18>
 8000534:	1c20      	adds	r0, r4, #0
 8000536:	f000 fdbb 	bl	80010b0 <__aeabi_f2iz>
 800053a:	bd10      	pop	{r4, pc}
 800053c:	219e      	movs	r1, #158	; 0x9e
 800053e:	1c20      	adds	r0, r4, #0
 8000540:	05c9      	lsls	r1, r1, #23
 8000542:	f000 fbf1 	bl	8000d28 <__aeabi_fsub>
 8000546:	f000 fdb3 	bl	80010b0 <__aeabi_f2iz>
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	061b      	lsls	r3, r3, #24
 800054e:	469c      	mov	ip, r3
 8000550:	4460      	add	r0, ip
 8000552:	e7f2      	b.n	800053a <__aeabi_f2uiz+0x16>

08000554 <__aeabi_d2uiz>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	2200      	movs	r2, #0
 8000558:	4b0c      	ldr	r3, [pc, #48]	; (800058c <__aeabi_d2uiz+0x38>)
 800055a:	0004      	movs	r4, r0
 800055c:	000d      	movs	r5, r1
 800055e:	f7ff ff7d 	bl	800045c <__aeabi_dcmpge>
 8000562:	2800      	cmp	r0, #0
 8000564:	d104      	bne.n	8000570 <__aeabi_d2uiz+0x1c>
 8000566:	0020      	movs	r0, r4
 8000568:	0029      	movs	r1, r5
 800056a:	f002 fae1 	bl	8002b30 <__aeabi_d2iz>
 800056e:	bd70      	pop	{r4, r5, r6, pc}
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <__aeabi_d2uiz+0x38>)
 8000572:	2200      	movs	r2, #0
 8000574:	0020      	movs	r0, r4
 8000576:	0029      	movs	r1, r5
 8000578:	f001 ff92 	bl	80024a0 <__aeabi_dsub>
 800057c:	f002 fad8 	bl	8002b30 <__aeabi_d2iz>
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	061b      	lsls	r3, r3, #24
 8000584:	469c      	mov	ip, r3
 8000586:	4460      	add	r0, ip
 8000588:	e7f1      	b.n	800056e <__aeabi_d2uiz+0x1a>
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	41e00000 	.word	0x41e00000

08000590 <__udivmoddi4>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	464f      	mov	r7, r9
 8000594:	4646      	mov	r6, r8
 8000596:	46d6      	mov	lr, sl
 8000598:	b5c0      	push	{r6, r7, lr}
 800059a:	0004      	movs	r4, r0
 800059c:	b082      	sub	sp, #8
 800059e:	000d      	movs	r5, r1
 80005a0:	4691      	mov	r9, r2
 80005a2:	4698      	mov	r8, r3
 80005a4:	428b      	cmp	r3, r1
 80005a6:	d82f      	bhi.n	8000608 <__udivmoddi4+0x78>
 80005a8:	d02c      	beq.n	8000604 <__udivmoddi4+0x74>
 80005aa:	4641      	mov	r1, r8
 80005ac:	4648      	mov	r0, r9
 80005ae:	f002 fbd1 	bl	8002d54 <__clzdi2>
 80005b2:	0029      	movs	r1, r5
 80005b4:	0006      	movs	r6, r0
 80005b6:	0020      	movs	r0, r4
 80005b8:	f002 fbcc 	bl	8002d54 <__clzdi2>
 80005bc:	1a33      	subs	r3, r6, r0
 80005be:	469c      	mov	ip, r3
 80005c0:	3b20      	subs	r3, #32
 80005c2:	469a      	mov	sl, r3
 80005c4:	d500      	bpl.n	80005c8 <__udivmoddi4+0x38>
 80005c6:	e076      	b.n	80006b6 <__udivmoddi4+0x126>
 80005c8:	464b      	mov	r3, r9
 80005ca:	4652      	mov	r2, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001f      	movs	r7, r3
 80005d0:	464b      	mov	r3, r9
 80005d2:	4662      	mov	r2, ip
 80005d4:	4093      	lsls	r3, r2
 80005d6:	001e      	movs	r6, r3
 80005d8:	42af      	cmp	r7, r5
 80005da:	d828      	bhi.n	800062e <__udivmoddi4+0x9e>
 80005dc:	d025      	beq.n	800062a <__udivmoddi4+0x9a>
 80005de:	4653      	mov	r3, sl
 80005e0:	1ba4      	subs	r4, r4, r6
 80005e2:	41bd      	sbcs	r5, r7
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da00      	bge.n	80005ea <__udivmoddi4+0x5a>
 80005e8:	e07b      	b.n	80006e2 <__udivmoddi4+0x152>
 80005ea:	2200      	movs	r2, #0
 80005ec:	2300      	movs	r3, #0
 80005ee:	9200      	str	r2, [sp, #0]
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2301      	movs	r3, #1
 80005f4:	4652      	mov	r2, sl
 80005f6:	4093      	lsls	r3, r2
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2301      	movs	r3, #1
 80005fc:	4662      	mov	r2, ip
 80005fe:	4093      	lsls	r3, r2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	e018      	b.n	8000636 <__udivmoddi4+0xa6>
 8000604:	4282      	cmp	r2, r0
 8000606:	d9d0      	bls.n	80005aa <__udivmoddi4+0x1a>
 8000608:	2200      	movs	r2, #0
 800060a:	2300      	movs	r3, #0
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <__udivmoddi4+0x8a>
 8000616:	601c      	str	r4, [r3, #0]
 8000618:	605d      	str	r5, [r3, #4]
 800061a:	9800      	ldr	r0, [sp, #0]
 800061c:	9901      	ldr	r1, [sp, #4]
 800061e:	b002      	add	sp, #8
 8000620:	bc1c      	pop	{r2, r3, r4}
 8000622:	4690      	mov	r8, r2
 8000624:	4699      	mov	r9, r3
 8000626:	46a2      	mov	sl, r4
 8000628:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800062a:	42a3      	cmp	r3, r4
 800062c:	d9d7      	bls.n	80005de <__udivmoddi4+0x4e>
 800062e:	2200      	movs	r2, #0
 8000630:	2300      	movs	r3, #0
 8000632:	9200      	str	r2, [sp, #0]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	4663      	mov	r3, ip
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0e9      	beq.n	8000610 <__udivmoddi4+0x80>
 800063c:	07fb      	lsls	r3, r7, #31
 800063e:	4698      	mov	r8, r3
 8000640:	4641      	mov	r1, r8
 8000642:	0872      	lsrs	r2, r6, #1
 8000644:	430a      	orrs	r2, r1
 8000646:	087b      	lsrs	r3, r7, #1
 8000648:	4666      	mov	r6, ip
 800064a:	e00e      	b.n	800066a <__udivmoddi4+0xda>
 800064c:	42ab      	cmp	r3, r5
 800064e:	d101      	bne.n	8000654 <__udivmoddi4+0xc4>
 8000650:	42a2      	cmp	r2, r4
 8000652:	d80c      	bhi.n	800066e <__udivmoddi4+0xde>
 8000654:	1aa4      	subs	r4, r4, r2
 8000656:	419d      	sbcs	r5, r3
 8000658:	2001      	movs	r0, #1
 800065a:	1924      	adds	r4, r4, r4
 800065c:	416d      	adcs	r5, r5
 800065e:	2100      	movs	r1, #0
 8000660:	3e01      	subs	r6, #1
 8000662:	1824      	adds	r4, r4, r0
 8000664:	414d      	adcs	r5, r1
 8000666:	2e00      	cmp	r6, #0
 8000668:	d006      	beq.n	8000678 <__udivmoddi4+0xe8>
 800066a:	42ab      	cmp	r3, r5
 800066c:	d9ee      	bls.n	800064c <__udivmoddi4+0xbc>
 800066e:	3e01      	subs	r6, #1
 8000670:	1924      	adds	r4, r4, r4
 8000672:	416d      	adcs	r5, r5
 8000674:	2e00      	cmp	r6, #0
 8000676:	d1f8      	bne.n	800066a <__udivmoddi4+0xda>
 8000678:	9800      	ldr	r0, [sp, #0]
 800067a:	9901      	ldr	r1, [sp, #4]
 800067c:	4653      	mov	r3, sl
 800067e:	1900      	adds	r0, r0, r4
 8000680:	4169      	adcs	r1, r5
 8000682:	2b00      	cmp	r3, #0
 8000684:	db23      	blt.n	80006ce <__udivmoddi4+0x13e>
 8000686:	002b      	movs	r3, r5
 8000688:	4652      	mov	r2, sl
 800068a:	40d3      	lsrs	r3, r2
 800068c:	002a      	movs	r2, r5
 800068e:	4664      	mov	r4, ip
 8000690:	40e2      	lsrs	r2, r4
 8000692:	001c      	movs	r4, r3
 8000694:	4653      	mov	r3, sl
 8000696:	0015      	movs	r5, r2
 8000698:	2b00      	cmp	r3, #0
 800069a:	db2d      	blt.n	80006f8 <__udivmoddi4+0x168>
 800069c:	0026      	movs	r6, r4
 800069e:	4657      	mov	r7, sl
 80006a0:	40be      	lsls	r6, r7
 80006a2:	0033      	movs	r3, r6
 80006a4:	0026      	movs	r6, r4
 80006a6:	4667      	mov	r7, ip
 80006a8:	40be      	lsls	r6, r7
 80006aa:	0032      	movs	r2, r6
 80006ac:	1a80      	subs	r0, r0, r2
 80006ae:	4199      	sbcs	r1, r3
 80006b0:	9000      	str	r0, [sp, #0]
 80006b2:	9101      	str	r1, [sp, #4]
 80006b4:	e7ac      	b.n	8000610 <__udivmoddi4+0x80>
 80006b6:	4662      	mov	r2, ip
 80006b8:	2320      	movs	r3, #32
 80006ba:	1a9b      	subs	r3, r3, r2
 80006bc:	464a      	mov	r2, r9
 80006be:	40da      	lsrs	r2, r3
 80006c0:	4661      	mov	r1, ip
 80006c2:	0013      	movs	r3, r2
 80006c4:	4642      	mov	r2, r8
 80006c6:	408a      	lsls	r2, r1
 80006c8:	0017      	movs	r7, r2
 80006ca:	431f      	orrs	r7, r3
 80006cc:	e780      	b.n	80005d0 <__udivmoddi4+0x40>
 80006ce:	4662      	mov	r2, ip
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	002a      	movs	r2, r5
 80006d6:	4666      	mov	r6, ip
 80006d8:	409a      	lsls	r2, r3
 80006da:	0023      	movs	r3, r4
 80006dc:	40f3      	lsrs	r3, r6
 80006de:	4313      	orrs	r3, r2
 80006e0:	e7d4      	b.n	800068c <__udivmoddi4+0xfc>
 80006e2:	4662      	mov	r2, ip
 80006e4:	2320      	movs	r3, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	1a9b      	subs	r3, r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	9100      	str	r1, [sp, #0]
 80006ee:	9201      	str	r2, [sp, #4]
 80006f0:	2201      	movs	r2, #1
 80006f2:	40da      	lsrs	r2, r3
 80006f4:	9201      	str	r2, [sp, #4]
 80006f6:	e780      	b.n	80005fa <__udivmoddi4+0x6a>
 80006f8:	2320      	movs	r3, #32
 80006fa:	4662      	mov	r2, ip
 80006fc:	0026      	movs	r6, r4
 80006fe:	1a9b      	subs	r3, r3, r2
 8000700:	40de      	lsrs	r6, r3
 8000702:	002f      	movs	r7, r5
 8000704:	46b0      	mov	r8, r6
 8000706:	4666      	mov	r6, ip
 8000708:	40b7      	lsls	r7, r6
 800070a:	4646      	mov	r6, r8
 800070c:	003b      	movs	r3, r7
 800070e:	4333      	orrs	r3, r6
 8000710:	e7c8      	b.n	80006a4 <__udivmoddi4+0x114>
 8000712:	46c0      	nop			; (mov r8, r8)

08000714 <__aeabi_fdiv>:
 8000714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000716:	4657      	mov	r7, sl
 8000718:	464e      	mov	r6, r9
 800071a:	4645      	mov	r5, r8
 800071c:	46de      	mov	lr, fp
 800071e:	0244      	lsls	r4, r0, #9
 8000720:	b5e0      	push	{r5, r6, r7, lr}
 8000722:	0046      	lsls	r6, r0, #1
 8000724:	4688      	mov	r8, r1
 8000726:	0a64      	lsrs	r4, r4, #9
 8000728:	0e36      	lsrs	r6, r6, #24
 800072a:	0fc7      	lsrs	r7, r0, #31
 800072c:	2e00      	cmp	r6, #0
 800072e:	d063      	beq.n	80007f8 <__aeabi_fdiv+0xe4>
 8000730:	2eff      	cmp	r6, #255	; 0xff
 8000732:	d024      	beq.n	800077e <__aeabi_fdiv+0x6a>
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	00e4      	lsls	r4, r4, #3
 8000738:	04db      	lsls	r3, r3, #19
 800073a:	431c      	orrs	r4, r3
 800073c:	2300      	movs	r3, #0
 800073e:	4699      	mov	r9, r3
 8000740:	469b      	mov	fp, r3
 8000742:	3e7f      	subs	r6, #127	; 0x7f
 8000744:	4643      	mov	r3, r8
 8000746:	4642      	mov	r2, r8
 8000748:	025d      	lsls	r5, r3, #9
 800074a:	0fd2      	lsrs	r2, r2, #31
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	0a6d      	lsrs	r5, r5, #9
 8000750:	0e1b      	lsrs	r3, r3, #24
 8000752:	4690      	mov	r8, r2
 8000754:	4692      	mov	sl, r2
 8000756:	d065      	beq.n	8000824 <__aeabi_fdiv+0x110>
 8000758:	2bff      	cmp	r3, #255	; 0xff
 800075a:	d055      	beq.n	8000808 <__aeabi_fdiv+0xf4>
 800075c:	2280      	movs	r2, #128	; 0x80
 800075e:	2100      	movs	r1, #0
 8000760:	00ed      	lsls	r5, r5, #3
 8000762:	04d2      	lsls	r2, r2, #19
 8000764:	3b7f      	subs	r3, #127	; 0x7f
 8000766:	4315      	orrs	r5, r2
 8000768:	1af6      	subs	r6, r6, r3
 800076a:	4643      	mov	r3, r8
 800076c:	464a      	mov	r2, r9
 800076e:	407b      	eors	r3, r7
 8000770:	2a0f      	cmp	r2, #15
 8000772:	d900      	bls.n	8000776 <__aeabi_fdiv+0x62>
 8000774:	e08d      	b.n	8000892 <__aeabi_fdiv+0x17e>
 8000776:	486d      	ldr	r0, [pc, #436]	; (800092c <__aeabi_fdiv+0x218>)
 8000778:	0092      	lsls	r2, r2, #2
 800077a:	5882      	ldr	r2, [r0, r2]
 800077c:	4697      	mov	pc, r2
 800077e:	2c00      	cmp	r4, #0
 8000780:	d154      	bne.n	800082c <__aeabi_fdiv+0x118>
 8000782:	2308      	movs	r3, #8
 8000784:	4699      	mov	r9, r3
 8000786:	3b06      	subs	r3, #6
 8000788:	26ff      	movs	r6, #255	; 0xff
 800078a:	469b      	mov	fp, r3
 800078c:	e7da      	b.n	8000744 <__aeabi_fdiv+0x30>
 800078e:	2500      	movs	r5, #0
 8000790:	4653      	mov	r3, sl
 8000792:	2902      	cmp	r1, #2
 8000794:	d01b      	beq.n	80007ce <__aeabi_fdiv+0xba>
 8000796:	2903      	cmp	r1, #3
 8000798:	d100      	bne.n	800079c <__aeabi_fdiv+0x88>
 800079a:	e0bf      	b.n	800091c <__aeabi_fdiv+0x208>
 800079c:	2901      	cmp	r1, #1
 800079e:	d028      	beq.n	80007f2 <__aeabi_fdiv+0xde>
 80007a0:	0030      	movs	r0, r6
 80007a2:	307f      	adds	r0, #127	; 0x7f
 80007a4:	2800      	cmp	r0, #0
 80007a6:	dd20      	ble.n	80007ea <__aeabi_fdiv+0xd6>
 80007a8:	076a      	lsls	r2, r5, #29
 80007aa:	d004      	beq.n	80007b6 <__aeabi_fdiv+0xa2>
 80007ac:	220f      	movs	r2, #15
 80007ae:	402a      	ands	r2, r5
 80007b0:	2a04      	cmp	r2, #4
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0xa2>
 80007b4:	3504      	adds	r5, #4
 80007b6:	012a      	lsls	r2, r5, #4
 80007b8:	d503      	bpl.n	80007c2 <__aeabi_fdiv+0xae>
 80007ba:	0030      	movs	r0, r6
 80007bc:	4a5c      	ldr	r2, [pc, #368]	; (8000930 <__aeabi_fdiv+0x21c>)
 80007be:	3080      	adds	r0, #128	; 0x80
 80007c0:	4015      	ands	r5, r2
 80007c2:	28fe      	cmp	r0, #254	; 0xfe
 80007c4:	dc03      	bgt.n	80007ce <__aeabi_fdiv+0xba>
 80007c6:	01ac      	lsls	r4, r5, #6
 80007c8:	0a64      	lsrs	r4, r4, #9
 80007ca:	b2c2      	uxtb	r2, r0
 80007cc:	e001      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 80007ce:	22ff      	movs	r2, #255	; 0xff
 80007d0:	2400      	movs	r4, #0
 80007d2:	0264      	lsls	r4, r4, #9
 80007d4:	05d2      	lsls	r2, r2, #23
 80007d6:	0a60      	lsrs	r0, r4, #9
 80007d8:	07db      	lsls	r3, r3, #31
 80007da:	4310      	orrs	r0, r2
 80007dc:	4318      	orrs	r0, r3
 80007de:	bc3c      	pop	{r2, r3, r4, r5}
 80007e0:	4690      	mov	r8, r2
 80007e2:	4699      	mov	r9, r3
 80007e4:	46a2      	mov	sl, r4
 80007e6:	46ab      	mov	fp, r5
 80007e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ea:	2201      	movs	r2, #1
 80007ec:	1a10      	subs	r0, r2, r0
 80007ee:	281b      	cmp	r0, #27
 80007f0:	dd7c      	ble.n	80008ec <__aeabi_fdiv+0x1d8>
 80007f2:	2200      	movs	r2, #0
 80007f4:	2400      	movs	r4, #0
 80007f6:	e7ec      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 80007f8:	2c00      	cmp	r4, #0
 80007fa:	d11d      	bne.n	8000838 <__aeabi_fdiv+0x124>
 80007fc:	2304      	movs	r3, #4
 80007fe:	4699      	mov	r9, r3
 8000800:	3b03      	subs	r3, #3
 8000802:	2600      	movs	r6, #0
 8000804:	469b      	mov	fp, r3
 8000806:	e79d      	b.n	8000744 <__aeabi_fdiv+0x30>
 8000808:	3eff      	subs	r6, #255	; 0xff
 800080a:	2d00      	cmp	r5, #0
 800080c:	d120      	bne.n	8000850 <__aeabi_fdiv+0x13c>
 800080e:	2102      	movs	r1, #2
 8000810:	4643      	mov	r3, r8
 8000812:	464a      	mov	r2, r9
 8000814:	407b      	eors	r3, r7
 8000816:	430a      	orrs	r2, r1
 8000818:	2a0f      	cmp	r2, #15
 800081a:	d8d8      	bhi.n	80007ce <__aeabi_fdiv+0xba>
 800081c:	4845      	ldr	r0, [pc, #276]	; (8000934 <__aeabi_fdiv+0x220>)
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	5882      	ldr	r2, [r0, r2]
 8000822:	4697      	mov	pc, r2
 8000824:	2d00      	cmp	r5, #0
 8000826:	d119      	bne.n	800085c <__aeabi_fdiv+0x148>
 8000828:	2101      	movs	r1, #1
 800082a:	e7f1      	b.n	8000810 <__aeabi_fdiv+0xfc>
 800082c:	230c      	movs	r3, #12
 800082e:	4699      	mov	r9, r3
 8000830:	3b09      	subs	r3, #9
 8000832:	26ff      	movs	r6, #255	; 0xff
 8000834:	469b      	mov	fp, r3
 8000836:	e785      	b.n	8000744 <__aeabi_fdiv+0x30>
 8000838:	0020      	movs	r0, r4
 800083a:	f002 fa6d 	bl	8002d18 <__clzsi2>
 800083e:	2676      	movs	r6, #118	; 0x76
 8000840:	1f43      	subs	r3, r0, #5
 8000842:	409c      	lsls	r4, r3
 8000844:	2300      	movs	r3, #0
 8000846:	4276      	negs	r6, r6
 8000848:	1a36      	subs	r6, r6, r0
 800084a:	4699      	mov	r9, r3
 800084c:	469b      	mov	fp, r3
 800084e:	e779      	b.n	8000744 <__aeabi_fdiv+0x30>
 8000850:	464a      	mov	r2, r9
 8000852:	2303      	movs	r3, #3
 8000854:	431a      	orrs	r2, r3
 8000856:	4691      	mov	r9, r2
 8000858:	2103      	movs	r1, #3
 800085a:	e786      	b.n	800076a <__aeabi_fdiv+0x56>
 800085c:	0028      	movs	r0, r5
 800085e:	f002 fa5b 	bl	8002d18 <__clzsi2>
 8000862:	1f43      	subs	r3, r0, #5
 8000864:	1836      	adds	r6, r6, r0
 8000866:	409d      	lsls	r5, r3
 8000868:	3676      	adds	r6, #118	; 0x76
 800086a:	2100      	movs	r1, #0
 800086c:	e77d      	b.n	800076a <__aeabi_fdiv+0x56>
 800086e:	2480      	movs	r4, #128	; 0x80
 8000870:	2300      	movs	r3, #0
 8000872:	03e4      	lsls	r4, r4, #15
 8000874:	22ff      	movs	r2, #255	; 0xff
 8000876:	e7ac      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 8000878:	2500      	movs	r5, #0
 800087a:	2380      	movs	r3, #128	; 0x80
 800087c:	03db      	lsls	r3, r3, #15
 800087e:	421c      	tst	r4, r3
 8000880:	d028      	beq.n	80008d4 <__aeabi_fdiv+0x1c0>
 8000882:	421d      	tst	r5, r3
 8000884:	d126      	bne.n	80008d4 <__aeabi_fdiv+0x1c0>
 8000886:	432b      	orrs	r3, r5
 8000888:	025c      	lsls	r4, r3, #9
 800088a:	0a64      	lsrs	r4, r4, #9
 800088c:	4643      	mov	r3, r8
 800088e:	22ff      	movs	r2, #255	; 0xff
 8000890:	e79f      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 8000892:	0162      	lsls	r2, r4, #5
 8000894:	016c      	lsls	r4, r5, #5
 8000896:	42a2      	cmp	r2, r4
 8000898:	d224      	bcs.n	80008e4 <__aeabi_fdiv+0x1d0>
 800089a:	211b      	movs	r1, #27
 800089c:	2500      	movs	r5, #0
 800089e:	3e01      	subs	r6, #1
 80008a0:	2701      	movs	r7, #1
 80008a2:	0010      	movs	r0, r2
 80008a4:	006d      	lsls	r5, r5, #1
 80008a6:	0052      	lsls	r2, r2, #1
 80008a8:	2800      	cmp	r0, #0
 80008aa:	db01      	blt.n	80008b0 <__aeabi_fdiv+0x19c>
 80008ac:	4294      	cmp	r4, r2
 80008ae:	d801      	bhi.n	80008b4 <__aeabi_fdiv+0x1a0>
 80008b0:	1b12      	subs	r2, r2, r4
 80008b2:	433d      	orrs	r5, r7
 80008b4:	3901      	subs	r1, #1
 80008b6:	2900      	cmp	r1, #0
 80008b8:	d1f3      	bne.n	80008a2 <__aeabi_fdiv+0x18e>
 80008ba:	0014      	movs	r4, r2
 80008bc:	1e62      	subs	r2, r4, #1
 80008be:	4194      	sbcs	r4, r2
 80008c0:	4325      	orrs	r5, r4
 80008c2:	e76d      	b.n	80007a0 <__aeabi_fdiv+0x8c>
 80008c4:	46ba      	mov	sl, r7
 80008c6:	4659      	mov	r1, fp
 80008c8:	0025      	movs	r5, r4
 80008ca:	4653      	mov	r3, sl
 80008cc:	2902      	cmp	r1, #2
 80008ce:	d000      	beq.n	80008d2 <__aeabi_fdiv+0x1be>
 80008d0:	e761      	b.n	8000796 <__aeabi_fdiv+0x82>
 80008d2:	e77c      	b.n	80007ce <__aeabi_fdiv+0xba>
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	03db      	lsls	r3, r3, #15
 80008d8:	431c      	orrs	r4, r3
 80008da:	0264      	lsls	r4, r4, #9
 80008dc:	0a64      	lsrs	r4, r4, #9
 80008de:	003b      	movs	r3, r7
 80008e0:	22ff      	movs	r2, #255	; 0xff
 80008e2:	e776      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 80008e4:	1b12      	subs	r2, r2, r4
 80008e6:	211a      	movs	r1, #26
 80008e8:	2501      	movs	r5, #1
 80008ea:	e7d9      	b.n	80008a0 <__aeabi_fdiv+0x18c>
 80008ec:	369e      	adds	r6, #158	; 0x9e
 80008ee:	002a      	movs	r2, r5
 80008f0:	40b5      	lsls	r5, r6
 80008f2:	002c      	movs	r4, r5
 80008f4:	40c2      	lsrs	r2, r0
 80008f6:	1e65      	subs	r5, r4, #1
 80008f8:	41ac      	sbcs	r4, r5
 80008fa:	4314      	orrs	r4, r2
 80008fc:	0762      	lsls	r2, r4, #29
 80008fe:	d004      	beq.n	800090a <__aeabi_fdiv+0x1f6>
 8000900:	220f      	movs	r2, #15
 8000902:	4022      	ands	r2, r4
 8000904:	2a04      	cmp	r2, #4
 8000906:	d000      	beq.n	800090a <__aeabi_fdiv+0x1f6>
 8000908:	3404      	adds	r4, #4
 800090a:	0162      	lsls	r2, r4, #5
 800090c:	d403      	bmi.n	8000916 <__aeabi_fdiv+0x202>
 800090e:	01a4      	lsls	r4, r4, #6
 8000910:	0a64      	lsrs	r4, r4, #9
 8000912:	2200      	movs	r2, #0
 8000914:	e75d      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 8000916:	2201      	movs	r2, #1
 8000918:	2400      	movs	r4, #0
 800091a:	e75a      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 800091c:	2480      	movs	r4, #128	; 0x80
 800091e:	03e4      	lsls	r4, r4, #15
 8000920:	432c      	orrs	r4, r5
 8000922:	0264      	lsls	r4, r4, #9
 8000924:	0a64      	lsrs	r4, r4, #9
 8000926:	22ff      	movs	r2, #255	; 0xff
 8000928:	e753      	b.n	80007d2 <__aeabi_fdiv+0xbe>
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	0801ab68 	.word	0x0801ab68
 8000930:	f7ffffff 	.word	0xf7ffffff
 8000934:	0801aba8 	.word	0x0801aba8

08000938 <__eqsf2>:
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	0042      	lsls	r2, r0, #1
 800093c:	024e      	lsls	r6, r1, #9
 800093e:	004c      	lsls	r4, r1, #1
 8000940:	0245      	lsls	r5, r0, #9
 8000942:	0a6d      	lsrs	r5, r5, #9
 8000944:	0e12      	lsrs	r2, r2, #24
 8000946:	0fc3      	lsrs	r3, r0, #31
 8000948:	0a76      	lsrs	r6, r6, #9
 800094a:	0e24      	lsrs	r4, r4, #24
 800094c:	0fc9      	lsrs	r1, r1, #31
 800094e:	2aff      	cmp	r2, #255	; 0xff
 8000950:	d00f      	beq.n	8000972 <__eqsf2+0x3a>
 8000952:	2cff      	cmp	r4, #255	; 0xff
 8000954:	d011      	beq.n	800097a <__eqsf2+0x42>
 8000956:	2001      	movs	r0, #1
 8000958:	42a2      	cmp	r2, r4
 800095a:	d000      	beq.n	800095e <__eqsf2+0x26>
 800095c:	bd70      	pop	{r4, r5, r6, pc}
 800095e:	42b5      	cmp	r5, r6
 8000960:	d1fc      	bne.n	800095c <__eqsf2+0x24>
 8000962:	428b      	cmp	r3, r1
 8000964:	d00d      	beq.n	8000982 <__eqsf2+0x4a>
 8000966:	2a00      	cmp	r2, #0
 8000968:	d1f8      	bne.n	800095c <__eqsf2+0x24>
 800096a:	0028      	movs	r0, r5
 800096c:	1e45      	subs	r5, r0, #1
 800096e:	41a8      	sbcs	r0, r5
 8000970:	e7f4      	b.n	800095c <__eqsf2+0x24>
 8000972:	2001      	movs	r0, #1
 8000974:	2d00      	cmp	r5, #0
 8000976:	d1f1      	bne.n	800095c <__eqsf2+0x24>
 8000978:	e7eb      	b.n	8000952 <__eqsf2+0x1a>
 800097a:	2001      	movs	r0, #1
 800097c:	2e00      	cmp	r6, #0
 800097e:	d1ed      	bne.n	800095c <__eqsf2+0x24>
 8000980:	e7e9      	b.n	8000956 <__eqsf2+0x1e>
 8000982:	2000      	movs	r0, #0
 8000984:	e7ea      	b.n	800095c <__eqsf2+0x24>
 8000986:	46c0      	nop			; (mov r8, r8)

08000988 <__gesf2>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	004a      	lsls	r2, r1, #1
 800098c:	024e      	lsls	r6, r1, #9
 800098e:	0245      	lsls	r5, r0, #9
 8000990:	0044      	lsls	r4, r0, #1
 8000992:	0a6d      	lsrs	r5, r5, #9
 8000994:	0e24      	lsrs	r4, r4, #24
 8000996:	0fc3      	lsrs	r3, r0, #31
 8000998:	0a76      	lsrs	r6, r6, #9
 800099a:	0e12      	lsrs	r2, r2, #24
 800099c:	0fc9      	lsrs	r1, r1, #31
 800099e:	2cff      	cmp	r4, #255	; 0xff
 80009a0:	d015      	beq.n	80009ce <__gesf2+0x46>
 80009a2:	2aff      	cmp	r2, #255	; 0xff
 80009a4:	d00e      	beq.n	80009c4 <__gesf2+0x3c>
 80009a6:	2c00      	cmp	r4, #0
 80009a8:	d115      	bne.n	80009d6 <__gesf2+0x4e>
 80009aa:	2a00      	cmp	r2, #0
 80009ac:	d101      	bne.n	80009b2 <__gesf2+0x2a>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d01c      	beq.n	80009ec <__gesf2+0x64>
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	d014      	beq.n	80009e0 <__gesf2+0x58>
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d027      	beq.n	8000a0a <__gesf2+0x82>
 80009ba:	2002      	movs	r0, #2
 80009bc:	3b01      	subs	r3, #1
 80009be:	4018      	ands	r0, r3
 80009c0:	3801      	subs	r0, #1
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	2e00      	cmp	r6, #0
 80009c6:	d0ee      	beq.n	80009a6 <__gesf2+0x1e>
 80009c8:	2002      	movs	r0, #2
 80009ca:	4240      	negs	r0, r0
 80009cc:	e7f9      	b.n	80009c2 <__gesf2+0x3a>
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d1fa      	bne.n	80009c8 <__gesf2+0x40>
 80009d2:	2aff      	cmp	r2, #255	; 0xff
 80009d4:	d00e      	beq.n	80009f4 <__gesf2+0x6c>
 80009d6:	2a00      	cmp	r2, #0
 80009d8:	d10e      	bne.n	80009f8 <__gesf2+0x70>
 80009da:	2e00      	cmp	r6, #0
 80009dc:	d0ed      	beq.n	80009ba <__gesf2+0x32>
 80009de:	e00b      	b.n	80009f8 <__gesf2+0x70>
 80009e0:	2301      	movs	r3, #1
 80009e2:	3901      	subs	r1, #1
 80009e4:	4399      	bics	r1, r3
 80009e6:	0008      	movs	r0, r1
 80009e8:	3001      	adds	r0, #1
 80009ea:	e7ea      	b.n	80009c2 <__gesf2+0x3a>
 80009ec:	2000      	movs	r0, #0
 80009ee:	2d00      	cmp	r5, #0
 80009f0:	d0e7      	beq.n	80009c2 <__gesf2+0x3a>
 80009f2:	e7e2      	b.n	80009ba <__gesf2+0x32>
 80009f4:	2e00      	cmp	r6, #0
 80009f6:	d1e7      	bne.n	80009c8 <__gesf2+0x40>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	d1de      	bne.n	80009ba <__gesf2+0x32>
 80009fc:	4294      	cmp	r4, r2
 80009fe:	dd05      	ble.n	8000a0c <__gesf2+0x84>
 8000a00:	2102      	movs	r1, #2
 8000a02:	1e58      	subs	r0, r3, #1
 8000a04:	4008      	ands	r0, r1
 8000a06:	3801      	subs	r0, #1
 8000a08:	e7db      	b.n	80009c2 <__gesf2+0x3a>
 8000a0a:	2400      	movs	r4, #0
 8000a0c:	42a2      	cmp	r2, r4
 8000a0e:	dc04      	bgt.n	8000a1a <__gesf2+0x92>
 8000a10:	42b5      	cmp	r5, r6
 8000a12:	d8d2      	bhi.n	80009ba <__gesf2+0x32>
 8000a14:	2000      	movs	r0, #0
 8000a16:	42b5      	cmp	r5, r6
 8000a18:	d2d3      	bcs.n	80009c2 <__gesf2+0x3a>
 8000a1a:	1e58      	subs	r0, r3, #1
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	4398      	bics	r0, r3
 8000a20:	3001      	adds	r0, #1
 8000a22:	e7ce      	b.n	80009c2 <__gesf2+0x3a>

08000a24 <__lesf2>:
 8000a24:	b530      	push	{r4, r5, lr}
 8000a26:	0042      	lsls	r2, r0, #1
 8000a28:	0244      	lsls	r4, r0, #9
 8000a2a:	024d      	lsls	r5, r1, #9
 8000a2c:	0fc3      	lsrs	r3, r0, #31
 8000a2e:	0048      	lsls	r0, r1, #1
 8000a30:	0a64      	lsrs	r4, r4, #9
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	0a6d      	lsrs	r5, r5, #9
 8000a36:	0e00      	lsrs	r0, r0, #24
 8000a38:	0fc9      	lsrs	r1, r1, #31
 8000a3a:	2aff      	cmp	r2, #255	; 0xff
 8000a3c:	d012      	beq.n	8000a64 <__lesf2+0x40>
 8000a3e:	28ff      	cmp	r0, #255	; 0xff
 8000a40:	d00c      	beq.n	8000a5c <__lesf2+0x38>
 8000a42:	2a00      	cmp	r2, #0
 8000a44:	d112      	bne.n	8000a6c <__lesf2+0x48>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	d119      	bne.n	8000a7e <__lesf2+0x5a>
 8000a4a:	2d00      	cmp	r5, #0
 8000a4c:	d117      	bne.n	8000a7e <__lesf2+0x5a>
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	d02b      	beq.n	8000aaa <__lesf2+0x86>
 8000a52:	2002      	movs	r0, #2
 8000a54:	3b01      	subs	r3, #1
 8000a56:	4018      	ands	r0, r3
 8000a58:	3801      	subs	r0, #1
 8000a5a:	e026      	b.n	8000aaa <__lesf2+0x86>
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d0f0      	beq.n	8000a42 <__lesf2+0x1e>
 8000a60:	2002      	movs	r0, #2
 8000a62:	e022      	b.n	8000aaa <__lesf2+0x86>
 8000a64:	2c00      	cmp	r4, #0
 8000a66:	d1fb      	bne.n	8000a60 <__lesf2+0x3c>
 8000a68:	28ff      	cmp	r0, #255	; 0xff
 8000a6a:	d01f      	beq.n	8000aac <__lesf2+0x88>
 8000a6c:	2800      	cmp	r0, #0
 8000a6e:	d11f      	bne.n	8000ab0 <__lesf2+0x8c>
 8000a70:	2d00      	cmp	r5, #0
 8000a72:	d11d      	bne.n	8000ab0 <__lesf2+0x8c>
 8000a74:	2002      	movs	r0, #2
 8000a76:	3b01      	subs	r3, #1
 8000a78:	4018      	ands	r0, r3
 8000a7a:	3801      	subs	r0, #1
 8000a7c:	e015      	b.n	8000aaa <__lesf2+0x86>
 8000a7e:	2c00      	cmp	r4, #0
 8000a80:	d00e      	beq.n	8000aa0 <__lesf2+0x7c>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d1e5      	bne.n	8000a52 <__lesf2+0x2e>
 8000a86:	2200      	movs	r2, #0
 8000a88:	4290      	cmp	r0, r2
 8000a8a:	dc04      	bgt.n	8000a96 <__lesf2+0x72>
 8000a8c:	42ac      	cmp	r4, r5
 8000a8e:	d8e0      	bhi.n	8000a52 <__lesf2+0x2e>
 8000a90:	2000      	movs	r0, #0
 8000a92:	42ac      	cmp	r4, r5
 8000a94:	d209      	bcs.n	8000aaa <__lesf2+0x86>
 8000a96:	1e58      	subs	r0, r3, #1
 8000a98:	2301      	movs	r3, #1
 8000a9a:	4398      	bics	r0, r3
 8000a9c:	3001      	adds	r0, #1
 8000a9e:	e004      	b.n	8000aaa <__lesf2+0x86>
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	3901      	subs	r1, #1
 8000aa4:	4399      	bics	r1, r3
 8000aa6:	0008      	movs	r0, r1
 8000aa8:	3001      	adds	r0, #1
 8000aaa:	bd30      	pop	{r4, r5, pc}
 8000aac:	2d00      	cmp	r5, #0
 8000aae:	d1d7      	bne.n	8000a60 <__lesf2+0x3c>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	d1ce      	bne.n	8000a52 <__lesf2+0x2e>
 8000ab4:	4282      	cmp	r2, r0
 8000ab6:	dde7      	ble.n	8000a88 <__lesf2+0x64>
 8000ab8:	2102      	movs	r1, #2
 8000aba:	1e58      	subs	r0, r3, #1
 8000abc:	4008      	ands	r0, r1
 8000abe:	3801      	subs	r0, #1
 8000ac0:	e7f3      	b.n	8000aaa <__lesf2+0x86>
 8000ac2:	46c0      	nop			; (mov r8, r8)

08000ac4 <__aeabi_fmul>:
 8000ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ac6:	464e      	mov	r6, r9
 8000ac8:	4657      	mov	r7, sl
 8000aca:	4645      	mov	r5, r8
 8000acc:	46de      	mov	lr, fp
 8000ace:	b5e0      	push	{r5, r6, r7, lr}
 8000ad0:	0243      	lsls	r3, r0, #9
 8000ad2:	0a5b      	lsrs	r3, r3, #9
 8000ad4:	0045      	lsls	r5, r0, #1
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	1c0f      	adds	r7, r1, #0
 8000ada:	4699      	mov	r9, r3
 8000adc:	0e2d      	lsrs	r5, r5, #24
 8000ade:	0fc6      	lsrs	r6, r0, #31
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d057      	beq.n	8000b94 <__aeabi_fmul+0xd0>
 8000ae4:	2dff      	cmp	r5, #255	; 0xff
 8000ae6:	d024      	beq.n	8000b32 <__aeabi_fmul+0x6e>
 8000ae8:	2080      	movs	r0, #128	; 0x80
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	04c0      	lsls	r0, r0, #19
 8000aee:	4318      	orrs	r0, r3
 8000af0:	2300      	movs	r3, #0
 8000af2:	4681      	mov	r9, r0
 8000af4:	469a      	mov	sl, r3
 8000af6:	469b      	mov	fp, r3
 8000af8:	3d7f      	subs	r5, #127	; 0x7f
 8000afa:	027c      	lsls	r4, r7, #9
 8000afc:	007a      	lsls	r2, r7, #1
 8000afe:	0ffb      	lsrs	r3, r7, #31
 8000b00:	0a64      	lsrs	r4, r4, #9
 8000b02:	0e12      	lsrs	r2, r2, #24
 8000b04:	4698      	mov	r8, r3
 8000b06:	d023      	beq.n	8000b50 <__aeabi_fmul+0x8c>
 8000b08:	2aff      	cmp	r2, #255	; 0xff
 8000b0a:	d04b      	beq.n	8000ba4 <__aeabi_fmul+0xe0>
 8000b0c:	00e3      	lsls	r3, r4, #3
 8000b0e:	2480      	movs	r4, #128	; 0x80
 8000b10:	2000      	movs	r0, #0
 8000b12:	04e4      	lsls	r4, r4, #19
 8000b14:	3a7f      	subs	r2, #127	; 0x7f
 8000b16:	431c      	orrs	r4, r3
 8000b18:	18ad      	adds	r5, r5, r2
 8000b1a:	1c6b      	adds	r3, r5, #1
 8000b1c:	4647      	mov	r7, r8
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	4653      	mov	r3, sl
 8000b22:	4077      	eors	r7, r6
 8000b24:	003a      	movs	r2, r7
 8000b26:	2b0f      	cmp	r3, #15
 8000b28:	d848      	bhi.n	8000bbc <__aeabi_fmul+0xf8>
 8000b2a:	497d      	ldr	r1, [pc, #500]	; (8000d20 <__aeabi_fmul+0x25c>)
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	58cb      	ldr	r3, [r1, r3]
 8000b30:	469f      	mov	pc, r3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d000      	beq.n	8000b38 <__aeabi_fmul+0x74>
 8000b36:	e085      	b.n	8000c44 <__aeabi_fmul+0x180>
 8000b38:	3308      	adds	r3, #8
 8000b3a:	469a      	mov	sl, r3
 8000b3c:	3b06      	subs	r3, #6
 8000b3e:	469b      	mov	fp, r3
 8000b40:	027c      	lsls	r4, r7, #9
 8000b42:	007a      	lsls	r2, r7, #1
 8000b44:	0ffb      	lsrs	r3, r7, #31
 8000b46:	25ff      	movs	r5, #255	; 0xff
 8000b48:	0a64      	lsrs	r4, r4, #9
 8000b4a:	0e12      	lsrs	r2, r2, #24
 8000b4c:	4698      	mov	r8, r3
 8000b4e:	d1db      	bne.n	8000b08 <__aeabi_fmul+0x44>
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	d000      	beq.n	8000b56 <__aeabi_fmul+0x92>
 8000b54:	e090      	b.n	8000c78 <__aeabi_fmul+0x1b4>
 8000b56:	4652      	mov	r2, sl
 8000b58:	2301      	movs	r3, #1
 8000b5a:	431a      	orrs	r2, r3
 8000b5c:	4692      	mov	sl, r2
 8000b5e:	2001      	movs	r0, #1
 8000b60:	e7db      	b.n	8000b1a <__aeabi_fmul+0x56>
 8000b62:	464c      	mov	r4, r9
 8000b64:	4658      	mov	r0, fp
 8000b66:	0017      	movs	r7, r2
 8000b68:	2802      	cmp	r0, #2
 8000b6a:	d024      	beq.n	8000bb6 <__aeabi_fmul+0xf2>
 8000b6c:	2803      	cmp	r0, #3
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_fmul+0xae>
 8000b70:	e0cf      	b.n	8000d12 <__aeabi_fmul+0x24e>
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	2801      	cmp	r0, #1
 8000b78:	d14d      	bne.n	8000c16 <__aeabi_fmul+0x152>
 8000b7a:	0258      	lsls	r0, r3, #9
 8000b7c:	05d2      	lsls	r2, r2, #23
 8000b7e:	0a40      	lsrs	r0, r0, #9
 8000b80:	07ff      	lsls	r7, r7, #31
 8000b82:	4310      	orrs	r0, r2
 8000b84:	4338      	orrs	r0, r7
 8000b86:	b003      	add	sp, #12
 8000b88:	bc3c      	pop	{r2, r3, r4, r5}
 8000b8a:	4690      	mov	r8, r2
 8000b8c:	4699      	mov	r9, r3
 8000b8e:	46a2      	mov	sl, r4
 8000b90:	46ab      	mov	fp, r5
 8000b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d15b      	bne.n	8000c50 <__aeabi_fmul+0x18c>
 8000b98:	2304      	movs	r3, #4
 8000b9a:	469a      	mov	sl, r3
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	2500      	movs	r5, #0
 8000ba0:	469b      	mov	fp, r3
 8000ba2:	e7aa      	b.n	8000afa <__aeabi_fmul+0x36>
 8000ba4:	35ff      	adds	r5, #255	; 0xff
 8000ba6:	2c00      	cmp	r4, #0
 8000ba8:	d160      	bne.n	8000c6c <__aeabi_fmul+0x1a8>
 8000baa:	4652      	mov	r2, sl
 8000bac:	2302      	movs	r3, #2
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	4692      	mov	sl, r2
 8000bb2:	2002      	movs	r0, #2
 8000bb4:	e7b1      	b.n	8000b1a <__aeabi_fmul+0x56>
 8000bb6:	22ff      	movs	r2, #255	; 0xff
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e7de      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	0c1b      	lsrs	r3, r3, #16
 8000bc0:	469c      	mov	ip, r3
 8000bc2:	464b      	mov	r3, r9
 8000bc4:	0426      	lsls	r6, r4, #16
 8000bc6:	0c36      	lsrs	r6, r6, #16
 8000bc8:	0418      	lsls	r0, r3, #16
 8000bca:	4661      	mov	r1, ip
 8000bcc:	0033      	movs	r3, r6
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	4664      	mov	r4, ip
 8000bd2:	0c00      	lsrs	r0, r0, #16
 8000bd4:	4343      	muls	r3, r0
 8000bd6:	434e      	muls	r6, r1
 8000bd8:	4350      	muls	r0, r2
 8000bda:	4354      	muls	r4, r2
 8000bdc:	1980      	adds	r0, r0, r6
 8000bde:	0c1a      	lsrs	r2, r3, #16
 8000be0:	1812      	adds	r2, r2, r0
 8000be2:	4296      	cmp	r6, r2
 8000be4:	d903      	bls.n	8000bee <__aeabi_fmul+0x12a>
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	0249      	lsls	r1, r1, #9
 8000bea:	468c      	mov	ip, r1
 8000bec:	4464      	add	r4, ip
 8000bee:	041b      	lsls	r3, r3, #16
 8000bf0:	0c1b      	lsrs	r3, r3, #16
 8000bf2:	0410      	lsls	r0, r2, #16
 8000bf4:	18c0      	adds	r0, r0, r3
 8000bf6:	0183      	lsls	r3, r0, #6
 8000bf8:	1e5e      	subs	r6, r3, #1
 8000bfa:	41b3      	sbcs	r3, r6
 8000bfc:	0e80      	lsrs	r0, r0, #26
 8000bfe:	4318      	orrs	r0, r3
 8000c00:	0c13      	lsrs	r3, r2, #16
 8000c02:	191b      	adds	r3, r3, r4
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	4303      	orrs	r3, r0
 8000c08:	001c      	movs	r4, r3
 8000c0a:	0123      	lsls	r3, r4, #4
 8000c0c:	d579      	bpl.n	8000d02 <__aeabi_fmul+0x23e>
 8000c0e:	2301      	movs	r3, #1
 8000c10:	0862      	lsrs	r2, r4, #1
 8000c12:	401c      	ands	r4, r3
 8000c14:	4314      	orrs	r4, r2
 8000c16:	9a01      	ldr	r2, [sp, #4]
 8000c18:	327f      	adds	r2, #127	; 0x7f
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	dd4d      	ble.n	8000cba <__aeabi_fmul+0x1f6>
 8000c1e:	0763      	lsls	r3, r4, #29
 8000c20:	d004      	beq.n	8000c2c <__aeabi_fmul+0x168>
 8000c22:	230f      	movs	r3, #15
 8000c24:	4023      	ands	r3, r4
 8000c26:	2b04      	cmp	r3, #4
 8000c28:	d000      	beq.n	8000c2c <__aeabi_fmul+0x168>
 8000c2a:	3404      	adds	r4, #4
 8000c2c:	0123      	lsls	r3, r4, #4
 8000c2e:	d503      	bpl.n	8000c38 <__aeabi_fmul+0x174>
 8000c30:	4b3c      	ldr	r3, [pc, #240]	; (8000d24 <__aeabi_fmul+0x260>)
 8000c32:	9a01      	ldr	r2, [sp, #4]
 8000c34:	401c      	ands	r4, r3
 8000c36:	3280      	adds	r2, #128	; 0x80
 8000c38:	2afe      	cmp	r2, #254	; 0xfe
 8000c3a:	dcbc      	bgt.n	8000bb6 <__aeabi_fmul+0xf2>
 8000c3c:	01a3      	lsls	r3, r4, #6
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	b2d2      	uxtb	r2, r2
 8000c42:	e79a      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000c44:	230c      	movs	r3, #12
 8000c46:	469a      	mov	sl, r3
 8000c48:	3b09      	subs	r3, #9
 8000c4a:	25ff      	movs	r5, #255	; 0xff
 8000c4c:	469b      	mov	fp, r3
 8000c4e:	e754      	b.n	8000afa <__aeabi_fmul+0x36>
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 f861 	bl	8002d18 <__clzsi2>
 8000c56:	464a      	mov	r2, r9
 8000c58:	1f43      	subs	r3, r0, #5
 8000c5a:	2576      	movs	r5, #118	; 0x76
 8000c5c:	409a      	lsls	r2, r3
 8000c5e:	2300      	movs	r3, #0
 8000c60:	426d      	negs	r5, r5
 8000c62:	4691      	mov	r9, r2
 8000c64:	1a2d      	subs	r5, r5, r0
 8000c66:	469a      	mov	sl, r3
 8000c68:	469b      	mov	fp, r3
 8000c6a:	e746      	b.n	8000afa <__aeabi_fmul+0x36>
 8000c6c:	4652      	mov	r2, sl
 8000c6e:	2303      	movs	r3, #3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	4692      	mov	sl, r2
 8000c74:	2003      	movs	r0, #3
 8000c76:	e750      	b.n	8000b1a <__aeabi_fmul+0x56>
 8000c78:	0020      	movs	r0, r4
 8000c7a:	f002 f84d 	bl	8002d18 <__clzsi2>
 8000c7e:	1f43      	subs	r3, r0, #5
 8000c80:	1a2d      	subs	r5, r5, r0
 8000c82:	409c      	lsls	r4, r3
 8000c84:	3d76      	subs	r5, #118	; 0x76
 8000c86:	2000      	movs	r0, #0
 8000c88:	e747      	b.n	8000b1a <__aeabi_fmul+0x56>
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	03db      	lsls	r3, r3, #15
 8000c90:	22ff      	movs	r2, #255	; 0xff
 8000c92:	e772      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000c94:	4642      	mov	r2, r8
 8000c96:	e766      	b.n	8000b66 <__aeabi_fmul+0xa2>
 8000c98:	464c      	mov	r4, r9
 8000c9a:	0032      	movs	r2, r6
 8000c9c:	4658      	mov	r0, fp
 8000c9e:	e762      	b.n	8000b66 <__aeabi_fmul+0xa2>
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	464a      	mov	r2, r9
 8000ca4:	03db      	lsls	r3, r3, #15
 8000ca6:	421a      	tst	r2, r3
 8000ca8:	d022      	beq.n	8000cf0 <__aeabi_fmul+0x22c>
 8000caa:	421c      	tst	r4, r3
 8000cac:	d120      	bne.n	8000cf0 <__aeabi_fmul+0x22c>
 8000cae:	4323      	orrs	r3, r4
 8000cb0:	025b      	lsls	r3, r3, #9
 8000cb2:	0a5b      	lsrs	r3, r3, #9
 8000cb4:	4647      	mov	r7, r8
 8000cb6:	22ff      	movs	r2, #255	; 0xff
 8000cb8:	e75f      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	1a9a      	subs	r2, r3, r2
 8000cbe:	2a1b      	cmp	r2, #27
 8000cc0:	dc21      	bgt.n	8000d06 <__aeabi_fmul+0x242>
 8000cc2:	0023      	movs	r3, r4
 8000cc4:	9901      	ldr	r1, [sp, #4]
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	319e      	adds	r1, #158	; 0x9e
 8000cca:	408c      	lsls	r4, r1
 8000ccc:	001a      	movs	r2, r3
 8000cce:	0023      	movs	r3, r4
 8000cd0:	1e5c      	subs	r4, r3, #1
 8000cd2:	41a3      	sbcs	r3, r4
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	075a      	lsls	r2, r3, #29
 8000cd8:	d004      	beq.n	8000ce4 <__aeabi_fmul+0x220>
 8000cda:	220f      	movs	r2, #15
 8000cdc:	401a      	ands	r2, r3
 8000cde:	2a04      	cmp	r2, #4
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_fmul+0x220>
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	015a      	lsls	r2, r3, #5
 8000ce6:	d411      	bmi.n	8000d0c <__aeabi_fmul+0x248>
 8000ce8:	019b      	lsls	r3, r3, #6
 8000cea:	0a5b      	lsrs	r3, r3, #9
 8000cec:	2200      	movs	r2, #0
 8000cee:	e744      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	03db      	lsls	r3, r3, #15
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	0a5b      	lsrs	r3, r3, #9
 8000cfc:	0037      	movs	r7, r6
 8000cfe:	22ff      	movs	r2, #255	; 0xff
 8000d00:	e73b      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000d02:	9501      	str	r5, [sp, #4]
 8000d04:	e787      	b.n	8000c16 <__aeabi_fmul+0x152>
 8000d06:	2200      	movs	r2, #0
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e736      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2300      	movs	r3, #0
 8000d10:	e733      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	03db      	lsls	r3, r3, #15
 8000d16:	4323      	orrs	r3, r4
 8000d18:	025b      	lsls	r3, r3, #9
 8000d1a:	0a5b      	lsrs	r3, r3, #9
 8000d1c:	22ff      	movs	r2, #255	; 0xff
 8000d1e:	e72c      	b.n	8000b7a <__aeabi_fmul+0xb6>
 8000d20:	0801abe8 	.word	0x0801abe8
 8000d24:	f7ffffff 	.word	0xf7ffffff

08000d28 <__aeabi_fsub>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	4647      	mov	r7, r8
 8000d2c:	46ce      	mov	lr, r9
 8000d2e:	0044      	lsls	r4, r0, #1
 8000d30:	0fc2      	lsrs	r2, r0, #31
 8000d32:	b580      	push	{r7, lr}
 8000d34:	0247      	lsls	r7, r0, #9
 8000d36:	0248      	lsls	r0, r1, #9
 8000d38:	0a40      	lsrs	r0, r0, #9
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	4666      	mov	r6, ip
 8000d3e:	0048      	lsls	r0, r1, #1
 8000d40:	0a7f      	lsrs	r7, r7, #9
 8000d42:	0e24      	lsrs	r4, r4, #24
 8000d44:	00f6      	lsls	r6, r6, #3
 8000d46:	0025      	movs	r5, r4
 8000d48:	4690      	mov	r8, r2
 8000d4a:	00fb      	lsls	r3, r7, #3
 8000d4c:	0e00      	lsrs	r0, r0, #24
 8000d4e:	0fc9      	lsrs	r1, r1, #31
 8000d50:	46b1      	mov	r9, r6
 8000d52:	28ff      	cmp	r0, #255	; 0xff
 8000d54:	d100      	bne.n	8000d58 <__aeabi_fsub+0x30>
 8000d56:	e085      	b.n	8000e64 <__aeabi_fsub+0x13c>
 8000d58:	2601      	movs	r6, #1
 8000d5a:	4071      	eors	r1, r6
 8000d5c:	1a26      	subs	r6, r4, r0
 8000d5e:	4291      	cmp	r1, r2
 8000d60:	d057      	beq.n	8000e12 <__aeabi_fsub+0xea>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	dd43      	ble.n	8000dee <__aeabi_fsub+0xc6>
 8000d66:	2800      	cmp	r0, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x44>
 8000d6a:	e07f      	b.n	8000e6c <__aeabi_fsub+0x144>
 8000d6c:	4649      	mov	r1, r9
 8000d6e:	2900      	cmp	r1, #0
 8000d70:	d100      	bne.n	8000d74 <__aeabi_fsub+0x4c>
 8000d72:	e0aa      	b.n	8000eca <__aeabi_fsub+0x1a2>
 8000d74:	3e01      	subs	r6, #1
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fsub+0x54>
 8000d7a:	e0f7      	b.n	8000f6c <__aeabi_fsub+0x244>
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	015a      	lsls	r2, r3, #5
 8000d80:	d400      	bmi.n	8000d84 <__aeabi_fsub+0x5c>
 8000d82:	e08b      	b.n	8000e9c <__aeabi_fsub+0x174>
 8000d84:	019b      	lsls	r3, r3, #6
 8000d86:	099c      	lsrs	r4, r3, #6
 8000d88:	0020      	movs	r0, r4
 8000d8a:	f001 ffc5 	bl	8002d18 <__clzsi2>
 8000d8e:	3805      	subs	r0, #5
 8000d90:	4084      	lsls	r4, r0
 8000d92:	4285      	cmp	r5, r0
 8000d94:	dd00      	ble.n	8000d98 <__aeabi_fsub+0x70>
 8000d96:	e0d3      	b.n	8000f40 <__aeabi_fsub+0x218>
 8000d98:	1b45      	subs	r5, r0, r5
 8000d9a:	0023      	movs	r3, r4
 8000d9c:	2020      	movs	r0, #32
 8000d9e:	3501      	adds	r5, #1
 8000da0:	40eb      	lsrs	r3, r5
 8000da2:	1b45      	subs	r5, r0, r5
 8000da4:	40ac      	lsls	r4, r5
 8000da6:	1e62      	subs	r2, r4, #1
 8000da8:	4194      	sbcs	r4, r2
 8000daa:	4323      	orrs	r3, r4
 8000dac:	2407      	movs	r4, #7
 8000dae:	2500      	movs	r5, #0
 8000db0:	401c      	ands	r4, r3
 8000db2:	2201      	movs	r2, #1
 8000db4:	4641      	mov	r1, r8
 8000db6:	400a      	ands	r2, r1
 8000db8:	2c00      	cmp	r4, #0
 8000dba:	d004      	beq.n	8000dc6 <__aeabi_fsub+0x9e>
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	4019      	ands	r1, r3
 8000dc0:	2904      	cmp	r1, #4
 8000dc2:	d000      	beq.n	8000dc6 <__aeabi_fsub+0x9e>
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	0159      	lsls	r1, r3, #5
 8000dc8:	d400      	bmi.n	8000dcc <__aeabi_fsub+0xa4>
 8000dca:	e080      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8000dcc:	3501      	adds	r5, #1
 8000dce:	b2ec      	uxtb	r4, r5
 8000dd0:	2dff      	cmp	r5, #255	; 0xff
 8000dd2:	d000      	beq.n	8000dd6 <__aeabi_fsub+0xae>
 8000dd4:	e0a3      	b.n	8000f1e <__aeabi_fsub+0x1f6>
 8000dd6:	24ff      	movs	r4, #255	; 0xff
 8000dd8:	2300      	movs	r3, #0
 8000dda:	025b      	lsls	r3, r3, #9
 8000ddc:	05e4      	lsls	r4, r4, #23
 8000dde:	0a58      	lsrs	r0, r3, #9
 8000de0:	07d2      	lsls	r2, r2, #31
 8000de2:	4320      	orrs	r0, r4
 8000de4:	4310      	orrs	r0, r2
 8000de6:	bc0c      	pop	{r2, r3}
 8000de8:	4690      	mov	r8, r2
 8000dea:	4699      	mov	r9, r3
 8000dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000dee:	2e00      	cmp	r6, #0
 8000df0:	d174      	bne.n	8000edc <__aeabi_fsub+0x1b4>
 8000df2:	1c60      	adds	r0, r4, #1
 8000df4:	b2c0      	uxtb	r0, r0
 8000df6:	2801      	cmp	r0, #1
 8000df8:	dc00      	bgt.n	8000dfc <__aeabi_fsub+0xd4>
 8000dfa:	e0a7      	b.n	8000f4c <__aeabi_fsub+0x224>
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	1a9c      	subs	r4, r3, r2
 8000e00:	0162      	lsls	r2, r4, #5
 8000e02:	d500      	bpl.n	8000e06 <__aeabi_fsub+0xde>
 8000e04:	e0b6      	b.n	8000f74 <__aeabi_fsub+0x24c>
 8000e06:	2c00      	cmp	r4, #0
 8000e08:	d1be      	bne.n	8000d88 <__aeabi_fsub+0x60>
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2400      	movs	r4, #0
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e7e3      	b.n	8000dda <__aeabi_fsub+0xb2>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	dc00      	bgt.n	8000e18 <__aeabi_fsub+0xf0>
 8000e16:	e085      	b.n	8000f24 <__aeabi_fsub+0x1fc>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d046      	beq.n	8000eaa <__aeabi_fsub+0x182>
 8000e1c:	2cff      	cmp	r4, #255	; 0xff
 8000e1e:	d049      	beq.n	8000eb4 <__aeabi_fsub+0x18c>
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	4648      	mov	r0, r9
 8000e24:	04d2      	lsls	r2, r2, #19
 8000e26:	4310      	orrs	r0, r2
 8000e28:	4681      	mov	r9, r0
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2e1b      	cmp	r6, #27
 8000e2e:	dc09      	bgt.n	8000e44 <__aeabi_fsub+0x11c>
 8000e30:	2020      	movs	r0, #32
 8000e32:	464c      	mov	r4, r9
 8000e34:	1b80      	subs	r0, r0, r6
 8000e36:	4084      	lsls	r4, r0
 8000e38:	464a      	mov	r2, r9
 8000e3a:	0020      	movs	r0, r4
 8000e3c:	40f2      	lsrs	r2, r6
 8000e3e:	1e44      	subs	r4, r0, #1
 8000e40:	41a0      	sbcs	r0, r4
 8000e42:	4302      	orrs	r2, r0
 8000e44:	189b      	adds	r3, r3, r2
 8000e46:	015a      	lsls	r2, r3, #5
 8000e48:	d528      	bpl.n	8000e9c <__aeabi_fsub+0x174>
 8000e4a:	3501      	adds	r5, #1
 8000e4c:	2dff      	cmp	r5, #255	; 0xff
 8000e4e:	d100      	bne.n	8000e52 <__aeabi_fsub+0x12a>
 8000e50:	e0a8      	b.n	8000fa4 <__aeabi_fsub+0x27c>
 8000e52:	2201      	movs	r2, #1
 8000e54:	2407      	movs	r4, #7
 8000e56:	4994      	ldr	r1, [pc, #592]	; (80010a8 <__aeabi_fsub+0x380>)
 8000e58:	401a      	ands	r2, r3
 8000e5a:	085b      	lsrs	r3, r3, #1
 8000e5c:	400b      	ands	r3, r1
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	401c      	ands	r4, r3
 8000e62:	e7a6      	b.n	8000db2 <__aeabi_fsub+0x8a>
 8000e64:	2e00      	cmp	r6, #0
 8000e66:	d000      	beq.n	8000e6a <__aeabi_fsub+0x142>
 8000e68:	e778      	b.n	8000d5c <__aeabi_fsub+0x34>
 8000e6a:	e775      	b.n	8000d58 <__aeabi_fsub+0x30>
 8000e6c:	2cff      	cmp	r4, #255	; 0xff
 8000e6e:	d054      	beq.n	8000f1a <__aeabi_fsub+0x1f2>
 8000e70:	2280      	movs	r2, #128	; 0x80
 8000e72:	4649      	mov	r1, r9
 8000e74:	04d2      	lsls	r2, r2, #19
 8000e76:	4311      	orrs	r1, r2
 8000e78:	4689      	mov	r9, r1
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2e1b      	cmp	r6, #27
 8000e7e:	dc09      	bgt.n	8000e94 <__aeabi_fsub+0x16c>
 8000e80:	2120      	movs	r1, #32
 8000e82:	4648      	mov	r0, r9
 8000e84:	1b89      	subs	r1, r1, r6
 8000e86:	4088      	lsls	r0, r1
 8000e88:	464a      	mov	r2, r9
 8000e8a:	0001      	movs	r1, r0
 8000e8c:	40f2      	lsrs	r2, r6
 8000e8e:	1e48      	subs	r0, r1, #1
 8000e90:	4181      	sbcs	r1, r0
 8000e92:	430a      	orrs	r2, r1
 8000e94:	1a9b      	subs	r3, r3, r2
 8000e96:	015a      	lsls	r2, r3, #5
 8000e98:	d500      	bpl.n	8000e9c <__aeabi_fsub+0x174>
 8000e9a:	e773      	b.n	8000d84 <__aeabi_fsub+0x5c>
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4641      	mov	r1, r8
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	0759      	lsls	r1, r3, #29
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_fsub+0x180>
 8000ea6:	e789      	b.n	8000dbc <__aeabi_fsub+0x94>
 8000ea8:	e011      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8000eaa:	4648      	mov	r0, r9
 8000eac:	2800      	cmp	r0, #0
 8000eae:	d158      	bne.n	8000f62 <__aeabi_fsub+0x23a>
 8000eb0:	2cff      	cmp	r4, #255	; 0xff
 8000eb2:	d10c      	bne.n	8000ece <__aeabi_fsub+0x1a6>
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_fsub+0x194>
 8000eba:	e78c      	b.n	8000dd6 <__aeabi_fsub+0xae>
 8000ebc:	2080      	movs	r0, #128	; 0x80
 8000ebe:	03c0      	lsls	r0, r0, #15
 8000ec0:	4303      	orrs	r3, r0
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	0a5b      	lsrs	r3, r3, #9
 8000ec6:	24ff      	movs	r4, #255	; 0xff
 8000ec8:	e787      	b.n	8000dda <__aeabi_fsub+0xb2>
 8000eca:	2cff      	cmp	r4, #255	; 0xff
 8000ecc:	d025      	beq.n	8000f1a <__aeabi_fsub+0x1f2>
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	2dff      	cmp	r5, #255	; 0xff
 8000ed2:	d0f0      	beq.n	8000eb6 <__aeabi_fsub+0x18e>
 8000ed4:	025b      	lsls	r3, r3, #9
 8000ed6:	0a5b      	lsrs	r3, r3, #9
 8000ed8:	b2ec      	uxtb	r4, r5
 8000eda:	e77e      	b.n	8000dda <__aeabi_fsub+0xb2>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d04d      	beq.n	8000f7c <__aeabi_fsub+0x254>
 8000ee0:	28ff      	cmp	r0, #255	; 0xff
 8000ee2:	d018      	beq.n	8000f16 <__aeabi_fsub+0x1ee>
 8000ee4:	2480      	movs	r4, #128	; 0x80
 8000ee6:	04e4      	lsls	r4, r4, #19
 8000ee8:	4272      	negs	r2, r6
 8000eea:	4323      	orrs	r3, r4
 8000eec:	2a1b      	cmp	r2, #27
 8000eee:	dd00      	ble.n	8000ef2 <__aeabi_fsub+0x1ca>
 8000ef0:	e0c4      	b.n	800107c <__aeabi_fsub+0x354>
 8000ef2:	001c      	movs	r4, r3
 8000ef4:	2520      	movs	r5, #32
 8000ef6:	40d4      	lsrs	r4, r2
 8000ef8:	1aaa      	subs	r2, r5, r2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	1e5a      	subs	r2, r3, #1
 8000efe:	4193      	sbcs	r3, r2
 8000f00:	4323      	orrs	r3, r4
 8000f02:	464a      	mov	r2, r9
 8000f04:	0005      	movs	r5, r0
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4688      	mov	r8, r1
 8000f0a:	e738      	b.n	8000d7e <__aeabi_fsub+0x56>
 8000f0c:	1c72      	adds	r2, r6, #1
 8000f0e:	d0f8      	beq.n	8000f02 <__aeabi_fsub+0x1da>
 8000f10:	43f2      	mvns	r2, r6
 8000f12:	28ff      	cmp	r0, #255	; 0xff
 8000f14:	d1ea      	bne.n	8000eec <__aeabi_fsub+0x1c4>
 8000f16:	000a      	movs	r2, r1
 8000f18:	464b      	mov	r3, r9
 8000f1a:	25ff      	movs	r5, #255	; 0xff
 8000f1c:	e7d7      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8000f1e:	019b      	lsls	r3, r3, #6
 8000f20:	0a5b      	lsrs	r3, r3, #9
 8000f22:	e75a      	b.n	8000dda <__aeabi_fsub+0xb2>
 8000f24:	2e00      	cmp	r6, #0
 8000f26:	d141      	bne.n	8000fac <__aeabi_fsub+0x284>
 8000f28:	1c65      	adds	r5, r4, #1
 8000f2a:	b2e9      	uxtb	r1, r5
 8000f2c:	2901      	cmp	r1, #1
 8000f2e:	dd45      	ble.n	8000fbc <__aeabi_fsub+0x294>
 8000f30:	2dff      	cmp	r5, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x20e>
 8000f34:	e74f      	b.n	8000dd6 <__aeabi_fsub+0xae>
 8000f36:	2407      	movs	r4, #7
 8000f38:	444b      	add	r3, r9
 8000f3a:	085b      	lsrs	r3, r3, #1
 8000f3c:	401c      	ands	r4, r3
 8000f3e:	e738      	b.n	8000db2 <__aeabi_fsub+0x8a>
 8000f40:	2207      	movs	r2, #7
 8000f42:	4b5a      	ldr	r3, [pc, #360]	; (80010ac <__aeabi_fsub+0x384>)
 8000f44:	1a2d      	subs	r5, r5, r0
 8000f46:	4023      	ands	r3, r4
 8000f48:	4014      	ands	r4, r2
 8000f4a:	e732      	b.n	8000db2 <__aeabi_fsub+0x8a>
 8000f4c:	2c00      	cmp	r4, #0
 8000f4e:	d11d      	bne.n	8000f8c <__aeabi_fsub+0x264>
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d17a      	bne.n	800104a <__aeabi_fsub+0x322>
 8000f54:	464b      	mov	r3, r9
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d100      	bne.n	8000f5c <__aeabi_fsub+0x234>
 8000f5a:	e091      	b.n	8001080 <__aeabi_fsub+0x358>
 8000f5c:	000a      	movs	r2, r1
 8000f5e:	2500      	movs	r5, #0
 8000f60:	e7b5      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8000f62:	3e01      	subs	r6, #1
 8000f64:	2e00      	cmp	r6, #0
 8000f66:	d119      	bne.n	8000f9c <__aeabi_fsub+0x274>
 8000f68:	444b      	add	r3, r9
 8000f6a:	e76c      	b.n	8000e46 <__aeabi_fsub+0x11e>
 8000f6c:	2cff      	cmp	r4, #255	; 0xff
 8000f6e:	d184      	bne.n	8000e7a <__aeabi_fsub+0x152>
 8000f70:	25ff      	movs	r5, #255	; 0xff
 8000f72:	e7ac      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8000f74:	464a      	mov	r2, r9
 8000f76:	4688      	mov	r8, r1
 8000f78:	1ad4      	subs	r4, r2, r3
 8000f7a:	e705      	b.n	8000d88 <__aeabi_fsub+0x60>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1c5      	bne.n	8000f0c <__aeabi_fsub+0x1e4>
 8000f80:	000a      	movs	r2, r1
 8000f82:	28ff      	cmp	r0, #255	; 0xff
 8000f84:	d0c8      	beq.n	8000f18 <__aeabi_fsub+0x1f0>
 8000f86:	0005      	movs	r5, r0
 8000f88:	464b      	mov	r3, r9
 8000f8a:	e7a0      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d149      	bne.n	8001024 <__aeabi_fsub+0x2fc>
 8000f90:	464b      	mov	r3, r9
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d077      	beq.n	8001086 <__aeabi_fsub+0x35e>
 8000f96:	000a      	movs	r2, r1
 8000f98:	25ff      	movs	r5, #255	; 0xff
 8000f9a:	e798      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8000f9c:	2cff      	cmp	r4, #255	; 0xff
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_fsub+0x27a>
 8000fa0:	e743      	b.n	8000e2a <__aeabi_fsub+0x102>
 8000fa2:	e787      	b.n	8000eb4 <__aeabi_fsub+0x18c>
 8000fa4:	000a      	movs	r2, r1
 8000fa6:	24ff      	movs	r4, #255	; 0xff
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e716      	b.n	8000dda <__aeabi_fsub+0xb2>
 8000fac:	2c00      	cmp	r4, #0
 8000fae:	d115      	bne.n	8000fdc <__aeabi_fsub+0x2b4>
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d157      	bne.n	8001064 <__aeabi_fsub+0x33c>
 8000fb4:	28ff      	cmp	r0, #255	; 0xff
 8000fb6:	d1e6      	bne.n	8000f86 <__aeabi_fsub+0x25e>
 8000fb8:	464b      	mov	r3, r9
 8000fba:	e77b      	b.n	8000eb4 <__aeabi_fsub+0x18c>
 8000fbc:	2c00      	cmp	r4, #0
 8000fbe:	d120      	bne.n	8001002 <__aeabi_fsub+0x2da>
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d057      	beq.n	8001074 <__aeabi_fsub+0x34c>
 8000fc4:	4649      	mov	r1, r9
 8000fc6:	2900      	cmp	r1, #0
 8000fc8:	d053      	beq.n	8001072 <__aeabi_fsub+0x34a>
 8000fca:	444b      	add	r3, r9
 8000fcc:	015a      	lsls	r2, r3, #5
 8000fce:	d568      	bpl.n	80010a2 <__aeabi_fsub+0x37a>
 8000fd0:	2407      	movs	r4, #7
 8000fd2:	4a36      	ldr	r2, [pc, #216]	; (80010ac <__aeabi_fsub+0x384>)
 8000fd4:	401c      	ands	r4, r3
 8000fd6:	2501      	movs	r5, #1
 8000fd8:	4013      	ands	r3, r2
 8000fda:	e6ea      	b.n	8000db2 <__aeabi_fsub+0x8a>
 8000fdc:	28ff      	cmp	r0, #255	; 0xff
 8000fde:	d0eb      	beq.n	8000fb8 <__aeabi_fsub+0x290>
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	04d2      	lsls	r2, r2, #19
 8000fe4:	4276      	negs	r6, r6
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	2e1b      	cmp	r6, #27
 8000fea:	dc53      	bgt.n	8001094 <__aeabi_fsub+0x36c>
 8000fec:	2520      	movs	r5, #32
 8000fee:	1bad      	subs	r5, r5, r6
 8000ff0:	001a      	movs	r2, r3
 8000ff2:	40ab      	lsls	r3, r5
 8000ff4:	40f2      	lsrs	r2, r6
 8000ff6:	1e5c      	subs	r4, r3, #1
 8000ff8:	41a3      	sbcs	r3, r4
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	444b      	add	r3, r9
 8000ffe:	0005      	movs	r5, r0
 8001000:	e721      	b.n	8000e46 <__aeabi_fsub+0x11e>
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0d8      	beq.n	8000fb8 <__aeabi_fsub+0x290>
 8001006:	4649      	mov	r1, r9
 8001008:	2900      	cmp	r1, #0
 800100a:	d100      	bne.n	800100e <__aeabi_fsub+0x2e6>
 800100c:	e752      	b.n	8000eb4 <__aeabi_fsub+0x18c>
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	03c9      	lsls	r1, r1, #15
 8001012:	420f      	tst	r7, r1
 8001014:	d100      	bne.n	8001018 <__aeabi_fsub+0x2f0>
 8001016:	e74d      	b.n	8000eb4 <__aeabi_fsub+0x18c>
 8001018:	4660      	mov	r0, ip
 800101a:	4208      	tst	r0, r1
 800101c:	d000      	beq.n	8001020 <__aeabi_fsub+0x2f8>
 800101e:	e749      	b.n	8000eb4 <__aeabi_fsub+0x18c>
 8001020:	464b      	mov	r3, r9
 8001022:	e747      	b.n	8000eb4 <__aeabi_fsub+0x18c>
 8001024:	4648      	mov	r0, r9
 8001026:	25ff      	movs	r5, #255	; 0xff
 8001028:	2800      	cmp	r0, #0
 800102a:	d100      	bne.n	800102e <__aeabi_fsub+0x306>
 800102c:	e74f      	b.n	8000ece <__aeabi_fsub+0x1a6>
 800102e:	2280      	movs	r2, #128	; 0x80
 8001030:	03d2      	lsls	r2, r2, #15
 8001032:	4217      	tst	r7, r2
 8001034:	d004      	beq.n	8001040 <__aeabi_fsub+0x318>
 8001036:	4660      	mov	r0, ip
 8001038:	4210      	tst	r0, r2
 800103a:	d101      	bne.n	8001040 <__aeabi_fsub+0x318>
 800103c:	464b      	mov	r3, r9
 800103e:	4688      	mov	r8, r1
 8001040:	2201      	movs	r2, #1
 8001042:	4641      	mov	r1, r8
 8001044:	25ff      	movs	r5, #255	; 0xff
 8001046:	400a      	ands	r2, r1
 8001048:	e741      	b.n	8000ece <__aeabi_fsub+0x1a6>
 800104a:	4648      	mov	r0, r9
 800104c:	2800      	cmp	r0, #0
 800104e:	d01f      	beq.n	8001090 <__aeabi_fsub+0x368>
 8001050:	1a1a      	subs	r2, r3, r0
 8001052:	0150      	lsls	r0, r2, #5
 8001054:	d520      	bpl.n	8001098 <__aeabi_fsub+0x370>
 8001056:	464a      	mov	r2, r9
 8001058:	2407      	movs	r4, #7
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	401c      	ands	r4, r3
 800105e:	4688      	mov	r8, r1
 8001060:	2500      	movs	r5, #0
 8001062:	e6a6      	b.n	8000db2 <__aeabi_fsub+0x8a>
 8001064:	1c74      	adds	r4, r6, #1
 8001066:	d0c9      	beq.n	8000ffc <__aeabi_fsub+0x2d4>
 8001068:	43f6      	mvns	r6, r6
 800106a:	28ff      	cmp	r0, #255	; 0xff
 800106c:	d1bc      	bne.n	8000fe8 <__aeabi_fsub+0x2c0>
 800106e:	464b      	mov	r3, r9
 8001070:	e720      	b.n	8000eb4 <__aeabi_fsub+0x18c>
 8001072:	4699      	mov	r9, r3
 8001074:	464b      	mov	r3, r9
 8001076:	2500      	movs	r5, #0
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	e72b      	b.n	8000ed4 <__aeabi_fsub+0x1ac>
 800107c:	2301      	movs	r3, #1
 800107e:	e740      	b.n	8000f02 <__aeabi_fsub+0x1da>
 8001080:	2200      	movs	r2, #0
 8001082:	2300      	movs	r3, #0
 8001084:	e6a9      	b.n	8000dda <__aeabi_fsub+0xb2>
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	2200      	movs	r2, #0
 800108a:	03db      	lsls	r3, r3, #15
 800108c:	24ff      	movs	r4, #255	; 0xff
 800108e:	e6a4      	b.n	8000dda <__aeabi_fsub+0xb2>
 8001090:	2500      	movs	r5, #0
 8001092:	e71c      	b.n	8000ece <__aeabi_fsub+0x1a6>
 8001094:	2301      	movs	r3, #1
 8001096:	e7b1      	b.n	8000ffc <__aeabi_fsub+0x2d4>
 8001098:	2a00      	cmp	r2, #0
 800109a:	d0f1      	beq.n	8001080 <__aeabi_fsub+0x358>
 800109c:	0013      	movs	r3, r2
 800109e:	2500      	movs	r5, #0
 80010a0:	e6fc      	b.n	8000e9c <__aeabi_fsub+0x174>
 80010a2:	2500      	movs	r5, #0
 80010a4:	e6fa      	b.n	8000e9c <__aeabi_fsub+0x174>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	7dffffff 	.word	0x7dffffff
 80010ac:	fbffffff 	.word	0xfbffffff

080010b0 <__aeabi_f2iz>:
 80010b0:	0241      	lsls	r1, r0, #9
 80010b2:	0042      	lsls	r2, r0, #1
 80010b4:	0fc3      	lsrs	r3, r0, #31
 80010b6:	0a49      	lsrs	r1, r1, #9
 80010b8:	0e12      	lsrs	r2, r2, #24
 80010ba:	2000      	movs	r0, #0
 80010bc:	2a7e      	cmp	r2, #126	; 0x7e
 80010be:	d90d      	bls.n	80010dc <__aeabi_f2iz+0x2c>
 80010c0:	2a9d      	cmp	r2, #157	; 0x9d
 80010c2:	d80c      	bhi.n	80010de <__aeabi_f2iz+0x2e>
 80010c4:	2080      	movs	r0, #128	; 0x80
 80010c6:	0400      	lsls	r0, r0, #16
 80010c8:	4301      	orrs	r1, r0
 80010ca:	2a95      	cmp	r2, #149	; 0x95
 80010cc:	dc0a      	bgt.n	80010e4 <__aeabi_f2iz+0x34>
 80010ce:	2096      	movs	r0, #150	; 0x96
 80010d0:	1a82      	subs	r2, r0, r2
 80010d2:	40d1      	lsrs	r1, r2
 80010d4:	4248      	negs	r0, r1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d100      	bne.n	80010dc <__aeabi_f2iz+0x2c>
 80010da:	0008      	movs	r0, r1
 80010dc:	4770      	bx	lr
 80010de:	4a03      	ldr	r2, [pc, #12]	; (80010ec <__aeabi_f2iz+0x3c>)
 80010e0:	1898      	adds	r0, r3, r2
 80010e2:	e7fb      	b.n	80010dc <__aeabi_f2iz+0x2c>
 80010e4:	3a96      	subs	r2, #150	; 0x96
 80010e6:	4091      	lsls	r1, r2
 80010e8:	e7f4      	b.n	80010d4 <__aeabi_f2iz+0x24>
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	7fffffff 	.word	0x7fffffff

080010f0 <__aeabi_ui2f>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	1e04      	subs	r4, r0, #0
 80010f4:	d034      	beq.n	8001160 <__aeabi_ui2f+0x70>
 80010f6:	f001 fe0f 	bl	8002d18 <__clzsi2>
 80010fa:	229e      	movs	r2, #158	; 0x9e
 80010fc:	1a12      	subs	r2, r2, r0
 80010fe:	2a96      	cmp	r2, #150	; 0x96
 8001100:	dc07      	bgt.n	8001112 <__aeabi_ui2f+0x22>
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	2808      	cmp	r0, #8
 8001106:	dd2e      	ble.n	8001166 <__aeabi_ui2f+0x76>
 8001108:	3808      	subs	r0, #8
 800110a:	4084      	lsls	r4, r0
 800110c:	0260      	lsls	r0, r4, #9
 800110e:	0a40      	lsrs	r0, r0, #9
 8001110:	e021      	b.n	8001156 <__aeabi_ui2f+0x66>
 8001112:	2a99      	cmp	r2, #153	; 0x99
 8001114:	dd09      	ble.n	800112a <__aeabi_ui2f+0x3a>
 8001116:	0003      	movs	r3, r0
 8001118:	0021      	movs	r1, r4
 800111a:	331b      	adds	r3, #27
 800111c:	4099      	lsls	r1, r3
 800111e:	1e4b      	subs	r3, r1, #1
 8001120:	4199      	sbcs	r1, r3
 8001122:	2305      	movs	r3, #5
 8001124:	1a1b      	subs	r3, r3, r0
 8001126:	40dc      	lsrs	r4, r3
 8001128:	430c      	orrs	r4, r1
 800112a:	2805      	cmp	r0, #5
 800112c:	dd01      	ble.n	8001132 <__aeabi_ui2f+0x42>
 800112e:	1f43      	subs	r3, r0, #5
 8001130:	409c      	lsls	r4, r3
 8001132:	0023      	movs	r3, r4
 8001134:	490d      	ldr	r1, [pc, #52]	; (800116c <__aeabi_ui2f+0x7c>)
 8001136:	400b      	ands	r3, r1
 8001138:	0765      	lsls	r5, r4, #29
 800113a:	d009      	beq.n	8001150 <__aeabi_ui2f+0x60>
 800113c:	250f      	movs	r5, #15
 800113e:	402c      	ands	r4, r5
 8001140:	2c04      	cmp	r4, #4
 8001142:	d005      	beq.n	8001150 <__aeabi_ui2f+0x60>
 8001144:	3304      	adds	r3, #4
 8001146:	015c      	lsls	r4, r3, #5
 8001148:	d502      	bpl.n	8001150 <__aeabi_ui2f+0x60>
 800114a:	229f      	movs	r2, #159	; 0x9f
 800114c:	400b      	ands	r3, r1
 800114e:	1a12      	subs	r2, r2, r0
 8001150:	019b      	lsls	r3, r3, #6
 8001152:	0a58      	lsrs	r0, r3, #9
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	0240      	lsls	r0, r0, #9
 8001158:	05d2      	lsls	r2, r2, #23
 800115a:	0a40      	lsrs	r0, r0, #9
 800115c:	4310      	orrs	r0, r2
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	2200      	movs	r2, #0
 8001162:	2000      	movs	r0, #0
 8001164:	e7f7      	b.n	8001156 <__aeabi_ui2f+0x66>
 8001166:	0260      	lsls	r0, r4, #9
 8001168:	0a40      	lsrs	r0, r0, #9
 800116a:	e7f4      	b.n	8001156 <__aeabi_ui2f+0x66>
 800116c:	fbffffff 	.word	0xfbffffff

08001170 <__aeabi_dadd>:
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	464f      	mov	r7, r9
 8001174:	4646      	mov	r6, r8
 8001176:	46d6      	mov	lr, sl
 8001178:	000c      	movs	r4, r1
 800117a:	0309      	lsls	r1, r1, #12
 800117c:	b5c0      	push	{r6, r7, lr}
 800117e:	0a49      	lsrs	r1, r1, #9
 8001180:	0f47      	lsrs	r7, r0, #29
 8001182:	005e      	lsls	r6, r3, #1
 8001184:	4339      	orrs	r1, r7
 8001186:	031f      	lsls	r7, r3, #12
 8001188:	0fdb      	lsrs	r3, r3, #31
 800118a:	469c      	mov	ip, r3
 800118c:	0065      	lsls	r5, r4, #1
 800118e:	0a7b      	lsrs	r3, r7, #9
 8001190:	0f57      	lsrs	r7, r2, #29
 8001192:	431f      	orrs	r7, r3
 8001194:	0d6d      	lsrs	r5, r5, #21
 8001196:	0fe4      	lsrs	r4, r4, #31
 8001198:	0d76      	lsrs	r6, r6, #21
 800119a:	46a1      	mov	r9, r4
 800119c:	00c0      	lsls	r0, r0, #3
 800119e:	46b8      	mov	r8, r7
 80011a0:	00d2      	lsls	r2, r2, #3
 80011a2:	1bab      	subs	r3, r5, r6
 80011a4:	4564      	cmp	r4, ip
 80011a6:	d07b      	beq.n	80012a0 <__aeabi_dadd+0x130>
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd5f      	ble.n	800126c <__aeabi_dadd+0xfc>
 80011ac:	2e00      	cmp	r6, #0
 80011ae:	d000      	beq.n	80011b2 <__aeabi_dadd+0x42>
 80011b0:	e0a4      	b.n	80012fc <__aeabi_dadd+0x18c>
 80011b2:	003e      	movs	r6, r7
 80011b4:	4316      	orrs	r6, r2
 80011b6:	d100      	bne.n	80011ba <__aeabi_dadd+0x4a>
 80011b8:	e112      	b.n	80013e0 <__aeabi_dadd+0x270>
 80011ba:	1e5e      	subs	r6, r3, #1
 80011bc:	2e00      	cmp	r6, #0
 80011be:	d000      	beq.n	80011c2 <__aeabi_dadd+0x52>
 80011c0:	e19e      	b.n	8001500 <__aeabi_dadd+0x390>
 80011c2:	1a87      	subs	r7, r0, r2
 80011c4:	4643      	mov	r3, r8
 80011c6:	42b8      	cmp	r0, r7
 80011c8:	4180      	sbcs	r0, r0
 80011ca:	2501      	movs	r5, #1
 80011cc:	1ac9      	subs	r1, r1, r3
 80011ce:	4240      	negs	r0, r0
 80011d0:	1a09      	subs	r1, r1, r0
 80011d2:	020b      	lsls	r3, r1, #8
 80011d4:	d400      	bmi.n	80011d8 <__aeabi_dadd+0x68>
 80011d6:	e131      	b.n	800143c <__aeabi_dadd+0x2cc>
 80011d8:	0249      	lsls	r1, r1, #9
 80011da:	0a4e      	lsrs	r6, r1, #9
 80011dc:	2e00      	cmp	r6, #0
 80011de:	d100      	bne.n	80011e2 <__aeabi_dadd+0x72>
 80011e0:	e16e      	b.n	80014c0 <__aeabi_dadd+0x350>
 80011e2:	0030      	movs	r0, r6
 80011e4:	f001 fd98 	bl	8002d18 <__clzsi2>
 80011e8:	0003      	movs	r3, r0
 80011ea:	3b08      	subs	r3, #8
 80011ec:	2b1f      	cmp	r3, #31
 80011ee:	dd00      	ble.n	80011f2 <__aeabi_dadd+0x82>
 80011f0:	e161      	b.n	80014b6 <__aeabi_dadd+0x346>
 80011f2:	2220      	movs	r2, #32
 80011f4:	0039      	movs	r1, r7
 80011f6:	1ad2      	subs	r2, r2, r3
 80011f8:	409e      	lsls	r6, r3
 80011fa:	40d1      	lsrs	r1, r2
 80011fc:	409f      	lsls	r7, r3
 80011fe:	430e      	orrs	r6, r1
 8001200:	429d      	cmp	r5, r3
 8001202:	dd00      	ble.n	8001206 <__aeabi_dadd+0x96>
 8001204:	e151      	b.n	80014aa <__aeabi_dadd+0x33a>
 8001206:	1b5d      	subs	r5, r3, r5
 8001208:	1c6b      	adds	r3, r5, #1
 800120a:	2b1f      	cmp	r3, #31
 800120c:	dd00      	ble.n	8001210 <__aeabi_dadd+0xa0>
 800120e:	e17c      	b.n	800150a <__aeabi_dadd+0x39a>
 8001210:	2120      	movs	r1, #32
 8001212:	1ac9      	subs	r1, r1, r3
 8001214:	003d      	movs	r5, r7
 8001216:	0030      	movs	r0, r6
 8001218:	408f      	lsls	r7, r1
 800121a:	4088      	lsls	r0, r1
 800121c:	40dd      	lsrs	r5, r3
 800121e:	1e79      	subs	r1, r7, #1
 8001220:	418f      	sbcs	r7, r1
 8001222:	0031      	movs	r1, r6
 8001224:	2207      	movs	r2, #7
 8001226:	4328      	orrs	r0, r5
 8001228:	40d9      	lsrs	r1, r3
 800122a:	2500      	movs	r5, #0
 800122c:	4307      	orrs	r7, r0
 800122e:	403a      	ands	r2, r7
 8001230:	2a00      	cmp	r2, #0
 8001232:	d009      	beq.n	8001248 <__aeabi_dadd+0xd8>
 8001234:	230f      	movs	r3, #15
 8001236:	403b      	ands	r3, r7
 8001238:	2b04      	cmp	r3, #4
 800123a:	d005      	beq.n	8001248 <__aeabi_dadd+0xd8>
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	42bb      	cmp	r3, r7
 8001240:	41bf      	sbcs	r7, r7
 8001242:	427f      	negs	r7, r7
 8001244:	19c9      	adds	r1, r1, r7
 8001246:	001f      	movs	r7, r3
 8001248:	020b      	lsls	r3, r1, #8
 800124a:	d400      	bmi.n	800124e <__aeabi_dadd+0xde>
 800124c:	e226      	b.n	800169c <__aeabi_dadd+0x52c>
 800124e:	1c6a      	adds	r2, r5, #1
 8001250:	4bc6      	ldr	r3, [pc, #792]	; (800156c <__aeabi_dadd+0x3fc>)
 8001252:	0555      	lsls	r5, r2, #21
 8001254:	0d6d      	lsrs	r5, r5, #21
 8001256:	429a      	cmp	r2, r3
 8001258:	d100      	bne.n	800125c <__aeabi_dadd+0xec>
 800125a:	e106      	b.n	800146a <__aeabi_dadd+0x2fa>
 800125c:	4ac4      	ldr	r2, [pc, #784]	; (8001570 <__aeabi_dadd+0x400>)
 800125e:	08ff      	lsrs	r7, r7, #3
 8001260:	400a      	ands	r2, r1
 8001262:	0753      	lsls	r3, r2, #29
 8001264:	0252      	lsls	r2, r2, #9
 8001266:	433b      	orrs	r3, r7
 8001268:	0b12      	lsrs	r2, r2, #12
 800126a:	e08e      	b.n	800138a <__aeabi_dadd+0x21a>
 800126c:	2b00      	cmp	r3, #0
 800126e:	d000      	beq.n	8001272 <__aeabi_dadd+0x102>
 8001270:	e0b8      	b.n	80013e4 <__aeabi_dadd+0x274>
 8001272:	1c6b      	adds	r3, r5, #1
 8001274:	055b      	lsls	r3, r3, #21
 8001276:	0d5b      	lsrs	r3, r3, #21
 8001278:	2b01      	cmp	r3, #1
 800127a:	dc00      	bgt.n	800127e <__aeabi_dadd+0x10e>
 800127c:	e130      	b.n	80014e0 <__aeabi_dadd+0x370>
 800127e:	1a87      	subs	r7, r0, r2
 8001280:	4643      	mov	r3, r8
 8001282:	42b8      	cmp	r0, r7
 8001284:	41b6      	sbcs	r6, r6
 8001286:	1acb      	subs	r3, r1, r3
 8001288:	4276      	negs	r6, r6
 800128a:	1b9e      	subs	r6, r3, r6
 800128c:	0233      	lsls	r3, r6, #8
 800128e:	d500      	bpl.n	8001292 <__aeabi_dadd+0x122>
 8001290:	e14c      	b.n	800152c <__aeabi_dadd+0x3bc>
 8001292:	003b      	movs	r3, r7
 8001294:	4333      	orrs	r3, r6
 8001296:	d1a1      	bne.n	80011dc <__aeabi_dadd+0x6c>
 8001298:	2200      	movs	r2, #0
 800129a:	2400      	movs	r4, #0
 800129c:	2500      	movs	r5, #0
 800129e:	e070      	b.n	8001382 <__aeabi_dadd+0x212>
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	dc00      	bgt.n	80012a6 <__aeabi_dadd+0x136>
 80012a4:	e0e5      	b.n	8001472 <__aeabi_dadd+0x302>
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d100      	bne.n	80012ac <__aeabi_dadd+0x13c>
 80012aa:	e083      	b.n	80013b4 <__aeabi_dadd+0x244>
 80012ac:	4eaf      	ldr	r6, [pc, #700]	; (800156c <__aeabi_dadd+0x3fc>)
 80012ae:	42b5      	cmp	r5, r6
 80012b0:	d060      	beq.n	8001374 <__aeabi_dadd+0x204>
 80012b2:	2680      	movs	r6, #128	; 0x80
 80012b4:	0436      	lsls	r6, r6, #16
 80012b6:	4337      	orrs	r7, r6
 80012b8:	46b8      	mov	r8, r7
 80012ba:	2b38      	cmp	r3, #56	; 0x38
 80012bc:	dc00      	bgt.n	80012c0 <__aeabi_dadd+0x150>
 80012be:	e13e      	b.n	800153e <__aeabi_dadd+0x3ce>
 80012c0:	4643      	mov	r3, r8
 80012c2:	4313      	orrs	r3, r2
 80012c4:	001f      	movs	r7, r3
 80012c6:	1e7a      	subs	r2, r7, #1
 80012c8:	4197      	sbcs	r7, r2
 80012ca:	183f      	adds	r7, r7, r0
 80012cc:	4287      	cmp	r7, r0
 80012ce:	4180      	sbcs	r0, r0
 80012d0:	4240      	negs	r0, r0
 80012d2:	1809      	adds	r1, r1, r0
 80012d4:	020b      	lsls	r3, r1, #8
 80012d6:	d400      	bmi.n	80012da <__aeabi_dadd+0x16a>
 80012d8:	e0b0      	b.n	800143c <__aeabi_dadd+0x2cc>
 80012da:	4ba4      	ldr	r3, [pc, #656]	; (800156c <__aeabi_dadd+0x3fc>)
 80012dc:	3501      	adds	r5, #1
 80012de:	429d      	cmp	r5, r3
 80012e0:	d100      	bne.n	80012e4 <__aeabi_dadd+0x174>
 80012e2:	e0c3      	b.n	800146c <__aeabi_dadd+0x2fc>
 80012e4:	4aa2      	ldr	r2, [pc, #648]	; (8001570 <__aeabi_dadd+0x400>)
 80012e6:	087b      	lsrs	r3, r7, #1
 80012e8:	400a      	ands	r2, r1
 80012ea:	2101      	movs	r1, #1
 80012ec:	400f      	ands	r7, r1
 80012ee:	431f      	orrs	r7, r3
 80012f0:	0851      	lsrs	r1, r2, #1
 80012f2:	07d3      	lsls	r3, r2, #31
 80012f4:	2207      	movs	r2, #7
 80012f6:	431f      	orrs	r7, r3
 80012f8:	403a      	ands	r2, r7
 80012fa:	e799      	b.n	8001230 <__aeabi_dadd+0xc0>
 80012fc:	4e9b      	ldr	r6, [pc, #620]	; (800156c <__aeabi_dadd+0x3fc>)
 80012fe:	42b5      	cmp	r5, r6
 8001300:	d038      	beq.n	8001374 <__aeabi_dadd+0x204>
 8001302:	2680      	movs	r6, #128	; 0x80
 8001304:	0436      	lsls	r6, r6, #16
 8001306:	4337      	orrs	r7, r6
 8001308:	46b8      	mov	r8, r7
 800130a:	2b38      	cmp	r3, #56	; 0x38
 800130c:	dd00      	ble.n	8001310 <__aeabi_dadd+0x1a0>
 800130e:	e0dc      	b.n	80014ca <__aeabi_dadd+0x35a>
 8001310:	2b1f      	cmp	r3, #31
 8001312:	dc00      	bgt.n	8001316 <__aeabi_dadd+0x1a6>
 8001314:	e130      	b.n	8001578 <__aeabi_dadd+0x408>
 8001316:	001e      	movs	r6, r3
 8001318:	4647      	mov	r7, r8
 800131a:	3e20      	subs	r6, #32
 800131c:	40f7      	lsrs	r7, r6
 800131e:	46bc      	mov	ip, r7
 8001320:	2b20      	cmp	r3, #32
 8001322:	d004      	beq.n	800132e <__aeabi_dadd+0x1be>
 8001324:	2640      	movs	r6, #64	; 0x40
 8001326:	1af3      	subs	r3, r6, r3
 8001328:	4646      	mov	r6, r8
 800132a:	409e      	lsls	r6, r3
 800132c:	4332      	orrs	r2, r6
 800132e:	0017      	movs	r7, r2
 8001330:	4663      	mov	r3, ip
 8001332:	1e7a      	subs	r2, r7, #1
 8001334:	4197      	sbcs	r7, r2
 8001336:	431f      	orrs	r7, r3
 8001338:	e0cc      	b.n	80014d4 <__aeabi_dadd+0x364>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_dadd+0x1d0>
 800133e:	e204      	b.n	800174a <__aeabi_dadd+0x5da>
 8001340:	4643      	mov	r3, r8
 8001342:	4313      	orrs	r3, r2
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x1d8>
 8001346:	e159      	b.n	80015fc <__aeabi_dadd+0x48c>
 8001348:	074b      	lsls	r3, r1, #29
 800134a:	08c0      	lsrs	r0, r0, #3
 800134c:	4318      	orrs	r0, r3
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	08c9      	lsrs	r1, r1, #3
 8001352:	031b      	lsls	r3, r3, #12
 8001354:	4219      	tst	r1, r3
 8001356:	d008      	beq.n	800136a <__aeabi_dadd+0x1fa>
 8001358:	4645      	mov	r5, r8
 800135a:	08ed      	lsrs	r5, r5, #3
 800135c:	421d      	tst	r5, r3
 800135e:	d104      	bne.n	800136a <__aeabi_dadd+0x1fa>
 8001360:	4643      	mov	r3, r8
 8001362:	08d0      	lsrs	r0, r2, #3
 8001364:	0759      	lsls	r1, r3, #29
 8001366:	4308      	orrs	r0, r1
 8001368:	0029      	movs	r1, r5
 800136a:	0f42      	lsrs	r2, r0, #29
 800136c:	00c9      	lsls	r1, r1, #3
 800136e:	4d7f      	ldr	r5, [pc, #508]	; (800156c <__aeabi_dadd+0x3fc>)
 8001370:	4311      	orrs	r1, r2
 8001372:	00c0      	lsls	r0, r0, #3
 8001374:	074b      	lsls	r3, r1, #29
 8001376:	08ca      	lsrs	r2, r1, #3
 8001378:	497c      	ldr	r1, [pc, #496]	; (800156c <__aeabi_dadd+0x3fc>)
 800137a:	08c0      	lsrs	r0, r0, #3
 800137c:	4303      	orrs	r3, r0
 800137e:	428d      	cmp	r5, r1
 8001380:	d068      	beq.n	8001454 <__aeabi_dadd+0x2e4>
 8001382:	0312      	lsls	r2, r2, #12
 8001384:	056d      	lsls	r5, r5, #21
 8001386:	0b12      	lsrs	r2, r2, #12
 8001388:	0d6d      	lsrs	r5, r5, #21
 800138a:	2100      	movs	r1, #0
 800138c:	0312      	lsls	r2, r2, #12
 800138e:	0018      	movs	r0, r3
 8001390:	0b13      	lsrs	r3, r2, #12
 8001392:	0d0a      	lsrs	r2, r1, #20
 8001394:	0512      	lsls	r2, r2, #20
 8001396:	431a      	orrs	r2, r3
 8001398:	4b76      	ldr	r3, [pc, #472]	; (8001574 <__aeabi_dadd+0x404>)
 800139a:	052d      	lsls	r5, r5, #20
 800139c:	4013      	ands	r3, r2
 800139e:	432b      	orrs	r3, r5
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	07e4      	lsls	r4, r4, #31
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	4323      	orrs	r3, r4
 80013a8:	0019      	movs	r1, r3
 80013aa:	bc1c      	pop	{r2, r3, r4}
 80013ac:	4690      	mov	r8, r2
 80013ae:	4699      	mov	r9, r3
 80013b0:	46a2      	mov	sl, r4
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013b4:	003e      	movs	r6, r7
 80013b6:	4316      	orrs	r6, r2
 80013b8:	d012      	beq.n	80013e0 <__aeabi_dadd+0x270>
 80013ba:	1e5e      	subs	r6, r3, #1
 80013bc:	2e00      	cmp	r6, #0
 80013be:	d000      	beq.n	80013c2 <__aeabi_dadd+0x252>
 80013c0:	e100      	b.n	80015c4 <__aeabi_dadd+0x454>
 80013c2:	1887      	adds	r7, r0, r2
 80013c4:	4287      	cmp	r7, r0
 80013c6:	4180      	sbcs	r0, r0
 80013c8:	4441      	add	r1, r8
 80013ca:	4240      	negs	r0, r0
 80013cc:	1809      	adds	r1, r1, r0
 80013ce:	2501      	movs	r5, #1
 80013d0:	020b      	lsls	r3, r1, #8
 80013d2:	d533      	bpl.n	800143c <__aeabi_dadd+0x2cc>
 80013d4:	2502      	movs	r5, #2
 80013d6:	e785      	b.n	80012e4 <__aeabi_dadd+0x174>
 80013d8:	4664      	mov	r4, ip
 80013da:	0033      	movs	r3, r6
 80013dc:	4641      	mov	r1, r8
 80013de:	0010      	movs	r0, r2
 80013e0:	001d      	movs	r5, r3
 80013e2:	e7c7      	b.n	8001374 <__aeabi_dadd+0x204>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d000      	beq.n	80013ea <__aeabi_dadd+0x27a>
 80013e8:	e0da      	b.n	80015a0 <__aeabi_dadd+0x430>
 80013ea:	000c      	movs	r4, r1
 80013ec:	4304      	orrs	r4, r0
 80013ee:	d0f3      	beq.n	80013d8 <__aeabi_dadd+0x268>
 80013f0:	1c5c      	adds	r4, r3, #1
 80013f2:	d100      	bne.n	80013f6 <__aeabi_dadd+0x286>
 80013f4:	e19f      	b.n	8001736 <__aeabi_dadd+0x5c6>
 80013f6:	4c5d      	ldr	r4, [pc, #372]	; (800156c <__aeabi_dadd+0x3fc>)
 80013f8:	42a6      	cmp	r6, r4
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x28e>
 80013fc:	e12f      	b.n	800165e <__aeabi_dadd+0x4ee>
 80013fe:	43db      	mvns	r3, r3
 8001400:	2b38      	cmp	r3, #56	; 0x38
 8001402:	dd00      	ble.n	8001406 <__aeabi_dadd+0x296>
 8001404:	e166      	b.n	80016d4 <__aeabi_dadd+0x564>
 8001406:	2b1f      	cmp	r3, #31
 8001408:	dd00      	ble.n	800140c <__aeabi_dadd+0x29c>
 800140a:	e183      	b.n	8001714 <__aeabi_dadd+0x5a4>
 800140c:	2420      	movs	r4, #32
 800140e:	0005      	movs	r5, r0
 8001410:	1ae4      	subs	r4, r4, r3
 8001412:	000f      	movs	r7, r1
 8001414:	40dd      	lsrs	r5, r3
 8001416:	40d9      	lsrs	r1, r3
 8001418:	40a0      	lsls	r0, r4
 800141a:	4643      	mov	r3, r8
 800141c:	40a7      	lsls	r7, r4
 800141e:	1a5b      	subs	r3, r3, r1
 8001420:	1e44      	subs	r4, r0, #1
 8001422:	41a0      	sbcs	r0, r4
 8001424:	4698      	mov	r8, r3
 8001426:	432f      	orrs	r7, r5
 8001428:	4338      	orrs	r0, r7
 800142a:	1a17      	subs	r7, r2, r0
 800142c:	42ba      	cmp	r2, r7
 800142e:	4192      	sbcs	r2, r2
 8001430:	4643      	mov	r3, r8
 8001432:	4252      	negs	r2, r2
 8001434:	1a99      	subs	r1, r3, r2
 8001436:	4664      	mov	r4, ip
 8001438:	0035      	movs	r5, r6
 800143a:	e6ca      	b.n	80011d2 <__aeabi_dadd+0x62>
 800143c:	2207      	movs	r2, #7
 800143e:	403a      	ands	r2, r7
 8001440:	2a00      	cmp	r2, #0
 8001442:	d000      	beq.n	8001446 <__aeabi_dadd+0x2d6>
 8001444:	e6f6      	b.n	8001234 <__aeabi_dadd+0xc4>
 8001446:	074b      	lsls	r3, r1, #29
 8001448:	08ca      	lsrs	r2, r1, #3
 800144a:	4948      	ldr	r1, [pc, #288]	; (800156c <__aeabi_dadd+0x3fc>)
 800144c:	08ff      	lsrs	r7, r7, #3
 800144e:	433b      	orrs	r3, r7
 8001450:	428d      	cmp	r5, r1
 8001452:	d196      	bne.n	8001382 <__aeabi_dadd+0x212>
 8001454:	0019      	movs	r1, r3
 8001456:	4311      	orrs	r1, r2
 8001458:	d100      	bne.n	800145c <__aeabi_dadd+0x2ec>
 800145a:	e19e      	b.n	800179a <__aeabi_dadd+0x62a>
 800145c:	2180      	movs	r1, #128	; 0x80
 800145e:	0309      	lsls	r1, r1, #12
 8001460:	430a      	orrs	r2, r1
 8001462:	0312      	lsls	r2, r2, #12
 8001464:	0b12      	lsrs	r2, r2, #12
 8001466:	4d41      	ldr	r5, [pc, #260]	; (800156c <__aeabi_dadd+0x3fc>)
 8001468:	e78f      	b.n	800138a <__aeabi_dadd+0x21a>
 800146a:	0015      	movs	r5, r2
 800146c:	2200      	movs	r2, #0
 800146e:	2300      	movs	r3, #0
 8001470:	e78b      	b.n	800138a <__aeabi_dadd+0x21a>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d000      	beq.n	8001478 <__aeabi_dadd+0x308>
 8001476:	e0c7      	b.n	8001608 <__aeabi_dadd+0x498>
 8001478:	1c6b      	adds	r3, r5, #1
 800147a:	055f      	lsls	r7, r3, #21
 800147c:	0d7f      	lsrs	r7, r7, #21
 800147e:	2f01      	cmp	r7, #1
 8001480:	dc00      	bgt.n	8001484 <__aeabi_dadd+0x314>
 8001482:	e0f1      	b.n	8001668 <__aeabi_dadd+0x4f8>
 8001484:	4d39      	ldr	r5, [pc, #228]	; (800156c <__aeabi_dadd+0x3fc>)
 8001486:	42ab      	cmp	r3, r5
 8001488:	d100      	bne.n	800148c <__aeabi_dadd+0x31c>
 800148a:	e0b9      	b.n	8001600 <__aeabi_dadd+0x490>
 800148c:	1885      	adds	r5, r0, r2
 800148e:	000a      	movs	r2, r1
 8001490:	4285      	cmp	r5, r0
 8001492:	4189      	sbcs	r1, r1
 8001494:	4442      	add	r2, r8
 8001496:	4249      	negs	r1, r1
 8001498:	1851      	adds	r1, r2, r1
 800149a:	2207      	movs	r2, #7
 800149c:	07cf      	lsls	r7, r1, #31
 800149e:	086d      	lsrs	r5, r5, #1
 80014a0:	432f      	orrs	r7, r5
 80014a2:	0849      	lsrs	r1, r1, #1
 80014a4:	403a      	ands	r2, r7
 80014a6:	001d      	movs	r5, r3
 80014a8:	e6c2      	b.n	8001230 <__aeabi_dadd+0xc0>
 80014aa:	2207      	movs	r2, #7
 80014ac:	4930      	ldr	r1, [pc, #192]	; (8001570 <__aeabi_dadd+0x400>)
 80014ae:	1aed      	subs	r5, r5, r3
 80014b0:	4031      	ands	r1, r6
 80014b2:	403a      	ands	r2, r7
 80014b4:	e6bc      	b.n	8001230 <__aeabi_dadd+0xc0>
 80014b6:	003e      	movs	r6, r7
 80014b8:	3828      	subs	r0, #40	; 0x28
 80014ba:	4086      	lsls	r6, r0
 80014bc:	2700      	movs	r7, #0
 80014be:	e69f      	b.n	8001200 <__aeabi_dadd+0x90>
 80014c0:	0038      	movs	r0, r7
 80014c2:	f001 fc29 	bl	8002d18 <__clzsi2>
 80014c6:	3020      	adds	r0, #32
 80014c8:	e68e      	b.n	80011e8 <__aeabi_dadd+0x78>
 80014ca:	4643      	mov	r3, r8
 80014cc:	4313      	orrs	r3, r2
 80014ce:	001f      	movs	r7, r3
 80014d0:	1e7a      	subs	r2, r7, #1
 80014d2:	4197      	sbcs	r7, r2
 80014d4:	1bc7      	subs	r7, r0, r7
 80014d6:	42b8      	cmp	r0, r7
 80014d8:	4180      	sbcs	r0, r0
 80014da:	4240      	negs	r0, r0
 80014dc:	1a09      	subs	r1, r1, r0
 80014de:	e678      	b.n	80011d2 <__aeabi_dadd+0x62>
 80014e0:	000e      	movs	r6, r1
 80014e2:	003b      	movs	r3, r7
 80014e4:	4306      	orrs	r6, r0
 80014e6:	4313      	orrs	r3, r2
 80014e8:	2d00      	cmp	r5, #0
 80014ea:	d161      	bne.n	80015b0 <__aeabi_dadd+0x440>
 80014ec:	2e00      	cmp	r6, #0
 80014ee:	d000      	beq.n	80014f2 <__aeabi_dadd+0x382>
 80014f0:	e0f4      	b.n	80016dc <__aeabi_dadd+0x56c>
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x388>
 80014f6:	e11b      	b.n	8001730 <__aeabi_dadd+0x5c0>
 80014f8:	4664      	mov	r4, ip
 80014fa:	0039      	movs	r1, r7
 80014fc:	0010      	movs	r0, r2
 80014fe:	e739      	b.n	8001374 <__aeabi_dadd+0x204>
 8001500:	4f1a      	ldr	r7, [pc, #104]	; (800156c <__aeabi_dadd+0x3fc>)
 8001502:	42bb      	cmp	r3, r7
 8001504:	d07a      	beq.n	80015fc <__aeabi_dadd+0x48c>
 8001506:	0033      	movs	r3, r6
 8001508:	e6ff      	b.n	800130a <__aeabi_dadd+0x19a>
 800150a:	0030      	movs	r0, r6
 800150c:	3d1f      	subs	r5, #31
 800150e:	40e8      	lsrs	r0, r5
 8001510:	2b20      	cmp	r3, #32
 8001512:	d003      	beq.n	800151c <__aeabi_dadd+0x3ac>
 8001514:	2140      	movs	r1, #64	; 0x40
 8001516:	1acb      	subs	r3, r1, r3
 8001518:	409e      	lsls	r6, r3
 800151a:	4337      	orrs	r7, r6
 800151c:	1e7b      	subs	r3, r7, #1
 800151e:	419f      	sbcs	r7, r3
 8001520:	2207      	movs	r2, #7
 8001522:	4307      	orrs	r7, r0
 8001524:	403a      	ands	r2, r7
 8001526:	2100      	movs	r1, #0
 8001528:	2500      	movs	r5, #0
 800152a:	e789      	b.n	8001440 <__aeabi_dadd+0x2d0>
 800152c:	1a17      	subs	r7, r2, r0
 800152e:	4643      	mov	r3, r8
 8001530:	42ba      	cmp	r2, r7
 8001532:	41b6      	sbcs	r6, r6
 8001534:	1a59      	subs	r1, r3, r1
 8001536:	4276      	negs	r6, r6
 8001538:	1b8e      	subs	r6, r1, r6
 800153a:	4664      	mov	r4, ip
 800153c:	e64e      	b.n	80011dc <__aeabi_dadd+0x6c>
 800153e:	2b1f      	cmp	r3, #31
 8001540:	dd00      	ble.n	8001544 <__aeabi_dadd+0x3d4>
 8001542:	e0ad      	b.n	80016a0 <__aeabi_dadd+0x530>
 8001544:	2620      	movs	r6, #32
 8001546:	4647      	mov	r7, r8
 8001548:	1af6      	subs	r6, r6, r3
 800154a:	40b7      	lsls	r7, r6
 800154c:	46b9      	mov	r9, r7
 800154e:	0017      	movs	r7, r2
 8001550:	46b2      	mov	sl, r6
 8001552:	40df      	lsrs	r7, r3
 8001554:	464e      	mov	r6, r9
 8001556:	433e      	orrs	r6, r7
 8001558:	0037      	movs	r7, r6
 800155a:	4656      	mov	r6, sl
 800155c:	40b2      	lsls	r2, r6
 800155e:	1e56      	subs	r6, r2, #1
 8001560:	41b2      	sbcs	r2, r6
 8001562:	4317      	orrs	r7, r2
 8001564:	4642      	mov	r2, r8
 8001566:	40da      	lsrs	r2, r3
 8001568:	1889      	adds	r1, r1, r2
 800156a:	e6ae      	b.n	80012ca <__aeabi_dadd+0x15a>
 800156c:	000007ff 	.word	0x000007ff
 8001570:	ff7fffff 	.word	0xff7fffff
 8001574:	800fffff 	.word	0x800fffff
 8001578:	2620      	movs	r6, #32
 800157a:	4647      	mov	r7, r8
 800157c:	1af6      	subs	r6, r6, r3
 800157e:	40b7      	lsls	r7, r6
 8001580:	46b9      	mov	r9, r7
 8001582:	0017      	movs	r7, r2
 8001584:	46b2      	mov	sl, r6
 8001586:	40df      	lsrs	r7, r3
 8001588:	464e      	mov	r6, r9
 800158a:	433e      	orrs	r6, r7
 800158c:	0037      	movs	r7, r6
 800158e:	4656      	mov	r6, sl
 8001590:	40b2      	lsls	r2, r6
 8001592:	1e56      	subs	r6, r2, #1
 8001594:	41b2      	sbcs	r2, r6
 8001596:	4317      	orrs	r7, r2
 8001598:	4642      	mov	r2, r8
 800159a:	40da      	lsrs	r2, r3
 800159c:	1a89      	subs	r1, r1, r2
 800159e:	e799      	b.n	80014d4 <__aeabi_dadd+0x364>
 80015a0:	4c7f      	ldr	r4, [pc, #508]	; (80017a0 <__aeabi_dadd+0x630>)
 80015a2:	42a6      	cmp	r6, r4
 80015a4:	d05b      	beq.n	800165e <__aeabi_dadd+0x4ee>
 80015a6:	2480      	movs	r4, #128	; 0x80
 80015a8:	0424      	lsls	r4, r4, #16
 80015aa:	425b      	negs	r3, r3
 80015ac:	4321      	orrs	r1, r4
 80015ae:	e727      	b.n	8001400 <__aeabi_dadd+0x290>
 80015b0:	2e00      	cmp	r6, #0
 80015b2:	d10c      	bne.n	80015ce <__aeabi_dadd+0x45e>
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d100      	bne.n	80015ba <__aeabi_dadd+0x44a>
 80015b8:	e0cb      	b.n	8001752 <__aeabi_dadd+0x5e2>
 80015ba:	4664      	mov	r4, ip
 80015bc:	0039      	movs	r1, r7
 80015be:	0010      	movs	r0, r2
 80015c0:	4d77      	ldr	r5, [pc, #476]	; (80017a0 <__aeabi_dadd+0x630>)
 80015c2:	e6d7      	b.n	8001374 <__aeabi_dadd+0x204>
 80015c4:	4f76      	ldr	r7, [pc, #472]	; (80017a0 <__aeabi_dadd+0x630>)
 80015c6:	42bb      	cmp	r3, r7
 80015c8:	d018      	beq.n	80015fc <__aeabi_dadd+0x48c>
 80015ca:	0033      	movs	r3, r6
 80015cc:	e675      	b.n	80012ba <__aeabi_dadd+0x14a>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d014      	beq.n	80015fc <__aeabi_dadd+0x48c>
 80015d2:	074b      	lsls	r3, r1, #29
 80015d4:	08c0      	lsrs	r0, r0, #3
 80015d6:	4318      	orrs	r0, r3
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	08c9      	lsrs	r1, r1, #3
 80015dc:	031b      	lsls	r3, r3, #12
 80015de:	4219      	tst	r1, r3
 80015e0:	d007      	beq.n	80015f2 <__aeabi_dadd+0x482>
 80015e2:	08fc      	lsrs	r4, r7, #3
 80015e4:	421c      	tst	r4, r3
 80015e6:	d104      	bne.n	80015f2 <__aeabi_dadd+0x482>
 80015e8:	0779      	lsls	r1, r7, #29
 80015ea:	08d0      	lsrs	r0, r2, #3
 80015ec:	4308      	orrs	r0, r1
 80015ee:	46e1      	mov	r9, ip
 80015f0:	0021      	movs	r1, r4
 80015f2:	464c      	mov	r4, r9
 80015f4:	0f42      	lsrs	r2, r0, #29
 80015f6:	00c9      	lsls	r1, r1, #3
 80015f8:	4311      	orrs	r1, r2
 80015fa:	00c0      	lsls	r0, r0, #3
 80015fc:	4d68      	ldr	r5, [pc, #416]	; (80017a0 <__aeabi_dadd+0x630>)
 80015fe:	e6b9      	b.n	8001374 <__aeabi_dadd+0x204>
 8001600:	001d      	movs	r5, r3
 8001602:	2200      	movs	r2, #0
 8001604:	2300      	movs	r3, #0
 8001606:	e6c0      	b.n	800138a <__aeabi_dadd+0x21a>
 8001608:	2d00      	cmp	r5, #0
 800160a:	d15b      	bne.n	80016c4 <__aeabi_dadd+0x554>
 800160c:	000d      	movs	r5, r1
 800160e:	4305      	orrs	r5, r0
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x4a4>
 8001612:	e6e2      	b.n	80013da <__aeabi_dadd+0x26a>
 8001614:	1c5d      	adds	r5, r3, #1
 8001616:	d100      	bne.n	800161a <__aeabi_dadd+0x4aa>
 8001618:	e0b0      	b.n	800177c <__aeabi_dadd+0x60c>
 800161a:	4d61      	ldr	r5, [pc, #388]	; (80017a0 <__aeabi_dadd+0x630>)
 800161c:	42ae      	cmp	r6, r5
 800161e:	d01f      	beq.n	8001660 <__aeabi_dadd+0x4f0>
 8001620:	43db      	mvns	r3, r3
 8001622:	2b38      	cmp	r3, #56	; 0x38
 8001624:	dc71      	bgt.n	800170a <__aeabi_dadd+0x59a>
 8001626:	2b1f      	cmp	r3, #31
 8001628:	dd00      	ble.n	800162c <__aeabi_dadd+0x4bc>
 800162a:	e096      	b.n	800175a <__aeabi_dadd+0x5ea>
 800162c:	2520      	movs	r5, #32
 800162e:	000f      	movs	r7, r1
 8001630:	1aed      	subs	r5, r5, r3
 8001632:	40af      	lsls	r7, r5
 8001634:	46b9      	mov	r9, r7
 8001636:	0007      	movs	r7, r0
 8001638:	46aa      	mov	sl, r5
 800163a:	40df      	lsrs	r7, r3
 800163c:	464d      	mov	r5, r9
 800163e:	433d      	orrs	r5, r7
 8001640:	002f      	movs	r7, r5
 8001642:	4655      	mov	r5, sl
 8001644:	40a8      	lsls	r0, r5
 8001646:	40d9      	lsrs	r1, r3
 8001648:	1e45      	subs	r5, r0, #1
 800164a:	41a8      	sbcs	r0, r5
 800164c:	4488      	add	r8, r1
 800164e:	4307      	orrs	r7, r0
 8001650:	18bf      	adds	r7, r7, r2
 8001652:	4297      	cmp	r7, r2
 8001654:	4192      	sbcs	r2, r2
 8001656:	4251      	negs	r1, r2
 8001658:	4441      	add	r1, r8
 800165a:	0035      	movs	r5, r6
 800165c:	e63a      	b.n	80012d4 <__aeabi_dadd+0x164>
 800165e:	4664      	mov	r4, ip
 8001660:	0035      	movs	r5, r6
 8001662:	4641      	mov	r1, r8
 8001664:	0010      	movs	r0, r2
 8001666:	e685      	b.n	8001374 <__aeabi_dadd+0x204>
 8001668:	000b      	movs	r3, r1
 800166a:	4303      	orrs	r3, r0
 800166c:	2d00      	cmp	r5, #0
 800166e:	d000      	beq.n	8001672 <__aeabi_dadd+0x502>
 8001670:	e663      	b.n	800133a <__aeabi_dadd+0x1ca>
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f5      	beq.n	8001662 <__aeabi_dadd+0x4f2>
 8001676:	4643      	mov	r3, r8
 8001678:	4313      	orrs	r3, r2
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x50e>
 800167c:	e67a      	b.n	8001374 <__aeabi_dadd+0x204>
 800167e:	1887      	adds	r7, r0, r2
 8001680:	4287      	cmp	r7, r0
 8001682:	4180      	sbcs	r0, r0
 8001684:	2207      	movs	r2, #7
 8001686:	4441      	add	r1, r8
 8001688:	4240      	negs	r0, r0
 800168a:	1809      	adds	r1, r1, r0
 800168c:	403a      	ands	r2, r7
 800168e:	020b      	lsls	r3, r1, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0x524>
 8001692:	e6d5      	b.n	8001440 <__aeabi_dadd+0x2d0>
 8001694:	4b43      	ldr	r3, [pc, #268]	; (80017a4 <__aeabi_dadd+0x634>)
 8001696:	3501      	adds	r5, #1
 8001698:	4019      	ands	r1, r3
 800169a:	e5c9      	b.n	8001230 <__aeabi_dadd+0xc0>
 800169c:	0038      	movs	r0, r7
 800169e:	e669      	b.n	8001374 <__aeabi_dadd+0x204>
 80016a0:	001e      	movs	r6, r3
 80016a2:	4647      	mov	r7, r8
 80016a4:	3e20      	subs	r6, #32
 80016a6:	40f7      	lsrs	r7, r6
 80016a8:	46bc      	mov	ip, r7
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d004      	beq.n	80016b8 <__aeabi_dadd+0x548>
 80016ae:	2640      	movs	r6, #64	; 0x40
 80016b0:	1af3      	subs	r3, r6, r3
 80016b2:	4646      	mov	r6, r8
 80016b4:	409e      	lsls	r6, r3
 80016b6:	4332      	orrs	r2, r6
 80016b8:	0017      	movs	r7, r2
 80016ba:	4663      	mov	r3, ip
 80016bc:	1e7a      	subs	r2, r7, #1
 80016be:	4197      	sbcs	r7, r2
 80016c0:	431f      	orrs	r7, r3
 80016c2:	e602      	b.n	80012ca <__aeabi_dadd+0x15a>
 80016c4:	4d36      	ldr	r5, [pc, #216]	; (80017a0 <__aeabi_dadd+0x630>)
 80016c6:	42ae      	cmp	r6, r5
 80016c8:	d0ca      	beq.n	8001660 <__aeabi_dadd+0x4f0>
 80016ca:	2580      	movs	r5, #128	; 0x80
 80016cc:	042d      	lsls	r5, r5, #16
 80016ce:	425b      	negs	r3, r3
 80016d0:	4329      	orrs	r1, r5
 80016d2:	e7a6      	b.n	8001622 <__aeabi_dadd+0x4b2>
 80016d4:	4308      	orrs	r0, r1
 80016d6:	1e41      	subs	r1, r0, #1
 80016d8:	4188      	sbcs	r0, r1
 80016da:	e6a6      	b.n	800142a <__aeabi_dadd+0x2ba>
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d100      	bne.n	80016e2 <__aeabi_dadd+0x572>
 80016e0:	e648      	b.n	8001374 <__aeabi_dadd+0x204>
 80016e2:	1a87      	subs	r7, r0, r2
 80016e4:	4643      	mov	r3, r8
 80016e6:	42b8      	cmp	r0, r7
 80016e8:	41b6      	sbcs	r6, r6
 80016ea:	1acb      	subs	r3, r1, r3
 80016ec:	4276      	negs	r6, r6
 80016ee:	1b9e      	subs	r6, r3, r6
 80016f0:	0233      	lsls	r3, r6, #8
 80016f2:	d54b      	bpl.n	800178c <__aeabi_dadd+0x61c>
 80016f4:	1a17      	subs	r7, r2, r0
 80016f6:	4643      	mov	r3, r8
 80016f8:	42ba      	cmp	r2, r7
 80016fa:	4192      	sbcs	r2, r2
 80016fc:	1a59      	subs	r1, r3, r1
 80016fe:	4252      	negs	r2, r2
 8001700:	1a89      	subs	r1, r1, r2
 8001702:	2207      	movs	r2, #7
 8001704:	4664      	mov	r4, ip
 8001706:	403a      	ands	r2, r7
 8001708:	e592      	b.n	8001230 <__aeabi_dadd+0xc0>
 800170a:	4301      	orrs	r1, r0
 800170c:	000f      	movs	r7, r1
 800170e:	1e79      	subs	r1, r7, #1
 8001710:	418f      	sbcs	r7, r1
 8001712:	e79d      	b.n	8001650 <__aeabi_dadd+0x4e0>
 8001714:	001c      	movs	r4, r3
 8001716:	000f      	movs	r7, r1
 8001718:	3c20      	subs	r4, #32
 800171a:	40e7      	lsrs	r7, r4
 800171c:	2b20      	cmp	r3, #32
 800171e:	d003      	beq.n	8001728 <__aeabi_dadd+0x5b8>
 8001720:	2440      	movs	r4, #64	; 0x40
 8001722:	1ae3      	subs	r3, r4, r3
 8001724:	4099      	lsls	r1, r3
 8001726:	4308      	orrs	r0, r1
 8001728:	1e41      	subs	r1, r0, #1
 800172a:	4188      	sbcs	r0, r1
 800172c:	4338      	orrs	r0, r7
 800172e:	e67c      	b.n	800142a <__aeabi_dadd+0x2ba>
 8001730:	2200      	movs	r2, #0
 8001732:	2400      	movs	r4, #0
 8001734:	e625      	b.n	8001382 <__aeabi_dadd+0x212>
 8001736:	1a17      	subs	r7, r2, r0
 8001738:	4643      	mov	r3, r8
 800173a:	42ba      	cmp	r2, r7
 800173c:	4192      	sbcs	r2, r2
 800173e:	1a59      	subs	r1, r3, r1
 8001740:	4252      	negs	r2, r2
 8001742:	1a89      	subs	r1, r1, r2
 8001744:	4664      	mov	r4, ip
 8001746:	0035      	movs	r5, r6
 8001748:	e543      	b.n	80011d2 <__aeabi_dadd+0x62>
 800174a:	4641      	mov	r1, r8
 800174c:	0010      	movs	r0, r2
 800174e:	4d14      	ldr	r5, [pc, #80]	; (80017a0 <__aeabi_dadd+0x630>)
 8001750:	e610      	b.n	8001374 <__aeabi_dadd+0x204>
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	2400      	movs	r4, #0
 8001756:	0312      	lsls	r2, r2, #12
 8001758:	e680      	b.n	800145c <__aeabi_dadd+0x2ec>
 800175a:	001d      	movs	r5, r3
 800175c:	000f      	movs	r7, r1
 800175e:	3d20      	subs	r5, #32
 8001760:	40ef      	lsrs	r7, r5
 8001762:	46bc      	mov	ip, r7
 8001764:	2b20      	cmp	r3, #32
 8001766:	d003      	beq.n	8001770 <__aeabi_dadd+0x600>
 8001768:	2540      	movs	r5, #64	; 0x40
 800176a:	1aeb      	subs	r3, r5, r3
 800176c:	4099      	lsls	r1, r3
 800176e:	4308      	orrs	r0, r1
 8001770:	0007      	movs	r7, r0
 8001772:	4663      	mov	r3, ip
 8001774:	1e78      	subs	r0, r7, #1
 8001776:	4187      	sbcs	r7, r0
 8001778:	431f      	orrs	r7, r3
 800177a:	e769      	b.n	8001650 <__aeabi_dadd+0x4e0>
 800177c:	1887      	adds	r7, r0, r2
 800177e:	4297      	cmp	r7, r2
 8001780:	419b      	sbcs	r3, r3
 8001782:	4441      	add	r1, r8
 8001784:	425b      	negs	r3, r3
 8001786:	18c9      	adds	r1, r1, r3
 8001788:	0035      	movs	r5, r6
 800178a:	e5a3      	b.n	80012d4 <__aeabi_dadd+0x164>
 800178c:	003b      	movs	r3, r7
 800178e:	4333      	orrs	r3, r6
 8001790:	d0ce      	beq.n	8001730 <__aeabi_dadd+0x5c0>
 8001792:	2207      	movs	r2, #7
 8001794:	0031      	movs	r1, r6
 8001796:	403a      	ands	r2, r7
 8001798:	e652      	b.n	8001440 <__aeabi_dadd+0x2d0>
 800179a:	2300      	movs	r3, #0
 800179c:	001a      	movs	r2, r3
 800179e:	e5f4      	b.n	800138a <__aeabi_dadd+0x21a>
 80017a0:	000007ff 	.word	0x000007ff
 80017a4:	ff7fffff 	.word	0xff7fffff

080017a8 <__aeabi_ddiv>:
 80017a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017aa:	4657      	mov	r7, sl
 80017ac:	46de      	mov	lr, fp
 80017ae:	464e      	mov	r6, r9
 80017b0:	4645      	mov	r5, r8
 80017b2:	b5e0      	push	{r5, r6, r7, lr}
 80017b4:	4683      	mov	fp, r0
 80017b6:	0007      	movs	r7, r0
 80017b8:	030e      	lsls	r6, r1, #12
 80017ba:	0048      	lsls	r0, r1, #1
 80017bc:	b085      	sub	sp, #20
 80017be:	4692      	mov	sl, r2
 80017c0:	001c      	movs	r4, r3
 80017c2:	0b36      	lsrs	r6, r6, #12
 80017c4:	0d40      	lsrs	r0, r0, #21
 80017c6:	0fcd      	lsrs	r5, r1, #31
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d100      	bne.n	80017ce <__aeabi_ddiv+0x26>
 80017cc:	e09d      	b.n	800190a <__aeabi_ddiv+0x162>
 80017ce:	4b95      	ldr	r3, [pc, #596]	; (8001a24 <__aeabi_ddiv+0x27c>)
 80017d0:	4298      	cmp	r0, r3
 80017d2:	d039      	beq.n	8001848 <__aeabi_ddiv+0xa0>
 80017d4:	2380      	movs	r3, #128	; 0x80
 80017d6:	00f6      	lsls	r6, r6, #3
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	431e      	orrs	r6, r3
 80017dc:	4a92      	ldr	r2, [pc, #584]	; (8001a28 <__aeabi_ddiv+0x280>)
 80017de:	0f7b      	lsrs	r3, r7, #29
 80017e0:	4333      	orrs	r3, r6
 80017e2:	4699      	mov	r9, r3
 80017e4:	4694      	mov	ip, r2
 80017e6:	0003      	movs	r3, r0
 80017e8:	4463      	add	r3, ip
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2300      	movs	r3, #0
 80017ee:	2600      	movs	r6, #0
 80017f0:	00ff      	lsls	r7, r7, #3
 80017f2:	9302      	str	r3, [sp, #8]
 80017f4:	0323      	lsls	r3, r4, #12
 80017f6:	0b1b      	lsrs	r3, r3, #12
 80017f8:	4698      	mov	r8, r3
 80017fa:	0063      	lsls	r3, r4, #1
 80017fc:	0fe4      	lsrs	r4, r4, #31
 80017fe:	4652      	mov	r2, sl
 8001800:	0d5b      	lsrs	r3, r3, #21
 8001802:	9401      	str	r4, [sp, #4]
 8001804:	d100      	bne.n	8001808 <__aeabi_ddiv+0x60>
 8001806:	e0b3      	b.n	8001970 <__aeabi_ddiv+0x1c8>
 8001808:	4986      	ldr	r1, [pc, #536]	; (8001a24 <__aeabi_ddiv+0x27c>)
 800180a:	428b      	cmp	r3, r1
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x68>
 800180e:	e09e      	b.n	800194e <__aeabi_ddiv+0x1a6>
 8001810:	4642      	mov	r2, r8
 8001812:	00d1      	lsls	r1, r2, #3
 8001814:	2280      	movs	r2, #128	; 0x80
 8001816:	0412      	lsls	r2, r2, #16
 8001818:	430a      	orrs	r2, r1
 800181a:	4651      	mov	r1, sl
 800181c:	0f49      	lsrs	r1, r1, #29
 800181e:	4311      	orrs	r1, r2
 8001820:	468b      	mov	fp, r1
 8001822:	4981      	ldr	r1, [pc, #516]	; (8001a28 <__aeabi_ddiv+0x280>)
 8001824:	4652      	mov	r2, sl
 8001826:	468c      	mov	ip, r1
 8001828:	9900      	ldr	r1, [sp, #0]
 800182a:	4463      	add	r3, ip
 800182c:	1acb      	subs	r3, r1, r3
 800182e:	2100      	movs	r1, #0
 8001830:	00d2      	lsls	r2, r2, #3
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	002b      	movs	r3, r5
 8001836:	4063      	eors	r3, r4
 8001838:	469a      	mov	sl, r3
 800183a:	2e0f      	cmp	r6, #15
 800183c:	d900      	bls.n	8001840 <__aeabi_ddiv+0x98>
 800183e:	e105      	b.n	8001a4c <__aeabi_ddiv+0x2a4>
 8001840:	4b7a      	ldr	r3, [pc, #488]	; (8001a2c <__aeabi_ddiv+0x284>)
 8001842:	00b6      	lsls	r6, r6, #2
 8001844:	599b      	ldr	r3, [r3, r6]
 8001846:	469f      	mov	pc, r3
 8001848:	465b      	mov	r3, fp
 800184a:	4333      	orrs	r3, r6
 800184c:	4699      	mov	r9, r3
 800184e:	d000      	beq.n	8001852 <__aeabi_ddiv+0xaa>
 8001850:	e0b8      	b.n	80019c4 <__aeabi_ddiv+0x21c>
 8001852:	2302      	movs	r3, #2
 8001854:	2608      	movs	r6, #8
 8001856:	2700      	movs	r7, #0
 8001858:	9000      	str	r0, [sp, #0]
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	e7ca      	b.n	80017f4 <__aeabi_ddiv+0x4c>
 800185e:	46cb      	mov	fp, r9
 8001860:	003a      	movs	r2, r7
 8001862:	9902      	ldr	r1, [sp, #8]
 8001864:	9501      	str	r5, [sp, #4]
 8001866:	9b01      	ldr	r3, [sp, #4]
 8001868:	469a      	mov	sl, r3
 800186a:	2902      	cmp	r1, #2
 800186c:	d027      	beq.n	80018be <__aeabi_ddiv+0x116>
 800186e:	2903      	cmp	r1, #3
 8001870:	d100      	bne.n	8001874 <__aeabi_ddiv+0xcc>
 8001872:	e280      	b.n	8001d76 <__aeabi_ddiv+0x5ce>
 8001874:	2901      	cmp	r1, #1
 8001876:	d044      	beq.n	8001902 <__aeabi_ddiv+0x15a>
 8001878:	496d      	ldr	r1, [pc, #436]	; (8001a30 <__aeabi_ddiv+0x288>)
 800187a:	9b00      	ldr	r3, [sp, #0]
 800187c:	468c      	mov	ip, r1
 800187e:	4463      	add	r3, ip
 8001880:	001c      	movs	r4, r3
 8001882:	2c00      	cmp	r4, #0
 8001884:	dd38      	ble.n	80018f8 <__aeabi_ddiv+0x150>
 8001886:	0753      	lsls	r3, r2, #29
 8001888:	d000      	beq.n	800188c <__aeabi_ddiv+0xe4>
 800188a:	e213      	b.n	8001cb4 <__aeabi_ddiv+0x50c>
 800188c:	08d2      	lsrs	r2, r2, #3
 800188e:	465b      	mov	r3, fp
 8001890:	01db      	lsls	r3, r3, #7
 8001892:	d509      	bpl.n	80018a8 <__aeabi_ddiv+0x100>
 8001894:	4659      	mov	r1, fp
 8001896:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <__aeabi_ddiv+0x28c>)
 8001898:	4019      	ands	r1, r3
 800189a:	468b      	mov	fp, r1
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	00c9      	lsls	r1, r1, #3
 80018a0:	468c      	mov	ip, r1
 80018a2:	9b00      	ldr	r3, [sp, #0]
 80018a4:	4463      	add	r3, ip
 80018a6:	001c      	movs	r4, r3
 80018a8:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <__aeabi_ddiv+0x290>)
 80018aa:	429c      	cmp	r4, r3
 80018ac:	dc07      	bgt.n	80018be <__aeabi_ddiv+0x116>
 80018ae:	465b      	mov	r3, fp
 80018b0:	0564      	lsls	r4, r4, #21
 80018b2:	075f      	lsls	r7, r3, #29
 80018b4:	025b      	lsls	r3, r3, #9
 80018b6:	4317      	orrs	r7, r2
 80018b8:	0b1b      	lsrs	r3, r3, #12
 80018ba:	0d62      	lsrs	r2, r4, #21
 80018bc:	e002      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 80018be:	2300      	movs	r3, #0
 80018c0:	2700      	movs	r7, #0
 80018c2:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <__aeabi_ddiv+0x27c>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	031b      	lsls	r3, r3, #12
 80018c8:	0b1c      	lsrs	r4, r3, #12
 80018ca:	0d0b      	lsrs	r3, r1, #20
 80018cc:	051b      	lsls	r3, r3, #20
 80018ce:	4323      	orrs	r3, r4
 80018d0:	0514      	lsls	r4, r2, #20
 80018d2:	4a5a      	ldr	r2, [pc, #360]	; (8001a3c <__aeabi_ddiv+0x294>)
 80018d4:	0038      	movs	r0, r7
 80018d6:	4013      	ands	r3, r2
 80018d8:	431c      	orrs	r4, r3
 80018da:	4653      	mov	r3, sl
 80018dc:	0064      	lsls	r4, r4, #1
 80018de:	07db      	lsls	r3, r3, #31
 80018e0:	0864      	lsrs	r4, r4, #1
 80018e2:	431c      	orrs	r4, r3
 80018e4:	0021      	movs	r1, r4
 80018e6:	b005      	add	sp, #20
 80018e8:	bc3c      	pop	{r2, r3, r4, r5}
 80018ea:	4690      	mov	r8, r2
 80018ec:	4699      	mov	r9, r3
 80018ee:	46a2      	mov	sl, r4
 80018f0:	46ab      	mov	fp, r5
 80018f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018f4:	2201      	movs	r2, #1
 80018f6:	4252      	negs	r2, r2
 80018f8:	2301      	movs	r3, #1
 80018fa:	1b1b      	subs	r3, r3, r4
 80018fc:	2b38      	cmp	r3, #56	; 0x38
 80018fe:	dc00      	bgt.n	8001902 <__aeabi_ddiv+0x15a>
 8001900:	e1ad      	b.n	8001c5e <__aeabi_ddiv+0x4b6>
 8001902:	2200      	movs	r2, #0
 8001904:	2300      	movs	r3, #0
 8001906:	2700      	movs	r7, #0
 8001908:	e7dc      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 800190a:	465b      	mov	r3, fp
 800190c:	4333      	orrs	r3, r6
 800190e:	4699      	mov	r9, r3
 8001910:	d05e      	beq.n	80019d0 <__aeabi_ddiv+0x228>
 8001912:	2e00      	cmp	r6, #0
 8001914:	d100      	bne.n	8001918 <__aeabi_ddiv+0x170>
 8001916:	e18a      	b.n	8001c2e <__aeabi_ddiv+0x486>
 8001918:	0030      	movs	r0, r6
 800191a:	f001 f9fd 	bl	8002d18 <__clzsi2>
 800191e:	0003      	movs	r3, r0
 8001920:	3b0b      	subs	r3, #11
 8001922:	2b1c      	cmp	r3, #28
 8001924:	dd00      	ble.n	8001928 <__aeabi_ddiv+0x180>
 8001926:	e17b      	b.n	8001c20 <__aeabi_ddiv+0x478>
 8001928:	221d      	movs	r2, #29
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	465a      	mov	r2, fp
 800192e:	0001      	movs	r1, r0
 8001930:	40da      	lsrs	r2, r3
 8001932:	3908      	subs	r1, #8
 8001934:	408e      	lsls	r6, r1
 8001936:	0013      	movs	r3, r2
 8001938:	465f      	mov	r7, fp
 800193a:	4333      	orrs	r3, r6
 800193c:	4699      	mov	r9, r3
 800193e:	408f      	lsls	r7, r1
 8001940:	4b3f      	ldr	r3, [pc, #252]	; (8001a40 <__aeabi_ddiv+0x298>)
 8001942:	2600      	movs	r6, #0
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	e752      	b.n	80017f4 <__aeabi_ddiv+0x4c>
 800194e:	4641      	mov	r1, r8
 8001950:	4653      	mov	r3, sl
 8001952:	430b      	orrs	r3, r1
 8001954:	493b      	ldr	r1, [pc, #236]	; (8001a44 <__aeabi_ddiv+0x29c>)
 8001956:	469b      	mov	fp, r3
 8001958:	468c      	mov	ip, r1
 800195a:	9b00      	ldr	r3, [sp, #0]
 800195c:	4463      	add	r3, ip
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	465b      	mov	r3, fp
 8001962:	2b00      	cmp	r3, #0
 8001964:	d13b      	bne.n	80019de <__aeabi_ddiv+0x236>
 8001966:	2302      	movs	r3, #2
 8001968:	2200      	movs	r2, #0
 800196a:	431e      	orrs	r6, r3
 800196c:	2102      	movs	r1, #2
 800196e:	e761      	b.n	8001834 <__aeabi_ddiv+0x8c>
 8001970:	4643      	mov	r3, r8
 8001972:	4313      	orrs	r3, r2
 8001974:	469b      	mov	fp, r3
 8001976:	d037      	beq.n	80019e8 <__aeabi_ddiv+0x240>
 8001978:	4643      	mov	r3, r8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d100      	bne.n	8001980 <__aeabi_ddiv+0x1d8>
 800197e:	e162      	b.n	8001c46 <__aeabi_ddiv+0x49e>
 8001980:	4640      	mov	r0, r8
 8001982:	f001 f9c9 	bl	8002d18 <__clzsi2>
 8001986:	0003      	movs	r3, r0
 8001988:	3b0b      	subs	r3, #11
 800198a:	2b1c      	cmp	r3, #28
 800198c:	dd00      	ble.n	8001990 <__aeabi_ddiv+0x1e8>
 800198e:	e153      	b.n	8001c38 <__aeabi_ddiv+0x490>
 8001990:	0002      	movs	r2, r0
 8001992:	4641      	mov	r1, r8
 8001994:	3a08      	subs	r2, #8
 8001996:	4091      	lsls	r1, r2
 8001998:	4688      	mov	r8, r1
 800199a:	211d      	movs	r1, #29
 800199c:	1acb      	subs	r3, r1, r3
 800199e:	4651      	mov	r1, sl
 80019a0:	40d9      	lsrs	r1, r3
 80019a2:	000b      	movs	r3, r1
 80019a4:	4641      	mov	r1, r8
 80019a6:	430b      	orrs	r3, r1
 80019a8:	469b      	mov	fp, r3
 80019aa:	4653      	mov	r3, sl
 80019ac:	4093      	lsls	r3, r2
 80019ae:	001a      	movs	r2, r3
 80019b0:	9b00      	ldr	r3, [sp, #0]
 80019b2:	4925      	ldr	r1, [pc, #148]	; (8001a48 <__aeabi_ddiv+0x2a0>)
 80019b4:	469c      	mov	ip, r3
 80019b6:	4460      	add	r0, ip
 80019b8:	0003      	movs	r3, r0
 80019ba:	468c      	mov	ip, r1
 80019bc:	4463      	add	r3, ip
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2100      	movs	r1, #0
 80019c2:	e737      	b.n	8001834 <__aeabi_ddiv+0x8c>
 80019c4:	2303      	movs	r3, #3
 80019c6:	46b1      	mov	r9, r6
 80019c8:	9000      	str	r0, [sp, #0]
 80019ca:	260c      	movs	r6, #12
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	e711      	b.n	80017f4 <__aeabi_ddiv+0x4c>
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	2604      	movs	r6, #4
 80019d8:	2700      	movs	r7, #0
 80019da:	9302      	str	r3, [sp, #8]
 80019dc:	e70a      	b.n	80017f4 <__aeabi_ddiv+0x4c>
 80019de:	2303      	movs	r3, #3
 80019e0:	46c3      	mov	fp, r8
 80019e2:	431e      	orrs	r6, r3
 80019e4:	2103      	movs	r1, #3
 80019e6:	e725      	b.n	8001834 <__aeabi_ddiv+0x8c>
 80019e8:	3301      	adds	r3, #1
 80019ea:	431e      	orrs	r6, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	2101      	movs	r1, #1
 80019f0:	e720      	b.n	8001834 <__aeabi_ddiv+0x8c>
 80019f2:	2300      	movs	r3, #0
 80019f4:	469a      	mov	sl, r3
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	2700      	movs	r7, #0
 80019fa:	031b      	lsls	r3, r3, #12
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <__aeabi_ddiv+0x27c>)
 80019fe:	e761      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	4649      	mov	r1, r9
 8001a04:	031b      	lsls	r3, r3, #12
 8001a06:	4219      	tst	r1, r3
 8001a08:	d100      	bne.n	8001a0c <__aeabi_ddiv+0x264>
 8001a0a:	e0e2      	b.n	8001bd2 <__aeabi_ddiv+0x42a>
 8001a0c:	4659      	mov	r1, fp
 8001a0e:	4219      	tst	r1, r3
 8001a10:	d000      	beq.n	8001a14 <__aeabi_ddiv+0x26c>
 8001a12:	e0de      	b.n	8001bd2 <__aeabi_ddiv+0x42a>
 8001a14:	430b      	orrs	r3, r1
 8001a16:	031b      	lsls	r3, r3, #12
 8001a18:	0017      	movs	r7, r2
 8001a1a:	0b1b      	lsrs	r3, r3, #12
 8001a1c:	46a2      	mov	sl, r4
 8001a1e:	4a01      	ldr	r2, [pc, #4]	; (8001a24 <__aeabi_ddiv+0x27c>)
 8001a20:	e750      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	000007ff 	.word	0x000007ff
 8001a28:	fffffc01 	.word	0xfffffc01
 8001a2c:	0801ac28 	.word	0x0801ac28
 8001a30:	000003ff 	.word	0x000003ff
 8001a34:	feffffff 	.word	0xfeffffff
 8001a38:	000007fe 	.word	0x000007fe
 8001a3c:	800fffff 	.word	0x800fffff
 8001a40:	fffffc0d 	.word	0xfffffc0d
 8001a44:	fffff801 	.word	0xfffff801
 8001a48:	000003f3 	.word	0x000003f3
 8001a4c:	45d9      	cmp	r9, fp
 8001a4e:	d900      	bls.n	8001a52 <__aeabi_ddiv+0x2aa>
 8001a50:	e0cb      	b.n	8001bea <__aeabi_ddiv+0x442>
 8001a52:	d100      	bne.n	8001a56 <__aeabi_ddiv+0x2ae>
 8001a54:	e0c6      	b.n	8001be4 <__aeabi_ddiv+0x43c>
 8001a56:	003c      	movs	r4, r7
 8001a58:	4648      	mov	r0, r9
 8001a5a:	2700      	movs	r7, #0
 8001a5c:	9b00      	ldr	r3, [sp, #0]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	465b      	mov	r3, fp
 8001a64:	0e16      	lsrs	r6, r2, #24
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	431e      	orrs	r6, r3
 8001a6a:	0213      	lsls	r3, r2, #8
 8001a6c:	4698      	mov	r8, r3
 8001a6e:	0433      	lsls	r3, r6, #16
 8001a70:	0c1b      	lsrs	r3, r3, #16
 8001a72:	4699      	mov	r9, r3
 8001a74:	0c31      	lsrs	r1, r6, #16
 8001a76:	9101      	str	r1, [sp, #4]
 8001a78:	f7fe fbcc 	bl	8000214 <__aeabi_uidivmod>
 8001a7c:	464a      	mov	r2, r9
 8001a7e:	4342      	muls	r2, r0
 8001a80:	040b      	lsls	r3, r1, #16
 8001a82:	0c21      	lsrs	r1, r4, #16
 8001a84:	0005      	movs	r5, r0
 8001a86:	4319      	orrs	r1, r3
 8001a88:	428a      	cmp	r2, r1
 8001a8a:	d907      	bls.n	8001a9c <__aeabi_ddiv+0x2f4>
 8001a8c:	1989      	adds	r1, r1, r6
 8001a8e:	3d01      	subs	r5, #1
 8001a90:	428e      	cmp	r6, r1
 8001a92:	d803      	bhi.n	8001a9c <__aeabi_ddiv+0x2f4>
 8001a94:	428a      	cmp	r2, r1
 8001a96:	d901      	bls.n	8001a9c <__aeabi_ddiv+0x2f4>
 8001a98:	1e85      	subs	r5, r0, #2
 8001a9a:	1989      	adds	r1, r1, r6
 8001a9c:	1a88      	subs	r0, r1, r2
 8001a9e:	9901      	ldr	r1, [sp, #4]
 8001aa0:	f7fe fbb8 	bl	8000214 <__aeabi_uidivmod>
 8001aa4:	0409      	lsls	r1, r1, #16
 8001aa6:	468c      	mov	ip, r1
 8001aa8:	464a      	mov	r2, r9
 8001aaa:	0421      	lsls	r1, r4, #16
 8001aac:	4664      	mov	r4, ip
 8001aae:	4342      	muls	r2, r0
 8001ab0:	0c09      	lsrs	r1, r1, #16
 8001ab2:	0003      	movs	r3, r0
 8001ab4:	4321      	orrs	r1, r4
 8001ab6:	428a      	cmp	r2, r1
 8001ab8:	d904      	bls.n	8001ac4 <__aeabi_ddiv+0x31c>
 8001aba:	1989      	adds	r1, r1, r6
 8001abc:	3b01      	subs	r3, #1
 8001abe:	428e      	cmp	r6, r1
 8001ac0:	d800      	bhi.n	8001ac4 <__aeabi_ddiv+0x31c>
 8001ac2:	e0f1      	b.n	8001ca8 <__aeabi_ddiv+0x500>
 8001ac4:	042d      	lsls	r5, r5, #16
 8001ac6:	431d      	orrs	r5, r3
 8001ac8:	46ab      	mov	fp, r5
 8001aca:	4643      	mov	r3, r8
 8001acc:	1a89      	subs	r1, r1, r2
 8001ace:	4642      	mov	r2, r8
 8001ad0:	0c28      	lsrs	r0, r5, #16
 8001ad2:	0412      	lsls	r2, r2, #16
 8001ad4:	0c1d      	lsrs	r5, r3, #16
 8001ad6:	465b      	mov	r3, fp
 8001ad8:	0c14      	lsrs	r4, r2, #16
 8001ada:	0022      	movs	r2, r4
 8001adc:	041b      	lsls	r3, r3, #16
 8001ade:	0c1b      	lsrs	r3, r3, #16
 8001ae0:	435a      	muls	r2, r3
 8001ae2:	9403      	str	r4, [sp, #12]
 8001ae4:	436b      	muls	r3, r5
 8001ae6:	4344      	muls	r4, r0
 8001ae8:	9502      	str	r5, [sp, #8]
 8001aea:	4368      	muls	r0, r5
 8001aec:	191b      	adds	r3, r3, r4
 8001aee:	0c15      	lsrs	r5, r2, #16
 8001af0:	18eb      	adds	r3, r5, r3
 8001af2:	429c      	cmp	r4, r3
 8001af4:	d903      	bls.n	8001afe <__aeabi_ddiv+0x356>
 8001af6:	2480      	movs	r4, #128	; 0x80
 8001af8:	0264      	lsls	r4, r4, #9
 8001afa:	46a4      	mov	ip, r4
 8001afc:	4460      	add	r0, ip
 8001afe:	0c1c      	lsrs	r4, r3, #16
 8001b00:	0415      	lsls	r5, r2, #16
 8001b02:	041b      	lsls	r3, r3, #16
 8001b04:	0c2d      	lsrs	r5, r5, #16
 8001b06:	1820      	adds	r0, r4, r0
 8001b08:	195d      	adds	r5, r3, r5
 8001b0a:	4281      	cmp	r1, r0
 8001b0c:	d377      	bcc.n	8001bfe <__aeabi_ddiv+0x456>
 8001b0e:	d073      	beq.n	8001bf8 <__aeabi_ddiv+0x450>
 8001b10:	1a0c      	subs	r4, r1, r0
 8001b12:	4aa2      	ldr	r2, [pc, #648]	; (8001d9c <__aeabi_ddiv+0x5f4>)
 8001b14:	1b7d      	subs	r5, r7, r5
 8001b16:	42af      	cmp	r7, r5
 8001b18:	41bf      	sbcs	r7, r7
 8001b1a:	4694      	mov	ip, r2
 8001b1c:	9b00      	ldr	r3, [sp, #0]
 8001b1e:	427f      	negs	r7, r7
 8001b20:	4463      	add	r3, ip
 8001b22:	1be0      	subs	r0, r4, r7
 8001b24:	001c      	movs	r4, r3
 8001b26:	4286      	cmp	r6, r0
 8001b28:	d100      	bne.n	8001b2c <__aeabi_ddiv+0x384>
 8001b2a:	e0db      	b.n	8001ce4 <__aeabi_ddiv+0x53c>
 8001b2c:	9901      	ldr	r1, [sp, #4]
 8001b2e:	f7fe fb71 	bl	8000214 <__aeabi_uidivmod>
 8001b32:	464a      	mov	r2, r9
 8001b34:	4342      	muls	r2, r0
 8001b36:	040b      	lsls	r3, r1, #16
 8001b38:	0c29      	lsrs	r1, r5, #16
 8001b3a:	0007      	movs	r7, r0
 8001b3c:	4319      	orrs	r1, r3
 8001b3e:	428a      	cmp	r2, r1
 8001b40:	d907      	bls.n	8001b52 <__aeabi_ddiv+0x3aa>
 8001b42:	1989      	adds	r1, r1, r6
 8001b44:	3f01      	subs	r7, #1
 8001b46:	428e      	cmp	r6, r1
 8001b48:	d803      	bhi.n	8001b52 <__aeabi_ddiv+0x3aa>
 8001b4a:	428a      	cmp	r2, r1
 8001b4c:	d901      	bls.n	8001b52 <__aeabi_ddiv+0x3aa>
 8001b4e:	1e87      	subs	r7, r0, #2
 8001b50:	1989      	adds	r1, r1, r6
 8001b52:	1a88      	subs	r0, r1, r2
 8001b54:	9901      	ldr	r1, [sp, #4]
 8001b56:	f7fe fb5d 	bl	8000214 <__aeabi_uidivmod>
 8001b5a:	0409      	lsls	r1, r1, #16
 8001b5c:	464a      	mov	r2, r9
 8001b5e:	4689      	mov	r9, r1
 8001b60:	0429      	lsls	r1, r5, #16
 8001b62:	464d      	mov	r5, r9
 8001b64:	4342      	muls	r2, r0
 8001b66:	0c09      	lsrs	r1, r1, #16
 8001b68:	0003      	movs	r3, r0
 8001b6a:	4329      	orrs	r1, r5
 8001b6c:	428a      	cmp	r2, r1
 8001b6e:	d907      	bls.n	8001b80 <__aeabi_ddiv+0x3d8>
 8001b70:	1989      	adds	r1, r1, r6
 8001b72:	3b01      	subs	r3, #1
 8001b74:	428e      	cmp	r6, r1
 8001b76:	d803      	bhi.n	8001b80 <__aeabi_ddiv+0x3d8>
 8001b78:	428a      	cmp	r2, r1
 8001b7a:	d901      	bls.n	8001b80 <__aeabi_ddiv+0x3d8>
 8001b7c:	1e83      	subs	r3, r0, #2
 8001b7e:	1989      	adds	r1, r1, r6
 8001b80:	043f      	lsls	r7, r7, #16
 8001b82:	1a89      	subs	r1, r1, r2
 8001b84:	003a      	movs	r2, r7
 8001b86:	9f03      	ldr	r7, [sp, #12]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	0038      	movs	r0, r7
 8001b8c:	0413      	lsls	r3, r2, #16
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	4358      	muls	r0, r3
 8001b92:	4681      	mov	r9, r0
 8001b94:	9802      	ldr	r0, [sp, #8]
 8001b96:	0c15      	lsrs	r5, r2, #16
 8001b98:	436f      	muls	r7, r5
 8001b9a:	4343      	muls	r3, r0
 8001b9c:	4345      	muls	r5, r0
 8001b9e:	4648      	mov	r0, r9
 8001ba0:	0c00      	lsrs	r0, r0, #16
 8001ba2:	4684      	mov	ip, r0
 8001ba4:	19db      	adds	r3, r3, r7
 8001ba6:	4463      	add	r3, ip
 8001ba8:	429f      	cmp	r7, r3
 8001baa:	d903      	bls.n	8001bb4 <__aeabi_ddiv+0x40c>
 8001bac:	2080      	movs	r0, #128	; 0x80
 8001bae:	0240      	lsls	r0, r0, #9
 8001bb0:	4684      	mov	ip, r0
 8001bb2:	4465      	add	r5, ip
 8001bb4:	4648      	mov	r0, r9
 8001bb6:	0c1f      	lsrs	r7, r3, #16
 8001bb8:	0400      	lsls	r0, r0, #16
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	0c00      	lsrs	r0, r0, #16
 8001bbe:	197d      	adds	r5, r7, r5
 8001bc0:	1818      	adds	r0, r3, r0
 8001bc2:	42a9      	cmp	r1, r5
 8001bc4:	d200      	bcs.n	8001bc8 <__aeabi_ddiv+0x420>
 8001bc6:	e084      	b.n	8001cd2 <__aeabi_ddiv+0x52a>
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_ddiv+0x424>
 8001bca:	e07f      	b.n	8001ccc <__aeabi_ddiv+0x524>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	e657      	b.n	8001882 <__aeabi_ddiv+0xda>
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	464a      	mov	r2, r9
 8001bd6:	031b      	lsls	r3, r3, #12
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	031b      	lsls	r3, r3, #12
 8001bdc:	0b1b      	lsrs	r3, r3, #12
 8001bde:	46aa      	mov	sl, r5
 8001be0:	4a6f      	ldr	r2, [pc, #444]	; (8001da0 <__aeabi_ddiv+0x5f8>)
 8001be2:	e66f      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 8001be4:	42ba      	cmp	r2, r7
 8001be6:	d900      	bls.n	8001bea <__aeabi_ddiv+0x442>
 8001be8:	e735      	b.n	8001a56 <__aeabi_ddiv+0x2ae>
 8001bea:	464b      	mov	r3, r9
 8001bec:	07dc      	lsls	r4, r3, #31
 8001bee:	0858      	lsrs	r0, r3, #1
 8001bf0:	087b      	lsrs	r3, r7, #1
 8001bf2:	431c      	orrs	r4, r3
 8001bf4:	07ff      	lsls	r7, r7, #31
 8001bf6:	e734      	b.n	8001a62 <__aeabi_ddiv+0x2ba>
 8001bf8:	2400      	movs	r4, #0
 8001bfa:	42af      	cmp	r7, r5
 8001bfc:	d289      	bcs.n	8001b12 <__aeabi_ddiv+0x36a>
 8001bfe:	4447      	add	r7, r8
 8001c00:	4547      	cmp	r7, r8
 8001c02:	41a4      	sbcs	r4, r4
 8001c04:	465b      	mov	r3, fp
 8001c06:	4264      	negs	r4, r4
 8001c08:	19a4      	adds	r4, r4, r6
 8001c0a:	1864      	adds	r4, r4, r1
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	42a6      	cmp	r6, r4
 8001c10:	d21e      	bcs.n	8001c50 <__aeabi_ddiv+0x4a8>
 8001c12:	42a0      	cmp	r0, r4
 8001c14:	d86d      	bhi.n	8001cf2 <__aeabi_ddiv+0x54a>
 8001c16:	d100      	bne.n	8001c1a <__aeabi_ddiv+0x472>
 8001c18:	e0b6      	b.n	8001d88 <__aeabi_ddiv+0x5e0>
 8001c1a:	1a24      	subs	r4, r4, r0
 8001c1c:	469b      	mov	fp, r3
 8001c1e:	e778      	b.n	8001b12 <__aeabi_ddiv+0x36a>
 8001c20:	0003      	movs	r3, r0
 8001c22:	465a      	mov	r2, fp
 8001c24:	3b28      	subs	r3, #40	; 0x28
 8001c26:	409a      	lsls	r2, r3
 8001c28:	2700      	movs	r7, #0
 8001c2a:	4691      	mov	r9, r2
 8001c2c:	e688      	b.n	8001940 <__aeabi_ddiv+0x198>
 8001c2e:	4658      	mov	r0, fp
 8001c30:	f001 f872 	bl	8002d18 <__clzsi2>
 8001c34:	3020      	adds	r0, #32
 8001c36:	e672      	b.n	800191e <__aeabi_ddiv+0x176>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	4652      	mov	r2, sl
 8001c3c:	3b28      	subs	r3, #40	; 0x28
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	4693      	mov	fp, r2
 8001c42:	2200      	movs	r2, #0
 8001c44:	e6b4      	b.n	80019b0 <__aeabi_ddiv+0x208>
 8001c46:	4650      	mov	r0, sl
 8001c48:	f001 f866 	bl	8002d18 <__clzsi2>
 8001c4c:	3020      	adds	r0, #32
 8001c4e:	e69a      	b.n	8001986 <__aeabi_ddiv+0x1de>
 8001c50:	42a6      	cmp	r6, r4
 8001c52:	d1e2      	bne.n	8001c1a <__aeabi_ddiv+0x472>
 8001c54:	45b8      	cmp	r8, r7
 8001c56:	d9dc      	bls.n	8001c12 <__aeabi_ddiv+0x46a>
 8001c58:	1a34      	subs	r4, r6, r0
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	e759      	b.n	8001b12 <__aeabi_ddiv+0x36a>
 8001c5e:	2b1f      	cmp	r3, #31
 8001c60:	dc65      	bgt.n	8001d2e <__aeabi_ddiv+0x586>
 8001c62:	4c50      	ldr	r4, [pc, #320]	; (8001da4 <__aeabi_ddiv+0x5fc>)
 8001c64:	9900      	ldr	r1, [sp, #0]
 8001c66:	46a4      	mov	ip, r4
 8001c68:	465c      	mov	r4, fp
 8001c6a:	4461      	add	r1, ip
 8001c6c:	0008      	movs	r0, r1
 8001c6e:	408c      	lsls	r4, r1
 8001c70:	0011      	movs	r1, r2
 8001c72:	4082      	lsls	r2, r0
 8001c74:	40d9      	lsrs	r1, r3
 8001c76:	1e50      	subs	r0, r2, #1
 8001c78:	4182      	sbcs	r2, r0
 8001c7a:	430c      	orrs	r4, r1
 8001c7c:	4314      	orrs	r4, r2
 8001c7e:	465a      	mov	r2, fp
 8001c80:	40da      	lsrs	r2, r3
 8001c82:	0013      	movs	r3, r2
 8001c84:	0762      	lsls	r2, r4, #29
 8001c86:	d009      	beq.n	8001c9c <__aeabi_ddiv+0x4f4>
 8001c88:	220f      	movs	r2, #15
 8001c8a:	4022      	ands	r2, r4
 8001c8c:	2a04      	cmp	r2, #4
 8001c8e:	d005      	beq.n	8001c9c <__aeabi_ddiv+0x4f4>
 8001c90:	0022      	movs	r2, r4
 8001c92:	1d14      	adds	r4, r2, #4
 8001c94:	4294      	cmp	r4, r2
 8001c96:	4189      	sbcs	r1, r1
 8001c98:	4249      	negs	r1, r1
 8001c9a:	185b      	adds	r3, r3, r1
 8001c9c:	021a      	lsls	r2, r3, #8
 8001c9e:	d562      	bpl.n	8001d66 <__aeabi_ddiv+0x5be>
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2700      	movs	r7, #0
 8001ca6:	e60d      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 8001ca8:	428a      	cmp	r2, r1
 8001caa:	d800      	bhi.n	8001cae <__aeabi_ddiv+0x506>
 8001cac:	e70a      	b.n	8001ac4 <__aeabi_ddiv+0x31c>
 8001cae:	1e83      	subs	r3, r0, #2
 8001cb0:	1989      	adds	r1, r1, r6
 8001cb2:	e707      	b.n	8001ac4 <__aeabi_ddiv+0x31c>
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d100      	bne.n	8001cbe <__aeabi_ddiv+0x516>
 8001cbc:	e5e6      	b.n	800188c <__aeabi_ddiv+0xe4>
 8001cbe:	1d17      	adds	r7, r2, #4
 8001cc0:	4297      	cmp	r7, r2
 8001cc2:	4192      	sbcs	r2, r2
 8001cc4:	4253      	negs	r3, r2
 8001cc6:	449b      	add	fp, r3
 8001cc8:	08fa      	lsrs	r2, r7, #3
 8001cca:	e5e0      	b.n	800188e <__aeabi_ddiv+0xe6>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d100      	bne.n	8001cd2 <__aeabi_ddiv+0x52a>
 8001cd0:	e5d7      	b.n	8001882 <__aeabi_ddiv+0xda>
 8001cd2:	1871      	adds	r1, r6, r1
 8001cd4:	1e53      	subs	r3, r2, #1
 8001cd6:	42b1      	cmp	r1, r6
 8001cd8:	d327      	bcc.n	8001d2a <__aeabi_ddiv+0x582>
 8001cda:	42a9      	cmp	r1, r5
 8001cdc:	d315      	bcc.n	8001d0a <__aeabi_ddiv+0x562>
 8001cde:	d058      	beq.n	8001d92 <__aeabi_ddiv+0x5ea>
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	e773      	b.n	8001bcc <__aeabi_ddiv+0x424>
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_ddiv+0x542>
 8001ce8:	e604      	b.n	80018f4 <__aeabi_ddiv+0x14c>
 8001cea:	2301      	movs	r3, #1
 8001cec:	2200      	movs	r2, #0
 8001cee:	449b      	add	fp, r3
 8001cf0:	e5cd      	b.n	800188e <__aeabi_ddiv+0xe6>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	4447      	add	r7, r8
 8001cf6:	4547      	cmp	r7, r8
 8001cf8:	4189      	sbcs	r1, r1
 8001cfa:	425b      	negs	r3, r3
 8001cfc:	469c      	mov	ip, r3
 8001cfe:	4249      	negs	r1, r1
 8001d00:	1989      	adds	r1, r1, r6
 8001d02:	190c      	adds	r4, r1, r4
 8001d04:	44e3      	add	fp, ip
 8001d06:	1a24      	subs	r4, r4, r0
 8001d08:	e703      	b.n	8001b12 <__aeabi_ddiv+0x36a>
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	005f      	lsls	r7, r3, #1
 8001d0e:	4547      	cmp	r7, r8
 8001d10:	419b      	sbcs	r3, r3
 8001d12:	46b8      	mov	r8, r7
 8001d14:	425b      	negs	r3, r3
 8001d16:	199e      	adds	r6, r3, r6
 8001d18:	3a02      	subs	r2, #2
 8001d1a:	1989      	adds	r1, r1, r6
 8001d1c:	42a9      	cmp	r1, r5
 8001d1e:	d000      	beq.n	8001d22 <__aeabi_ddiv+0x57a>
 8001d20:	e754      	b.n	8001bcc <__aeabi_ddiv+0x424>
 8001d22:	4540      	cmp	r0, r8
 8001d24:	d000      	beq.n	8001d28 <__aeabi_ddiv+0x580>
 8001d26:	e751      	b.n	8001bcc <__aeabi_ddiv+0x424>
 8001d28:	e5ab      	b.n	8001882 <__aeabi_ddiv+0xda>
 8001d2a:	001a      	movs	r2, r3
 8001d2c:	e7f6      	b.n	8001d1c <__aeabi_ddiv+0x574>
 8001d2e:	211f      	movs	r1, #31
 8001d30:	465f      	mov	r7, fp
 8001d32:	4249      	negs	r1, r1
 8001d34:	1b0c      	subs	r4, r1, r4
 8001d36:	40e7      	lsrs	r7, r4
 8001d38:	2b20      	cmp	r3, #32
 8001d3a:	d007      	beq.n	8001d4c <__aeabi_ddiv+0x5a4>
 8001d3c:	491a      	ldr	r1, [pc, #104]	; (8001da8 <__aeabi_ddiv+0x600>)
 8001d3e:	9b00      	ldr	r3, [sp, #0]
 8001d40:	468c      	mov	ip, r1
 8001d42:	4463      	add	r3, ip
 8001d44:	0018      	movs	r0, r3
 8001d46:	465b      	mov	r3, fp
 8001d48:	4083      	lsls	r3, r0
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	1e50      	subs	r0, r2, #1
 8001d4e:	4182      	sbcs	r2, r0
 8001d50:	433a      	orrs	r2, r7
 8001d52:	2707      	movs	r7, #7
 8001d54:	2300      	movs	r3, #0
 8001d56:	4017      	ands	r7, r2
 8001d58:	d009      	beq.n	8001d6e <__aeabi_ddiv+0x5c6>
 8001d5a:	210f      	movs	r1, #15
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	4011      	ands	r1, r2
 8001d60:	0014      	movs	r4, r2
 8001d62:	2904      	cmp	r1, #4
 8001d64:	d195      	bne.n	8001c92 <__aeabi_ddiv+0x4ea>
 8001d66:	0022      	movs	r2, r4
 8001d68:	075f      	lsls	r7, r3, #29
 8001d6a:	025b      	lsls	r3, r3, #9
 8001d6c:	0b1b      	lsrs	r3, r3, #12
 8001d6e:	08d2      	lsrs	r2, r2, #3
 8001d70:	4317      	orrs	r7, r2
 8001d72:	2200      	movs	r2, #0
 8001d74:	e5a6      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	4659      	mov	r1, fp
 8001d7a:	031b      	lsls	r3, r3, #12
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	031b      	lsls	r3, r3, #12
 8001d80:	0017      	movs	r7, r2
 8001d82:	0b1b      	lsrs	r3, r3, #12
 8001d84:	4a06      	ldr	r2, [pc, #24]	; (8001da0 <__aeabi_ddiv+0x5f8>)
 8001d86:	e59d      	b.n	80018c4 <__aeabi_ddiv+0x11c>
 8001d88:	42bd      	cmp	r5, r7
 8001d8a:	d8b2      	bhi.n	8001cf2 <__aeabi_ddiv+0x54a>
 8001d8c:	469b      	mov	fp, r3
 8001d8e:	2400      	movs	r4, #0
 8001d90:	e6bf      	b.n	8001b12 <__aeabi_ddiv+0x36a>
 8001d92:	4580      	cmp	r8, r0
 8001d94:	d3b9      	bcc.n	8001d0a <__aeabi_ddiv+0x562>
 8001d96:	001a      	movs	r2, r3
 8001d98:	e7c3      	b.n	8001d22 <__aeabi_ddiv+0x57a>
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	000003ff 	.word	0x000003ff
 8001da0:	000007ff 	.word	0x000007ff
 8001da4:	0000041e 	.word	0x0000041e
 8001da8:	0000043e 	.word	0x0000043e

08001dac <__eqdf2>:
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	464f      	mov	r7, r9
 8001db0:	4646      	mov	r6, r8
 8001db2:	46d6      	mov	lr, sl
 8001db4:	4684      	mov	ip, r0
 8001db6:	b5c0      	push	{r6, r7, lr}
 8001db8:	4680      	mov	r8, r0
 8001dba:	4e19      	ldr	r6, [pc, #100]	; (8001e20 <__eqdf2+0x74>)
 8001dbc:	0318      	lsls	r0, r3, #12
 8001dbe:	030f      	lsls	r7, r1, #12
 8001dc0:	004d      	lsls	r5, r1, #1
 8001dc2:	0b00      	lsrs	r0, r0, #12
 8001dc4:	005c      	lsls	r4, r3, #1
 8001dc6:	4682      	mov	sl, r0
 8001dc8:	0b3f      	lsrs	r7, r7, #12
 8001dca:	0d6d      	lsrs	r5, r5, #21
 8001dcc:	0fc9      	lsrs	r1, r1, #31
 8001dce:	4691      	mov	r9, r2
 8001dd0:	0d64      	lsrs	r4, r4, #21
 8001dd2:	0fdb      	lsrs	r3, r3, #31
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	42b5      	cmp	r5, r6
 8001dd8:	d00a      	beq.n	8001df0 <__eqdf2+0x44>
 8001dda:	42b4      	cmp	r4, r6
 8001ddc:	d003      	beq.n	8001de6 <__eqdf2+0x3a>
 8001dde:	42a5      	cmp	r5, r4
 8001de0:	d101      	bne.n	8001de6 <__eqdf2+0x3a>
 8001de2:	4557      	cmp	r7, sl
 8001de4:	d00c      	beq.n	8001e00 <__eqdf2+0x54>
 8001de6:	bc1c      	pop	{r2, r3, r4}
 8001de8:	4690      	mov	r8, r2
 8001dea:	4699      	mov	r9, r3
 8001dec:	46a2      	mov	sl, r4
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df0:	4666      	mov	r6, ip
 8001df2:	433e      	orrs	r6, r7
 8001df4:	d1f7      	bne.n	8001de6 <__eqdf2+0x3a>
 8001df6:	42ac      	cmp	r4, r5
 8001df8:	d1f5      	bne.n	8001de6 <__eqdf2+0x3a>
 8001dfa:	4654      	mov	r4, sl
 8001dfc:	4314      	orrs	r4, r2
 8001dfe:	d1f2      	bne.n	8001de6 <__eqdf2+0x3a>
 8001e00:	2001      	movs	r0, #1
 8001e02:	45c8      	cmp	r8, r9
 8001e04:	d1ef      	bne.n	8001de6 <__eqdf2+0x3a>
 8001e06:	4299      	cmp	r1, r3
 8001e08:	d007      	beq.n	8001e1a <__eqdf2+0x6e>
 8001e0a:	2d00      	cmp	r5, #0
 8001e0c:	d1eb      	bne.n	8001de6 <__eqdf2+0x3a>
 8001e0e:	4663      	mov	r3, ip
 8001e10:	431f      	orrs	r7, r3
 8001e12:	0038      	movs	r0, r7
 8001e14:	1e47      	subs	r7, r0, #1
 8001e16:	41b8      	sbcs	r0, r7
 8001e18:	e7e5      	b.n	8001de6 <__eqdf2+0x3a>
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	e7e3      	b.n	8001de6 <__eqdf2+0x3a>
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	000007ff 	.word	0x000007ff

08001e24 <__gedf2>:
 8001e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e26:	464f      	mov	r7, r9
 8001e28:	4646      	mov	r6, r8
 8001e2a:	46d6      	mov	lr, sl
 8001e2c:	004d      	lsls	r5, r1, #1
 8001e2e:	b5c0      	push	{r6, r7, lr}
 8001e30:	030e      	lsls	r6, r1, #12
 8001e32:	0fc9      	lsrs	r1, r1, #31
 8001e34:	468a      	mov	sl, r1
 8001e36:	492c      	ldr	r1, [pc, #176]	; (8001ee8 <__gedf2+0xc4>)
 8001e38:	031f      	lsls	r7, r3, #12
 8001e3a:	005c      	lsls	r4, r3, #1
 8001e3c:	4680      	mov	r8, r0
 8001e3e:	0b36      	lsrs	r6, r6, #12
 8001e40:	0d6d      	lsrs	r5, r5, #21
 8001e42:	4691      	mov	r9, r2
 8001e44:	0b3f      	lsrs	r7, r7, #12
 8001e46:	0d64      	lsrs	r4, r4, #21
 8001e48:	0fdb      	lsrs	r3, r3, #31
 8001e4a:	428d      	cmp	r5, r1
 8001e4c:	d01e      	beq.n	8001e8c <__gedf2+0x68>
 8001e4e:	428c      	cmp	r4, r1
 8001e50:	d016      	beq.n	8001e80 <__gedf2+0x5c>
 8001e52:	2d00      	cmp	r5, #0
 8001e54:	d11e      	bne.n	8001e94 <__gedf2+0x70>
 8001e56:	4330      	orrs	r0, r6
 8001e58:	4684      	mov	ip, r0
 8001e5a:	2c00      	cmp	r4, #0
 8001e5c:	d101      	bne.n	8001e62 <__gedf2+0x3e>
 8001e5e:	433a      	orrs	r2, r7
 8001e60:	d023      	beq.n	8001eaa <__gedf2+0x86>
 8001e62:	4662      	mov	r2, ip
 8001e64:	2a00      	cmp	r2, #0
 8001e66:	d01a      	beq.n	8001e9e <__gedf2+0x7a>
 8001e68:	459a      	cmp	sl, r3
 8001e6a:	d029      	beq.n	8001ec0 <__gedf2+0x9c>
 8001e6c:	4651      	mov	r1, sl
 8001e6e:	2002      	movs	r0, #2
 8001e70:	3901      	subs	r1, #1
 8001e72:	4008      	ands	r0, r1
 8001e74:	3801      	subs	r0, #1
 8001e76:	bc1c      	pop	{r2, r3, r4}
 8001e78:	4690      	mov	r8, r2
 8001e7a:	4699      	mov	r9, r3
 8001e7c:	46a2      	mov	sl, r4
 8001e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e80:	0039      	movs	r1, r7
 8001e82:	4311      	orrs	r1, r2
 8001e84:	d0e5      	beq.n	8001e52 <__gedf2+0x2e>
 8001e86:	2002      	movs	r0, #2
 8001e88:	4240      	negs	r0, r0
 8001e8a:	e7f4      	b.n	8001e76 <__gedf2+0x52>
 8001e8c:	4330      	orrs	r0, r6
 8001e8e:	d1fa      	bne.n	8001e86 <__gedf2+0x62>
 8001e90:	42ac      	cmp	r4, r5
 8001e92:	d00f      	beq.n	8001eb4 <__gedf2+0x90>
 8001e94:	2c00      	cmp	r4, #0
 8001e96:	d10f      	bne.n	8001eb8 <__gedf2+0x94>
 8001e98:	433a      	orrs	r2, r7
 8001e9a:	d0e7      	beq.n	8001e6c <__gedf2+0x48>
 8001e9c:	e00c      	b.n	8001eb8 <__gedf2+0x94>
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	e7e5      	b.n	8001e76 <__gedf2+0x52>
 8001eaa:	4663      	mov	r3, ip
 8001eac:	2000      	movs	r0, #0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0e1      	beq.n	8001e76 <__gedf2+0x52>
 8001eb2:	e7db      	b.n	8001e6c <__gedf2+0x48>
 8001eb4:	433a      	orrs	r2, r7
 8001eb6:	d1e6      	bne.n	8001e86 <__gedf2+0x62>
 8001eb8:	459a      	cmp	sl, r3
 8001eba:	d1d7      	bne.n	8001e6c <__gedf2+0x48>
 8001ebc:	42a5      	cmp	r5, r4
 8001ebe:	dcd5      	bgt.n	8001e6c <__gedf2+0x48>
 8001ec0:	42a5      	cmp	r5, r4
 8001ec2:	db05      	blt.n	8001ed0 <__gedf2+0xac>
 8001ec4:	42be      	cmp	r6, r7
 8001ec6:	d8d1      	bhi.n	8001e6c <__gedf2+0x48>
 8001ec8:	d008      	beq.n	8001edc <__gedf2+0xb8>
 8001eca:	2000      	movs	r0, #0
 8001ecc:	42be      	cmp	r6, r7
 8001ece:	d2d2      	bcs.n	8001e76 <__gedf2+0x52>
 8001ed0:	4650      	mov	r0, sl
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	3801      	subs	r0, #1
 8001ed6:	4398      	bics	r0, r3
 8001ed8:	3001      	adds	r0, #1
 8001eda:	e7cc      	b.n	8001e76 <__gedf2+0x52>
 8001edc:	45c8      	cmp	r8, r9
 8001ede:	d8c5      	bhi.n	8001e6c <__gedf2+0x48>
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	45c8      	cmp	r8, r9
 8001ee4:	d3f4      	bcc.n	8001ed0 <__gedf2+0xac>
 8001ee6:	e7c6      	b.n	8001e76 <__gedf2+0x52>
 8001ee8:	000007ff 	.word	0x000007ff

08001eec <__ledf2>:
 8001eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eee:	464f      	mov	r7, r9
 8001ef0:	4646      	mov	r6, r8
 8001ef2:	46d6      	mov	lr, sl
 8001ef4:	004d      	lsls	r5, r1, #1
 8001ef6:	b5c0      	push	{r6, r7, lr}
 8001ef8:	030e      	lsls	r6, r1, #12
 8001efa:	0fc9      	lsrs	r1, r1, #31
 8001efc:	468a      	mov	sl, r1
 8001efe:	492e      	ldr	r1, [pc, #184]	; (8001fb8 <__ledf2+0xcc>)
 8001f00:	031f      	lsls	r7, r3, #12
 8001f02:	005c      	lsls	r4, r3, #1
 8001f04:	4680      	mov	r8, r0
 8001f06:	0b36      	lsrs	r6, r6, #12
 8001f08:	0d6d      	lsrs	r5, r5, #21
 8001f0a:	4691      	mov	r9, r2
 8001f0c:	0b3f      	lsrs	r7, r7, #12
 8001f0e:	0d64      	lsrs	r4, r4, #21
 8001f10:	0fdb      	lsrs	r3, r3, #31
 8001f12:	428d      	cmp	r5, r1
 8001f14:	d018      	beq.n	8001f48 <__ledf2+0x5c>
 8001f16:	428c      	cmp	r4, r1
 8001f18:	d011      	beq.n	8001f3e <__ledf2+0x52>
 8001f1a:	2d00      	cmp	r5, #0
 8001f1c:	d118      	bne.n	8001f50 <__ledf2+0x64>
 8001f1e:	4330      	orrs	r0, r6
 8001f20:	4684      	mov	ip, r0
 8001f22:	2c00      	cmp	r4, #0
 8001f24:	d11e      	bne.n	8001f64 <__ledf2+0x78>
 8001f26:	433a      	orrs	r2, r7
 8001f28:	d11c      	bne.n	8001f64 <__ledf2+0x78>
 8001f2a:	4663      	mov	r3, ip
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d030      	beq.n	8001f94 <__ledf2+0xa8>
 8001f32:	4651      	mov	r1, sl
 8001f34:	2002      	movs	r0, #2
 8001f36:	3901      	subs	r1, #1
 8001f38:	4008      	ands	r0, r1
 8001f3a:	3801      	subs	r0, #1
 8001f3c:	e02a      	b.n	8001f94 <__ledf2+0xa8>
 8001f3e:	0039      	movs	r1, r7
 8001f40:	4311      	orrs	r1, r2
 8001f42:	d0ea      	beq.n	8001f1a <__ledf2+0x2e>
 8001f44:	2002      	movs	r0, #2
 8001f46:	e025      	b.n	8001f94 <__ledf2+0xa8>
 8001f48:	4330      	orrs	r0, r6
 8001f4a:	d1fb      	bne.n	8001f44 <__ledf2+0x58>
 8001f4c:	42ac      	cmp	r4, r5
 8001f4e:	d026      	beq.n	8001f9e <__ledf2+0xb2>
 8001f50:	2c00      	cmp	r4, #0
 8001f52:	d126      	bne.n	8001fa2 <__ledf2+0xb6>
 8001f54:	433a      	orrs	r2, r7
 8001f56:	d124      	bne.n	8001fa2 <__ledf2+0xb6>
 8001f58:	4651      	mov	r1, sl
 8001f5a:	2002      	movs	r0, #2
 8001f5c:	3901      	subs	r1, #1
 8001f5e:	4008      	ands	r0, r1
 8001f60:	3801      	subs	r0, #1
 8001f62:	e017      	b.n	8001f94 <__ledf2+0xa8>
 8001f64:	4662      	mov	r2, ip
 8001f66:	2a00      	cmp	r2, #0
 8001f68:	d00f      	beq.n	8001f8a <__ledf2+0x9e>
 8001f6a:	459a      	cmp	sl, r3
 8001f6c:	d1e1      	bne.n	8001f32 <__ledf2+0x46>
 8001f6e:	42a5      	cmp	r5, r4
 8001f70:	db05      	blt.n	8001f7e <__ledf2+0x92>
 8001f72:	42be      	cmp	r6, r7
 8001f74:	d8dd      	bhi.n	8001f32 <__ledf2+0x46>
 8001f76:	d019      	beq.n	8001fac <__ledf2+0xc0>
 8001f78:	2000      	movs	r0, #0
 8001f7a:	42be      	cmp	r6, r7
 8001f7c:	d20a      	bcs.n	8001f94 <__ledf2+0xa8>
 8001f7e:	4650      	mov	r0, sl
 8001f80:	2301      	movs	r3, #1
 8001f82:	3801      	subs	r0, #1
 8001f84:	4398      	bics	r0, r3
 8001f86:	3001      	adds	r0, #1
 8001f88:	e004      	b.n	8001f94 <__ledf2+0xa8>
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	4393      	bics	r3, r2
 8001f90:	0018      	movs	r0, r3
 8001f92:	3001      	adds	r0, #1
 8001f94:	bc1c      	pop	{r2, r3, r4}
 8001f96:	4690      	mov	r8, r2
 8001f98:	4699      	mov	r9, r3
 8001f9a:	46a2      	mov	sl, r4
 8001f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f9e:	433a      	orrs	r2, r7
 8001fa0:	d1d0      	bne.n	8001f44 <__ledf2+0x58>
 8001fa2:	459a      	cmp	sl, r3
 8001fa4:	d1c5      	bne.n	8001f32 <__ledf2+0x46>
 8001fa6:	42a5      	cmp	r5, r4
 8001fa8:	dcc3      	bgt.n	8001f32 <__ledf2+0x46>
 8001faa:	e7e0      	b.n	8001f6e <__ledf2+0x82>
 8001fac:	45c8      	cmp	r8, r9
 8001fae:	d8c0      	bhi.n	8001f32 <__ledf2+0x46>
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	45c8      	cmp	r8, r9
 8001fb4:	d3e3      	bcc.n	8001f7e <__ledf2+0x92>
 8001fb6:	e7ed      	b.n	8001f94 <__ledf2+0xa8>
 8001fb8:	000007ff 	.word	0x000007ff

08001fbc <__aeabi_dmul>:
 8001fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fbe:	4657      	mov	r7, sl
 8001fc0:	46de      	mov	lr, fp
 8001fc2:	464e      	mov	r6, r9
 8001fc4:	4645      	mov	r5, r8
 8001fc6:	b5e0      	push	{r5, r6, r7, lr}
 8001fc8:	4683      	mov	fp, r0
 8001fca:	0006      	movs	r6, r0
 8001fcc:	030f      	lsls	r7, r1, #12
 8001fce:	0048      	lsls	r0, r1, #1
 8001fd0:	b087      	sub	sp, #28
 8001fd2:	4692      	mov	sl, r2
 8001fd4:	001d      	movs	r5, r3
 8001fd6:	0b3f      	lsrs	r7, r7, #12
 8001fd8:	0d40      	lsrs	r0, r0, #21
 8001fda:	0fcc      	lsrs	r4, r1, #31
 8001fdc:	2800      	cmp	r0, #0
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dmul+0x26>
 8001fe0:	e06f      	b.n	80020c2 <__aeabi_dmul+0x106>
 8001fe2:	4bde      	ldr	r3, [pc, #888]	; (800235c <__aeabi_dmul+0x3a0>)
 8001fe4:	4298      	cmp	r0, r3
 8001fe6:	d038      	beq.n	800205a <__aeabi_dmul+0x9e>
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	00ff      	lsls	r7, r7, #3
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	431f      	orrs	r7, r3
 8001ff0:	0f73      	lsrs	r3, r6, #29
 8001ff2:	433b      	orrs	r3, r7
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	4bda      	ldr	r3, [pc, #872]	; (8002360 <__aeabi_dmul+0x3a4>)
 8001ff8:	2700      	movs	r7, #0
 8001ffa:	4699      	mov	r9, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	469b      	mov	fp, r3
 8002000:	00f6      	lsls	r6, r6, #3
 8002002:	4481      	add	r9, r0
 8002004:	032b      	lsls	r3, r5, #12
 8002006:	0069      	lsls	r1, r5, #1
 8002008:	0b1b      	lsrs	r3, r3, #12
 800200a:	4652      	mov	r2, sl
 800200c:	4698      	mov	r8, r3
 800200e:	0d49      	lsrs	r1, r1, #21
 8002010:	0fed      	lsrs	r5, r5, #31
 8002012:	2900      	cmp	r1, #0
 8002014:	d100      	bne.n	8002018 <__aeabi_dmul+0x5c>
 8002016:	e085      	b.n	8002124 <__aeabi_dmul+0x168>
 8002018:	4bd0      	ldr	r3, [pc, #832]	; (800235c <__aeabi_dmul+0x3a0>)
 800201a:	4299      	cmp	r1, r3
 800201c:	d100      	bne.n	8002020 <__aeabi_dmul+0x64>
 800201e:	e073      	b.n	8002108 <__aeabi_dmul+0x14c>
 8002020:	4643      	mov	r3, r8
 8002022:	00da      	lsls	r2, r3, #3
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	041b      	lsls	r3, r3, #16
 8002028:	4313      	orrs	r3, r2
 800202a:	4652      	mov	r2, sl
 800202c:	48cc      	ldr	r0, [pc, #816]	; (8002360 <__aeabi_dmul+0x3a4>)
 800202e:	0f52      	lsrs	r2, r2, #29
 8002030:	4684      	mov	ip, r0
 8002032:	4313      	orrs	r3, r2
 8002034:	4652      	mov	r2, sl
 8002036:	2000      	movs	r0, #0
 8002038:	4461      	add	r1, ip
 800203a:	00d2      	lsls	r2, r2, #3
 800203c:	4489      	add	r9, r1
 800203e:	0021      	movs	r1, r4
 8002040:	4069      	eors	r1, r5
 8002042:	9100      	str	r1, [sp, #0]
 8002044:	468c      	mov	ip, r1
 8002046:	2101      	movs	r1, #1
 8002048:	4449      	add	r1, r9
 800204a:	468a      	mov	sl, r1
 800204c:	2f0f      	cmp	r7, #15
 800204e:	d900      	bls.n	8002052 <__aeabi_dmul+0x96>
 8002050:	e090      	b.n	8002174 <__aeabi_dmul+0x1b8>
 8002052:	49c4      	ldr	r1, [pc, #784]	; (8002364 <__aeabi_dmul+0x3a8>)
 8002054:	00bf      	lsls	r7, r7, #2
 8002056:	59cf      	ldr	r7, [r1, r7]
 8002058:	46bf      	mov	pc, r7
 800205a:	465b      	mov	r3, fp
 800205c:	433b      	orrs	r3, r7
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	d000      	beq.n	8002064 <__aeabi_dmul+0xa8>
 8002062:	e16a      	b.n	800233a <__aeabi_dmul+0x37e>
 8002064:	2302      	movs	r3, #2
 8002066:	2708      	movs	r7, #8
 8002068:	2600      	movs	r6, #0
 800206a:	4681      	mov	r9, r0
 800206c:	469b      	mov	fp, r3
 800206e:	e7c9      	b.n	8002004 <__aeabi_dmul+0x48>
 8002070:	0032      	movs	r2, r6
 8002072:	4658      	mov	r0, fp
 8002074:	9b01      	ldr	r3, [sp, #4]
 8002076:	4661      	mov	r1, ip
 8002078:	9100      	str	r1, [sp, #0]
 800207a:	2802      	cmp	r0, #2
 800207c:	d100      	bne.n	8002080 <__aeabi_dmul+0xc4>
 800207e:	e075      	b.n	800216c <__aeabi_dmul+0x1b0>
 8002080:	2803      	cmp	r0, #3
 8002082:	d100      	bne.n	8002086 <__aeabi_dmul+0xca>
 8002084:	e1fe      	b.n	8002484 <__aeabi_dmul+0x4c8>
 8002086:	2801      	cmp	r0, #1
 8002088:	d000      	beq.n	800208c <__aeabi_dmul+0xd0>
 800208a:	e12c      	b.n	80022e6 <__aeabi_dmul+0x32a>
 800208c:	2300      	movs	r3, #0
 800208e:	2700      	movs	r7, #0
 8002090:	2600      	movs	r6, #0
 8002092:	2500      	movs	r5, #0
 8002094:	033f      	lsls	r7, r7, #12
 8002096:	0d2a      	lsrs	r2, r5, #20
 8002098:	0b3f      	lsrs	r7, r7, #12
 800209a:	48b3      	ldr	r0, [pc, #716]	; (8002368 <__aeabi_dmul+0x3ac>)
 800209c:	0512      	lsls	r2, r2, #20
 800209e:	433a      	orrs	r2, r7
 80020a0:	4002      	ands	r2, r0
 80020a2:	051b      	lsls	r3, r3, #20
 80020a4:	4313      	orrs	r3, r2
 80020a6:	9a00      	ldr	r2, [sp, #0]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	07d1      	lsls	r1, r2, #31
 80020ac:	085b      	lsrs	r3, r3, #1
 80020ae:	430b      	orrs	r3, r1
 80020b0:	0030      	movs	r0, r6
 80020b2:	0019      	movs	r1, r3
 80020b4:	b007      	add	sp, #28
 80020b6:	bc3c      	pop	{r2, r3, r4, r5}
 80020b8:	4690      	mov	r8, r2
 80020ba:	4699      	mov	r9, r3
 80020bc:	46a2      	mov	sl, r4
 80020be:	46ab      	mov	fp, r5
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	465b      	mov	r3, fp
 80020c4:	433b      	orrs	r3, r7
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	d100      	bne.n	80020cc <__aeabi_dmul+0x110>
 80020ca:	e12f      	b.n	800232c <__aeabi_dmul+0x370>
 80020cc:	2f00      	cmp	r7, #0
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dmul+0x116>
 80020d0:	e1a5      	b.n	800241e <__aeabi_dmul+0x462>
 80020d2:	0038      	movs	r0, r7
 80020d4:	f000 fe20 	bl	8002d18 <__clzsi2>
 80020d8:	0003      	movs	r3, r0
 80020da:	3b0b      	subs	r3, #11
 80020dc:	2b1c      	cmp	r3, #28
 80020de:	dd00      	ble.n	80020e2 <__aeabi_dmul+0x126>
 80020e0:	e196      	b.n	8002410 <__aeabi_dmul+0x454>
 80020e2:	221d      	movs	r2, #29
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	465a      	mov	r2, fp
 80020e8:	0001      	movs	r1, r0
 80020ea:	40da      	lsrs	r2, r3
 80020ec:	465e      	mov	r6, fp
 80020ee:	3908      	subs	r1, #8
 80020f0:	408f      	lsls	r7, r1
 80020f2:	0013      	movs	r3, r2
 80020f4:	408e      	lsls	r6, r1
 80020f6:	433b      	orrs	r3, r7
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	4b9c      	ldr	r3, [pc, #624]	; (800236c <__aeabi_dmul+0x3b0>)
 80020fc:	2700      	movs	r7, #0
 80020fe:	1a1b      	subs	r3, r3, r0
 8002100:	4699      	mov	r9, r3
 8002102:	2300      	movs	r3, #0
 8002104:	469b      	mov	fp, r3
 8002106:	e77d      	b.n	8002004 <__aeabi_dmul+0x48>
 8002108:	4641      	mov	r1, r8
 800210a:	4653      	mov	r3, sl
 800210c:	430b      	orrs	r3, r1
 800210e:	4993      	ldr	r1, [pc, #588]	; (800235c <__aeabi_dmul+0x3a0>)
 8002110:	468c      	mov	ip, r1
 8002112:	44e1      	add	r9, ip
 8002114:	2b00      	cmp	r3, #0
 8002116:	d000      	beq.n	800211a <__aeabi_dmul+0x15e>
 8002118:	e11a      	b.n	8002350 <__aeabi_dmul+0x394>
 800211a:	2202      	movs	r2, #2
 800211c:	2002      	movs	r0, #2
 800211e:	4317      	orrs	r7, r2
 8002120:	2200      	movs	r2, #0
 8002122:	e78c      	b.n	800203e <__aeabi_dmul+0x82>
 8002124:	4313      	orrs	r3, r2
 8002126:	d100      	bne.n	800212a <__aeabi_dmul+0x16e>
 8002128:	e10d      	b.n	8002346 <__aeabi_dmul+0x38a>
 800212a:	4643      	mov	r3, r8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d100      	bne.n	8002132 <__aeabi_dmul+0x176>
 8002130:	e181      	b.n	8002436 <__aeabi_dmul+0x47a>
 8002132:	4640      	mov	r0, r8
 8002134:	f000 fdf0 	bl	8002d18 <__clzsi2>
 8002138:	0002      	movs	r2, r0
 800213a:	3a0b      	subs	r2, #11
 800213c:	2a1c      	cmp	r2, #28
 800213e:	dd00      	ble.n	8002142 <__aeabi_dmul+0x186>
 8002140:	e172      	b.n	8002428 <__aeabi_dmul+0x46c>
 8002142:	0001      	movs	r1, r0
 8002144:	4643      	mov	r3, r8
 8002146:	3908      	subs	r1, #8
 8002148:	408b      	lsls	r3, r1
 800214a:	4698      	mov	r8, r3
 800214c:	231d      	movs	r3, #29
 800214e:	1a9a      	subs	r2, r3, r2
 8002150:	4653      	mov	r3, sl
 8002152:	40d3      	lsrs	r3, r2
 8002154:	001a      	movs	r2, r3
 8002156:	4643      	mov	r3, r8
 8002158:	4313      	orrs	r3, r2
 800215a:	4652      	mov	r2, sl
 800215c:	408a      	lsls	r2, r1
 800215e:	4649      	mov	r1, r9
 8002160:	1a08      	subs	r0, r1, r0
 8002162:	4982      	ldr	r1, [pc, #520]	; (800236c <__aeabi_dmul+0x3b0>)
 8002164:	4689      	mov	r9, r1
 8002166:	4481      	add	r9, r0
 8002168:	2000      	movs	r0, #0
 800216a:	e768      	b.n	800203e <__aeabi_dmul+0x82>
 800216c:	4b7b      	ldr	r3, [pc, #492]	; (800235c <__aeabi_dmul+0x3a0>)
 800216e:	2700      	movs	r7, #0
 8002170:	2600      	movs	r6, #0
 8002172:	e78e      	b.n	8002092 <__aeabi_dmul+0xd6>
 8002174:	0c14      	lsrs	r4, r2, #16
 8002176:	0412      	lsls	r2, r2, #16
 8002178:	0c12      	lsrs	r2, r2, #16
 800217a:	0011      	movs	r1, r2
 800217c:	0c37      	lsrs	r7, r6, #16
 800217e:	0436      	lsls	r6, r6, #16
 8002180:	0c35      	lsrs	r5, r6, #16
 8002182:	4379      	muls	r1, r7
 8002184:	0028      	movs	r0, r5
 8002186:	468c      	mov	ip, r1
 8002188:	002e      	movs	r6, r5
 800218a:	4360      	muls	r0, r4
 800218c:	4460      	add	r0, ip
 800218e:	4683      	mov	fp, r0
 8002190:	4356      	muls	r6, r2
 8002192:	0021      	movs	r1, r4
 8002194:	0c30      	lsrs	r0, r6, #16
 8002196:	4680      	mov	r8, r0
 8002198:	4658      	mov	r0, fp
 800219a:	4379      	muls	r1, r7
 800219c:	4440      	add	r0, r8
 800219e:	9102      	str	r1, [sp, #8]
 80021a0:	4584      	cmp	ip, r0
 80021a2:	d906      	bls.n	80021b2 <__aeabi_dmul+0x1f6>
 80021a4:	4688      	mov	r8, r1
 80021a6:	2180      	movs	r1, #128	; 0x80
 80021a8:	0249      	lsls	r1, r1, #9
 80021aa:	468c      	mov	ip, r1
 80021ac:	44e0      	add	r8, ip
 80021ae:	4641      	mov	r1, r8
 80021b0:	9102      	str	r1, [sp, #8]
 80021b2:	0436      	lsls	r6, r6, #16
 80021b4:	0c01      	lsrs	r1, r0, #16
 80021b6:	0c36      	lsrs	r6, r6, #16
 80021b8:	0400      	lsls	r0, r0, #16
 80021ba:	468b      	mov	fp, r1
 80021bc:	1981      	adds	r1, r0, r6
 80021be:	0c1e      	lsrs	r6, r3, #16
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	9103      	str	r1, [sp, #12]
 80021c6:	0019      	movs	r1, r3
 80021c8:	4379      	muls	r1, r7
 80021ca:	468c      	mov	ip, r1
 80021cc:	0028      	movs	r0, r5
 80021ce:	4375      	muls	r5, r6
 80021d0:	4465      	add	r5, ip
 80021d2:	46a8      	mov	r8, r5
 80021d4:	4358      	muls	r0, r3
 80021d6:	0c05      	lsrs	r5, r0, #16
 80021d8:	4445      	add	r5, r8
 80021da:	4377      	muls	r7, r6
 80021dc:	42a9      	cmp	r1, r5
 80021de:	d903      	bls.n	80021e8 <__aeabi_dmul+0x22c>
 80021e0:	2180      	movs	r1, #128	; 0x80
 80021e2:	0249      	lsls	r1, r1, #9
 80021e4:	468c      	mov	ip, r1
 80021e6:	4467      	add	r7, ip
 80021e8:	0c29      	lsrs	r1, r5, #16
 80021ea:	468c      	mov	ip, r1
 80021ec:	0039      	movs	r1, r7
 80021ee:	0400      	lsls	r0, r0, #16
 80021f0:	0c00      	lsrs	r0, r0, #16
 80021f2:	042d      	lsls	r5, r5, #16
 80021f4:	182d      	adds	r5, r5, r0
 80021f6:	4461      	add	r1, ip
 80021f8:	44ab      	add	fp, r5
 80021fa:	9105      	str	r1, [sp, #20]
 80021fc:	4659      	mov	r1, fp
 80021fe:	9104      	str	r1, [sp, #16]
 8002200:	9901      	ldr	r1, [sp, #4]
 8002202:	040f      	lsls	r7, r1, #16
 8002204:	0c3f      	lsrs	r7, r7, #16
 8002206:	0c08      	lsrs	r0, r1, #16
 8002208:	0039      	movs	r1, r7
 800220a:	4351      	muls	r1, r2
 800220c:	4342      	muls	r2, r0
 800220e:	4690      	mov	r8, r2
 8002210:	0002      	movs	r2, r0
 8002212:	468c      	mov	ip, r1
 8002214:	0c09      	lsrs	r1, r1, #16
 8002216:	468b      	mov	fp, r1
 8002218:	4362      	muls	r2, r4
 800221a:	437c      	muls	r4, r7
 800221c:	4444      	add	r4, r8
 800221e:	445c      	add	r4, fp
 8002220:	45a0      	cmp	r8, r4
 8002222:	d903      	bls.n	800222c <__aeabi_dmul+0x270>
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	0249      	lsls	r1, r1, #9
 8002228:	4688      	mov	r8, r1
 800222a:	4442      	add	r2, r8
 800222c:	0c21      	lsrs	r1, r4, #16
 800222e:	4688      	mov	r8, r1
 8002230:	4661      	mov	r1, ip
 8002232:	0409      	lsls	r1, r1, #16
 8002234:	0c09      	lsrs	r1, r1, #16
 8002236:	468c      	mov	ip, r1
 8002238:	0039      	movs	r1, r7
 800223a:	4359      	muls	r1, r3
 800223c:	4343      	muls	r3, r0
 800223e:	4370      	muls	r0, r6
 8002240:	437e      	muls	r6, r7
 8002242:	0c0f      	lsrs	r7, r1, #16
 8002244:	18f6      	adds	r6, r6, r3
 8002246:	0424      	lsls	r4, r4, #16
 8002248:	19be      	adds	r6, r7, r6
 800224a:	4464      	add	r4, ip
 800224c:	4442      	add	r2, r8
 800224e:	468c      	mov	ip, r1
 8002250:	42b3      	cmp	r3, r6
 8002252:	d903      	bls.n	800225c <__aeabi_dmul+0x2a0>
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	025b      	lsls	r3, r3, #9
 8002258:	4698      	mov	r8, r3
 800225a:	4440      	add	r0, r8
 800225c:	9b02      	ldr	r3, [sp, #8]
 800225e:	4661      	mov	r1, ip
 8002260:	4698      	mov	r8, r3
 8002262:	9b04      	ldr	r3, [sp, #16]
 8002264:	0437      	lsls	r7, r6, #16
 8002266:	4443      	add	r3, r8
 8002268:	469b      	mov	fp, r3
 800226a:	45ab      	cmp	fp, r5
 800226c:	41ad      	sbcs	r5, r5
 800226e:	426b      	negs	r3, r5
 8002270:	040d      	lsls	r5, r1, #16
 8002272:	9905      	ldr	r1, [sp, #20]
 8002274:	0c2d      	lsrs	r5, r5, #16
 8002276:	468c      	mov	ip, r1
 8002278:	197f      	adds	r7, r7, r5
 800227a:	4467      	add	r7, ip
 800227c:	18fd      	adds	r5, r7, r3
 800227e:	46a8      	mov	r8, r5
 8002280:	465d      	mov	r5, fp
 8002282:	192d      	adds	r5, r5, r4
 8002284:	42a5      	cmp	r5, r4
 8002286:	41a4      	sbcs	r4, r4
 8002288:	4693      	mov	fp, r2
 800228a:	4264      	negs	r4, r4
 800228c:	46a4      	mov	ip, r4
 800228e:	44c3      	add	fp, r8
 8002290:	44dc      	add	ip, fp
 8002292:	428f      	cmp	r7, r1
 8002294:	41bf      	sbcs	r7, r7
 8002296:	4598      	cmp	r8, r3
 8002298:	419b      	sbcs	r3, r3
 800229a:	4593      	cmp	fp, r2
 800229c:	4192      	sbcs	r2, r2
 800229e:	45a4      	cmp	ip, r4
 80022a0:	41a4      	sbcs	r4, r4
 80022a2:	425b      	negs	r3, r3
 80022a4:	427f      	negs	r7, r7
 80022a6:	431f      	orrs	r7, r3
 80022a8:	0c36      	lsrs	r6, r6, #16
 80022aa:	4252      	negs	r2, r2
 80022ac:	4264      	negs	r4, r4
 80022ae:	19bf      	adds	r7, r7, r6
 80022b0:	4322      	orrs	r2, r4
 80022b2:	18bf      	adds	r7, r7, r2
 80022b4:	4662      	mov	r2, ip
 80022b6:	1838      	adds	r0, r7, r0
 80022b8:	0243      	lsls	r3, r0, #9
 80022ba:	0dd2      	lsrs	r2, r2, #23
 80022bc:	9903      	ldr	r1, [sp, #12]
 80022be:	4313      	orrs	r3, r2
 80022c0:	026a      	lsls	r2, r5, #9
 80022c2:	430a      	orrs	r2, r1
 80022c4:	1e50      	subs	r0, r2, #1
 80022c6:	4182      	sbcs	r2, r0
 80022c8:	4661      	mov	r1, ip
 80022ca:	0ded      	lsrs	r5, r5, #23
 80022cc:	432a      	orrs	r2, r5
 80022ce:	024e      	lsls	r6, r1, #9
 80022d0:	4332      	orrs	r2, r6
 80022d2:	01d9      	lsls	r1, r3, #7
 80022d4:	d400      	bmi.n	80022d8 <__aeabi_dmul+0x31c>
 80022d6:	e0b3      	b.n	8002440 <__aeabi_dmul+0x484>
 80022d8:	2601      	movs	r6, #1
 80022da:	0850      	lsrs	r0, r2, #1
 80022dc:	4032      	ands	r2, r6
 80022de:	4302      	orrs	r2, r0
 80022e0:	07de      	lsls	r6, r3, #31
 80022e2:	4332      	orrs	r2, r6
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	4c22      	ldr	r4, [pc, #136]	; (8002370 <__aeabi_dmul+0x3b4>)
 80022e8:	4454      	add	r4, sl
 80022ea:	2c00      	cmp	r4, #0
 80022ec:	dd62      	ble.n	80023b4 <__aeabi_dmul+0x3f8>
 80022ee:	0751      	lsls	r1, r2, #29
 80022f0:	d009      	beq.n	8002306 <__aeabi_dmul+0x34a>
 80022f2:	200f      	movs	r0, #15
 80022f4:	4010      	ands	r0, r2
 80022f6:	2804      	cmp	r0, #4
 80022f8:	d005      	beq.n	8002306 <__aeabi_dmul+0x34a>
 80022fa:	1d10      	adds	r0, r2, #4
 80022fc:	4290      	cmp	r0, r2
 80022fe:	4192      	sbcs	r2, r2
 8002300:	4252      	negs	r2, r2
 8002302:	189b      	adds	r3, r3, r2
 8002304:	0002      	movs	r2, r0
 8002306:	01d9      	lsls	r1, r3, #7
 8002308:	d504      	bpl.n	8002314 <__aeabi_dmul+0x358>
 800230a:	2480      	movs	r4, #128	; 0x80
 800230c:	4819      	ldr	r0, [pc, #100]	; (8002374 <__aeabi_dmul+0x3b8>)
 800230e:	00e4      	lsls	r4, r4, #3
 8002310:	4003      	ands	r3, r0
 8002312:	4454      	add	r4, sl
 8002314:	4818      	ldr	r0, [pc, #96]	; (8002378 <__aeabi_dmul+0x3bc>)
 8002316:	4284      	cmp	r4, r0
 8002318:	dd00      	ble.n	800231c <__aeabi_dmul+0x360>
 800231a:	e727      	b.n	800216c <__aeabi_dmul+0x1b0>
 800231c:	075e      	lsls	r6, r3, #29
 800231e:	025b      	lsls	r3, r3, #9
 8002320:	08d2      	lsrs	r2, r2, #3
 8002322:	0b1f      	lsrs	r7, r3, #12
 8002324:	0563      	lsls	r3, r4, #21
 8002326:	4316      	orrs	r6, r2
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	e6b2      	b.n	8002092 <__aeabi_dmul+0xd6>
 800232c:	2300      	movs	r3, #0
 800232e:	4699      	mov	r9, r3
 8002330:	3301      	adds	r3, #1
 8002332:	2704      	movs	r7, #4
 8002334:	2600      	movs	r6, #0
 8002336:	469b      	mov	fp, r3
 8002338:	e664      	b.n	8002004 <__aeabi_dmul+0x48>
 800233a:	2303      	movs	r3, #3
 800233c:	9701      	str	r7, [sp, #4]
 800233e:	4681      	mov	r9, r0
 8002340:	270c      	movs	r7, #12
 8002342:	469b      	mov	fp, r3
 8002344:	e65e      	b.n	8002004 <__aeabi_dmul+0x48>
 8002346:	2201      	movs	r2, #1
 8002348:	2001      	movs	r0, #1
 800234a:	4317      	orrs	r7, r2
 800234c:	2200      	movs	r2, #0
 800234e:	e676      	b.n	800203e <__aeabi_dmul+0x82>
 8002350:	2303      	movs	r3, #3
 8002352:	2003      	movs	r0, #3
 8002354:	431f      	orrs	r7, r3
 8002356:	4643      	mov	r3, r8
 8002358:	e671      	b.n	800203e <__aeabi_dmul+0x82>
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	fffffc01 	.word	0xfffffc01
 8002364:	0801ac68 	.word	0x0801ac68
 8002368:	800fffff 	.word	0x800fffff
 800236c:	fffffc0d 	.word	0xfffffc0d
 8002370:	000003ff 	.word	0x000003ff
 8002374:	feffffff 	.word	0xfeffffff
 8002378:	000007fe 	.word	0x000007fe
 800237c:	2300      	movs	r3, #0
 800237e:	2780      	movs	r7, #128	; 0x80
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	033f      	lsls	r7, r7, #12
 8002384:	2600      	movs	r6, #0
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <__aeabi_dmul+0x4d8>)
 8002388:	e683      	b.n	8002092 <__aeabi_dmul+0xd6>
 800238a:	9b01      	ldr	r3, [sp, #4]
 800238c:	0032      	movs	r2, r6
 800238e:	46a4      	mov	ip, r4
 8002390:	4658      	mov	r0, fp
 8002392:	e670      	b.n	8002076 <__aeabi_dmul+0xba>
 8002394:	46ac      	mov	ip, r5
 8002396:	e66e      	b.n	8002076 <__aeabi_dmul+0xba>
 8002398:	2780      	movs	r7, #128	; 0x80
 800239a:	9901      	ldr	r1, [sp, #4]
 800239c:	033f      	lsls	r7, r7, #12
 800239e:	4239      	tst	r1, r7
 80023a0:	d02d      	beq.n	80023fe <__aeabi_dmul+0x442>
 80023a2:	423b      	tst	r3, r7
 80023a4:	d12b      	bne.n	80023fe <__aeabi_dmul+0x442>
 80023a6:	431f      	orrs	r7, r3
 80023a8:	033f      	lsls	r7, r7, #12
 80023aa:	0b3f      	lsrs	r7, r7, #12
 80023ac:	9500      	str	r5, [sp, #0]
 80023ae:	0016      	movs	r6, r2
 80023b0:	4b38      	ldr	r3, [pc, #224]	; (8002494 <__aeabi_dmul+0x4d8>)
 80023b2:	e66e      	b.n	8002092 <__aeabi_dmul+0xd6>
 80023b4:	2501      	movs	r5, #1
 80023b6:	1b2d      	subs	r5, r5, r4
 80023b8:	2d38      	cmp	r5, #56	; 0x38
 80023ba:	dd00      	ble.n	80023be <__aeabi_dmul+0x402>
 80023bc:	e666      	b.n	800208c <__aeabi_dmul+0xd0>
 80023be:	2d1f      	cmp	r5, #31
 80023c0:	dc40      	bgt.n	8002444 <__aeabi_dmul+0x488>
 80023c2:	4835      	ldr	r0, [pc, #212]	; (8002498 <__aeabi_dmul+0x4dc>)
 80023c4:	001c      	movs	r4, r3
 80023c6:	4450      	add	r0, sl
 80023c8:	0016      	movs	r6, r2
 80023ca:	4082      	lsls	r2, r0
 80023cc:	4084      	lsls	r4, r0
 80023ce:	40ee      	lsrs	r6, r5
 80023d0:	1e50      	subs	r0, r2, #1
 80023d2:	4182      	sbcs	r2, r0
 80023d4:	4334      	orrs	r4, r6
 80023d6:	4314      	orrs	r4, r2
 80023d8:	40eb      	lsrs	r3, r5
 80023da:	0762      	lsls	r2, r4, #29
 80023dc:	d009      	beq.n	80023f2 <__aeabi_dmul+0x436>
 80023de:	220f      	movs	r2, #15
 80023e0:	4022      	ands	r2, r4
 80023e2:	2a04      	cmp	r2, #4
 80023e4:	d005      	beq.n	80023f2 <__aeabi_dmul+0x436>
 80023e6:	0022      	movs	r2, r4
 80023e8:	1d14      	adds	r4, r2, #4
 80023ea:	4294      	cmp	r4, r2
 80023ec:	4180      	sbcs	r0, r0
 80023ee:	4240      	negs	r0, r0
 80023f0:	181b      	adds	r3, r3, r0
 80023f2:	021a      	lsls	r2, r3, #8
 80023f4:	d53e      	bpl.n	8002474 <__aeabi_dmul+0x4b8>
 80023f6:	2301      	movs	r3, #1
 80023f8:	2700      	movs	r7, #0
 80023fa:	2600      	movs	r6, #0
 80023fc:	e649      	b.n	8002092 <__aeabi_dmul+0xd6>
 80023fe:	2780      	movs	r7, #128	; 0x80
 8002400:	9b01      	ldr	r3, [sp, #4]
 8002402:	033f      	lsls	r7, r7, #12
 8002404:	431f      	orrs	r7, r3
 8002406:	033f      	lsls	r7, r7, #12
 8002408:	0b3f      	lsrs	r7, r7, #12
 800240a:	9400      	str	r4, [sp, #0]
 800240c:	4b21      	ldr	r3, [pc, #132]	; (8002494 <__aeabi_dmul+0x4d8>)
 800240e:	e640      	b.n	8002092 <__aeabi_dmul+0xd6>
 8002410:	0003      	movs	r3, r0
 8002412:	465a      	mov	r2, fp
 8002414:	3b28      	subs	r3, #40	; 0x28
 8002416:	409a      	lsls	r2, r3
 8002418:	2600      	movs	r6, #0
 800241a:	9201      	str	r2, [sp, #4]
 800241c:	e66d      	b.n	80020fa <__aeabi_dmul+0x13e>
 800241e:	4658      	mov	r0, fp
 8002420:	f000 fc7a 	bl	8002d18 <__clzsi2>
 8002424:	3020      	adds	r0, #32
 8002426:	e657      	b.n	80020d8 <__aeabi_dmul+0x11c>
 8002428:	0003      	movs	r3, r0
 800242a:	4652      	mov	r2, sl
 800242c:	3b28      	subs	r3, #40	; 0x28
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	2200      	movs	r2, #0
 8002434:	e693      	b.n	800215e <__aeabi_dmul+0x1a2>
 8002436:	4650      	mov	r0, sl
 8002438:	f000 fc6e 	bl	8002d18 <__clzsi2>
 800243c:	3020      	adds	r0, #32
 800243e:	e67b      	b.n	8002138 <__aeabi_dmul+0x17c>
 8002440:	46ca      	mov	sl, r9
 8002442:	e750      	b.n	80022e6 <__aeabi_dmul+0x32a>
 8002444:	201f      	movs	r0, #31
 8002446:	001e      	movs	r6, r3
 8002448:	4240      	negs	r0, r0
 800244a:	1b04      	subs	r4, r0, r4
 800244c:	40e6      	lsrs	r6, r4
 800244e:	2d20      	cmp	r5, #32
 8002450:	d003      	beq.n	800245a <__aeabi_dmul+0x49e>
 8002452:	4c12      	ldr	r4, [pc, #72]	; (800249c <__aeabi_dmul+0x4e0>)
 8002454:	4454      	add	r4, sl
 8002456:	40a3      	lsls	r3, r4
 8002458:	431a      	orrs	r2, r3
 800245a:	1e50      	subs	r0, r2, #1
 800245c:	4182      	sbcs	r2, r0
 800245e:	4332      	orrs	r2, r6
 8002460:	2607      	movs	r6, #7
 8002462:	2700      	movs	r7, #0
 8002464:	4016      	ands	r6, r2
 8002466:	d009      	beq.n	800247c <__aeabi_dmul+0x4c0>
 8002468:	200f      	movs	r0, #15
 800246a:	2300      	movs	r3, #0
 800246c:	4010      	ands	r0, r2
 800246e:	0014      	movs	r4, r2
 8002470:	2804      	cmp	r0, #4
 8002472:	d1b9      	bne.n	80023e8 <__aeabi_dmul+0x42c>
 8002474:	0022      	movs	r2, r4
 8002476:	075e      	lsls	r6, r3, #29
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	0b1f      	lsrs	r7, r3, #12
 800247c:	08d2      	lsrs	r2, r2, #3
 800247e:	4316      	orrs	r6, r2
 8002480:	2300      	movs	r3, #0
 8002482:	e606      	b.n	8002092 <__aeabi_dmul+0xd6>
 8002484:	2780      	movs	r7, #128	; 0x80
 8002486:	033f      	lsls	r7, r7, #12
 8002488:	431f      	orrs	r7, r3
 800248a:	033f      	lsls	r7, r7, #12
 800248c:	0b3f      	lsrs	r7, r7, #12
 800248e:	0016      	movs	r6, r2
 8002490:	4b00      	ldr	r3, [pc, #0]	; (8002494 <__aeabi_dmul+0x4d8>)
 8002492:	e5fe      	b.n	8002092 <__aeabi_dmul+0xd6>
 8002494:	000007ff 	.word	0x000007ff
 8002498:	0000041e 	.word	0x0000041e
 800249c:	0000043e 	.word	0x0000043e

080024a0 <__aeabi_dsub>:
 80024a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a2:	4657      	mov	r7, sl
 80024a4:	464e      	mov	r6, r9
 80024a6:	4645      	mov	r5, r8
 80024a8:	46de      	mov	lr, fp
 80024aa:	000c      	movs	r4, r1
 80024ac:	0309      	lsls	r1, r1, #12
 80024ae:	b5e0      	push	{r5, r6, r7, lr}
 80024b0:	0a49      	lsrs	r1, r1, #9
 80024b2:	0f46      	lsrs	r6, r0, #29
 80024b4:	005f      	lsls	r7, r3, #1
 80024b6:	4331      	orrs	r1, r6
 80024b8:	031e      	lsls	r6, r3, #12
 80024ba:	0fdb      	lsrs	r3, r3, #31
 80024bc:	0a76      	lsrs	r6, r6, #9
 80024be:	469b      	mov	fp, r3
 80024c0:	0f53      	lsrs	r3, r2, #29
 80024c2:	4333      	orrs	r3, r6
 80024c4:	4ec8      	ldr	r6, [pc, #800]	; (80027e8 <__aeabi_dsub+0x348>)
 80024c6:	0065      	lsls	r5, r4, #1
 80024c8:	00c0      	lsls	r0, r0, #3
 80024ca:	0fe4      	lsrs	r4, r4, #31
 80024cc:	00d2      	lsls	r2, r2, #3
 80024ce:	0d6d      	lsrs	r5, r5, #21
 80024d0:	46a2      	mov	sl, r4
 80024d2:	4681      	mov	r9, r0
 80024d4:	0d7f      	lsrs	r7, r7, #21
 80024d6:	469c      	mov	ip, r3
 80024d8:	4690      	mov	r8, r2
 80024da:	42b7      	cmp	r7, r6
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x40>
 80024de:	e0b9      	b.n	8002654 <__aeabi_dsub+0x1b4>
 80024e0:	465b      	mov	r3, fp
 80024e2:	2601      	movs	r6, #1
 80024e4:	4073      	eors	r3, r6
 80024e6:	469b      	mov	fp, r3
 80024e8:	1bee      	subs	r6, r5, r7
 80024ea:	45a3      	cmp	fp, r4
 80024ec:	d100      	bne.n	80024f0 <__aeabi_dsub+0x50>
 80024ee:	e083      	b.n	80025f8 <__aeabi_dsub+0x158>
 80024f0:	2e00      	cmp	r6, #0
 80024f2:	dd63      	ble.n	80025bc <__aeabi_dsub+0x11c>
 80024f4:	2f00      	cmp	r7, #0
 80024f6:	d000      	beq.n	80024fa <__aeabi_dsub+0x5a>
 80024f8:	e0b1      	b.n	800265e <__aeabi_dsub+0x1be>
 80024fa:	4663      	mov	r3, ip
 80024fc:	4313      	orrs	r3, r2
 80024fe:	d100      	bne.n	8002502 <__aeabi_dsub+0x62>
 8002500:	e123      	b.n	800274a <__aeabi_dsub+0x2aa>
 8002502:	1e73      	subs	r3, r6, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d000      	beq.n	800250a <__aeabi_dsub+0x6a>
 8002508:	e1ba      	b.n	8002880 <__aeabi_dsub+0x3e0>
 800250a:	1a86      	subs	r6, r0, r2
 800250c:	4663      	mov	r3, ip
 800250e:	42b0      	cmp	r0, r6
 8002510:	4180      	sbcs	r0, r0
 8002512:	2501      	movs	r5, #1
 8002514:	1ac9      	subs	r1, r1, r3
 8002516:	4240      	negs	r0, r0
 8002518:	1a09      	subs	r1, r1, r0
 800251a:	020b      	lsls	r3, r1, #8
 800251c:	d400      	bmi.n	8002520 <__aeabi_dsub+0x80>
 800251e:	e147      	b.n	80027b0 <__aeabi_dsub+0x310>
 8002520:	0249      	lsls	r1, r1, #9
 8002522:	0a4b      	lsrs	r3, r1, #9
 8002524:	4698      	mov	r8, r3
 8002526:	4643      	mov	r3, r8
 8002528:	2b00      	cmp	r3, #0
 800252a:	d100      	bne.n	800252e <__aeabi_dsub+0x8e>
 800252c:	e189      	b.n	8002842 <__aeabi_dsub+0x3a2>
 800252e:	4640      	mov	r0, r8
 8002530:	f000 fbf2 	bl	8002d18 <__clzsi2>
 8002534:	0003      	movs	r3, r0
 8002536:	3b08      	subs	r3, #8
 8002538:	2b1f      	cmp	r3, #31
 800253a:	dd00      	ble.n	800253e <__aeabi_dsub+0x9e>
 800253c:	e17c      	b.n	8002838 <__aeabi_dsub+0x398>
 800253e:	2220      	movs	r2, #32
 8002540:	0030      	movs	r0, r6
 8002542:	1ad2      	subs	r2, r2, r3
 8002544:	4641      	mov	r1, r8
 8002546:	40d0      	lsrs	r0, r2
 8002548:	4099      	lsls	r1, r3
 800254a:	0002      	movs	r2, r0
 800254c:	409e      	lsls	r6, r3
 800254e:	430a      	orrs	r2, r1
 8002550:	429d      	cmp	r5, r3
 8002552:	dd00      	ble.n	8002556 <__aeabi_dsub+0xb6>
 8002554:	e16a      	b.n	800282c <__aeabi_dsub+0x38c>
 8002556:	1b5d      	subs	r5, r3, r5
 8002558:	1c6b      	adds	r3, r5, #1
 800255a:	2b1f      	cmp	r3, #31
 800255c:	dd00      	ble.n	8002560 <__aeabi_dsub+0xc0>
 800255e:	e194      	b.n	800288a <__aeabi_dsub+0x3ea>
 8002560:	2120      	movs	r1, #32
 8002562:	0010      	movs	r0, r2
 8002564:	0035      	movs	r5, r6
 8002566:	1ac9      	subs	r1, r1, r3
 8002568:	408e      	lsls	r6, r1
 800256a:	40da      	lsrs	r2, r3
 800256c:	4088      	lsls	r0, r1
 800256e:	40dd      	lsrs	r5, r3
 8002570:	1e71      	subs	r1, r6, #1
 8002572:	418e      	sbcs	r6, r1
 8002574:	0011      	movs	r1, r2
 8002576:	2207      	movs	r2, #7
 8002578:	4328      	orrs	r0, r5
 800257a:	2500      	movs	r5, #0
 800257c:	4306      	orrs	r6, r0
 800257e:	4032      	ands	r2, r6
 8002580:	2a00      	cmp	r2, #0
 8002582:	d009      	beq.n	8002598 <__aeabi_dsub+0xf8>
 8002584:	230f      	movs	r3, #15
 8002586:	4033      	ands	r3, r6
 8002588:	2b04      	cmp	r3, #4
 800258a:	d005      	beq.n	8002598 <__aeabi_dsub+0xf8>
 800258c:	1d33      	adds	r3, r6, #4
 800258e:	42b3      	cmp	r3, r6
 8002590:	41b6      	sbcs	r6, r6
 8002592:	4276      	negs	r6, r6
 8002594:	1989      	adds	r1, r1, r6
 8002596:	001e      	movs	r6, r3
 8002598:	020b      	lsls	r3, r1, #8
 800259a:	d400      	bmi.n	800259e <__aeabi_dsub+0xfe>
 800259c:	e23d      	b.n	8002a1a <__aeabi_dsub+0x57a>
 800259e:	1c6a      	adds	r2, r5, #1
 80025a0:	4b91      	ldr	r3, [pc, #580]	; (80027e8 <__aeabi_dsub+0x348>)
 80025a2:	0555      	lsls	r5, r2, #21
 80025a4:	0d6d      	lsrs	r5, r5, #21
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x10c>
 80025aa:	e119      	b.n	80027e0 <__aeabi_dsub+0x340>
 80025ac:	4a8f      	ldr	r2, [pc, #572]	; (80027ec <__aeabi_dsub+0x34c>)
 80025ae:	08f6      	lsrs	r6, r6, #3
 80025b0:	400a      	ands	r2, r1
 80025b2:	0757      	lsls	r7, r2, #29
 80025b4:	0252      	lsls	r2, r2, #9
 80025b6:	4337      	orrs	r7, r6
 80025b8:	0b12      	lsrs	r2, r2, #12
 80025ba:	e09b      	b.n	80026f4 <__aeabi_dsub+0x254>
 80025bc:	2e00      	cmp	r6, #0
 80025be:	d000      	beq.n	80025c2 <__aeabi_dsub+0x122>
 80025c0:	e0c5      	b.n	800274e <__aeabi_dsub+0x2ae>
 80025c2:	1c6e      	adds	r6, r5, #1
 80025c4:	0576      	lsls	r6, r6, #21
 80025c6:	0d76      	lsrs	r6, r6, #21
 80025c8:	2e01      	cmp	r6, #1
 80025ca:	dc00      	bgt.n	80025ce <__aeabi_dsub+0x12e>
 80025cc:	e148      	b.n	8002860 <__aeabi_dsub+0x3c0>
 80025ce:	4667      	mov	r7, ip
 80025d0:	1a86      	subs	r6, r0, r2
 80025d2:	1bcb      	subs	r3, r1, r7
 80025d4:	42b0      	cmp	r0, r6
 80025d6:	41bf      	sbcs	r7, r7
 80025d8:	427f      	negs	r7, r7
 80025da:	46b8      	mov	r8, r7
 80025dc:	001f      	movs	r7, r3
 80025de:	4643      	mov	r3, r8
 80025e0:	1aff      	subs	r7, r7, r3
 80025e2:	003b      	movs	r3, r7
 80025e4:	46b8      	mov	r8, r7
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	d500      	bpl.n	80025ec <__aeabi_dsub+0x14c>
 80025ea:	e15f      	b.n	80028ac <__aeabi_dsub+0x40c>
 80025ec:	4337      	orrs	r7, r6
 80025ee:	d19a      	bne.n	8002526 <__aeabi_dsub+0x86>
 80025f0:	2200      	movs	r2, #0
 80025f2:	2400      	movs	r4, #0
 80025f4:	2500      	movs	r5, #0
 80025f6:	e079      	b.n	80026ec <__aeabi_dsub+0x24c>
 80025f8:	2e00      	cmp	r6, #0
 80025fa:	dc00      	bgt.n	80025fe <__aeabi_dsub+0x15e>
 80025fc:	e0fa      	b.n	80027f4 <__aeabi_dsub+0x354>
 80025fe:	2f00      	cmp	r7, #0
 8002600:	d100      	bne.n	8002604 <__aeabi_dsub+0x164>
 8002602:	e08d      	b.n	8002720 <__aeabi_dsub+0x280>
 8002604:	4b78      	ldr	r3, [pc, #480]	; (80027e8 <__aeabi_dsub+0x348>)
 8002606:	429d      	cmp	r5, r3
 8002608:	d067      	beq.n	80026da <__aeabi_dsub+0x23a>
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	4667      	mov	r7, ip
 800260e:	041b      	lsls	r3, r3, #16
 8002610:	431f      	orrs	r7, r3
 8002612:	46bc      	mov	ip, r7
 8002614:	2e38      	cmp	r6, #56	; 0x38
 8002616:	dc00      	bgt.n	800261a <__aeabi_dsub+0x17a>
 8002618:	e152      	b.n	80028c0 <__aeabi_dsub+0x420>
 800261a:	4663      	mov	r3, ip
 800261c:	4313      	orrs	r3, r2
 800261e:	1e5a      	subs	r2, r3, #1
 8002620:	4193      	sbcs	r3, r2
 8002622:	181e      	adds	r6, r3, r0
 8002624:	4286      	cmp	r6, r0
 8002626:	4180      	sbcs	r0, r0
 8002628:	4240      	negs	r0, r0
 800262a:	1809      	adds	r1, r1, r0
 800262c:	020b      	lsls	r3, r1, #8
 800262e:	d400      	bmi.n	8002632 <__aeabi_dsub+0x192>
 8002630:	e0be      	b.n	80027b0 <__aeabi_dsub+0x310>
 8002632:	4b6d      	ldr	r3, [pc, #436]	; (80027e8 <__aeabi_dsub+0x348>)
 8002634:	3501      	adds	r5, #1
 8002636:	429d      	cmp	r5, r3
 8002638:	d100      	bne.n	800263c <__aeabi_dsub+0x19c>
 800263a:	e0d2      	b.n	80027e2 <__aeabi_dsub+0x342>
 800263c:	4a6b      	ldr	r2, [pc, #428]	; (80027ec <__aeabi_dsub+0x34c>)
 800263e:	0873      	lsrs	r3, r6, #1
 8002640:	400a      	ands	r2, r1
 8002642:	2101      	movs	r1, #1
 8002644:	400e      	ands	r6, r1
 8002646:	431e      	orrs	r6, r3
 8002648:	0851      	lsrs	r1, r2, #1
 800264a:	07d3      	lsls	r3, r2, #31
 800264c:	2207      	movs	r2, #7
 800264e:	431e      	orrs	r6, r3
 8002650:	4032      	ands	r2, r6
 8002652:	e795      	b.n	8002580 <__aeabi_dsub+0xe0>
 8002654:	001e      	movs	r6, r3
 8002656:	4316      	orrs	r6, r2
 8002658:	d000      	beq.n	800265c <__aeabi_dsub+0x1bc>
 800265a:	e745      	b.n	80024e8 <__aeabi_dsub+0x48>
 800265c:	e740      	b.n	80024e0 <__aeabi_dsub+0x40>
 800265e:	4b62      	ldr	r3, [pc, #392]	; (80027e8 <__aeabi_dsub+0x348>)
 8002660:	429d      	cmp	r5, r3
 8002662:	d03a      	beq.n	80026da <__aeabi_dsub+0x23a>
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	4667      	mov	r7, ip
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431f      	orrs	r7, r3
 800266c:	46bc      	mov	ip, r7
 800266e:	2e38      	cmp	r6, #56	; 0x38
 8002670:	dd00      	ble.n	8002674 <__aeabi_dsub+0x1d4>
 8002672:	e0eb      	b.n	800284c <__aeabi_dsub+0x3ac>
 8002674:	2e1f      	cmp	r6, #31
 8002676:	dc00      	bgt.n	800267a <__aeabi_dsub+0x1da>
 8002678:	e13a      	b.n	80028f0 <__aeabi_dsub+0x450>
 800267a:	0033      	movs	r3, r6
 800267c:	4667      	mov	r7, ip
 800267e:	3b20      	subs	r3, #32
 8002680:	40df      	lsrs	r7, r3
 8002682:	003b      	movs	r3, r7
 8002684:	2e20      	cmp	r6, #32
 8002686:	d005      	beq.n	8002694 <__aeabi_dsub+0x1f4>
 8002688:	2740      	movs	r7, #64	; 0x40
 800268a:	1bbf      	subs	r7, r7, r6
 800268c:	4666      	mov	r6, ip
 800268e:	40be      	lsls	r6, r7
 8002690:	4332      	orrs	r2, r6
 8002692:	4690      	mov	r8, r2
 8002694:	4646      	mov	r6, r8
 8002696:	1e72      	subs	r2, r6, #1
 8002698:	4196      	sbcs	r6, r2
 800269a:	4333      	orrs	r3, r6
 800269c:	e0da      	b.n	8002854 <__aeabi_dsub+0x3b4>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d100      	bne.n	80026a4 <__aeabi_dsub+0x204>
 80026a2:	e214      	b.n	8002ace <__aeabi_dsub+0x62e>
 80026a4:	4663      	mov	r3, ip
 80026a6:	4313      	orrs	r3, r2
 80026a8:	d100      	bne.n	80026ac <__aeabi_dsub+0x20c>
 80026aa:	e168      	b.n	800297e <__aeabi_dsub+0x4de>
 80026ac:	2380      	movs	r3, #128	; 0x80
 80026ae:	074e      	lsls	r6, r1, #29
 80026b0:	08c0      	lsrs	r0, r0, #3
 80026b2:	08c9      	lsrs	r1, r1, #3
 80026b4:	031b      	lsls	r3, r3, #12
 80026b6:	4306      	orrs	r6, r0
 80026b8:	4219      	tst	r1, r3
 80026ba:	d008      	beq.n	80026ce <__aeabi_dsub+0x22e>
 80026bc:	4660      	mov	r0, ip
 80026be:	08c0      	lsrs	r0, r0, #3
 80026c0:	4218      	tst	r0, r3
 80026c2:	d104      	bne.n	80026ce <__aeabi_dsub+0x22e>
 80026c4:	4663      	mov	r3, ip
 80026c6:	0001      	movs	r1, r0
 80026c8:	08d2      	lsrs	r2, r2, #3
 80026ca:	075e      	lsls	r6, r3, #29
 80026cc:	4316      	orrs	r6, r2
 80026ce:	00f3      	lsls	r3, r6, #3
 80026d0:	4699      	mov	r9, r3
 80026d2:	00c9      	lsls	r1, r1, #3
 80026d4:	0f72      	lsrs	r2, r6, #29
 80026d6:	4d44      	ldr	r5, [pc, #272]	; (80027e8 <__aeabi_dsub+0x348>)
 80026d8:	4311      	orrs	r1, r2
 80026da:	464b      	mov	r3, r9
 80026dc:	08de      	lsrs	r6, r3, #3
 80026de:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <__aeabi_dsub+0x348>)
 80026e0:	074f      	lsls	r7, r1, #29
 80026e2:	4337      	orrs	r7, r6
 80026e4:	08ca      	lsrs	r2, r1, #3
 80026e6:	429d      	cmp	r5, r3
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x24c>
 80026ea:	e06e      	b.n	80027ca <__aeabi_dsub+0x32a>
 80026ec:	0312      	lsls	r2, r2, #12
 80026ee:	056d      	lsls	r5, r5, #21
 80026f0:	0b12      	lsrs	r2, r2, #12
 80026f2:	0d6d      	lsrs	r5, r5, #21
 80026f4:	2100      	movs	r1, #0
 80026f6:	0312      	lsls	r2, r2, #12
 80026f8:	0b13      	lsrs	r3, r2, #12
 80026fa:	0d0a      	lsrs	r2, r1, #20
 80026fc:	0512      	lsls	r2, r2, #20
 80026fe:	431a      	orrs	r2, r3
 8002700:	4b3b      	ldr	r3, [pc, #236]	; (80027f0 <__aeabi_dsub+0x350>)
 8002702:	052d      	lsls	r5, r5, #20
 8002704:	4013      	ands	r3, r2
 8002706:	432b      	orrs	r3, r5
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	07e4      	lsls	r4, r4, #31
 800270c:	085b      	lsrs	r3, r3, #1
 800270e:	4323      	orrs	r3, r4
 8002710:	0038      	movs	r0, r7
 8002712:	0019      	movs	r1, r3
 8002714:	bc3c      	pop	{r2, r3, r4, r5}
 8002716:	4690      	mov	r8, r2
 8002718:	4699      	mov	r9, r3
 800271a:	46a2      	mov	sl, r4
 800271c:	46ab      	mov	fp, r5
 800271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002720:	4663      	mov	r3, ip
 8002722:	4313      	orrs	r3, r2
 8002724:	d011      	beq.n	800274a <__aeabi_dsub+0x2aa>
 8002726:	1e73      	subs	r3, r6, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d000      	beq.n	800272e <__aeabi_dsub+0x28e>
 800272c:	e107      	b.n	800293e <__aeabi_dsub+0x49e>
 800272e:	1886      	adds	r6, r0, r2
 8002730:	4286      	cmp	r6, r0
 8002732:	4180      	sbcs	r0, r0
 8002734:	4461      	add	r1, ip
 8002736:	4240      	negs	r0, r0
 8002738:	1809      	adds	r1, r1, r0
 800273a:	2501      	movs	r5, #1
 800273c:	020b      	lsls	r3, r1, #8
 800273e:	d537      	bpl.n	80027b0 <__aeabi_dsub+0x310>
 8002740:	2502      	movs	r5, #2
 8002742:	e77b      	b.n	800263c <__aeabi_dsub+0x19c>
 8002744:	003e      	movs	r6, r7
 8002746:	4661      	mov	r1, ip
 8002748:	4691      	mov	r9, r2
 800274a:	0035      	movs	r5, r6
 800274c:	e7c5      	b.n	80026da <__aeabi_dsub+0x23a>
 800274e:	465c      	mov	r4, fp
 8002750:	2d00      	cmp	r5, #0
 8002752:	d000      	beq.n	8002756 <__aeabi_dsub+0x2b6>
 8002754:	e0e1      	b.n	800291a <__aeabi_dsub+0x47a>
 8002756:	000b      	movs	r3, r1
 8002758:	4303      	orrs	r3, r0
 800275a:	d0f3      	beq.n	8002744 <__aeabi_dsub+0x2a4>
 800275c:	1c73      	adds	r3, r6, #1
 800275e:	d100      	bne.n	8002762 <__aeabi_dsub+0x2c2>
 8002760:	e1ac      	b.n	8002abc <__aeabi_dsub+0x61c>
 8002762:	4b21      	ldr	r3, [pc, #132]	; (80027e8 <__aeabi_dsub+0x348>)
 8002764:	429f      	cmp	r7, r3
 8002766:	d100      	bne.n	800276a <__aeabi_dsub+0x2ca>
 8002768:	e13a      	b.n	80029e0 <__aeabi_dsub+0x540>
 800276a:	43f3      	mvns	r3, r6
 800276c:	2b38      	cmp	r3, #56	; 0x38
 800276e:	dd00      	ble.n	8002772 <__aeabi_dsub+0x2d2>
 8002770:	e16f      	b.n	8002a52 <__aeabi_dsub+0x5b2>
 8002772:	2b1f      	cmp	r3, #31
 8002774:	dd00      	ble.n	8002778 <__aeabi_dsub+0x2d8>
 8002776:	e18c      	b.n	8002a92 <__aeabi_dsub+0x5f2>
 8002778:	2520      	movs	r5, #32
 800277a:	000e      	movs	r6, r1
 800277c:	1aed      	subs	r5, r5, r3
 800277e:	40ae      	lsls	r6, r5
 8002780:	46b0      	mov	r8, r6
 8002782:	0006      	movs	r6, r0
 8002784:	46aa      	mov	sl, r5
 8002786:	40de      	lsrs	r6, r3
 8002788:	4645      	mov	r5, r8
 800278a:	4335      	orrs	r5, r6
 800278c:	002e      	movs	r6, r5
 800278e:	4655      	mov	r5, sl
 8002790:	40d9      	lsrs	r1, r3
 8002792:	40a8      	lsls	r0, r5
 8002794:	4663      	mov	r3, ip
 8002796:	1e45      	subs	r5, r0, #1
 8002798:	41a8      	sbcs	r0, r5
 800279a:	1a5b      	subs	r3, r3, r1
 800279c:	469c      	mov	ip, r3
 800279e:	4330      	orrs	r0, r6
 80027a0:	1a16      	subs	r6, r2, r0
 80027a2:	42b2      	cmp	r2, r6
 80027a4:	4192      	sbcs	r2, r2
 80027a6:	4663      	mov	r3, ip
 80027a8:	4252      	negs	r2, r2
 80027aa:	1a99      	subs	r1, r3, r2
 80027ac:	003d      	movs	r5, r7
 80027ae:	e6b4      	b.n	800251a <__aeabi_dsub+0x7a>
 80027b0:	2207      	movs	r2, #7
 80027b2:	4032      	ands	r2, r6
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d000      	beq.n	80027ba <__aeabi_dsub+0x31a>
 80027b8:	e6e4      	b.n	8002584 <__aeabi_dsub+0xe4>
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <__aeabi_dsub+0x348>)
 80027bc:	08f6      	lsrs	r6, r6, #3
 80027be:	074f      	lsls	r7, r1, #29
 80027c0:	4337      	orrs	r7, r6
 80027c2:	08ca      	lsrs	r2, r1, #3
 80027c4:	429d      	cmp	r5, r3
 80027c6:	d000      	beq.n	80027ca <__aeabi_dsub+0x32a>
 80027c8:	e790      	b.n	80026ec <__aeabi_dsub+0x24c>
 80027ca:	003b      	movs	r3, r7
 80027cc:	4313      	orrs	r3, r2
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x332>
 80027d0:	e1a6      	b.n	8002b20 <__aeabi_dsub+0x680>
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	031b      	lsls	r3, r3, #12
 80027d6:	431a      	orrs	r2, r3
 80027d8:	0312      	lsls	r2, r2, #12
 80027da:	0b12      	lsrs	r2, r2, #12
 80027dc:	4d02      	ldr	r5, [pc, #8]	; (80027e8 <__aeabi_dsub+0x348>)
 80027de:	e789      	b.n	80026f4 <__aeabi_dsub+0x254>
 80027e0:	0015      	movs	r5, r2
 80027e2:	2200      	movs	r2, #0
 80027e4:	2700      	movs	r7, #0
 80027e6:	e785      	b.n	80026f4 <__aeabi_dsub+0x254>
 80027e8:	000007ff 	.word	0x000007ff
 80027ec:	ff7fffff 	.word	0xff7fffff
 80027f0:	800fffff 	.word	0x800fffff
 80027f4:	2e00      	cmp	r6, #0
 80027f6:	d000      	beq.n	80027fa <__aeabi_dsub+0x35a>
 80027f8:	e0c7      	b.n	800298a <__aeabi_dsub+0x4ea>
 80027fa:	1c6b      	adds	r3, r5, #1
 80027fc:	055e      	lsls	r6, r3, #21
 80027fe:	0d76      	lsrs	r6, r6, #21
 8002800:	2e01      	cmp	r6, #1
 8002802:	dc00      	bgt.n	8002806 <__aeabi_dsub+0x366>
 8002804:	e0f0      	b.n	80029e8 <__aeabi_dsub+0x548>
 8002806:	4dc8      	ldr	r5, [pc, #800]	; (8002b28 <__aeabi_dsub+0x688>)
 8002808:	42ab      	cmp	r3, r5
 800280a:	d100      	bne.n	800280e <__aeabi_dsub+0x36e>
 800280c:	e0b9      	b.n	8002982 <__aeabi_dsub+0x4e2>
 800280e:	1885      	adds	r5, r0, r2
 8002810:	000a      	movs	r2, r1
 8002812:	4285      	cmp	r5, r0
 8002814:	4189      	sbcs	r1, r1
 8002816:	4462      	add	r2, ip
 8002818:	4249      	negs	r1, r1
 800281a:	1851      	adds	r1, r2, r1
 800281c:	2207      	movs	r2, #7
 800281e:	07ce      	lsls	r6, r1, #31
 8002820:	086d      	lsrs	r5, r5, #1
 8002822:	432e      	orrs	r6, r5
 8002824:	0849      	lsrs	r1, r1, #1
 8002826:	4032      	ands	r2, r6
 8002828:	001d      	movs	r5, r3
 800282a:	e6a9      	b.n	8002580 <__aeabi_dsub+0xe0>
 800282c:	49bf      	ldr	r1, [pc, #764]	; (8002b2c <__aeabi_dsub+0x68c>)
 800282e:	1aed      	subs	r5, r5, r3
 8002830:	4011      	ands	r1, r2
 8002832:	2207      	movs	r2, #7
 8002834:	4032      	ands	r2, r6
 8002836:	e6a3      	b.n	8002580 <__aeabi_dsub+0xe0>
 8002838:	0032      	movs	r2, r6
 800283a:	3828      	subs	r0, #40	; 0x28
 800283c:	4082      	lsls	r2, r0
 800283e:	2600      	movs	r6, #0
 8002840:	e686      	b.n	8002550 <__aeabi_dsub+0xb0>
 8002842:	0030      	movs	r0, r6
 8002844:	f000 fa68 	bl	8002d18 <__clzsi2>
 8002848:	3020      	adds	r0, #32
 800284a:	e673      	b.n	8002534 <__aeabi_dsub+0x94>
 800284c:	4663      	mov	r3, ip
 800284e:	4313      	orrs	r3, r2
 8002850:	1e5a      	subs	r2, r3, #1
 8002852:	4193      	sbcs	r3, r2
 8002854:	1ac6      	subs	r6, r0, r3
 8002856:	42b0      	cmp	r0, r6
 8002858:	4180      	sbcs	r0, r0
 800285a:	4240      	negs	r0, r0
 800285c:	1a09      	subs	r1, r1, r0
 800285e:	e65c      	b.n	800251a <__aeabi_dsub+0x7a>
 8002860:	000e      	movs	r6, r1
 8002862:	4667      	mov	r7, ip
 8002864:	4306      	orrs	r6, r0
 8002866:	4317      	orrs	r7, r2
 8002868:	2d00      	cmp	r5, #0
 800286a:	d15e      	bne.n	800292a <__aeabi_dsub+0x48a>
 800286c:	2e00      	cmp	r6, #0
 800286e:	d000      	beq.n	8002872 <__aeabi_dsub+0x3d2>
 8002870:	e0f3      	b.n	8002a5a <__aeabi_dsub+0x5ba>
 8002872:	2f00      	cmp	r7, #0
 8002874:	d100      	bne.n	8002878 <__aeabi_dsub+0x3d8>
 8002876:	e11e      	b.n	8002ab6 <__aeabi_dsub+0x616>
 8002878:	465c      	mov	r4, fp
 800287a:	4661      	mov	r1, ip
 800287c:	4691      	mov	r9, r2
 800287e:	e72c      	b.n	80026da <__aeabi_dsub+0x23a>
 8002880:	4fa9      	ldr	r7, [pc, #676]	; (8002b28 <__aeabi_dsub+0x688>)
 8002882:	42be      	cmp	r6, r7
 8002884:	d07b      	beq.n	800297e <__aeabi_dsub+0x4de>
 8002886:	001e      	movs	r6, r3
 8002888:	e6f1      	b.n	800266e <__aeabi_dsub+0x1ce>
 800288a:	0010      	movs	r0, r2
 800288c:	3d1f      	subs	r5, #31
 800288e:	40e8      	lsrs	r0, r5
 8002890:	2b20      	cmp	r3, #32
 8002892:	d003      	beq.n	800289c <__aeabi_dsub+0x3fc>
 8002894:	2140      	movs	r1, #64	; 0x40
 8002896:	1acb      	subs	r3, r1, r3
 8002898:	409a      	lsls	r2, r3
 800289a:	4316      	orrs	r6, r2
 800289c:	1e73      	subs	r3, r6, #1
 800289e:	419e      	sbcs	r6, r3
 80028a0:	2207      	movs	r2, #7
 80028a2:	4306      	orrs	r6, r0
 80028a4:	4032      	ands	r2, r6
 80028a6:	2100      	movs	r1, #0
 80028a8:	2500      	movs	r5, #0
 80028aa:	e783      	b.n	80027b4 <__aeabi_dsub+0x314>
 80028ac:	1a16      	subs	r6, r2, r0
 80028ae:	4663      	mov	r3, ip
 80028b0:	42b2      	cmp	r2, r6
 80028b2:	4180      	sbcs	r0, r0
 80028b4:	1a59      	subs	r1, r3, r1
 80028b6:	4240      	negs	r0, r0
 80028b8:	1a0b      	subs	r3, r1, r0
 80028ba:	4698      	mov	r8, r3
 80028bc:	465c      	mov	r4, fp
 80028be:	e632      	b.n	8002526 <__aeabi_dsub+0x86>
 80028c0:	2e1f      	cmp	r6, #31
 80028c2:	dd00      	ble.n	80028c6 <__aeabi_dsub+0x426>
 80028c4:	e0ab      	b.n	8002a1e <__aeabi_dsub+0x57e>
 80028c6:	2720      	movs	r7, #32
 80028c8:	1bbb      	subs	r3, r7, r6
 80028ca:	469a      	mov	sl, r3
 80028cc:	4663      	mov	r3, ip
 80028ce:	4657      	mov	r7, sl
 80028d0:	40bb      	lsls	r3, r7
 80028d2:	4699      	mov	r9, r3
 80028d4:	0013      	movs	r3, r2
 80028d6:	464f      	mov	r7, r9
 80028d8:	40f3      	lsrs	r3, r6
 80028da:	431f      	orrs	r7, r3
 80028dc:	003b      	movs	r3, r7
 80028de:	4657      	mov	r7, sl
 80028e0:	40ba      	lsls	r2, r7
 80028e2:	1e57      	subs	r7, r2, #1
 80028e4:	41ba      	sbcs	r2, r7
 80028e6:	4313      	orrs	r3, r2
 80028e8:	4662      	mov	r2, ip
 80028ea:	40f2      	lsrs	r2, r6
 80028ec:	1889      	adds	r1, r1, r2
 80028ee:	e698      	b.n	8002622 <__aeabi_dsub+0x182>
 80028f0:	2720      	movs	r7, #32
 80028f2:	1bbb      	subs	r3, r7, r6
 80028f4:	469a      	mov	sl, r3
 80028f6:	4663      	mov	r3, ip
 80028f8:	4657      	mov	r7, sl
 80028fa:	40bb      	lsls	r3, r7
 80028fc:	4699      	mov	r9, r3
 80028fe:	0013      	movs	r3, r2
 8002900:	464f      	mov	r7, r9
 8002902:	40f3      	lsrs	r3, r6
 8002904:	431f      	orrs	r7, r3
 8002906:	003b      	movs	r3, r7
 8002908:	4657      	mov	r7, sl
 800290a:	40ba      	lsls	r2, r7
 800290c:	1e57      	subs	r7, r2, #1
 800290e:	41ba      	sbcs	r2, r7
 8002910:	4313      	orrs	r3, r2
 8002912:	4662      	mov	r2, ip
 8002914:	40f2      	lsrs	r2, r6
 8002916:	1a89      	subs	r1, r1, r2
 8002918:	e79c      	b.n	8002854 <__aeabi_dsub+0x3b4>
 800291a:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <__aeabi_dsub+0x688>)
 800291c:	429f      	cmp	r7, r3
 800291e:	d05f      	beq.n	80029e0 <__aeabi_dsub+0x540>
 8002920:	2580      	movs	r5, #128	; 0x80
 8002922:	042d      	lsls	r5, r5, #16
 8002924:	4273      	negs	r3, r6
 8002926:	4329      	orrs	r1, r5
 8002928:	e720      	b.n	800276c <__aeabi_dsub+0x2cc>
 800292a:	2e00      	cmp	r6, #0
 800292c:	d10c      	bne.n	8002948 <__aeabi_dsub+0x4a8>
 800292e:	2f00      	cmp	r7, #0
 8002930:	d100      	bne.n	8002934 <__aeabi_dsub+0x494>
 8002932:	e0d0      	b.n	8002ad6 <__aeabi_dsub+0x636>
 8002934:	465c      	mov	r4, fp
 8002936:	4661      	mov	r1, ip
 8002938:	4691      	mov	r9, r2
 800293a:	4d7b      	ldr	r5, [pc, #492]	; (8002b28 <__aeabi_dsub+0x688>)
 800293c:	e6cd      	b.n	80026da <__aeabi_dsub+0x23a>
 800293e:	4f7a      	ldr	r7, [pc, #488]	; (8002b28 <__aeabi_dsub+0x688>)
 8002940:	42be      	cmp	r6, r7
 8002942:	d01c      	beq.n	800297e <__aeabi_dsub+0x4de>
 8002944:	001e      	movs	r6, r3
 8002946:	e665      	b.n	8002614 <__aeabi_dsub+0x174>
 8002948:	2f00      	cmp	r7, #0
 800294a:	d018      	beq.n	800297e <__aeabi_dsub+0x4de>
 800294c:	08c0      	lsrs	r0, r0, #3
 800294e:	074e      	lsls	r6, r1, #29
 8002950:	4306      	orrs	r6, r0
 8002952:	2080      	movs	r0, #128	; 0x80
 8002954:	08c9      	lsrs	r1, r1, #3
 8002956:	0300      	lsls	r0, r0, #12
 8002958:	4201      	tst	r1, r0
 800295a:	d008      	beq.n	800296e <__aeabi_dsub+0x4ce>
 800295c:	4663      	mov	r3, ip
 800295e:	08dc      	lsrs	r4, r3, #3
 8002960:	4204      	tst	r4, r0
 8002962:	d104      	bne.n	800296e <__aeabi_dsub+0x4ce>
 8002964:	0021      	movs	r1, r4
 8002966:	46da      	mov	sl, fp
 8002968:	08d2      	lsrs	r2, r2, #3
 800296a:	075e      	lsls	r6, r3, #29
 800296c:	4316      	orrs	r6, r2
 800296e:	00f3      	lsls	r3, r6, #3
 8002970:	4699      	mov	r9, r3
 8002972:	2401      	movs	r4, #1
 8002974:	4653      	mov	r3, sl
 8002976:	00c9      	lsls	r1, r1, #3
 8002978:	0f72      	lsrs	r2, r6, #29
 800297a:	4311      	orrs	r1, r2
 800297c:	401c      	ands	r4, r3
 800297e:	4d6a      	ldr	r5, [pc, #424]	; (8002b28 <__aeabi_dsub+0x688>)
 8002980:	e6ab      	b.n	80026da <__aeabi_dsub+0x23a>
 8002982:	001d      	movs	r5, r3
 8002984:	2200      	movs	r2, #0
 8002986:	2700      	movs	r7, #0
 8002988:	e6b4      	b.n	80026f4 <__aeabi_dsub+0x254>
 800298a:	2d00      	cmp	r5, #0
 800298c:	d159      	bne.n	8002a42 <__aeabi_dsub+0x5a2>
 800298e:	000b      	movs	r3, r1
 8002990:	4303      	orrs	r3, r0
 8002992:	d100      	bne.n	8002996 <__aeabi_dsub+0x4f6>
 8002994:	e6d6      	b.n	8002744 <__aeabi_dsub+0x2a4>
 8002996:	1c73      	adds	r3, r6, #1
 8002998:	d100      	bne.n	800299c <__aeabi_dsub+0x4fc>
 800299a:	e0b2      	b.n	8002b02 <__aeabi_dsub+0x662>
 800299c:	4b62      	ldr	r3, [pc, #392]	; (8002b28 <__aeabi_dsub+0x688>)
 800299e:	429f      	cmp	r7, r3
 80029a0:	d01e      	beq.n	80029e0 <__aeabi_dsub+0x540>
 80029a2:	43f3      	mvns	r3, r6
 80029a4:	2b38      	cmp	r3, #56	; 0x38
 80029a6:	dc6f      	bgt.n	8002a88 <__aeabi_dsub+0x5e8>
 80029a8:	2b1f      	cmp	r3, #31
 80029aa:	dd00      	ble.n	80029ae <__aeabi_dsub+0x50e>
 80029ac:	e097      	b.n	8002ade <__aeabi_dsub+0x63e>
 80029ae:	2520      	movs	r5, #32
 80029b0:	000e      	movs	r6, r1
 80029b2:	1aed      	subs	r5, r5, r3
 80029b4:	40ae      	lsls	r6, r5
 80029b6:	46b0      	mov	r8, r6
 80029b8:	0006      	movs	r6, r0
 80029ba:	46aa      	mov	sl, r5
 80029bc:	40de      	lsrs	r6, r3
 80029be:	4645      	mov	r5, r8
 80029c0:	4335      	orrs	r5, r6
 80029c2:	002e      	movs	r6, r5
 80029c4:	4655      	mov	r5, sl
 80029c6:	40a8      	lsls	r0, r5
 80029c8:	40d9      	lsrs	r1, r3
 80029ca:	1e45      	subs	r5, r0, #1
 80029cc:	41a8      	sbcs	r0, r5
 80029ce:	448c      	add	ip, r1
 80029d0:	4306      	orrs	r6, r0
 80029d2:	18b6      	adds	r6, r6, r2
 80029d4:	4296      	cmp	r6, r2
 80029d6:	4192      	sbcs	r2, r2
 80029d8:	4251      	negs	r1, r2
 80029da:	4461      	add	r1, ip
 80029dc:	003d      	movs	r5, r7
 80029de:	e625      	b.n	800262c <__aeabi_dsub+0x18c>
 80029e0:	003d      	movs	r5, r7
 80029e2:	4661      	mov	r1, ip
 80029e4:	4691      	mov	r9, r2
 80029e6:	e678      	b.n	80026da <__aeabi_dsub+0x23a>
 80029e8:	000b      	movs	r3, r1
 80029ea:	4303      	orrs	r3, r0
 80029ec:	2d00      	cmp	r5, #0
 80029ee:	d000      	beq.n	80029f2 <__aeabi_dsub+0x552>
 80029f0:	e655      	b.n	800269e <__aeabi_dsub+0x1fe>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f5      	beq.n	80029e2 <__aeabi_dsub+0x542>
 80029f6:	4663      	mov	r3, ip
 80029f8:	4313      	orrs	r3, r2
 80029fa:	d100      	bne.n	80029fe <__aeabi_dsub+0x55e>
 80029fc:	e66d      	b.n	80026da <__aeabi_dsub+0x23a>
 80029fe:	1886      	adds	r6, r0, r2
 8002a00:	4286      	cmp	r6, r0
 8002a02:	4180      	sbcs	r0, r0
 8002a04:	4461      	add	r1, ip
 8002a06:	4240      	negs	r0, r0
 8002a08:	1809      	adds	r1, r1, r0
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	020b      	lsls	r3, r1, #8
 8002a0e:	d400      	bmi.n	8002a12 <__aeabi_dsub+0x572>
 8002a10:	e6d0      	b.n	80027b4 <__aeabi_dsub+0x314>
 8002a12:	4b46      	ldr	r3, [pc, #280]	; (8002b2c <__aeabi_dsub+0x68c>)
 8002a14:	3501      	adds	r5, #1
 8002a16:	4019      	ands	r1, r3
 8002a18:	e5b2      	b.n	8002580 <__aeabi_dsub+0xe0>
 8002a1a:	46b1      	mov	r9, r6
 8002a1c:	e65d      	b.n	80026da <__aeabi_dsub+0x23a>
 8002a1e:	0033      	movs	r3, r6
 8002a20:	4667      	mov	r7, ip
 8002a22:	3b20      	subs	r3, #32
 8002a24:	40df      	lsrs	r7, r3
 8002a26:	003b      	movs	r3, r7
 8002a28:	2e20      	cmp	r6, #32
 8002a2a:	d005      	beq.n	8002a38 <__aeabi_dsub+0x598>
 8002a2c:	2740      	movs	r7, #64	; 0x40
 8002a2e:	1bbf      	subs	r7, r7, r6
 8002a30:	4666      	mov	r6, ip
 8002a32:	40be      	lsls	r6, r7
 8002a34:	4332      	orrs	r2, r6
 8002a36:	4690      	mov	r8, r2
 8002a38:	4646      	mov	r6, r8
 8002a3a:	1e72      	subs	r2, r6, #1
 8002a3c:	4196      	sbcs	r6, r2
 8002a3e:	4333      	orrs	r3, r6
 8002a40:	e5ef      	b.n	8002622 <__aeabi_dsub+0x182>
 8002a42:	4b39      	ldr	r3, [pc, #228]	; (8002b28 <__aeabi_dsub+0x688>)
 8002a44:	429f      	cmp	r7, r3
 8002a46:	d0cb      	beq.n	80029e0 <__aeabi_dsub+0x540>
 8002a48:	2580      	movs	r5, #128	; 0x80
 8002a4a:	042d      	lsls	r5, r5, #16
 8002a4c:	4273      	negs	r3, r6
 8002a4e:	4329      	orrs	r1, r5
 8002a50:	e7a8      	b.n	80029a4 <__aeabi_dsub+0x504>
 8002a52:	4308      	orrs	r0, r1
 8002a54:	1e41      	subs	r1, r0, #1
 8002a56:	4188      	sbcs	r0, r1
 8002a58:	e6a2      	b.n	80027a0 <__aeabi_dsub+0x300>
 8002a5a:	2f00      	cmp	r7, #0
 8002a5c:	d100      	bne.n	8002a60 <__aeabi_dsub+0x5c0>
 8002a5e:	e63c      	b.n	80026da <__aeabi_dsub+0x23a>
 8002a60:	4663      	mov	r3, ip
 8002a62:	1a86      	subs	r6, r0, r2
 8002a64:	1acf      	subs	r7, r1, r3
 8002a66:	42b0      	cmp	r0, r6
 8002a68:	419b      	sbcs	r3, r3
 8002a6a:	425b      	negs	r3, r3
 8002a6c:	1afb      	subs	r3, r7, r3
 8002a6e:	4698      	mov	r8, r3
 8002a70:	021b      	lsls	r3, r3, #8
 8002a72:	d54e      	bpl.n	8002b12 <__aeabi_dsub+0x672>
 8002a74:	1a16      	subs	r6, r2, r0
 8002a76:	4663      	mov	r3, ip
 8002a78:	42b2      	cmp	r2, r6
 8002a7a:	4192      	sbcs	r2, r2
 8002a7c:	1a59      	subs	r1, r3, r1
 8002a7e:	4252      	negs	r2, r2
 8002a80:	1a89      	subs	r1, r1, r2
 8002a82:	465c      	mov	r4, fp
 8002a84:	2200      	movs	r2, #0
 8002a86:	e57b      	b.n	8002580 <__aeabi_dsub+0xe0>
 8002a88:	4301      	orrs	r1, r0
 8002a8a:	000e      	movs	r6, r1
 8002a8c:	1e71      	subs	r1, r6, #1
 8002a8e:	418e      	sbcs	r6, r1
 8002a90:	e79f      	b.n	80029d2 <__aeabi_dsub+0x532>
 8002a92:	001d      	movs	r5, r3
 8002a94:	000e      	movs	r6, r1
 8002a96:	3d20      	subs	r5, #32
 8002a98:	40ee      	lsrs	r6, r5
 8002a9a:	46b0      	mov	r8, r6
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	d004      	beq.n	8002aaa <__aeabi_dsub+0x60a>
 8002aa0:	2540      	movs	r5, #64	; 0x40
 8002aa2:	1aeb      	subs	r3, r5, r3
 8002aa4:	4099      	lsls	r1, r3
 8002aa6:	4308      	orrs	r0, r1
 8002aa8:	4681      	mov	r9, r0
 8002aaa:	4648      	mov	r0, r9
 8002aac:	4643      	mov	r3, r8
 8002aae:	1e41      	subs	r1, r0, #1
 8002ab0:	4188      	sbcs	r0, r1
 8002ab2:	4318      	orrs	r0, r3
 8002ab4:	e674      	b.n	80027a0 <__aeabi_dsub+0x300>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2400      	movs	r4, #0
 8002aba:	e617      	b.n	80026ec <__aeabi_dsub+0x24c>
 8002abc:	1a16      	subs	r6, r2, r0
 8002abe:	4663      	mov	r3, ip
 8002ac0:	42b2      	cmp	r2, r6
 8002ac2:	4192      	sbcs	r2, r2
 8002ac4:	1a59      	subs	r1, r3, r1
 8002ac6:	4252      	negs	r2, r2
 8002ac8:	1a89      	subs	r1, r1, r2
 8002aca:	003d      	movs	r5, r7
 8002acc:	e525      	b.n	800251a <__aeabi_dsub+0x7a>
 8002ace:	4661      	mov	r1, ip
 8002ad0:	4691      	mov	r9, r2
 8002ad2:	4d15      	ldr	r5, [pc, #84]	; (8002b28 <__aeabi_dsub+0x688>)
 8002ad4:	e601      	b.n	80026da <__aeabi_dsub+0x23a>
 8002ad6:	2280      	movs	r2, #128	; 0x80
 8002ad8:	2400      	movs	r4, #0
 8002ada:	0312      	lsls	r2, r2, #12
 8002adc:	e679      	b.n	80027d2 <__aeabi_dsub+0x332>
 8002ade:	001d      	movs	r5, r3
 8002ae0:	000e      	movs	r6, r1
 8002ae2:	3d20      	subs	r5, #32
 8002ae4:	40ee      	lsrs	r6, r5
 8002ae6:	46b0      	mov	r8, r6
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d004      	beq.n	8002af6 <__aeabi_dsub+0x656>
 8002aec:	2540      	movs	r5, #64	; 0x40
 8002aee:	1aeb      	subs	r3, r5, r3
 8002af0:	4099      	lsls	r1, r3
 8002af2:	4308      	orrs	r0, r1
 8002af4:	4681      	mov	r9, r0
 8002af6:	464e      	mov	r6, r9
 8002af8:	4643      	mov	r3, r8
 8002afa:	1e71      	subs	r1, r6, #1
 8002afc:	418e      	sbcs	r6, r1
 8002afe:	431e      	orrs	r6, r3
 8002b00:	e767      	b.n	80029d2 <__aeabi_dsub+0x532>
 8002b02:	1886      	adds	r6, r0, r2
 8002b04:	4296      	cmp	r6, r2
 8002b06:	419b      	sbcs	r3, r3
 8002b08:	4461      	add	r1, ip
 8002b0a:	425b      	negs	r3, r3
 8002b0c:	18c9      	adds	r1, r1, r3
 8002b0e:	003d      	movs	r5, r7
 8002b10:	e58c      	b.n	800262c <__aeabi_dsub+0x18c>
 8002b12:	4647      	mov	r7, r8
 8002b14:	4337      	orrs	r7, r6
 8002b16:	d0ce      	beq.n	8002ab6 <__aeabi_dsub+0x616>
 8002b18:	2207      	movs	r2, #7
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	4032      	ands	r2, r6
 8002b1e:	e649      	b.n	80027b4 <__aeabi_dsub+0x314>
 8002b20:	2700      	movs	r7, #0
 8002b22:	003a      	movs	r2, r7
 8002b24:	e5e6      	b.n	80026f4 <__aeabi_dsub+0x254>
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	000007ff 	.word	0x000007ff
 8002b2c:	ff7fffff 	.word	0xff7fffff

08002b30 <__aeabi_d2iz>:
 8002b30:	b530      	push	{r4, r5, lr}
 8002b32:	4d14      	ldr	r5, [pc, #80]	; (8002b84 <__aeabi_d2iz+0x54>)
 8002b34:	030a      	lsls	r2, r1, #12
 8002b36:	004b      	lsls	r3, r1, #1
 8002b38:	0b12      	lsrs	r2, r2, #12
 8002b3a:	0d5b      	lsrs	r3, r3, #21
 8002b3c:	0fc9      	lsrs	r1, r1, #31
 8002b3e:	2400      	movs	r4, #0
 8002b40:	42ab      	cmp	r3, r5
 8002b42:	dd11      	ble.n	8002b68 <__aeabi_d2iz+0x38>
 8002b44:	4c10      	ldr	r4, [pc, #64]	; (8002b88 <__aeabi_d2iz+0x58>)
 8002b46:	42a3      	cmp	r3, r4
 8002b48:	dc10      	bgt.n	8002b6c <__aeabi_d2iz+0x3c>
 8002b4a:	2480      	movs	r4, #128	; 0x80
 8002b4c:	0364      	lsls	r4, r4, #13
 8002b4e:	4322      	orrs	r2, r4
 8002b50:	4c0e      	ldr	r4, [pc, #56]	; (8002b8c <__aeabi_d2iz+0x5c>)
 8002b52:	1ae4      	subs	r4, r4, r3
 8002b54:	2c1f      	cmp	r4, #31
 8002b56:	dd0c      	ble.n	8002b72 <__aeabi_d2iz+0x42>
 8002b58:	480d      	ldr	r0, [pc, #52]	; (8002b90 <__aeabi_d2iz+0x60>)
 8002b5a:	1ac3      	subs	r3, r0, r3
 8002b5c:	40da      	lsrs	r2, r3
 8002b5e:	0013      	movs	r3, r2
 8002b60:	425c      	negs	r4, r3
 8002b62:	2900      	cmp	r1, #0
 8002b64:	d100      	bne.n	8002b68 <__aeabi_d2iz+0x38>
 8002b66:	001c      	movs	r4, r3
 8002b68:	0020      	movs	r0, r4
 8002b6a:	bd30      	pop	{r4, r5, pc}
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <__aeabi_d2iz+0x64>)
 8002b6e:	18cc      	adds	r4, r1, r3
 8002b70:	e7fa      	b.n	8002b68 <__aeabi_d2iz+0x38>
 8002b72:	4d09      	ldr	r5, [pc, #36]	; (8002b98 <__aeabi_d2iz+0x68>)
 8002b74:	40e0      	lsrs	r0, r4
 8002b76:	46ac      	mov	ip, r5
 8002b78:	4463      	add	r3, ip
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	0013      	movs	r3, r2
 8002b7e:	4303      	orrs	r3, r0
 8002b80:	e7ee      	b.n	8002b60 <__aeabi_d2iz+0x30>
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	000003fe 	.word	0x000003fe
 8002b88:	0000041d 	.word	0x0000041d
 8002b8c:	00000433 	.word	0x00000433
 8002b90:	00000413 	.word	0x00000413
 8002b94:	7fffffff 	.word	0x7fffffff
 8002b98:	fffffbed 	.word	0xfffffbed

08002b9c <__aeabi_i2d>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d02d      	beq.n	8002bfe <__aeabi_i2d+0x62>
 8002ba2:	17c3      	asrs	r3, r0, #31
 8002ba4:	18c5      	adds	r5, r0, r3
 8002ba6:	405d      	eors	r5, r3
 8002ba8:	0fc4      	lsrs	r4, r0, #31
 8002baa:	0028      	movs	r0, r5
 8002bac:	f000 f8b4 	bl	8002d18 <__clzsi2>
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <__aeabi_i2d+0x6c>)
 8002bb2:	1a1b      	subs	r3, r3, r0
 8002bb4:	055b      	lsls	r3, r3, #21
 8002bb6:	0d5b      	lsrs	r3, r3, #21
 8002bb8:	280a      	cmp	r0, #10
 8002bba:	dd15      	ble.n	8002be8 <__aeabi_i2d+0x4c>
 8002bbc:	380b      	subs	r0, #11
 8002bbe:	4085      	lsls	r5, r0
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	032d      	lsls	r5, r5, #12
 8002bc4:	0b2d      	lsrs	r5, r5, #12
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	0010      	movs	r0, r2
 8002bca:	032d      	lsls	r5, r5, #12
 8002bcc:	0d0a      	lsrs	r2, r1, #20
 8002bce:	0b2d      	lsrs	r5, r5, #12
 8002bd0:	0512      	lsls	r2, r2, #20
 8002bd2:	432a      	orrs	r2, r5
 8002bd4:	4d0d      	ldr	r5, [pc, #52]	; (8002c0c <__aeabi_i2d+0x70>)
 8002bd6:	051b      	lsls	r3, r3, #20
 8002bd8:	402a      	ands	r2, r5
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	07e4      	lsls	r4, r4, #31
 8002be0:	085b      	lsrs	r3, r3, #1
 8002be2:	4323      	orrs	r3, r4
 8002be4:	0019      	movs	r1, r3
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	0002      	movs	r2, r0
 8002bea:	0029      	movs	r1, r5
 8002bec:	3215      	adds	r2, #21
 8002bee:	4091      	lsls	r1, r2
 8002bf0:	000a      	movs	r2, r1
 8002bf2:	210b      	movs	r1, #11
 8002bf4:	1a08      	subs	r0, r1, r0
 8002bf6:	40c5      	lsrs	r5, r0
 8002bf8:	032d      	lsls	r5, r5, #12
 8002bfa:	0b2d      	lsrs	r5, r5, #12
 8002bfc:	e7e3      	b.n	8002bc6 <__aeabi_i2d+0x2a>
 8002bfe:	2400      	movs	r4, #0
 8002c00:	2300      	movs	r3, #0
 8002c02:	2500      	movs	r5, #0
 8002c04:	2200      	movs	r2, #0
 8002c06:	e7de      	b.n	8002bc6 <__aeabi_i2d+0x2a>
 8002c08:	0000041e 	.word	0x0000041e
 8002c0c:	800fffff 	.word	0x800fffff

08002c10 <__aeabi_ui2d>:
 8002c10:	b510      	push	{r4, lr}
 8002c12:	1e04      	subs	r4, r0, #0
 8002c14:	d025      	beq.n	8002c62 <__aeabi_ui2d+0x52>
 8002c16:	f000 f87f 	bl	8002d18 <__clzsi2>
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <__aeabi_ui2d+0x5c>)
 8002c1c:	1a1b      	subs	r3, r3, r0
 8002c1e:	055b      	lsls	r3, r3, #21
 8002c20:	0d5b      	lsrs	r3, r3, #21
 8002c22:	280a      	cmp	r0, #10
 8002c24:	dd12      	ble.n	8002c4c <__aeabi_ui2d+0x3c>
 8002c26:	380b      	subs	r0, #11
 8002c28:	4084      	lsls	r4, r0
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	0324      	lsls	r4, r4, #12
 8002c2e:	0b24      	lsrs	r4, r4, #12
 8002c30:	2100      	movs	r1, #0
 8002c32:	0010      	movs	r0, r2
 8002c34:	0324      	lsls	r4, r4, #12
 8002c36:	0d0a      	lsrs	r2, r1, #20
 8002c38:	0b24      	lsrs	r4, r4, #12
 8002c3a:	0512      	lsls	r2, r2, #20
 8002c3c:	4322      	orrs	r2, r4
 8002c3e:	4c0c      	ldr	r4, [pc, #48]	; (8002c70 <__aeabi_ui2d+0x60>)
 8002c40:	051b      	lsls	r3, r3, #20
 8002c42:	4022      	ands	r2, r4
 8002c44:	4313      	orrs	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	0859      	lsrs	r1, r3, #1
 8002c4a:	bd10      	pop	{r4, pc}
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	0021      	movs	r1, r4
 8002c50:	3215      	adds	r2, #21
 8002c52:	4091      	lsls	r1, r2
 8002c54:	000a      	movs	r2, r1
 8002c56:	210b      	movs	r1, #11
 8002c58:	1a08      	subs	r0, r1, r0
 8002c5a:	40c4      	lsrs	r4, r0
 8002c5c:	0324      	lsls	r4, r4, #12
 8002c5e:	0b24      	lsrs	r4, r4, #12
 8002c60:	e7e6      	b.n	8002c30 <__aeabi_ui2d+0x20>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2400      	movs	r4, #0
 8002c66:	2200      	movs	r2, #0
 8002c68:	e7e2      	b.n	8002c30 <__aeabi_ui2d+0x20>
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	0000041e 	.word	0x0000041e
 8002c70:	800fffff 	.word	0x800fffff

08002c74 <__aeabi_f2d>:
 8002c74:	0041      	lsls	r1, r0, #1
 8002c76:	0e09      	lsrs	r1, r1, #24
 8002c78:	1c4b      	adds	r3, r1, #1
 8002c7a:	b570      	push	{r4, r5, r6, lr}
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	0246      	lsls	r6, r0, #9
 8002c80:	0a75      	lsrs	r5, r6, #9
 8002c82:	0fc4      	lsrs	r4, r0, #31
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	dd14      	ble.n	8002cb2 <__aeabi_f2d+0x3e>
 8002c88:	23e0      	movs	r3, #224	; 0xe0
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	076d      	lsls	r5, r5, #29
 8002c8e:	0b36      	lsrs	r6, r6, #12
 8002c90:	18cb      	adds	r3, r1, r3
 8002c92:	2100      	movs	r1, #0
 8002c94:	0d0a      	lsrs	r2, r1, #20
 8002c96:	0028      	movs	r0, r5
 8002c98:	0512      	lsls	r2, r2, #20
 8002c9a:	4d1c      	ldr	r5, [pc, #112]	; (8002d0c <__aeabi_f2d+0x98>)
 8002c9c:	4332      	orrs	r2, r6
 8002c9e:	055b      	lsls	r3, r3, #21
 8002ca0:	402a      	ands	r2, r5
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	07e4      	lsls	r4, r4, #31
 8002caa:	085b      	lsrs	r3, r3, #1
 8002cac:	4323      	orrs	r3, r4
 8002cae:	0019      	movs	r1, r3
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}
 8002cb2:	2900      	cmp	r1, #0
 8002cb4:	d114      	bne.n	8002ce0 <__aeabi_f2d+0x6c>
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	d01e      	beq.n	8002cf8 <__aeabi_f2d+0x84>
 8002cba:	0028      	movs	r0, r5
 8002cbc:	f000 f82c 	bl	8002d18 <__clzsi2>
 8002cc0:	280a      	cmp	r0, #10
 8002cc2:	dc1c      	bgt.n	8002cfe <__aeabi_f2d+0x8a>
 8002cc4:	230b      	movs	r3, #11
 8002cc6:	002a      	movs	r2, r5
 8002cc8:	1a1b      	subs	r3, r3, r0
 8002cca:	40da      	lsrs	r2, r3
 8002ccc:	0003      	movs	r3, r0
 8002cce:	3315      	adds	r3, #21
 8002cd0:	409d      	lsls	r5, r3
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <__aeabi_f2d+0x9c>)
 8002cd4:	0312      	lsls	r2, r2, #12
 8002cd6:	1a1b      	subs	r3, r3, r0
 8002cd8:	055b      	lsls	r3, r3, #21
 8002cda:	0b16      	lsrs	r6, r2, #12
 8002cdc:	0d5b      	lsrs	r3, r3, #21
 8002cde:	e7d8      	b.n	8002c92 <__aeabi_f2d+0x1e>
 8002ce0:	2d00      	cmp	r5, #0
 8002ce2:	d006      	beq.n	8002cf2 <__aeabi_f2d+0x7e>
 8002ce4:	0b32      	lsrs	r2, r6, #12
 8002ce6:	2680      	movs	r6, #128	; 0x80
 8002ce8:	0336      	lsls	r6, r6, #12
 8002cea:	076d      	lsls	r5, r5, #29
 8002cec:	4316      	orrs	r6, r2
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <__aeabi_f2d+0xa0>)
 8002cf0:	e7cf      	b.n	8002c92 <__aeabi_f2d+0x1e>
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <__aeabi_f2d+0xa0>)
 8002cf4:	2600      	movs	r6, #0
 8002cf6:	e7cc      	b.n	8002c92 <__aeabi_f2d+0x1e>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2600      	movs	r6, #0
 8002cfc:	e7c9      	b.n	8002c92 <__aeabi_f2d+0x1e>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	002a      	movs	r2, r5
 8002d02:	3b0b      	subs	r3, #11
 8002d04:	409a      	lsls	r2, r3
 8002d06:	2500      	movs	r5, #0
 8002d08:	e7e3      	b.n	8002cd2 <__aeabi_f2d+0x5e>
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	800fffff 	.word	0x800fffff
 8002d10:	00000389 	.word	0x00000389
 8002d14:	000007ff 	.word	0x000007ff

08002d18 <__clzsi2>:
 8002d18:	211c      	movs	r1, #28
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	4298      	cmp	r0, r3
 8002d20:	d301      	bcc.n	8002d26 <__clzsi2+0xe>
 8002d22:	0c00      	lsrs	r0, r0, #16
 8002d24:	3910      	subs	r1, #16
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	4298      	cmp	r0, r3
 8002d2a:	d301      	bcc.n	8002d30 <__clzsi2+0x18>
 8002d2c:	0a00      	lsrs	r0, r0, #8
 8002d2e:	3908      	subs	r1, #8
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	4298      	cmp	r0, r3
 8002d34:	d301      	bcc.n	8002d3a <__clzsi2+0x22>
 8002d36:	0900      	lsrs	r0, r0, #4
 8002d38:	3904      	subs	r1, #4
 8002d3a:	a202      	add	r2, pc, #8	; (adr r2, 8002d44 <__clzsi2+0x2c>)
 8002d3c:	5c10      	ldrb	r0, [r2, r0]
 8002d3e:	1840      	adds	r0, r0, r1
 8002d40:	4770      	bx	lr
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	02020304 	.word	0x02020304
 8002d48:	01010101 	.word	0x01010101
	...

08002d54 <__clzdi2>:
 8002d54:	b510      	push	{r4, lr}
 8002d56:	2900      	cmp	r1, #0
 8002d58:	d103      	bne.n	8002d62 <__clzdi2+0xe>
 8002d5a:	f7ff ffdd 	bl	8002d18 <__clzsi2>
 8002d5e:	3020      	adds	r0, #32
 8002d60:	e002      	b.n	8002d68 <__clzdi2+0x14>
 8002d62:	1c08      	adds	r0, r1, #0
 8002d64:	f7ff ffd8 	bl	8002d18 <__clzsi2>
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	46c0      	nop			; (mov r8, r8)

08002d6c <BSP_sensor_Init>:
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
  /* USER CODE END 5 */
}

void  BSP_sensor_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  BSP_HUMIDITY_Sensor_Enable(HUMIDITY_handle);
  BSP_TEMPERATURE_Sensor_Enable(TEMPERATURE_handle);
  BSP_PRESSURE_Sensor_Enable(PRESSURE_handle);
#endif
  /* USER CODE END 6 */
}
 8002d70:	46c0      	nop			; (mov r8, r8)
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <DBG_Init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions ------------------------------------------------------- */

void DBG_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
#ifdef DEBUG
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002d7e:	1d3b      	adds	r3, r7, #4
 8002d80:	0018      	movs	r0, r3
 8002d82:	2314      	movs	r3, #20
 8002d84:	001a      	movs	r2, r3
 8002d86:	2100      	movs	r1, #0
 8002d88:	f016 fde6 	bl	8019958 <memset>

  /* Enable the GPIO_B Clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8c:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <DBG_Init+0xac>)
 8002d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d90:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <DBG_Init+0xac>)
 8002d92:	2102      	movs	r1, #2
 8002d94:	430a      	orrs	r2, r1
 8002d96:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d98:	4b22      	ldr	r3, [pc, #136]	; (8002e24 <DBG_Init+0xac>)
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	4013      	ands	r3, r2
 8002da0:	603b      	str	r3, [r7, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]

  /* Configure the GPIO pin */
  gpioinitstruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8002da4:	1d3b      	adds	r3, r7, #4
 8002da6:	2201      	movs	r2, #1
 8002da8:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull   = GPIO_PULLUP;
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2201      	movs	r2, #1
 8002dae:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed  = GPIO_SPEED_HIGH;
 8002db0:	1d3b      	adds	r3, r7, #4
 8002db2:	2203      	movs	r2, #3
 8002db4:	60da      	str	r2, [r3, #12]

  gpioinitstruct.Pin    = (GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 8002db6:	1d3b      	adds	r3, r7, #4
 8002db8:	22f0      	movs	r2, #240	; 0xf0
 8002dba:	0212      	lsls	r2, r2, #8
 8002dbc:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &gpioinitstruct);
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <DBG_Init+0xb0>)
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	0010      	movs	r0, r2
 8002dc6:	f005 fe03 	bl	80089d0 <HAL_GPIO_Init>

  /* Reset debug Pins */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	015b      	lsls	r3, r3, #5
 8002dce:	4816      	ldr	r0, [pc, #88]	; (8002e28 <DBG_Init+0xb0>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	f005 ff7a 	bl	8008ccc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	019b      	lsls	r3, r3, #6
 8002ddc:	4812      	ldr	r0, [pc, #72]	; (8002e28 <DBG_Init+0xb0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	0019      	movs	r1, r3
 8002de2:	f005 ff73 	bl	8008ccc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	01db      	lsls	r3, r3, #7
 8002dea:	480f      	ldr	r0, [pc, #60]	; (8002e28 <DBG_Init+0xb0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	0019      	movs	r1, r3
 8002df0:	f005 ff6c 	bl	8008ccc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	480b      	ldr	r0, [pc, #44]	; (8002e28 <DBG_Init+0xb0>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	0019      	movs	r1, r3
 8002dfe:	f005 ff65 	bl	8008ccc <HAL_GPIO_WritePin>

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <DBG_Init+0xac>)
 8002e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <DBG_Init+0xac>)
 8002e08:	2180      	movs	r1, #128	; 0x80
 8002e0a:	03c9      	lsls	r1, r1, #15
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_DBGMCU_EnableDBGSleepMode();
 8002e10:	f004 fefc 	bl	8007c0c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002e14:	f004 ff08 	bl	8007c28 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002e18:	f004 ff14 	bl	8007c44 <HAL_DBGMCU_EnableDBGStandbyMode>
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
  __HAL_RCC_DBGMCU_CLK_DISABLE();
#endif
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b006      	add	sp, #24
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40021000 	.word	0x40021000
 8002e28:	50000400 	.word	0x50000400

08002e2c <Error_Handler>:

void Error_Handler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  PRINTF("Error_Handler\n\r");
 8002e30:	4b02      	ldr	r3, [pc, #8]	; (8002e3c <Error_Handler+0x10>)
 8002e32:	0018      	movs	r0, r3
 8002e34:	f016 fc04 	bl	8019640 <TraceSend>
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <Error_Handler+0xc>
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	0801a49c 	.word	0x0801a49c

08002e40 <HW_GPIO_Init>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] initStruct  GPIO_InitTypeDef intit structure
 * @retval none
 */
void HW_GPIO_Init(GPIO_TypeDef *port, uint16_t GPIO_Pin, GPIO_InitTypeDef *initStruct)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	230a      	movs	r3, #10
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	1c0a      	adds	r2, r1, #0
 8002e50:	801a      	strh	r2, [r3, #0]

  RCC_GPIO_CLK_ENABLE((uint32_t) port);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HW_GPIO_Init+0xd8>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d01b      	beq.n	8002e92 <HW_GPIO_Init+0x52>
 8002e5a:	4a2f      	ldr	r2, [pc, #188]	; (8002f18 <HW_GPIO_Init+0xd8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d804      	bhi.n	8002e6a <HW_GPIO_Init+0x2a>
 8002e60:	22a0      	movs	r2, #160	; 0xa0
 8002e62:	05d2      	lsls	r2, r2, #23
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d007      	beq.n	8002e78 <HW_GPIO_Init+0x38>
 8002e68:	e03a      	b.n	8002ee0 <HW_GPIO_Init+0xa0>
 8002e6a:	4a2c      	ldr	r2, [pc, #176]	; (8002f1c <HW_GPIO_Init+0xdc>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d01d      	beq.n	8002eac <HW_GPIO_Init+0x6c>
 8002e70:	4a2b      	ldr	r2, [pc, #172]	; (8002f20 <HW_GPIO_Init+0xe0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d027      	beq.n	8002ec6 <HW_GPIO_Init+0x86>
 8002e76:	e033      	b.n	8002ee0 <HW_GPIO_Init+0xa0>
 8002e78:	4b2a      	ldr	r3, [pc, #168]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7c:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002e7e:	2101      	movs	r1, #1
 8002e80:	430a      	orrs	r2, r1
 8002e82:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e84:	4b27      	ldr	r3, [pc, #156]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	e032      	b.n	8002ef8 <HW_GPIO_Init+0xb8>
 8002e92:	4b24      	ldr	r3, [pc, #144]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e96:	4b23      	ldr	r3, [pc, #140]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002e98:	2102      	movs	r1, #2
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e9e:	4b21      	ldr	r3, [pc, #132]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	623b      	str	r3, [r7, #32]
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	e025      	b.n	8002ef8 <HW_GPIO_Init+0xb8>
 8002eac:	4b1d      	ldr	r3, [pc, #116]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	4b1c      	ldr	r3, [pc, #112]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002eb2:	2104      	movs	r1, #4
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	e018      	b.n	8002ef8 <HW_GPIO_Init+0xb8>
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002ecc:	2108      	movs	r1, #8
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	2208      	movs	r2, #8
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	e00b      	b.n	8002ef8 <HW_GPIO_Init+0xb8>
 8002ee0:	4b10      	ldr	r3, [pc, #64]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HW_GPIO_Init+0xe4>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697b      	ldr	r3, [r7, #20]

  initStruct->Pin = GPIO_Pin ;
 8002ef8:	230a      	movs	r3, #10
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	601a      	str	r2, [r3, #0]

  HAL_GPIO_Init(port, initStruct);
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f005 fd61 	bl	80089d0 <HAL_GPIO_Init>
}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b00a      	add	sp, #40	; 0x28
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	50000400 	.word	0x50000400
 8002f1c:	50000800 	.word	0x50000800
 8002f20:	50000c00 	.word	0x50000c00
 8002f24:	40021000 	.word	0x40021000

08002f28 <HW_GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void HW_GPIO_SetIrq(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler)
{
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	200a      	movs	r0, #10
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	1c0a      	adds	r2, r1, #0
 8002f3a:	801a      	strh	r2, [r3, #0]
  IRQn_Type IRQnb;

  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin) ;
 8002f3c:	183b      	adds	r3, r7, r0
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f000 f865 	bl	8003010 <HW_GPIO_GetBitPos>
 8002f46:	0003      	movs	r3, r0
 8002f48:	617b      	str	r3, [r7, #20]

  if (irqHandler != NULL)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01d      	beq.n	8002f8c <HW_GPIO_SetIrq+0x64>
  {
    GpioIrq[ BitPos ] = irqHandler;
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HW_GPIO_SetIrq+0x78>)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	0092      	lsls	r2, r2, #2
 8002f56:	6839      	ldr	r1, [r7, #0]
 8002f58:	50d1      	str	r1, [r2, r3]

    IRQnb = MSP_GetIRQn(GPIO_Pin);
 8002f5a:	2513      	movs	r5, #19
 8002f5c:	197c      	adds	r4, r7, r5
 8002f5e:	230a      	movs	r3, #10
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	0018      	movs	r0, r3
 8002f66:	f001 f9fc 	bl	8004362 <MSP_GetIRQn>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	7023      	strb	r3, [r4, #0]

    HAL_NVIC_SetPriority(IRQnb, prio, 0);
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	197b      	adds	r3, r7, r5
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b25b      	sxtb	r3, r3
 8002f76:	2200      	movs	r2, #0
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f005 fb01 	bl	8008580 <HAL_NVIC_SetPriority>

    HAL_NVIC_EnableIRQ(IRQnb);
 8002f7e:	197b      	adds	r3, r7, r5
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	b25b      	sxtb	r3, r3
 8002f84:	0018      	movs	r0, r3
 8002f86:	f005 fb10 	bl	80085aa <HAL_NVIC_EnableIRQ>
  }
  else
  {
    GpioIrq[ BitPos ] = NULL;
  }
}
 8002f8a:	e004      	b.n	8002f96 <HW_GPIO_SetIrq+0x6e>
    GpioIrq[ BitPos ] = NULL;
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <HW_GPIO_SetIrq+0x78>)
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	0092      	lsls	r2, r2, #2
 8002f92:	2100      	movs	r1, #0
 8002f94:	50d1      	str	r1, [r2, r3]
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b006      	add	sp, #24
 8002f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	20000174 	.word	0x20000174

08002fa4 <HW_GPIO_IrqHandler>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval none
 */
void HW_GPIO_IrqHandler(uint16_t GPIO_Pin)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	0002      	movs	r2, r0
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	801a      	strh	r2, [r3, #0]
  uint32_t BitPos = HW_GPIO_GetBitPos(GPIO_Pin);
 8002fb0:	1dbb      	adds	r3, r7, #6
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 f82b 	bl	8003010 <HW_GPIO_GetBitPos>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	60fb      	str	r3, [r7, #12]

  if (GpioIrq[ BitPos ]  != NULL)
 8002fbe:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <HW_GPIO_IrqHandler+0x3c>)
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	58d3      	ldr	r3, [r2, r3]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d005      	beq.n	8002fd6 <HW_GPIO_IrqHandler+0x32>
  {
    GpioIrq[ BitPos ](NULL);
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HW_GPIO_IrqHandler+0x3c>)
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	58d3      	ldr	r3, [r2, r3]
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	4798      	blx	r3
  }
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b004      	add	sp, #16
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	20000174 	.word	0x20000174

08002fe4 <HW_GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void HW_GPIO_Write(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,  uint32_t value)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	200a      	movs	r0, #10
 8002ff0:	183b      	adds	r3, r7, r0
 8002ff2:	1c0a      	adds	r2, r1, #0
 8002ff4:	801a      	strh	r2, [r3, #0]
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (GPIO_PinState) value);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	183b      	adds	r3, r7, r0
 8002ffc:	8819      	ldrh	r1, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0018      	movs	r0, r3
 8003002:	f005 fe63 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8003006:	46c0      	nop			; (mov r8, r8)
 8003008:	46bd      	mov	sp, r7
 800300a:	b004      	add	sp, #16
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HW_GPIO_GetBitPos>:
 *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
 *                   All port bits are not necessarily available on all GPIOs.
 * @retval the position of the bit
 */
static uint8_t HW_GPIO_GetBitPos(uint16_t GPIO_Pin)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	0002      	movs	r2, r0
 8003018:	1dbb      	adds	r3, r7, #6
 800301a:	801a      	strh	r2, [r3, #0]
  uint8_t PinPos = 0;
 800301c:	230f      	movs	r3, #15
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]

  if ((GPIO_Pin & 0xFF00) != 0)
 8003024:	1dbb      	adds	r3, r7, #6
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	23ff      	movs	r3, #255	; 0xff
 800302a:	021b      	lsls	r3, r3, #8
 800302c:	4013      	ands	r3, r2
 800302e:	d006      	beq.n	800303e <HW_GPIO_GetBitPos+0x2e>
  {
    PinPos |= 0x8;
 8003030:	220f      	movs	r2, #15
 8003032:	18bb      	adds	r3, r7, r2
 8003034:	18ba      	adds	r2, r7, r2
 8003036:	7812      	ldrb	r2, [r2, #0]
 8003038:	2108      	movs	r1, #8
 800303a:	430a      	orrs	r2, r1
 800303c:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xF0F0) != 0)
 800303e:	1dbb      	adds	r3, r7, #6
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	4a14      	ldr	r2, [pc, #80]	; (8003094 <HW_GPIO_GetBitPos+0x84>)
 8003044:	4013      	ands	r3, r2
 8003046:	d006      	beq.n	8003056 <HW_GPIO_GetBitPos+0x46>
  {
    PinPos |= 0x4;
 8003048:	220f      	movs	r2, #15
 800304a:	18bb      	adds	r3, r7, r2
 800304c:	18ba      	adds	r2, r7, r2
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	2104      	movs	r1, #4
 8003052:	430a      	orrs	r2, r1
 8003054:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xCCCC) != 0)
 8003056:	1dbb      	adds	r3, r7, #6
 8003058:	881b      	ldrh	r3, [r3, #0]
 800305a:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <HW_GPIO_GetBitPos+0x88>)
 800305c:	4013      	ands	r3, r2
 800305e:	d006      	beq.n	800306e <HW_GPIO_GetBitPos+0x5e>
  {
    PinPos |= 0x2;
 8003060:	220f      	movs	r2, #15
 8003062:	18bb      	adds	r3, r7, r2
 8003064:	18ba      	adds	r2, r7, r2
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	2102      	movs	r1, #2
 800306a:	430a      	orrs	r2, r1
 800306c:	701a      	strb	r2, [r3, #0]
  }
  if ((GPIO_Pin & 0xAAAA) != 0)
 800306e:	1dbb      	adds	r3, r7, #6
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <HW_GPIO_GetBitPos+0x8c>)
 8003074:	4013      	ands	r3, r2
 8003076:	d006      	beq.n	8003086 <HW_GPIO_GetBitPos+0x76>
  {
    PinPos |= 0x1;
 8003078:	220f      	movs	r2, #15
 800307a:	18bb      	adds	r3, r7, r2
 800307c:	18ba      	adds	r2, r7, r2
 800307e:	7812      	ldrb	r2, [r2, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	430a      	orrs	r2, r1
 8003084:	701a      	strb	r2, [r3, #0]
  }

  return PinPos;
 8003086:	230f      	movs	r3, #15
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	781b      	ldrb	r3, [r3, #0]
}
 800308c:	0018      	movs	r0, r3
 800308e:	46bd      	mov	sp, r7
 8003090:	b004      	add	sp, #16
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0000f0f0 	.word	0x0000f0f0
 8003098:	0000cccc 	.word	0x0000cccc
 800309c:	0000aaaa 	.word	0x0000aaaa

080030a0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;

/* i2c init function */

void MX_I2C1_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <MX_I2C1_Init+0x74>)
 80030a6:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <MX_I2C1_Init+0x78>)
 80030a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80030aa:	4b1a      	ldr	r3, [pc, #104]	; (8003114 <MX_I2C1_Init+0x74>)
 80030ac:	4a1b      	ldr	r2, [pc, #108]	; (800311c <MX_I2C1_Init+0x7c>)
 80030ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <MX_I2C1_Init+0x74>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030b6:	4b17      	ldr	r3, [pc, #92]	; (8003114 <MX_I2C1_Init+0x74>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80030bc:	4b15      	ldr	r3, [pc, #84]	; (8003114 <MX_I2C1_Init+0x74>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80030c2:	4b14      	ldr	r3, [pc, #80]	; (8003114 <MX_I2C1_Init+0x74>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <MX_I2C1_Init+0x74>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <MX_I2C1_Init+0x74>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <MX_I2C1_Init+0x74>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <MX_I2C1_Init+0x74>)
 80030dc:	0018      	movs	r0, r3
 80030de:	f005 fe2f 	bl	8008d40 <HAL_I2C_Init>
 80030e2:	1e03      	subs	r3, r0, #0
 80030e4:	d001      	beq.n	80030ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80030e6:	f7ff fea1 	bl	8002e2c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <MX_I2C1_Init+0x74>)
 80030ec:	2100      	movs	r1, #0
 80030ee:	0018      	movs	r0, r3
 80030f0:	f005 febc 	bl	8008e6c <HAL_I2CEx_ConfigAnalogFilter>
 80030f4:	1e03      	subs	r3, r0, #0
 80030f6:	d001      	beq.n	80030fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80030f8:	f7ff fe98 	bl	8002e2c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <MX_I2C1_Init+0x74>)
 80030fe:	2100      	movs	r1, #0
 8003100:	0018      	movs	r0, r3
 8003102:	f005 feff 	bl	8008f04 <HAL_I2CEx_ConfigDigitalFilter>
 8003106:	1e03      	subs	r3, r0, #0
 8003108:	d001      	beq.n	800310e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800310a:	f7ff fe8f 	bl	8002e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	2000142c 	.word	0x2000142c
 8003118:	40005400 	.word	0x40005400
 800311c:	00707cbb 	.word	0x00707cbb

08003120 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003120:	b590      	push	{r4, r7, lr}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	230c      	movs	r3, #12
 800312a:	18fb      	adds	r3, r7, r3
 800312c:	0018      	movs	r0, r3
 800312e:	2314      	movs	r3, #20
 8003130:	001a      	movs	r2, r3
 8003132:	2100      	movs	r1, #0
 8003134:	f016 fc10 	bl	8019958 <memset>
  if(hi2c->Instance==I2C1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a23      	ldr	r2, [pc, #140]	; (80031cc <HAL_I2C_MspInit+0xac>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d140      	bne.n	80031c4 <HAL_I2C_MspInit+0xa4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003142:	4b23      	ldr	r3, [pc, #140]	; (80031d0 <HAL_I2C_MspInit+0xb0>)
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	4b22      	ldr	r3, [pc, #136]	; (80031d0 <HAL_I2C_MspInit+0xb0>)
 8003148:	2102      	movs	r1, #2
 800314a:	430a      	orrs	r2, r1
 800314c:	62da      	str	r2, [r3, #44]	; 0x2c
 800314e:	4b20      	ldr	r3, [pc, #128]	; (80031d0 <HAL_I2C_MspInit+0xb0>)
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	2202      	movs	r2, #2
 8003154:	4013      	ands	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800315a:	210c      	movs	r1, #12
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2280      	movs	r2, #128	; 0x80
 8003160:	0092      	lsls	r2, r2, #2
 8003162:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003164:	187b      	adds	r3, r7, r1
 8003166:	2212      	movs	r2, #18
 8003168:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800316a:	187b      	adds	r3, r7, r1
 800316c:	2201      	movs	r2, #1
 800316e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003170:	187b      	adds	r3, r7, r1
 8003172:	2203      	movs	r2, #3
 8003174:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2204      	movs	r2, #4
 800317a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	000c      	movs	r4, r1
 800317e:	187b      	adds	r3, r7, r1
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_I2C_MspInit+0xb4>)
 8003182:	0019      	movs	r1, r3
 8003184:	0010      	movs	r0, r2
 8003186:	f005 fc23 	bl	80089d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800318a:	0021      	movs	r1, r4
 800318c:	187b      	adds	r3, r7, r1
 800318e:	2240      	movs	r2, #64	; 0x40
 8003190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003192:	187b      	adds	r3, r7, r1
 8003194:	2212      	movs	r2, #18
 8003196:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003198:	187b      	adds	r3, r7, r1
 800319a:	2201      	movs	r2, #1
 800319c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2203      	movs	r2, #3
 80031a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	2201      	movs	r2, #1
 80031a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031aa:	187b      	adds	r3, r7, r1
 80031ac:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_I2C_MspInit+0xb4>)
 80031ae:	0019      	movs	r1, r3
 80031b0:	0010      	movs	r0, r2
 80031b2:	f005 fc0d 	bl	80089d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_I2C_MspInit+0xb0>)
 80031b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031ba:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <HAL_I2C_MspInit+0xb0>)
 80031bc:	2180      	movs	r1, #128	; 0x80
 80031be:	0389      	lsls	r1, r1, #14
 80031c0:	430a      	orrs	r2, r1
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b009      	add	sp, #36	; 0x24
 80031ca:	bd90      	pop	{r4, r7, pc}
 80031cc:	40005400 	.word	0x40005400
 80031d0:	40021000 	.word	0x40021000
 80031d4:	50000400 	.word	0x50000400

080031d8 <LL_RTC_TIME_GetSubSecond>:
  * @rmtoll SSR          SS            LL_RTC_TIME_GetSubSecond
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	0c1b      	lsrs	r3, r3, #16
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HW_RTC_Init>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
void HW_RTC_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  if (HW_RTC_Initalized == false)
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <HW_RTC_Init+0x2c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4053      	eors	r3, r2
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d008      	beq.n	8003214 <HW_RTC_Init+0x24>
  {
    HW_RTC_SetConfig();
 8003202:	f000 f80d 	bl	8003220 <HW_RTC_SetConfig>
    HW_RTC_SetAlarmConfig();
 8003206:	f000 f991 	bl	800352c <HW_RTC_SetAlarmConfig>
    HW_RTC_SetTimerContext();
 800320a:	f000 f96d 	bl	80034e8 <HW_RTC_SetTimerContext>
    HW_RTC_Initalized = true;
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <HW_RTC_Init+0x2c>)
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
  }
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	200001b4 	.word	0x200001b4

08003220 <HW_RTC_SetConfig>:
 * @note The timer is based on the RTC
 * @param none
 * @retval none
 */
static void HW_RTC_SetConfig(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  RtcHandle.Instance = RTC;
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 8003228:	4a27      	ldr	r2, [pc, #156]	; (80032c8 <HW_RTC_SetConfig+0xa8>)
 800322a:	601a      	str	r2, [r3, #0]

  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800322c:	4b25      	ldr	r3, [pc, #148]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 800322e:	2200      	movs	r2, #0
 8003230:	605a      	str	r2, [r3, #4]
  RtcHandle.Init.AsynchPrediv = PREDIV_A; /* RTC_ASYNCH_PREDIV; */
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 8003234:	221f      	movs	r2, #31
 8003236:	609a      	str	r2, [r3, #8]
  RtcHandle.Init.SynchPrediv = PREDIV_S; /* RTC_SYNCH_PREDIV; */
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 800323a:	4a24      	ldr	r2, [pc, #144]	; (80032cc <HW_RTC_SetConfig+0xac>)
 800323c:	60da      	str	r2, [r3, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT;
 800323e:	4b21      	ldr	r3, [pc, #132]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 8003240:	2200      	movs	r2, #0
 8003242:	611a      	str	r2, [r3, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800324a:	4b1e      	ldr	r3, [pc, #120]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 800324c:	2200      	movs	r2, #0
 800324e:	61da      	str	r2, [r3, #28]

  HAL_RTC_Init(&RtcHandle);
 8003250:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 8003252:	0018      	movs	r0, r3
 8003254:	f006 fdd8 	bl	8009e08 <HAL_RTC_Init>

  /*Monday 1st January 2016*/
  RTC_DateStruct.Year = 0;
 8003258:	003b      	movs	r3, r7
 800325a:	2200      	movs	r2, #0
 800325c:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct.Month = RTC_MONTH_JANUARY;
 800325e:	003b      	movs	r3, r7
 8003260:	2201      	movs	r2, #1
 8003262:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct.Date = 1;
 8003264:	003b      	movs	r3, r7
 8003266:	2201      	movs	r2, #1
 8003268:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct.WeekDay = RTC_WEEKDAY_MONDAY;
 800326a:	003b      	movs	r3, r7
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
  HAL_RTC_SetDate(&RtcHandle, &RTC_DateStruct, RTC_FORMAT_BIN);
 8003270:	0039      	movs	r1, r7
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 8003274:	2200      	movs	r2, #0
 8003276:	0018      	movs	r0, r3
 8003278:	f006 ff84 	bl	800a184 <HAL_RTC_SetDate>

  /*at 0:0:0*/
  RTC_TimeStruct.Hours = 0;
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct.Minutes = 0;
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2200      	movs	r2, #0
 8003286:	705a      	strb	r2, [r3, #1]

  RTC_TimeStruct.Seconds = 0;
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	2200      	movs	r2, #0
 800328c:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct.TimeFormat = 0;
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct.SubSeconds = 0;
 8003294:	1d3b      	adds	r3, r7, #4
 8003296:	2200      	movs	r2, #0
 8003298:	605a      	str	r2, [r3, #4]
  RTC_TimeStruct.StoreOperation = RTC_DAYLIGHTSAVING_NONE;
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2200      	movs	r2, #0
 800329e:	611a      	str	r2, [r3, #16]
  RTC_TimeStruct.DayLightSaving = RTC_STOREOPERATION_RESET;
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]

  HAL_RTC_SetTime(&RtcHandle, &RTC_TimeStruct, RTC_FORMAT_BIN);
 80032a6:	1d39      	adds	r1, r7, #4
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	0018      	movs	r0, r3
 80032ae:	f006 fe49 	bl	8009f44 <HAL_RTC_SetTime>

  /*Enable Direct Read of the calendar registers (not through Shadow) */
  HAL_RTCEx_EnableBypassShadow(&RtcHandle);
 80032b2:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <HW_RTC_SetConfig+0xa4>)
 80032b4:	0018      	movs	r0, r3
 80032b6:	f007 fb0e 	bl	800a8d6 <HAL_RTCEx_EnableBypassShadow>
}
 80032ba:	46c0      	nop			; (mov r8, r8)
 80032bc:	46bd      	mov	sp, r7
 80032be:	b006      	add	sp, #24
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	200001b8 	.word	0x200001b8
 80032c8:	40002800 	.word	0x40002800
 80032cc:	000003ff 	.word	0x000003ff

080032d0 <HW_RTC_GetMinimumTimeout>:
 * @brief returns the wake up time in ticks
 * @param none
 * @retval wake up time in ticks
 */
uint32_t HW_RTC_GetMinimumTimeout(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  return (MIN_ALARM_DELAY);
 80032d4:	2303      	movs	r3, #3
}
 80032d6:	0018      	movs	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HW_RTC_ms2Tick>:
 * @brief converts time in ms to time in ticks
 * @param [IN] time in milliseconds
 * @retval returns time in timer ticks
 */
uint32_t HW_RTC_ms2Tick(TimerTime_t timeMilliSec)
{
 80032dc:	b5b0      	push	{r4, r5, r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec / RTC_ALARM_TIME_BASE ) ); */
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	000a      	movs	r2, r1
 80032e8:	2100      	movs	r1, #0
 80032ea:	000b      	movs	r3, r1
 80032ec:	0e51      	lsrs	r1, r2, #25
 80032ee:	01dd      	lsls	r5, r3, #7
 80032f0:	430d      	orrs	r5, r1
 80032f2:	01d4      	lsls	r4, r2, #7
 80032f4:	227d      	movs	r2, #125	; 0x7d
 80032f6:	2300      	movs	r3, #0
 80032f8:	0020      	movs	r0, r4
 80032fa:	0029      	movs	r1, r5
 80032fc:	f7fd f8f2 	bl	80004e4 <__aeabi_uldivmod>
 8003300:	0003      	movs	r3, r0
 8003302:	000c      	movs	r4, r1
}
 8003304:	0018      	movs	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bdb0      	pop	{r4, r5, r7, pc}

0800330c <HW_RTC_Tick2ms>:
 * @brief converts time in ticks to time in ms
 * @param [IN] time in timer ticks
 * @retval returns time in milliseconds
 */
TimerTime_t HW_RTC_Tick2ms(uint32_t tick)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /*return( ( timeMicroSec * RTC_ALARM_TIME_BASE ) ); */
  uint32_t seconds = tick >> N_PREDIV_S;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0a9b      	lsrs	r3, r3, #10
 8003318:	60fb      	str	r3, [r7, #12]
  tick = tick & PREDIV_S;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	059b      	lsls	r3, r3, #22
 800331e:	0d9b      	lsrs	r3, r3, #22
 8003320:	607b      	str	r3, [r7, #4]
  return ((seconds * 1000) + ((tick * 1000) >> N_PREDIV_S));
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	0013      	movs	r3, r2
 8003326:	015b      	lsls	r3, r3, #5
 8003328:	1a9b      	subs	r3, r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	189b      	adds	r3, r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	0019      	movs	r1, r3
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	0013      	movs	r3, r2
 8003336:	015b      	lsls	r3, r3, #5
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	189b      	adds	r3, r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	0a9b      	lsrs	r3, r3, #10
 8003342:	18cb      	adds	r3, r1, r3
}
 8003344:	0018      	movs	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	b004      	add	sp, #16
 800334a:	bd80      	pop	{r7, pc}

0800334c <HW_RTC_SetAlarm>:
 * @brief Set the alarm
 * @note The alarm is set at now (read in this funtion) + timeout
 * @param timeout Duration of the Timer ticks
 */
void HW_RTC_SetAlarm(uint32_t timeout)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* we don't go in Low Power mode for timeout below MIN_ALARM_DELAY */
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - HW_RTC_GetTimerElapsedTime())))
 8003354:	4b14      	ldr	r3, [pc, #80]	; (80033a8 <HW_RTC_SetAlarm+0x5c>)
 8003356:	2200      	movs	r2, #0
 8003358:	5e9b      	ldrsh	r3, [r3, r2]
 800335a:	3303      	adds	r3, #3
 800335c:	001c      	movs	r4, r3
 800335e:	f000 f825 	bl	80033ac <HW_RTC_GetTimerElapsedTime>
 8003362:	0002      	movs	r2, r0
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	429c      	cmp	r4, r3
 800336a:	d204      	bcs.n	8003376 <HW_RTC_SetAlarm+0x2a>
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800336c:	2100      	movs	r1, #0
 800336e:	2004      	movs	r0, #4
 8003370:	f015 fb36 	bl	80189e0 <LPM_SetStopMode>
 8003374:	e003      	b.n	800337e <HW_RTC_SetAlarm+0x32>
  }
  else
  {
    LPM_SetStopMode(LPM_RTC_Id, LPM_Disable);
 8003376:	2101      	movs	r1, #1
 8003378:	2004      	movs	r0, #4
 800337a:	f015 fb31 	bl	80189e0 <LPM_SetStopMode>
  }

  /*In case stop mode is required */
  if (LPM_GetMode() == LPM_StopMode)
 800337e:	f015 fb61 	bl	8018a44 <LPM_GetMode>
 8003382:	0003      	movs	r3, r0
 8003384:	2b01      	cmp	r3, #1
 8003386:	d106      	bne.n	8003396 <HW_RTC_SetAlarm+0x4a>
  {
    timeout = timeout -  McuWakeUpTimeCal;
 8003388:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <HW_RTC_SetAlarm+0x5c>)
 800338a:	2200      	movs	r2, #0
 800338c:	5e9b      	ldrsh	r3, [r3, r2]
 800338e:	001a      	movs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	607b      	str	r3, [r7, #4]
  }

  HW_RTC_StartWakeUpAlarm(timeout);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f8d5 	bl	8003548 <HW_RTC_StartWakeUpAlarm>
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b003      	add	sp, #12
 80033a4:	bd90      	pop	{r4, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	200001b6 	.word	0x200001b6

080033ac <HW_RTC_GetTimerElapsedTime>:
 * @brief Get the RTC timer elapsed time since the last Alarm was set
 * @param none
 * @retval RTC Elapsed time in ticks
 */
uint32_t HW_RTC_GetTimerElapsedTime(void)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80033b2:	2308      	movs	r3, #8
 80033b4:	18fa      	adds	r2, r7, r3
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 fa30 	bl	8003820 <HW_RTC_GetCalendarValue>
 80033c0:	0003      	movs	r3, r0
 80033c2:	000c      	movs	r4, r1
 80033c4:	61fb      	str	r3, [r7, #28]

  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80033c6:	4b04      	ldr	r3, [pc, #16]	; (80033d8 <HW_RTC_GetTimerElapsedTime+0x2c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	1ad3      	subs	r3, r2, r3
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b009      	add	sp, #36	; 0x24
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	20000204 	.word	0x20000204

080033dc <HW_RTC_GetTimerValue>:
 * @brief Get the RTC timer value
 * @param none
 * @retval RTC Timer value in ticks
 */
uint32_t HW_RTC_GetTimerValue(void)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef RTC_TimeStruct;
  RTC_DateTypeDef RTC_DateStruct;

  uint32_t CalendarValue = (uint32_t) HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80033e2:	2308      	movs	r3, #8
 80033e4:	18fa      	adds	r2, r7, r3
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 fa18 	bl	8003820 <HW_RTC_GetCalendarValue>
 80033f0:	0003      	movs	r3, r0
 80033f2:	000c      	movs	r4, r1
 80033f4:	61fb      	str	r3, [r7, #28]

  return (CalendarValue);
 80033f6:	69fb      	ldr	r3, [r7, #28]
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b009      	add	sp, #36	; 0x24
 80033fe:	bd90      	pop	{r4, r7, pc}

08003400 <HW_RTC_StopAlarm>:
 * @brief Stop the Alarm
 * @param none
 * @retval none
 */
void HW_RTC_StopAlarm(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	005a      	lsls	r2, r3, #1
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HW_RTC_StopAlarm+0x34>)
 800340a:	0011      	movs	r1, r2
 800340c:	0018      	movs	r0, r3
 800340e:	f007 f901 	bl	800a614 <HAL_RTC_DeactivateAlarm>
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&RtcHandle, RTC_FLAG_ALRAF);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HW_RTC_StopAlarm+0x34>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	22ff      	movs	r2, #255	; 0xff
 800341a:	401a      	ands	r2, r3
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HW_RTC_StopAlarm+0x34>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4905      	ldr	r1, [pc, #20]	; (8003438 <HW_RTC_StopAlarm+0x38>)
 8003422:	430a      	orrs	r2, r1
 8003424:	60da      	str	r2, [r3, #12]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HW_RTC_StopAlarm+0x3c>)
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	0292      	lsls	r2, r2, #10
 800342c:	615a      	str	r2, [r3, #20]
}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	200001b8 	.word	0x200001b8
 8003438:	fffffe7f 	.word	0xfffffe7f
 800343c:	40010400 	.word	0x40010400

08003440 <HW_RTC_IrqHandler>:
 * @brief RTC IRQ Handler on the RTC Alarm
 * @param none
 * @retval none
 */
void HW_RTC_IrqHandler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
  RTC_HandleTypeDef *hrtc = &RtcHandle;
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HW_RTC_IrqHandler+0x5c>)
 8003448:	607b      	str	r3, [r7, #4]
  /* enable low power at irq*/
  LPM_SetStopMode(LPM_RTC_Id, LPM_Enable);
 800344a:	2100      	movs	r1, #0
 800344c:	2004      	movs	r0, #4
 800344e:	f015 fac7 	bl	80189e0 <LPM_SetStopMode>

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003452:	4b13      	ldr	r3, [pc, #76]	; (80034a0 <HW_RTC_IrqHandler+0x60>)
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	0292      	lsls	r2, r2, #10
 8003458:	615a      	str	r2, [r3, #20]

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	015b      	lsls	r3, r3, #5
 8003464:	4013      	ands	r3, r2
 8003466:	d014      	beq.n	8003492 <HW_RTC_IrqHandler+0x52>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	4013      	ands	r3, r2
 8003474:	d00d      	beq.n	8003492 <HW_RTC_IrqHandler+0x52>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	22ff      	movs	r2, #255	; 0xff
 800347e:	401a      	ands	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4907      	ldr	r1, [pc, #28]	; (80034a4 <HW_RTC_IrqHandler+0x64>)
 8003486:	430a      	orrs	r2, r1
 8003488:	60da      	str	r2, [r3, #12]
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0018      	movs	r0, r3
 800348e:	f000 ff4f 	bl	8004330 <HAL_RTC_AlarmAEventCallback>
    }
  }
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46bd      	mov	sp, r7
 8003496:	b002      	add	sp, #8
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	200001b8 	.word	0x200001b8
 80034a0:	40010400 	.word	0x40010400
 80034a4:	fffffe7f 	.word	0xfffffe7f

080034a8 <HW_RTC_DelayMs>:
 * @brief a delay of delay ms by polling RTC
 * @param delay in ms
 * @retval none
 */
void HW_RTC_DelayMs(uint32_t delay)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  TimerTime_t delayValue = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  TimerTime_t timeout = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60bb      	str	r3, [r7, #8]

  delayValue = HW_RTC_ms2Tick(delay);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	0018      	movs	r0, r3
 80034bc:	f7ff ff0e 	bl	80032dc <HW_RTC_ms2Tick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Wait delay ms */
  timeout = HW_RTC_GetTimerValue();
 80034c4:	f7ff ff8a 	bl	80033dc <HW_RTC_GetTimerValue>
 80034c8:	0003      	movs	r3, r0
 80034ca:	60bb      	str	r3, [r7, #8]
  while (((HW_RTC_GetTimerValue() - timeout)) < delayValue)
 80034cc:	e000      	b.n	80034d0 <HW_RTC_DelayMs+0x28>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	f7ff ff84 	bl	80033dc <HW_RTC_GetTimerValue>
 80034d4:	0002      	movs	r2, r0
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d8f6      	bhi.n	80034ce <HW_RTC_DelayMs+0x26>
  {
    __NOP();
  }
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b004      	add	sp, #16
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HW_RTC_SetTimerContext>:
 * @brief set Time Reference set also the RTC_DateStruct and RTC_TimeStruct
 * @param none
 * @retval Timer Value
 */
uint32_t HW_RTC_SetTimerContext(void)
{
 80034e8:	b5b0      	push	{r4, r5, r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  RtcTimerContext.Rtc_Time = (uint32_t) HW_RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80034ec:	4a07      	ldr	r2, [pc, #28]	; (800350c <HW_RTC_SetTimerContext+0x24>)
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HW_RTC_SetTimerContext+0x28>)
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 f994 	bl	8003820 <HW_RTC_GetCalendarValue>
 80034f8:	0003      	movs	r3, r0
 80034fa:	000c      	movs	r4, r1
 80034fc:	001a      	movs	r2, r3
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HW_RTC_SetTimerContext+0x2c>)
 8003500:	601a      	str	r2, [r3, #0]
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003502:	4b04      	ldr	r3, [pc, #16]	; (8003514 <HW_RTC_SetTimerContext+0x2c>)
 8003504:	681b      	ldr	r3, [r3, #0]
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bdb0      	pop	{r4, r5, r7, pc}
 800350c:	20000208 	.word	0x20000208
 8003510:	2000021c 	.word	0x2000021c
 8003514:	20000204 	.word	0x20000204

08003518 <HW_RTC_GetTimerContext>:
 * @brief Get the RTC timer Reference
 * @param none
 * @retval Timer Value in  Ticks
 */
uint32_t HW_RTC_GetTimerContext(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  return RtcTimerContext.Rtc_Time;
 800351c:	4b02      	ldr	r3, [pc, #8]	; (8003528 <HW_RTC_GetTimerContext+0x10>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	20000204 	.word	0x20000204

0800352c <HW_RTC_SetAlarmConfig>:
 * @brief configure alarm at init
 * @param none
 * @retval none
 */
static void HW_RTC_SetAlarmConfig(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  HAL_RTC_DeactivateAlarm(&RtcHandle, RTC_ALARM_A);
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	005a      	lsls	r2, r3, #1
 8003534:	4b03      	ldr	r3, [pc, #12]	; (8003544 <HW_RTC_SetAlarmConfig+0x18>)
 8003536:	0011      	movs	r1, r2
 8003538:	0018      	movs	r0, r3
 800353a:	f007 f86b 	bl	800a614 <HAL_RTC_DeactivateAlarm>
}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200001b8 	.word	0x200001b8

08003548 <HW_RTC_StartWakeUpAlarm>:
 * @note  alarm in RtcTimerContext.Rtc_Time + timeoutValue
 * @param timeoutValue in ticks
 * @retval none
 */
static void HW_RTC_StartWakeUpAlarm(uint32_t timeoutValue)
{
 8003548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800354a:	b08d      	sub	sp, #52	; 0x34
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint16_t rtcAlarmSubSeconds = 0;
 8003550:	242e      	movs	r4, #46	; 0x2e
 8003552:	193b      	adds	r3, r7, r4
 8003554:	2200      	movs	r2, #0
 8003556:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmSeconds = 0;
 8003558:	232c      	movs	r3, #44	; 0x2c
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	2200      	movs	r2, #0
 800355e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmMinutes = 0;
 8003560:	232a      	movs	r3, #42	; 0x2a
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2200      	movs	r2, #0
 8003566:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmHours = 0;
 8003568:	2328      	movs	r3, #40	; 0x28
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2200      	movs	r2, #0
 800356e:	801a      	strh	r2, [r3, #0]
  uint16_t rtcAlarmDays = 0;
 8003570:	2526      	movs	r5, #38	; 0x26
 8003572:	197b      	adds	r3, r7, r5
 8003574:	2200      	movs	r2, #0
 8003576:	801a      	strh	r2, [r3, #0]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003578:	2610      	movs	r6, #16
 800357a:	19ba      	adds	r2, r7, r6
 800357c:	4b9d      	ldr	r3, [pc, #628]	; (80037f4 <HW_RTC_StartWakeUpAlarm+0x2ac>)
 800357e:	3304      	adds	r3, #4
 8003580:	cb23      	ldmia	r3!, {r0, r1, r5}
 8003582:	c223      	stmia	r2!, {r0, r1, r5}
 8003584:	cb03      	ldmia	r3!, {r0, r1}
 8003586:	c203      	stmia	r2!, {r0, r1}
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003588:	230c      	movs	r3, #12
 800358a:	001d      	movs	r5, r3
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	4a99      	ldr	r2, [pc, #612]	; (80037f4 <HW_RTC_StartWakeUpAlarm+0x2ac>)
 8003590:	6992      	ldr	r2, [r2, #24]
 8003592:	601a      	str	r2, [r3, #0]

  HW_RTC_StopAlarm();
 8003594:	f7ff ff34 	bl	8003400 <HW_RTC_StopAlarm>

  /*reverse counter */
  rtcAlarmSubSeconds =  PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003598:	19bb      	adds	r3, r7, r6
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	b29a      	uxth	r2, r3
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	4995      	ldr	r1, [pc, #596]	; (80037f8 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 80035a2:	1a8a      	subs	r2, r1, r2
 80035a4:	801a      	strh	r2, [r3, #0]
  rtcAlarmSubSeconds += (timeoutValue & PREDIV_S);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	059b      	lsls	r3, r3, #22
 80035ac:	0d9b      	lsrs	r3, r3, #22
 80035ae:	b299      	uxth	r1, r3
 80035b0:	193b      	adds	r3, r7, r4
 80035b2:	193a      	adds	r2, r7, r4
 80035b4:	8812      	ldrh	r2, [r2, #0]
 80035b6:	188a      	adds	r2, r1, r2
 80035b8:	801a      	strh	r2, [r3, #0]
  /* convert timeout  to seconds */
  timeoutValue >>= N_PREDIV_S;  /* convert timeout  in seconds */
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0a9b      	lsrs	r3, r3, #10
 80035be:	607b      	str	r3, [r7, #4]

  /*convert microsecs to RTC format and add to 'Now' */
  rtcAlarmDays =  RTC_DateStruct.Date;
 80035c0:	002b      	movs	r3, r5
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	789a      	ldrb	r2, [r3, #2]
 80035c6:	2526      	movs	r5, #38	; 0x26
 80035c8:	197b      	adds	r3, r7, r5
 80035ca:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80035cc:	e00a      	b.n	80035e4 <HW_RTC_StartWakeUpAlarm+0x9c>
  {
    timeoutValue -= SECONDS_IN_1DAY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a8a      	ldr	r2, [pc, #552]	; (80037fc <HW_RTC_StartWakeUpAlarm+0x2b4>)
 80035d2:	4694      	mov	ip, r2
 80035d4:	4463      	add	r3, ip
 80035d6:	607b      	str	r3, [r7, #4]
    rtcAlarmDays++;
 80035d8:	2126      	movs	r1, #38	; 0x26
 80035da:	187b      	adds	r3, r7, r1
 80035dc:	881a      	ldrh	r2, [r3, #0]
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	3201      	adds	r2, #1
 80035e2:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1DAY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a86      	ldr	r2, [pc, #536]	; (8003800 <HW_RTC_StartWakeUpAlarm+0x2b8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d8f0      	bhi.n	80035ce <HW_RTC_StartWakeUpAlarm+0x86>
  }

  /* calc hours */
  rtcAlarmHours = RTC_TimeStruct.Hours;
 80035ec:	2310      	movs	r3, #16
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	2328      	movs	r3, #40	; 0x28
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 80035f8:	e00a      	b.n	8003610 <HW_RTC_StartWakeUpAlarm+0xc8>
  {
    timeoutValue -= SECONDS_IN_1HOUR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a81      	ldr	r2, [pc, #516]	; (8003804 <HW_RTC_StartWakeUpAlarm+0x2bc>)
 80035fe:	4694      	mov	ip, r2
 8003600:	4463      	add	r3, ip
 8003602:	607b      	str	r3, [r7, #4]
    rtcAlarmHours++;
 8003604:	2128      	movs	r1, #40	; 0x28
 8003606:	187b      	adds	r3, r7, r1
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	187b      	adds	r3, r7, r1
 800360c:	3201      	adds	r2, #1
 800360e:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a7d      	ldr	r2, [pc, #500]	; (8003808 <HW_RTC_StartWakeUpAlarm+0x2c0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d8f0      	bhi.n	80035fa <HW_RTC_StartWakeUpAlarm+0xb2>
  }

  /* calc minutes */
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003618:	2310      	movs	r3, #16
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	785a      	ldrb	r2, [r3, #1]
 800361e:	232a      	movs	r3, #42	; 0x2a
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003624:	e008      	b.n	8003638 <HW_RTC_StartWakeUpAlarm+0xf0>
  {
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3b3c      	subs	r3, #60	; 0x3c
 800362a:	607b      	str	r3, [r7, #4]
    rtcAlarmMinutes++;
 800362c:	212a      	movs	r1, #42	; 0x2a
 800362e:	187b      	adds	r3, r7, r1
 8003630:	881a      	ldrh	r2, [r3, #0]
 8003632:	187b      	adds	r3, r7, r1
 8003634:	3201      	adds	r2, #1
 8003636:	801a      	strh	r2, [r3, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b3b      	cmp	r3, #59	; 0x3b
 800363c:	d8f3      	bhi.n	8003626 <HW_RTC_StartWakeUpAlarm+0xde>
  }

  /* calc seconds */
  rtcAlarmSeconds =  RTC_TimeStruct.Seconds + timeoutValue;
 800363e:	2310      	movs	r3, #16
 8003640:	18fb      	adds	r3, r7, r3
 8003642:	789b      	ldrb	r3, [r3, #2]
 8003644:	b299      	uxth	r1, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	b29a      	uxth	r2, r3
 800364a:	232c      	movs	r3, #44	; 0x2c
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	188a      	adds	r2, r1, r2
 8003650:	801a      	strh	r2, [r3, #0]

  /***** correct for modulo********/
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 8003652:	e00d      	b.n	8003670 <HW_RTC_StartWakeUpAlarm+0x128>
  {
    rtcAlarmSubSeconds -= (PREDIV_S + 1);
 8003654:	222e      	movs	r2, #46	; 0x2e
 8003656:	18bb      	adds	r3, r7, r2
 8003658:	18ba      	adds	r2, r7, r2
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	496b      	ldr	r1, [pc, #428]	; (800380c <HW_RTC_StartWakeUpAlarm+0x2c4>)
 800365e:	468c      	mov	ip, r1
 8003660:	4462      	add	r2, ip
 8003662:	801a      	strh	r2, [r3, #0]
    rtcAlarmSeconds++;
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	187b      	adds	r3, r7, r1
 8003668:	881a      	ldrh	r2, [r3, #0]
 800366a:	187b      	adds	r3, r7, r1
 800366c:	3201      	adds	r2, #1
 800366e:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSubSeconds >= (PREDIV_S + 1))
 8003670:	232e      	movs	r3, #46	; 0x2e
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	881b      	ldrh	r3, [r3, #0]
 8003676:	4a60      	ldr	r2, [pc, #384]	; (80037f8 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d8eb      	bhi.n	8003654 <HW_RTC_StartWakeUpAlarm+0x10c>
  }

  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800367c:	e00b      	b.n	8003696 <HW_RTC_StartWakeUpAlarm+0x14e>
  {
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 800367e:	222c      	movs	r2, #44	; 0x2c
 8003680:	18bb      	adds	r3, r7, r2
 8003682:	18ba      	adds	r2, r7, r2
 8003684:	8812      	ldrh	r2, [r2, #0]
 8003686:	3a3c      	subs	r2, #60	; 0x3c
 8003688:	801a      	strh	r2, [r3, #0]
    rtcAlarmMinutes++;
 800368a:	212a      	movs	r1, #42	; 0x2a
 800368c:	187b      	adds	r3, r7, r1
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	187b      	adds	r3, r7, r1
 8003692:	3201      	adds	r2, #1
 8003694:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003696:	232c      	movs	r3, #44	; 0x2c
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	2b3b      	cmp	r3, #59	; 0x3b
 800369e:	d8ee      	bhi.n	800367e <HW_RTC_StartWakeUpAlarm+0x136>
  }

  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80036a0:	e00b      	b.n	80036ba <HW_RTC_StartWakeUpAlarm+0x172>
  {
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80036a2:	222a      	movs	r2, #42	; 0x2a
 80036a4:	18bb      	adds	r3, r7, r2
 80036a6:	18ba      	adds	r2, r7, r2
 80036a8:	8812      	ldrh	r2, [r2, #0]
 80036aa:	3a3c      	subs	r2, #60	; 0x3c
 80036ac:	801a      	strh	r2, [r3, #0]
    rtcAlarmHours++;
 80036ae:	2128      	movs	r1, #40	; 0x28
 80036b0:	187b      	adds	r3, r7, r1
 80036b2:	881a      	ldrh	r2, [r3, #0]
 80036b4:	187b      	adds	r3, r7, r1
 80036b6:	3201      	adds	r2, #1
 80036b8:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 80036ba:	232a      	movs	r3, #42	; 0x2a
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	2b3b      	cmp	r3, #59	; 0x3b
 80036c2:	d8ee      	bhi.n	80036a2 <HW_RTC_StartWakeUpAlarm+0x15a>
  }

  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80036c4:	e00b      	b.n	80036de <HW_RTC_StartWakeUpAlarm+0x196>
  {
    rtcAlarmHours -= HOURS_IN_1DAY;
 80036c6:	2228      	movs	r2, #40	; 0x28
 80036c8:	18bb      	adds	r3, r7, r2
 80036ca:	18ba      	adds	r2, r7, r2
 80036cc:	8812      	ldrh	r2, [r2, #0]
 80036ce:	3a18      	subs	r2, #24
 80036d0:	801a      	strh	r2, [r3, #0]
    rtcAlarmDays++;
 80036d2:	2126      	movs	r1, #38	; 0x26
 80036d4:	187b      	adds	r3, r7, r1
 80036d6:	881a      	ldrh	r2, [r3, #0]
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	3201      	adds	r2, #1
 80036dc:	801a      	strh	r2, [r3, #0]
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 80036de:	2328      	movs	r3, #40	; 0x28
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	2b17      	cmp	r3, #23
 80036e6:	d8ee      	bhi.n	80036c6 <HW_RTC_StartWakeUpAlarm+0x17e>
  }

  if (RTC_DateStruct.Year % 4 == 0)
 80036e8:	230c      	movs	r3, #12
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	78db      	ldrb	r3, [r3, #3]
 80036ee:	2203      	movs	r2, #3
 80036f0:	4013      	ands	r3, r2
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d11c      	bne.n	8003732 <HW_RTC_StartWakeUpAlarm+0x1ea>
  {
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 80036f8:	230c      	movs	r3, #12
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	785b      	ldrb	r3, [r3, #1]
 80036fe:	3b01      	subs	r3, #1
 8003700:	4a43      	ldr	r2, [pc, #268]	; (8003810 <HW_RTC_StartWakeUpAlarm+0x2c8>)
 8003702:	5cd3      	ldrb	r3, [r2, r3]
 8003704:	b29b      	uxth	r3, r3
 8003706:	2226      	movs	r2, #38	; 0x26
 8003708:	18ba      	adds	r2, r7, r2
 800370a:	8812      	ldrh	r2, [r2, #0]
 800370c:	429a      	cmp	r2, r3
 800370e:	d92c      	bls.n	800376a <HW_RTC_StartWakeUpAlarm+0x222>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ];
 8003710:	2426      	movs	r4, #38	; 0x26
 8003712:	193b      	adds	r3, r7, r4
 8003714:	8818      	ldrh	r0, [r3, #0]
 8003716:	230c      	movs	r3, #12
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	3b01      	subs	r3, #1
 800371e:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <HW_RTC_StartWakeUpAlarm+0x2c8>)
 8003720:	5cd3      	ldrb	r3, [r2, r3]
 8003722:	0019      	movs	r1, r3
 8003724:	f7fc fe60 	bl	80003e8 <__aeabi_idivmod>
 8003728:	000b      	movs	r3, r1
 800372a:	001a      	movs	r2, r3
 800372c:	193b      	adds	r3, r7, r4
 800372e:	801a      	strh	r2, [r3, #0]
 8003730:	e01b      	b.n	800376a <HW_RTC_StartWakeUpAlarm+0x222>
    }
  }
  else
  {
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003732:	230c      	movs	r3, #12
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	3b01      	subs	r3, #1
 800373a:	4a36      	ldr	r2, [pc, #216]	; (8003814 <HW_RTC_StartWakeUpAlarm+0x2cc>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	b29b      	uxth	r3, r3
 8003740:	2226      	movs	r2, #38	; 0x26
 8003742:	18ba      	adds	r2, r7, r2
 8003744:	8812      	ldrh	r2, [r2, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d90f      	bls.n	800376a <HW_RTC_StartWakeUpAlarm+0x222>
    {
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800374a:	2426      	movs	r4, #38	; 0x26
 800374c:	193b      	adds	r3, r7, r4
 800374e:	8818      	ldrh	r0, [r3, #0]
 8003750:	230c      	movs	r3, #12
 8003752:	18fb      	adds	r3, r7, r3
 8003754:	785b      	ldrb	r3, [r3, #1]
 8003756:	3b01      	subs	r3, #1
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HW_RTC_StartWakeUpAlarm+0x2cc>)
 800375a:	5cd3      	ldrb	r3, [r2, r3]
 800375c:	0019      	movs	r1, r3
 800375e:	f7fc fe43 	bl	80003e8 <__aeabi_idivmod>
 8003762:	000b      	movs	r3, r1
 8003764:	001a      	movs	r2, r3
 8003766:	193b      	adds	r3, r7, r4
 8003768:	801a      	strh	r2, [r3, #0]
    }
  }

  /* Set RTC_AlarmStructure with calculated values*/
  RTC_AlarmStructure.AlarmTime.SubSeconds = PREDIV_S - rtcAlarmSubSeconds;
 800376a:	232e      	movs	r3, #46	; 0x2e
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	4a21      	ldr	r2, [pc, #132]	; (80037f8 <HW_RTC_StartWakeUpAlarm+0x2b0>)
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	001a      	movs	r2, r3
 8003776:	4b28      	ldr	r3, [pc, #160]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8003778:	605a      	str	r2, [r3, #4]
  RTC_AlarmStructure.AlarmSubSecondMask  = HW_RTC_ALARMSUBSECONDMASK;
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 800377c:	22a0      	movs	r2, #160	; 0xa0
 800377e:	0512      	lsls	r2, r2, #20
 8003780:	619a      	str	r2, [r3, #24]
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8003782:	232c      	movs	r3, #44	; 0x2c
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b23      	ldr	r3, [pc, #140]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 800378c:	709a      	strb	r2, [r3, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800378e:	232a      	movs	r3, #42	; 0x2a
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b2da      	uxtb	r2, r3
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 8003798:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800379a:	2328      	movs	r3, #40	; 0x28
 800379c:	18fb      	adds	r3, r7, r3
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4b1d      	ldr	r3, [pc, #116]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037a4:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80037a6:	2326      	movs	r3, #38	; 0x26
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	b2d9      	uxtb	r1, r3
 80037ae:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037b0:	2220      	movs	r2, #32
 80037b2:	5499      	strb	r1, [r3, r2]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80037b4:	2310      	movs	r3, #16
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	78da      	ldrb	r2, [r3, #3]
 80037ba:	4b17      	ldr	r3, [pc, #92]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037bc:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80037be:	4b16      	ldr	r3, [pc, #88]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	61da      	str	r2, [r3, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	615a      	str	r2, [r3, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037cc:	2280      	movs	r2, #128	; 0x80
 80037ce:	0052      	lsls	r2, r2, #1
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]

  /* Set RTC_Alarm */
  HAL_RTC_SetAlarm_IT(&RtcHandle, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80037de:	490e      	ldr	r1, [pc, #56]	; (8003818 <HW_RTC_StartWakeUpAlarm+0x2d0>)
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HW_RTC_StartWakeUpAlarm+0x2d4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	0018      	movs	r0, r3
 80037e6:	f006 fdc9 	bl	800a37c <HAL_RTC_SetAlarm_IT>
}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	46bd      	mov	sp, r7
 80037ee:	b00d      	add	sp, #52	; 0x34
 80037f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	20000204 	.word	0x20000204
 80037f8:	000003ff 	.word	0x000003ff
 80037fc:	fffeae80 	.word	0xfffeae80
 8003800:	0001517f 	.word	0x0001517f
 8003804:	fffff1f0 	.word	0xfffff1f0
 8003808:	00000e0f 	.word	0x00000e0f
 800380c:	fffffc00 	.word	0xfffffc00
 8003810:	0801acb4 	.word	0x0801acb4
 8003814:	0801aca8 	.word	0x0801aca8
 8003818:	200001dc 	.word	0x200001dc
 800381c:	200001b8 	.word	0x200001b8

08003820 <HW_RTC_GetCalendarValue>:
 * @param pointer to RTC_DateStruct
 * @param pointer to RTC_TimeStruct
 * @retval time in ticks
 */
static uint64_t HW_RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003820:	b5b0      	push	{r4, r5, r7, lr}
 8003822:	b08c      	sub	sp, #48	; 0x30
 8003824:	af00      	add	r7, sp, #0
 8003826:	6178      	str	r0, [r7, #20]
 8003828:	6139      	str	r1, [r7, #16]
  uint64_t calendarValue = 0;
 800382a:	2200      	movs	r2, #0
 800382c:	2300      	movs	r3, #0
 800382e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003830:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t first_read;
  uint32_t correction;
  uint32_t seconds;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003832:	6939      	ldr	r1, [r7, #16]
 8003834:	4b4b      	ldr	r3, [pc, #300]	; (8003964 <HW_RTC_GetCalendarValue+0x144>)
 8003836:	2200      	movs	r2, #0
 8003838:	0018      	movs	r0, r3
 800383a:	f006 fc47 	bl	800a0cc <HAL_RTC_GetTime>

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
 800383e:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HW_RTC_GetCalendarValue+0x148>)
 8003840:	0018      	movs	r0, r3
 8003842:	f7ff fcc9 	bl	80031d8 <LL_RTC_TIME_GetSubSecond>
 8003846:	0003      	movs	r3, r0
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_RTC_GetDate(&RtcHandle, RTC_DateStruct, RTC_FORMAT_BIN);
 800384a:	6979      	ldr	r1, [r7, #20]
 800384c:	4b45      	ldr	r3, [pc, #276]	; (8003964 <HW_RTC_GetCalendarValue+0x144>)
 800384e:	2200      	movs	r2, #0
 8003850:	0018      	movs	r0, r3
 8003852:	f006 fd45 	bl	800a2e0 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&RtcHandle, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003856:	6939      	ldr	r1, [r7, #16]
 8003858:	4b42      	ldr	r3, [pc, #264]	; (8003964 <HW_RTC_GetCalendarValue+0x144>)
 800385a:	2200      	movs	r2, #0
 800385c:	0018      	movs	r0, r3
 800385e:	f006 fc35 	bl	800a0cc <HAL_RTC_GetTime>

  }
  while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8003862:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HW_RTC_GetCalendarValue+0x148>)
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff fcb7 	bl	80031d8 <LL_RTC_TIME_GetSubSecond>
 800386a:	0002      	movs	r2, r0
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	4293      	cmp	r3, r2
 8003870:	d1e5      	bne.n	800383e <HW_RTC_GetCalendarValue+0x1e>

  /* calculte amount of elapsed days since 01/01/2000 */
  seconds = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	78db      	ldrb	r3, [r3, #3]
 8003876:	001a      	movs	r2, r3
 8003878:	4b3c      	ldr	r3, [pc, #240]	; (800396c <HW_RTC_GetCalendarValue+0x14c>)
 800387a:	4353      	muls	r3, r2
 800387c:	3303      	adds	r3, #3
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	623b      	str	r3, [r7, #32]

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	78db      	ldrb	r3, [r3, #3]
 8003886:	2203      	movs	r2, #3
 8003888:	4013      	ands	r3, r2
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HW_RTC_GetCalendarValue+0x74>
 8003890:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HW_RTC_GetCalendarValue+0x150>)
 8003892:	e000      	b.n	8003896 <HW_RTC_GetCalendarValue+0x76>
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <HW_RTC_GetCalendarValue+0x154>)
 8003896:	61fb      	str	r3, [r7, #28]

  seconds += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31), 2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	1e5a      	subs	r2, r3, #1
 800389e:	0013      	movs	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	3301      	adds	r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da00      	bge.n	80038b0 <HW_RTC_GetCalendarValue+0x90>
 80038ae:	3301      	adds	r3, #1
 80038b0:	105b      	asrs	r3, r3, #1
 80038b2:	0019      	movs	r1, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	69fa      	ldr	r2, [r7, #28]
 80038be:	40da      	lsrs	r2, r3
 80038c0:	0013      	movs	r3, r2
 80038c2:	2203      	movs	r2, #3
 80038c4:	4013      	ands	r3, r2
 80038c6:	1acb      	subs	r3, r1, r3
 80038c8:	6a3a      	ldr	r2, [r7, #32]
 80038ca:	18d3      	adds	r3, r2, r3
 80038cc:	623b      	str	r3, [r7, #32]

  seconds += (RTC_DateStruct->Date - 1);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	789b      	ldrb	r3, [r3, #2]
 80038d2:	001a      	movs	r2, r3
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	18d3      	adds	r3, r2, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	623b      	str	r3, [r7, #32]

  /* convert from days to seconds */
  seconds *= SECONDS_IN_1DAY;
 80038dc:	6a3a      	ldr	r2, [r7, #32]
 80038de:	0013      	movs	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	189b      	adds	r3, r3, r2
 80038e4:	011a      	lsls	r2, r3, #4
 80038e6:	1ad2      	subs	r2, r2, r3
 80038e8:	0113      	lsls	r3, r2, #4
 80038ea:	1a9b      	subs	r3, r3, r2
 80038ec:	01db      	lsls	r3, r3, #7
 80038ee:	623b      	str	r3, [r7, #32]

  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	789b      	ldrb	r3, [r3, #2]
 80038f4:	0019      	movs	r1, r3
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
              ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	001a      	movs	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	1a9b      	subs	r3, r3, r2
 8003902:	011a      	lsls	r2, r3, #4
 8003904:	1ad2      	subs	r2, r2, r3
 8003906:	0113      	lsls	r3, r2, #4
 8003908:	001a      	movs	r2, r3
 800390a:	0010      	movs	r0, r2
              ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	001a      	movs	r2, r3
 8003912:	0013      	movs	r3, r2
 8003914:	011b      	lsls	r3, r3, #4
 8003916:	1a9b      	subs	r3, r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	18c3      	adds	r3, r0, r3
 800391c:	18cb      	adds	r3, r1, r3
  seconds += ((uint32_t)RTC_TimeStruct->Seconds +
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	623b      	str	r3, [r7, #32]



  calendarValue = (((uint64_t) seconds) << N_PREDIV_S) + (PREDIV_S - RTC_TimeStruct->SubSeconds);
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	0011      	movs	r1, r2
 8003932:	0d8d      	lsrs	r5, r1, #22
 8003934:	0013      	movs	r3, r2
 8003936:	029c      	lsls	r4, r3, #10
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4a0e      	ldr	r2, [pc, #56]	; (8003978 <HW_RTC_GetCalendarValue+0x158>)
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	1912      	adds	r2, r2, r4
 800394c:	416b      	adcs	r3, r5
 800394e:	001c      	movs	r4, r3
 8003950:	0013      	movs	r3, r2
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
 8003954:	62fc      	str	r4, [r7, #44]	; 0x2c

  return (calendarValue);
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	6afc      	ldr	r4, [r7, #44]	; 0x2c
}
 800395a:	0018      	movs	r0, r3
 800395c:	0021      	movs	r1, r4
 800395e:	46bd      	mov	sp, r7
 8003960:	b00c      	add	sp, #48	; 0x30
 8003962:	bdb0      	pop	{r4, r5, r7, pc}
 8003964:	200001b8 	.word	0x200001b8
 8003968:	40002800 	.word	0x40002800
 800396c:	000005b5 	.word	0x000005b5
 8003970:	00445550 	.word	0x00445550
 8003974:	0099aaa0 	.word	0x0099aaa0
 8003978:	000003ff 	.word	0x000003ff

0800397c <HW_RTC_GetCalendarTime>:
 * \param [IN]   pointer to ms
 *
 * \return uint32_t seconds
 */
uint32_t HW_RTC_GetCalendarTime(uint16_t *mSeconds)
{
 800397c:	b5b0      	push	{r4, r5, r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef RTC_TimeStruct ;
  RTC_DateTypeDef RTC_DateStruct;
  uint32_t ticks;

  uint64_t calendarValue = HW_RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003984:	230c      	movs	r3, #12
 8003986:	18fa      	adds	r2, r7, r3
 8003988:	2308      	movs	r3, #8
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	0011      	movs	r1, r2
 800398e:	0018      	movs	r0, r3
 8003990:	f7ff ff46 	bl	8003820 <HW_RTC_GetCalendarValue>
 8003994:	0002      	movs	r2, r0
 8003996:	000b      	movs	r3, r1
 8003998:	62ba      	str	r2, [r7, #40]	; 0x28
 800399a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t seconds = (uint32_t)(calendarValue >> N_PREDIV_S);
 800399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399e:	059b      	lsls	r3, r3, #22
 80039a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a2:	0a94      	lsrs	r4, r2, #10
 80039a4:	431c      	orrs	r4, r3
 80039a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a8:	0a9d      	lsrs	r5, r3, #10
 80039aa:	0023      	movs	r3, r4
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24

  ticks = (uint32_t) calendarValue & PREDIV_S;
 80039ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b0:	059b      	lsls	r3, r3, #22
 80039b2:	0d9b      	lsrs	r3, r3, #22
 80039b4:	623b      	str	r3, [r7, #32]

  *mSeconds = HW_RTC_Tick2ms(ticks);
 80039b6:	6a3b      	ldr	r3, [r7, #32]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7ff fca7 	bl	800330c <HW_RTC_Tick2ms>
 80039be:	0003      	movs	r3, r0
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	801a      	strh	r2, [r3, #0]

  return seconds;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b00c      	add	sp, #48	; 0x30
 80039ce:	bdb0      	pop	{r4, r5, r7, pc}

080039d0 <HW_RTC_BKUPWrite>:

void HW_RTC_BKUPWrite(uint32_t Data0, uint32_t Data1)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR0, Data0);
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HW_RTC_BKUPWrite+0x2c>)
 80039de:	2100      	movs	r1, #0
 80039e0:	0018      	movs	r0, r3
 80039e2:	f006 ff4e 	bl	800a882 <HAL_RTCEx_BKUPWrite>
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, Data1);
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	4b04      	ldr	r3, [pc, #16]	; (80039fc <HW_RTC_BKUPWrite+0x2c>)
 80039ea:	2101      	movs	r1, #1
 80039ec:	0018      	movs	r0, r3
 80039ee:	f006 ff48 	bl	800a882 <HAL_RTCEx_BKUPWrite>
}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	200001b8 	.word	0x200001b8

08003a00 <HW_RTC_BKUPRead>:

void HW_RTC_BKUPRead(uint32_t *Data0, uint32_t *Data1)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  *Data0 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR0);
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <HW_RTC_BKUPRead+0x34>)
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f006 ff4d 	bl	800a8ae <HAL_RTCEx_BKUPRead>
 8003a14:	0002      	movs	r2, r0
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
  *Data1 = HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1);
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HW_RTC_BKUPRead+0x34>)
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f006 ff45 	bl	800a8ae <HAL_RTCEx_BKUPRead>
 8003a24:	0002      	movs	r2, r0
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	46c0      	nop			; (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b002      	add	sp, #8
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	200001b8 	.word	0x200001b8

08003a38 <HW_SPI_Init>:
 * @brief Initializes the SPI object and MCU peripheral
 *
 * @param [IN] none
 */
void HW_SPI_Init(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0

  /*##-1- Configure the SPI peripheral */
  /* Set the SPI parameters */

  hspi.Instance = SPI1;
 8003a3c:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a3e:	4a1e      	ldr	r2, [pc, #120]	; (8003ab8 <HW_SPI_Init+0x80>)
 8003a40:	601a      	str	r2, [r3, #0]

  hspi.Init.BaudRatePrescaler = SpiFrequency(10000000);
 8003a42:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <HW_SPI_Init+0x84>)
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f89b 	bl	8003b80 <SpiFrequency>
 8003a4a:	0002      	movs	r2, r0
 8003a4c:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a4e:	61da      	str	r2, [r3, #28]
  hspi.Init.Direction      = SPI_DIRECTION_2LINES;
 8003a50:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  hspi.Init.Mode           = SPI_MODE_MASTER;
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a58:	2282      	movs	r2, #130	; 0x82
 8003a5a:	0052      	lsls	r2, r2, #1
 8003a5c:	605a      	str	r2, [r3, #4]
  hspi.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003a64:	4b13      	ldr	r3, [pc, #76]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	615a      	str	r2, [r3, #20]
  hspi.Init.DataSize       = SPI_DATASIZE_8BIT;
 8003a6a:	4b12      	ldr	r3, [pc, #72]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	60da      	str	r2, [r3, #12]
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8003a76:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	621a      	str	r2, [r3, #32]
  hspi.Init.NSS            = SPI_NSS_SOFT;
 8003a7c:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a7e:	2280      	movs	r2, #128	; 0x80
 8003a80:	0092      	lsls	r2, r2, #2
 8003a82:	619a      	str	r2, [r3, #24]
  hspi.Init.TIMode         = SPI_TIMODE_DISABLE;
 8003a84:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24


  SPI_CLK_ENABLE();
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ac0 <HW_SPI_Init+0x88>)
 8003a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <HW_SPI_Init+0x88>)
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	0149      	lsls	r1, r1, #5
 8003a94:	430a      	orrs	r2, r1
 8003a96:	635a      	str	r2, [r3, #52]	; 0x34


  if (HAL_SPI_Init(&hspi) != HAL_OK)
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <HW_SPI_Init+0x7c>)
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f006 ff50 	bl	800a940 <HAL_SPI_Init>
 8003aa0:	1e03      	subs	r3, r0, #0
 8003aa2:	d001      	beq.n	8003aa8 <HW_SPI_Init+0x70>
  {
    /* Initialization Error */
    Error_Handler();
 8003aa4:	f7ff f9c2 	bl	8002e2c <Error_Handler>
  }

  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoInit();
 8003aa8:	f000 f80c 	bl	8003ac4 <HW_SPI_IoInit>
}
 8003aac:	46c0      	nop			; (mov r8, r8)
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	20000220 	.word	0x20000220
 8003ab8:	40013000 	.word	0x40013000
 8003abc:	00989680 	.word	0x00989680
 8003ac0:	40021000 	.word	0x40021000

08003ac4 <HW_SPI_IoInit>:
  /*##-2- Configure the SPI GPIOs */
  HW_SPI_IoDeInit();
}

void HW_SPI_IoInit(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct = {0};
 8003aca:	1d3b      	adds	r3, r7, #4
 8003acc:	0018      	movs	r0, r3
 8003ace:	2314      	movs	r3, #20
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f015 ff40 	bl	8019958 <memset>


  initStruct.Mode = GPIO_MODE_AF_PP;
 8003ad8:	1d3b      	adds	r3, r7, #4
 8003ada:	2202      	movs	r2, #2
 8003adc:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL  ;
 8003ade:	1d3b      	adds	r3, r7, #4
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003ae4:	1d3b      	adds	r3, r7, #4
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	60da      	str	r2, [r3, #12]
  initStruct.Alternate = SPI1_AF ;
 8003aea:	1d3b      	adds	r3, r7, #4
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]

  HW_GPIO_Init(RADIO_SCLK_PORT, RADIO_SCLK_PIN, &initStruct);
 8003af0:	1d3b      	adds	r3, r7, #4
 8003af2:	4816      	ldr	r0, [pc, #88]	; (8003b4c <HW_SPI_IoInit+0x88>)
 8003af4:	001a      	movs	r2, r3
 8003af6:	2108      	movs	r1, #8
 8003af8:	f7ff f9a2 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MISO_PORT, RADIO_MISO_PIN, &initStruct);
 8003afc:	1d3a      	adds	r2, r7, #4
 8003afe:	23a0      	movs	r3, #160	; 0xa0
 8003b00:	05db      	lsls	r3, r3, #23
 8003b02:	2140      	movs	r1, #64	; 0x40
 8003b04:	0018      	movs	r0, r3
 8003b06:	f7ff f99b 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init(RADIO_MOSI_PORT, RADIO_MOSI_PIN, &initStruct);
 8003b0a:	1d3a      	adds	r2, r7, #4
 8003b0c:	23a0      	movs	r3, #160	; 0xa0
 8003b0e:	05db      	lsls	r3, r3, #23
 8003b10:	2180      	movs	r1, #128	; 0x80
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7ff f994 	bl	8002e40 <HW_GPIO_Init>

  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	2200      	movs	r2, #0
 8003b22:	609a      	str	r2, [r3, #8]

  HW_GPIO_Init(RADIO_NSS_PORT, RADIO_NSS_PIN, &initStruct);
 8003b24:	1d3a      	adds	r2, r7, #4
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	0219      	lsls	r1, r3, #8
 8003b2a:	23a0      	movs	r3, #160	; 0xa0
 8003b2c:	05db      	lsls	r3, r3, #23
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f7ff f986 	bl	8002e40 <HW_GPIO_Init>

  HW_GPIO_Write(RADIO_NSS_PORT, RADIO_NSS_PIN, 1);
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	0219      	lsls	r1, r3, #8
 8003b38:	23a0      	movs	r3, #160	; 0xa0
 8003b3a:	05db      	lsls	r3, r3, #23
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	0018      	movs	r0, r3
 8003b40:	f7ff fa50 	bl	8002fe4 <HW_GPIO_Write>
}
 8003b44:	46c0      	nop			; (mov r8, r8)
 8003b46:	46bd      	mov	sp, r7
 8003b48:	b006      	add	sp, #24
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	50000400 	.word	0x50000400

08003b50 <HW_SPI_InOut>:
 *
 * @param [IN] outData Byte to be sent
 * @retval inData      Received byte.
 */
uint16_t HW_SPI_InOut(uint16_t txData)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af02      	add	r7, sp, #8
 8003b56:	0002      	movs	r2, r0
 8003b58:	1dbb      	adds	r3, r7, #6
 8003b5a:	801a      	strh	r2, [r3, #0]
  uint16_t rxData ;

  HAL_SPI_TransmitReceive(&hspi, (uint8_t *) &txData, (uint8_t *) &rxData, 1, HAL_MAX_DELAY);
 8003b5c:	240e      	movs	r4, #14
 8003b5e:	193a      	adds	r2, r7, r4
 8003b60:	1db9      	adds	r1, r7, #6
 8003b62:	4806      	ldr	r0, [pc, #24]	; (8003b7c <HW_SPI_InOut+0x2c>)
 8003b64:	2301      	movs	r3, #1
 8003b66:	425b      	negs	r3, r3
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f006 ff5a 	bl	800aa24 <HAL_SPI_TransmitReceive>

  return rxData;
 8003b70:	193b      	adds	r3, r7, r4
 8003b72:	881b      	ldrh	r3, [r3, #0]
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b005      	add	sp, #20
 8003b7a:	bd90      	pop	{r4, r7, pc}
 8003b7c:	20000220 	.word	0x20000220

08003b80 <SpiFrequency>:

/* Private functions ---------------------------------------------------------*/

static uint32_t SpiFrequency(uint32_t hz)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t divisor = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t SysClkTmp = SystemCoreClock;
 8003b8c:	4b17      	ldr	r3, [pc, #92]	; (8003bec <SpiFrequency+0x6c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	613b      	str	r3, [r7, #16]
  uint32_t baudRate;

  while (SysClkTmp > hz)
 8003b92:	e008      	b.n	8003ba6 <SpiFrequency+0x26>
  {
    divisor++;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3301      	adds	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
    SysClkTmp = (SysClkTmp >> 1);
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]

    if (divisor >= 7)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b06      	cmp	r3, #6
 8003ba4:	d804      	bhi.n	8003bb0 <SpiFrequency+0x30>
  while (SysClkTmp > hz)
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d8f2      	bhi.n	8003b94 <SpiFrequency+0x14>
 8003bae:	e000      	b.n	8003bb2 <SpiFrequency+0x32>
    {
      break;
 8003bb0:	46c0      	nop			; (mov r8, r8)
    }
  }

  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <SpiFrequency+0x3e>
 8003bba:	2200      	movs	r2, #0
 8003bbc:	e000      	b.n	8003bc0 <SpiFrequency+0x40>
 8003bbe:	2220      	movs	r2, #32
             (((divisor & 0x2) == 0) ? 0x0 : SPI_CR1_BR_1) |
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	400b      	ands	r3, r1
 8003bc6:	d101      	bne.n	8003bcc <SpiFrequency+0x4c>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <SpiFrequency+0x4e>
 8003bcc:	2310      	movs	r3, #16
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 8003bce:	431a      	orrs	r2, r3
             (((divisor & 0x1) == 0) ? 0x0 : SPI_CR1_BR_0);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	400b      	ands	r3, r1
 8003bd6:	d101      	bne.n	8003bdc <SpiFrequency+0x5c>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e000      	b.n	8003bde <SpiFrequency+0x5e>
 8003bdc:	2308      	movs	r3, #8
  baudRate = (((divisor & 0x4) == 0) ? 0x0 : SPI_CR1_BR_2) |
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  return baudRate;
 8003be2:	68fb      	ldr	r3, [r7, #12]
}
 8003be4:	0018      	movs	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b006      	add	sp, #24
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	20000030 	.word	0x20000030

08003bf0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af02      	add	r7, sp, #8
  /* STM32 HAL library initialization*/
  HAL_Init();
 8003bf6:	f003 ffd3 	bl	8007ba0 <HAL_Init>

  /* Configure the system clock*/
  SystemClock_Config();
 8003bfa:	f000 fc83 	bl	8004504 <SystemClock_Config>

  /* Configure the debug mode*/
  DBG_Init();
 8003bfe:	f7ff f8bb 	bl	8002d78 <DBG_Init>

  /* Configure the hardware*/
  HW_Init();
 8003c02:	f000 fbc9 	bl	8004398 <HW_Init>

  /* USER CODE BEGIN 1 */
  //HAL_UART_Receive_DMA(&huart1,(uint8_t *)rx_buffer , 4);
  PRINTF("IN MAIN\r\n");
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <main+0x88>)
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f015 fd19 	bl	8019640 <TraceSend>
  /* USER CODE END 1 */
  /*Disbale Stand-by mode*/
  LPM_SetOffMode(LPM_APPLI_Id, LPM_Disable);
 8003c0e:	2101      	movs	r1, #1
 8003c10:	2001      	movs	r0, #1
 8003c12:	f014 feb3 	bl	801897c <LPM_SetOffMode>

  PRINTF("APP_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__APP_VERSION >> 24), (uint8_t)(__APP_VERSION >> 16), (uint8_t)(__APP_VERSION >> 8), (uint8_t)__APP_VERSION);
 8003c16:	4819      	ldr	r0, [pc, #100]	; (8003c7c <main+0x8c>)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2203      	movs	r2, #3
 8003c20:	2101      	movs	r1, #1
 8003c22:	f015 fd0d 	bl	8019640 <TraceSend>
  PRINTF("MAC_VERSION= %02X.%02X.%02X.%02X\r\n", (uint8_t)(__LORA_MAC_VERSION >> 24), (uint8_t)(__LORA_MAC_VERSION >> 16), (uint8_t)(__LORA_MAC_VERSION >> 8), (uint8_t)__LORA_MAC_VERSION);
 8003c26:	4816      	ldr	r0, [pc, #88]	; (8003c80 <main+0x90>)
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	2204      	movs	r2, #4
 8003c30:	2104      	movs	r1, #4
 8003c32:	f015 fd05 	bl	8019640 <TraceSend>

  /* Configure the Lora Stack*/
  LORA_Init(&LoRaMainCallbacks, &LoRaParamInit);
 8003c36:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <main+0x94>)
 8003c38:	4b13      	ldr	r3, [pc, #76]	; (8003c88 <main+0x98>)
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	f014 fb3f 	bl	80182c0 <LORA_Init>

  LORA_Join();
 8003c42:	f014 fce5 	bl	8018610 <LORA_Join>

  LoraStartTx(TX_ON_TIMER) ;
 8003c46:	2000      	movs	r0, #0
 8003c48:	f000 f9fc 	bl	8004044 <LoraStartTx>

  while (1)
  {
	//  i2cchipid();
	//  HAL_I2C_Master_Transmit(&hi2c1,0x60,0xf0,1,1000);
    if (AppProcessRequest == LORA_SET)
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <main+0x9c>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d105      	bne.n	8003c60 <main+0x70>
    {
      /*reset notification flag*/
      AppProcessRequest = LORA_RESET;
 8003c54:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <main+0x9c>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	701a      	strb	r2, [r3, #0]
      /*Send*/
      Send(NULL);
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f000 f82c 	bl	8003cb8 <Send>
    }
    if (LoraMacProcessRequest == LORA_SET)
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <main+0xa0>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d104      	bne.n	8003c72 <main+0x82>
    {
      /*reset notification flag*/
      LoraMacProcessRequest = LORA_RESET;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <main+0xa0>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
      LoRaMacProcess();
 8003c6e:	f00b f84f 	bl	800ed10 <LoRaMacProcess>
  __ASM volatile ("cpsid i" : : : "memory");
 8003c72:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8003c74:	b662      	cpsie	i
    if (AppProcessRequest == LORA_SET)
 8003c76:	e7e9      	b.n	8003c4c <main+0x5c>
 8003c78:	0801a4ac 	.word	0x0801a4ac
 8003c7c:	0801a4b8 	.word	0x0801a4b8
 8003c80:	0801a4dc 	.word	0x0801a4dc
 8003c84:	2000002c 	.word	0x2000002c
 8003c88:	20000008 	.word	0x20000008
 8003c8c:	200002bb 	.word	0x200002bb
 8003c90:	200002ba 	.word	0x200002ba

08003c94 <LoraMacProcessNotify>:
  }
}


void LoraMacProcessNotify(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  LoraMacProcessRequest = LORA_SET;
 8003c98:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <LoraMacProcessNotify+0x10>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	701a      	strb	r2, [r3, #0]
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	200002ba 	.word	0x200002ba

08003ca8 <LORA_HasJoined>:


static void LORA_HasJoined(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
#if( OVER_THE_AIR_ACTIVATION != 0 )
  PRINTF("JOINED\n\r");
#endif
  LORA_RequestClass(LORAWAN_DEFAULT_CLASS);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f014 fdbd 	bl	801882c <LORA_RequestClass>
}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <Send>:

static void Send(void *context)
{
 8003cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cba:	b08d      	sub	sp, #52	; 0x34
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  uint16_t pressure = 0;
 8003cc0:	232e      	movs	r3, #46	; 0x2e
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	801a      	strh	r2, [r3, #0]
  int16_t temperature = 0;
 8003cc8:	232c      	movs	r3, #44	; 0x2c
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	2200      	movs	r2, #0
 8003cce:	801a      	strh	r2, [r3, #0]
  uint16_t humidity = 0;
 8003cd0:	232a      	movs	r3, #42	; 0x2a
 8003cd2:	18fb      	adds	r3, r7, r3
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	801a      	strh	r2, [r3, #0]
  uint8_t batteryLevel;
  sensor1_t sensor_data;

  if (LORA_JoinStatus() != LORA_SET)
 8003cd8:	f014 fd24 	bl	8018724 <LORA_JoinStatus>
 8003cdc:	0003      	movs	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d002      	beq.n	8003ce8 <Send+0x30>
  {
    /*Not joined, try again later*/
    LORA_Join();
 8003ce2:	f014 fc95 	bl	8018610 <LORA_Join>
 8003ce6:	e10c      	b.n	8003f02 <Send+0x24a>
    return;
  }

  TVL1(PRINTF("SEND REQUEST\n\r");)
#ifndef CAYENNE_LPP
  int32_t latitude, longitude = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t altitudeGps = 0;
 8003cec:	2522      	movs	r5, #34	; 0x22
 8003cee:	197b      	adds	r3, r7, r5
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	801a      	strh	r2, [r3, #0]
#endif

#ifdef USE_B_L072Z_LRWAN1
  TimerInit(&TxLedTimer, OnTimerLedEvent);
 8003cf4:	4a84      	ldr	r2, [pc, #528]	; (8003f08 <Send+0x250>)
 8003cf6:	4b85      	ldr	r3, [pc, #532]	; (8003f0c <Send+0x254>)
 8003cf8:	0011      	movs	r1, r2
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	f015 fa39 	bl	8019172 <TimerInit>

  TimerSetValue(&TxLedTimer, 200);
 8003d00:	4b82      	ldr	r3, [pc, #520]	; (8003f0c <Send+0x254>)
 8003d02:	21c8      	movs	r1, #200	; 0xc8
 8003d04:	0018      	movs	r0, r3
 8003d06:	f015 fba5 	bl	8019454 <TimerSetValue>

  LED_On(LED_RED1) ;
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f001 f942 	bl	8004f94 <BSP_LED_On>

  TimerStart(&TxLedTimer);
 8003d10:	4b7e      	ldr	r3, [pc, #504]	; (8003f0c <Send+0x254>)
 8003d12:	0018      	movs	r0, r3
 8003d14:	f015 fa4c 	bl	80191b0 <TimerStart>
#endif

 //BSP_sensor_Read(&sensor_data);
  Analog();
 8003d18:	f000 fa52 	bl	80041c0 <Analog>
  AppData.Buff[i++] = LPP_DATATYPE_DIGITAL_OUTPUT;
  AppData.Buff[i++] = AppLedStateOn;
#endif  /* REGION_XX915 */
#else  /* not CAYENNE_LPP */

  temperature = (int16_t)(sensor_data.temperaturei * 100);         /* in �C * 100 */
 8003d1c:	2608      	movs	r6, #8
 8003d1e:	19bb      	adds	r3, r7, r6
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	497b      	ldr	r1, [pc, #492]	; (8003f10 <Send+0x258>)
 8003d24:	1c18      	adds	r0, r3, #0
 8003d26:	f7fc fecd 	bl	8000ac4 <__aeabi_fmul>
 8003d2a:	1c03      	adds	r3, r0, #0
 8003d2c:	242c      	movs	r4, #44	; 0x2c
 8003d2e:	193c      	adds	r4, r7, r4
 8003d30:	1c18      	adds	r0, r3, #0
 8003d32:	f7fd f9bd 	bl	80010b0 <__aeabi_f2iz>
 8003d36:	0003      	movs	r3, r0
 8003d38:	8023      	strh	r3, [r4, #0]
  pressure    = (uint16_t)(sensor_data.pressurei * 100 / 10);      /* in hPa / 10 */
 8003d3a:	19bb      	adds	r3, r7, r6
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4974      	ldr	r1, [pc, #464]	; (8003f10 <Send+0x258>)
 8003d40:	1c18      	adds	r0, r3, #0
 8003d42:	f7fc febf 	bl	8000ac4 <__aeabi_fmul>
 8003d46:	1c03      	adds	r3, r0, #0
 8003d48:	4972      	ldr	r1, [pc, #456]	; (8003f14 <Send+0x25c>)
 8003d4a:	1c18      	adds	r0, r3, #0
 8003d4c:	f7fc fce2 	bl	8000714 <__aeabi_fdiv>
 8003d50:	1c03      	adds	r3, r0, #0
 8003d52:	222e      	movs	r2, #46	; 0x2e
 8003d54:	18bc      	adds	r4, r7, r2
 8003d56:	1c18      	adds	r0, r3, #0
 8003d58:	f7fc fbe4 	bl	8000524 <__aeabi_f2uiz>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	8023      	strh	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidityi * 10);            /* in %*10     */
 8003d60:	19bb      	adds	r3, r7, r6
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	496b      	ldr	r1, [pc, #428]	; (8003f14 <Send+0x25c>)
 8003d66:	1c18      	adds	r0, r3, #0
 8003d68:	f7fc feac 	bl	8000ac4 <__aeabi_fmul>
 8003d6c:	1c03      	adds	r3, r0, #0
 8003d6e:	212a      	movs	r1, #42	; 0x2a
 8003d70:	187c      	adds	r4, r7, r1
 8003d72:	1c18      	adds	r0, r3, #0
 8003d74:	f7fc fbd6 	bl	8000524 <__aeabi_f2uiz>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	8023      	strh	r3, [r4, #0]
  latitude = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
  longitude = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t i = 0;
 8003d84:	2300      	movs	r3, #0
 8003d86:	61bb      	str	r3, [r7, #24]

  batteryLevel = LORA_GetBatteryLevel();                      /* 1 (very low) to 254 (fully charged) */
 8003d88:	2317      	movs	r3, #23
 8003d8a:	18fc      	adds	r4, r7, r3
 8003d8c:	f000 f9da 	bl	8004144 <LORA_GetBatteryLevel>
 8003d90:	0003      	movs	r3, r0
 8003d92:	7023      	strb	r3, [r4, #0]

  AppData.Port = LORAWAN_APP_PORT;
 8003d94:	4b60      	ldr	r3, [pc, #384]	; (8003f18 <Send+0x260>)
 8003d96:	2202      	movs	r2, #2
 8003d98:	715a      	strb	r2, [r3, #5]
  AppData.Buff[i++] = batteryLevel;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
  AppData.Buff[i++] = 0;
#else  /* not REGION_XX915 */
  AppData.Buff[i++] = AppLedStateOn;
 8003d9a:	4b5f      	ldr	r3, [pc, #380]	; (8003f18 <Send+0x260>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	1c59      	adds	r1, r3, #1
 8003da2:	61b9      	str	r1, [r7, #24]
 8003da4:	18d3      	adds	r3, r2, r3
 8003da6:	4a5d      	ldr	r2, [pc, #372]	; (8003f1c <Send+0x264>)
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (pressure >> 8) & 0xFF;
 8003dac:	222e      	movs	r2, #46	; 0x2e
 8003dae:	0016      	movs	r6, r2
 8003db0:	18bb      	adds	r3, r7, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	0a1b      	lsrs	r3, r3, #8
 8003db6:	b298      	uxth	r0, r3
 8003db8:	4b57      	ldr	r3, [pc, #348]	; (8003f18 <Send+0x260>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	1c59      	adds	r1, r3, #1
 8003dc0:	61b9      	str	r1, [r7, #24]
 8003dc2:	18d3      	adds	r3, r2, r3
 8003dc4:	b2c2      	uxtb	r2, r0
 8003dc6:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = pressure & 0xFF;
 8003dc8:	4b53      	ldr	r3, [pc, #332]	; (8003f18 <Send+0x260>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	1c59      	adds	r1, r3, #1
 8003dd0:	61b9      	str	r1, [r7, #24]
 8003dd2:	18d3      	adds	r3, r2, r3
 8003dd4:	19ba      	adds	r2, r7, r6
 8003dd6:	8812      	ldrh	r2, [r2, #0]
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (temperature >> 8) & 0xFF;
 8003ddc:	242c      	movs	r4, #44	; 0x2c
 8003dde:	193b      	adds	r3, r7, r4
 8003de0:	2000      	movs	r0, #0
 8003de2:	5e1b      	ldrsh	r3, [r3, r0]
 8003de4:	121b      	asrs	r3, r3, #8
 8003de6:	b218      	sxth	r0, r3
 8003de8:	4b4b      	ldr	r3, [pc, #300]	; (8003f18 <Send+0x260>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	1c59      	adds	r1, r3, #1
 8003df0:	61b9      	str	r1, [r7, #24]
 8003df2:	18d3      	adds	r3, r2, r3
 8003df4:	b2c2      	uxtb	r2, r0
 8003df6:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = temperature & 0xFF;
 8003df8:	4b47      	ldr	r3, [pc, #284]	; (8003f18 <Send+0x260>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	1c59      	adds	r1, r3, #1
 8003e00:	61b9      	str	r1, [r7, #24]
 8003e02:	18d3      	adds	r3, r2, r3
 8003e04:	193a      	adds	r2, r7, r4
 8003e06:	8812      	ldrh	r2, [r2, #0]
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (humidity >> 8) & 0xFF;
 8003e0c:	212a      	movs	r1, #42	; 0x2a
 8003e0e:	000c      	movs	r4, r1
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	b298      	uxth	r0, r3
 8003e18:	4b3f      	ldr	r3, [pc, #252]	; (8003f18 <Send+0x260>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	1c59      	adds	r1, r3, #1
 8003e20:	61b9      	str	r1, [r7, #24]
 8003e22:	18d3      	adds	r3, r2, r3
 8003e24:	b2c2      	uxtb	r2, r0
 8003e26:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = humidity & 0xFF;
 8003e28:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <Send+0x260>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	1c59      	adds	r1, r3, #1
 8003e30:	61b9      	str	r1, [r7, #24]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	193a      	adds	r2, r7, r4
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = batteryLevel;
 8003e3c:	4b36      	ldr	r3, [pc, #216]	; (8003f18 <Send+0x260>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	1c59      	adds	r1, r3, #1
 8003e44:	61b9      	str	r1, [r7, #24]
 8003e46:	18d3      	adds	r3, r2, r3
 8003e48:	2217      	movs	r2, #23
 8003e4a:	18ba      	adds	r2, r7, r2
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 16) & 0xFF;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	1418      	asrs	r0, r3, #16
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <Send+0x260>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	1c59      	adds	r1, r3, #1
 8003e5c:	61b9      	str	r1, [r7, #24]
 8003e5e:	18d3      	adds	r3, r2, r3
 8003e60:	b2c2      	uxtb	r2, r0
 8003e62:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (latitude >> 8) & 0xFF;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	1218      	asrs	r0, r3, #8
 8003e68:	4b2b      	ldr	r3, [pc, #172]	; (8003f18 <Send+0x260>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	1c59      	adds	r1, r3, #1
 8003e70:	61b9      	str	r1, [r7, #24]
 8003e72:	18d3      	adds	r3, r2, r3
 8003e74:	b2c2      	uxtb	r2, r0
 8003e76:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = latitude & 0xFF;
 8003e78:	4b27      	ldr	r3, [pc, #156]	; (8003f18 <Send+0x260>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1c59      	adds	r1, r3, #1
 8003e80:	61b9      	str	r1, [r7, #24]
 8003e82:	18d3      	adds	r3, r2, r3
 8003e84:	69fa      	ldr	r2, [r7, #28]
 8003e86:	b2d2      	uxtb	r2, r2
 8003e88:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 16) & 0xFF;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	1418      	asrs	r0, r3, #16
 8003e8e:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <Send+0x260>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	61b9      	str	r1, [r7, #24]
 8003e98:	18d3      	adds	r3, r2, r3
 8003e9a:	b2c2      	uxtb	r2, r0
 8003e9c:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (longitude >> 8) & 0xFF;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	1218      	asrs	r0, r3, #8
 8003ea2:	4b1d      	ldr	r3, [pc, #116]	; (8003f18 <Send+0x260>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	1c59      	adds	r1, r3, #1
 8003eaa:	61b9      	str	r1, [r7, #24]
 8003eac:	18d3      	adds	r3, r2, r3
 8003eae:	b2c2      	uxtb	r2, r0
 8003eb0:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = longitude & 0xFF;
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <Send+0x260>)
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1c59      	adds	r1, r3, #1
 8003eba:	61b9      	str	r1, [r7, #24]
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = (altitudeGps >> 8) & 0xFF;
 8003ec4:	197b      	adds	r3, r7, r5
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	0a1b      	lsrs	r3, r3, #8
 8003eca:	b298      	uxth	r0, r3
 8003ecc:	4b12      	ldr	r3, [pc, #72]	; (8003f18 <Send+0x260>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	1c59      	adds	r1, r3, #1
 8003ed4:	61b9      	str	r1, [r7, #24]
 8003ed6:	18d3      	adds	r3, r2, r3
 8003ed8:	b2c2      	uxtb	r2, r0
 8003eda:	701a      	strb	r2, [r3, #0]
  AppData.Buff[i++] = altitudeGps & 0xFF;
 8003edc:	4b0e      	ldr	r3, [pc, #56]	; (8003f18 <Send+0x260>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	1c59      	adds	r1, r3, #1
 8003ee4:	61b9      	str	r1, [r7, #24]
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	197a      	adds	r2, r7, r5
 8003eea:	8812      	ldrh	r2, [r2, #0]
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
#endif  /* REGION_XX915 */
#endif  /* CAYENNE_LPP */
  AppData.BuffSize = i;
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <Send+0x260>)
 8003ef6:	711a      	strb	r2, [r3, #4]

  LORA_send(&AppData, LORAWAN_DEFAULT_CONFIRM_MSG_STATE);
 8003ef8:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <Send+0x260>)
 8003efa:	2100      	movs	r1, #0
 8003efc:	0018      	movs	r0, r3
 8003efe:	f014 fc27 	bl	8018750 <LORA_send>

  /* USER CODE END 3 */
}
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b00d      	add	sp, #52	; 0x34
 8003f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f08:	08004211 	.word	0x08004211
 8003f0c:	200002d8 	.word	0x200002d8
 8003f10:	42c80000 	.word	0x42c80000
 8003f14:	41200000 	.word	0x41200000
 8003f18:	20000000 	.word	0x20000000
 8003f1c:	200002bc 	.word	0x200002bc

08003f20 <LORA_RxData>:


static void LORA_RxData(lora_AppData_t *AppData)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 4 */
  PRINTF("PACKET RECEIVED ON PORT %d\n\r", AppData->Port);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	795b      	ldrb	r3, [r3, #5]
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <LORA_RxData+0xec>)
 8003f30:	0011      	movs	r1, r2
 8003f32:	0018      	movs	r0, r3
 8003f34:	f015 fb84 	bl	8019640 <TraceSend>

  switch (AppData->Port)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	795b      	ldrb	r3, [r3, #5]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d004      	beq.n	8003f4a <LORA_RxData+0x2a>
 8003f40:	2b63      	cmp	r3, #99	; 0x63
 8003f42:	d03e      	beq.n	8003fc2 <LORA_RxData+0xa2>
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d01c      	beq.n	8003f82 <LORA_RxData+0x62>
        LED_On(LED_BLUE) ;
      }
      break;
    }
    default:
      break;
 8003f48:	e05b      	b.n	8004002 <LORA_RxData+0xe2>
      if (AppData->BuffSize == 1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	791b      	ldrb	r3, [r3, #4]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d115      	bne.n	8003f7e <LORA_RxData+0x5e>
        switch (AppData->Buff[0])
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d008      	beq.n	8003f6e <LORA_RxData+0x4e>
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d00a      	beq.n	8003f76 <LORA_RxData+0x56>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d000      	beq.n	8003f66 <LORA_RxData+0x46>
            break;
 8003f64:	e00c      	b.n	8003f80 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_A);
 8003f66:	2000      	movs	r0, #0
 8003f68:	f014 fc60 	bl	801882c <LORA_RequestClass>
            break;
 8003f6c:	e008      	b.n	8003f80 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_B);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f014 fc5c 	bl	801882c <LORA_RequestClass>
            break;
 8003f74:	e004      	b.n	8003f80 <LORA_RxData+0x60>
            LORA_RequestClass(CLASS_C);
 8003f76:	2002      	movs	r0, #2
 8003f78:	f014 fc58 	bl	801882c <LORA_RequestClass>
            break;
 8003f7c:	e000      	b.n	8003f80 <LORA_RxData+0x60>
      }
 8003f7e:	46c0      	nop			; (mov r8, r8)
      break;
 8003f80:	e03f      	b.n	8004002 <LORA_RxData+0xe2>
      if (AppData->BuffSize == 1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	791b      	ldrb	r3, [r3, #4]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d13a      	bne.n	8004000 <LORA_RxData+0xe0>
        AppLedStateOn = AppData->Buff[0] & 0x01;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <LORA_RxData+0xf0>)
 8003f98:	701a      	strb	r2, [r3, #0]
        if (AppLedStateOn == RESET)
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <LORA_RxData+0xf0>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <LORA_RxData+0x92>
          PRINTF("LED OFF\n\r");
 8003fa2:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <LORA_RxData+0xf4>)
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	f015 fb4b 	bl	8019640 <TraceSend>
          LED_Off(LED_BLUE) ;
 8003faa:	2002      	movs	r0, #2
 8003fac:	f001 f80e 	bl	8004fcc <BSP_LED_Off>
      break;
 8003fb0:	e026      	b.n	8004000 <LORA_RxData+0xe0>
          PRINTF("LED ON\n\r");
 8003fb2:	4b19      	ldr	r3, [pc, #100]	; (8004018 <LORA_RxData+0xf8>)
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f015 fb43 	bl	8019640 <TraceSend>
          LED_On(LED_BLUE) ;
 8003fba:	2002      	movs	r0, #2
 8003fbc:	f000 ffea 	bl	8004f94 <BSP_LED_On>
      break;
 8003fc0:	e01e      	b.n	8004000 <LORA_RxData+0xe0>
      AppLedStateOn = (AppData->Buff[2] == 100) ?  0x01 : 0x00;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3302      	adds	r3, #2
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	3b64      	subs	r3, #100	; 0x64
 8003fcc:	425a      	negs	r2, r3
 8003fce:	4153      	adcs	r3, r2
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	001a      	movs	r2, r3
 8003fd4:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <LORA_RxData+0xf0>)
 8003fd6:	701a      	strb	r2, [r3, #0]
      if (AppLedStateOn == RESET)
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <LORA_RxData+0xf0>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <LORA_RxData+0xd0>
        PRINTF("LED OFF\n\r");
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <LORA_RxData+0xf4>)
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	f015 fb2c 	bl	8019640 <TraceSend>
        LED_Off(LED_BLUE) ;
 8003fe8:	2002      	movs	r0, #2
 8003fea:	f000 ffef 	bl	8004fcc <BSP_LED_Off>
      break;
 8003fee:	e008      	b.n	8004002 <LORA_RxData+0xe2>
        PRINTF("LED ON\n\r");
 8003ff0:	4b09      	ldr	r3, [pc, #36]	; (8004018 <LORA_RxData+0xf8>)
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f015 fb24 	bl	8019640 <TraceSend>
        LED_On(LED_BLUE) ;
 8003ff8:	2002      	movs	r0, #2
 8003ffa:	f000 ffcb 	bl	8004f94 <BSP_LED_On>
      break;
 8003ffe:	e000      	b.n	8004002 <LORA_RxData+0xe2>
      break;
 8004000:	46c0      	nop			; (mov r8, r8)
  }
  /* USER CODE END 4 */
}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}
 800400a:	46c0      	nop			; (mov r8, r8)
 800400c:	0801a500 	.word	0x0801a500
 8004010:	200002bc 	.word	0x200002bc
 8004014:	0801a520 	.word	0x0801a520
 8004018:	0801a52c 	.word	0x0801a52c

0800401c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /*Wait for next tx slot*/
  TimerStart(&TxTimer);
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <OnTxTimerEvent+0x20>)
 8004026:	0018      	movs	r0, r3
 8004028:	f015 f8c2 	bl	80191b0 <TimerStart>

  AppProcessRequest = LORA_SET;
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <OnTxTimerEvent+0x24>)
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	200002c0 	.word	0x200002c0
 8004040:	200002bb 	.word	0x200002bb

08004044 <LoraStartTx>:

static void LoraStartTx(TxEventType_t EventType)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b089      	sub	sp, #36	; 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	0002      	movs	r2, r0
 800404c:	1dfb      	adds	r3, r7, #7
 800404e:	701a      	strb	r2, [r3, #0]
  if (EventType == TX_ON_TIMER)
 8004050:	1dfb      	adds	r3, r7, #7
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10f      	bne.n	8004078 <LoraStartTx+0x34>
  {
    /* send everytime timer elapses */
    TimerInit(&TxTimer, OnTxTimerEvent);
 8004058:	4a18      	ldr	r2, [pc, #96]	; (80040bc <LoraStartTx+0x78>)
 800405a:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <LoraStartTx+0x7c>)
 800405c:	0011      	movs	r1, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f015 f887 	bl	8019172 <TimerInit>
    TimerSetValue(&TxTimer,  APP_TX_DUTYCYCLE);
 8004064:	4a17      	ldr	r2, [pc, #92]	; (80040c4 <LoraStartTx+0x80>)
 8004066:	4b16      	ldr	r3, [pc, #88]	; (80040c0 <LoraStartTx+0x7c>)
 8004068:	0011      	movs	r1, r2
 800406a:	0018      	movs	r0, r3
 800406c:	f015 f9f2 	bl	8019454 <TimerSetValue>
    OnTxTimerEvent(NULL);
 8004070:	2000      	movs	r0, #0
 8004072:	f7ff ffd3 	bl	800401c <OnTxTimerEvent>
    initStruct.Speed = GPIO_SPEED_HIGH;

    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
  }
}
 8004076:	e01c      	b.n	80040b2 <LoraStartTx+0x6e>
    GPIO_InitTypeDef initStruct = {0};
 8004078:	240c      	movs	r4, #12
 800407a:	193b      	adds	r3, r7, r4
 800407c:	0018      	movs	r0, r3
 800407e:	2314      	movs	r3, #20
 8004080:	001a      	movs	r2, r3
 8004082:	2100      	movs	r1, #0
 8004084:	f015 fc68 	bl	8019958 <memset>
    initStruct.Mode = GPIO_MODE_IT_RISING;
 8004088:	193b      	adds	r3, r7, r4
 800408a:	4a0f      	ldr	r2, [pc, #60]	; (80040c8 <LoraStartTx+0x84>)
 800408c:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_PULLUP;
 800408e:	193b      	adds	r3, r7, r4
 8004090:	2201      	movs	r2, #1
 8004092:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8004094:	193b      	adds	r3, r7, r4
 8004096:	2203      	movs	r2, #3
 8004098:	60da      	str	r2, [r3, #12]
    HW_GPIO_Init(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, &initStruct);
 800409a:	193b      	adds	r3, r7, r4
 800409c:	480b      	ldr	r0, [pc, #44]	; (80040cc <LoraStartTx+0x88>)
 800409e:	001a      	movs	r2, r3
 80040a0:	2104      	movs	r1, #4
 80040a2:	f7fe fecd 	bl	8002e40 <HW_GPIO_Init>
    HW_GPIO_SetIrq(USER_BUTTON_GPIO_PORT, USER_BUTTON_PIN, 0, Send);
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <LoraStartTx+0x8c>)
 80040a8:	4808      	ldr	r0, [pc, #32]	; (80040cc <LoraStartTx+0x88>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	2104      	movs	r1, #4
 80040ae:	f7fe ff3b 	bl	8002f28 <HW_GPIO_SetIrq>
}
 80040b2:	46c0      	nop			; (mov r8, r8)
 80040b4:	46bd      	mov	sp, r7
 80040b6:	b009      	add	sp, #36	; 0x24
 80040b8:	bd90      	pop	{r4, r7, pc}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	0800401d 	.word	0x0800401d
 80040c0:	200002c0 	.word	0x200002c0
 80040c4:	00002710 	.word	0x00002710
 80040c8:	10110000 	.word	0x10110000
 80040cc:	50000400 	.word	0x50000400
 80040d0:	08003cb9 	.word	0x08003cb9

080040d4 <LORA_ConfirmClass>:

static void LORA_ConfirmClass(DeviceClass_t Class)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	0002      	movs	r2, r0
 80040dc:	1dfb      	adds	r3, r7, #7
 80040de:	701a      	strb	r2, [r3, #0]
  PRINTF("switch to class %c done\n\r", "ABC"[Class]);
 80040e0:	1dfb      	adds	r3, r7, #7
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <LORA_ConfirmClass+0x40>)
 80040e6:	5cd3      	ldrb	r3, [r2, r3]
 80040e8:	001a      	movs	r2, r3
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <LORA_ConfirmClass+0x44>)
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f015 faa6 	bl	8019640 <TraceSend>

  /*Optionnal*/
  /*informs the server that switch has occurred ASAP*/
  AppData.BuffSize = 0;
 80040f4:	4b09      	ldr	r3, [pc, #36]	; (800411c <LORA_ConfirmClass+0x48>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <LORA_ConfirmClass+0x48>)
 80040fc:	2202      	movs	r2, #2
 80040fe:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <LORA_ConfirmClass+0x48>)
 8004102:	2100      	movs	r1, #0
 8004104:	0018      	movs	r0, r3
 8004106:	f014 fb23 	bl	8018750 <LORA_send>
}
 800410a:	46c0      	nop			; (mov r8, r8)
 800410c:	46bd      	mov	sp, r7
 800410e:	b002      	add	sp, #8
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	0801a554 	.word	0x0801a554
 8004118:	0801a538 	.word	0x0801a538
 800411c:	20000000 	.word	0x20000000

08004120 <LORA_TxNeeded>:

static void LORA_TxNeeded(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  AppData.BuffSize = 0;
 8004124:	4b06      	ldr	r3, [pc, #24]	; (8004140 <LORA_TxNeeded+0x20>)
 8004126:	2200      	movs	r2, #0
 8004128:	711a      	strb	r2, [r3, #4]
  AppData.Port = LORAWAN_APP_PORT;
 800412a:	4b05      	ldr	r3, [pc, #20]	; (8004140 <LORA_TxNeeded+0x20>)
 800412c:	2202      	movs	r2, #2
 800412e:	715a      	strb	r2, [r3, #5]

  LORA_send(&AppData, LORAWAN_UNCONFIRMED_MSG);
 8004130:	4b03      	ldr	r3, [pc, #12]	; (8004140 <LORA_TxNeeded+0x20>)
 8004132:	2100      	movs	r1, #0
 8004134:	0018      	movs	r0, r3
 8004136:	f014 fb0b 	bl	8018750 <LORA_send>
}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	20000000 	.word	0x20000000

08004144 <LORA_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level  1 (very low) to 254 (fully charged)
  */
uint8_t LORA_GetBatteryLevel(void)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
  uint16_t batteryLevelmV;
  uint8_t batteryLevel = 0;
 800414a:	1dfb      	adds	r3, r7, #7
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]

  batteryLevelmV = HW_GetBatteryLevel();
 8004150:	1d3c      	adds	r4, r7, #4
 8004152:	f000 fb09 	bl	8004768 <HW_GetBatteryLevel>
 8004156:	0003      	movs	r3, r0
 8004158:	8023      	strh	r3, [r4, #0]


  /* Convert batterey level from mV to linea scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	881b      	ldrh	r3, [r3, #0]
 800415e:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <LORA_GetBatteryLevel+0x70>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d903      	bls.n	800416c <LORA_GetBatteryLevel+0x28>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8004164:	1dfb      	adds	r3, r7, #7
 8004166:	22fe      	movs	r2, #254	; 0xfe
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e01c      	b.n	80041a6 <LORA_GetBatteryLevel+0x62>
  }
  else if (batteryLevelmV < VDD_MIN)
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <LORA_GetBatteryLevel+0x74>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d803      	bhi.n	800417e <LORA_GetBatteryLevel+0x3a>
  {
    batteryLevel = 0;
 8004176:	1dfb      	adds	r3, r7, #7
 8004178:	2200      	movs	r2, #0
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e013      	b.n	80041a6 <LORA_GetBatteryLevel+0x62>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800417e:	1d3b      	adds	r3, r7, #4
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	4a0e      	ldr	r2, [pc, #56]	; (80041bc <LORA_GetBatteryLevel+0x78>)
 8004184:	4694      	mov	ip, r2
 8004186:	4463      	add	r3, ip
 8004188:	001a      	movs	r2, r3
 800418a:	0013      	movs	r3, r2
 800418c:	01db      	lsls	r3, r3, #7
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	001a      	movs	r2, r3
 8004194:	2396      	movs	r3, #150	; 0x96
 8004196:	00d9      	lsls	r1, r3, #3
 8004198:	0010      	movs	r0, r2
 800419a:	f7fb ffb5 	bl	8000108 <__udivsi3>
 800419e:	0003      	movs	r3, r0
 80041a0:	001a      	movs	r2, r3
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	701a      	strb	r2, [r3, #0]
  }

  return batteryLevel;
 80041a6:	1dfb      	adds	r3, r7, #7
 80041a8:	781b      	ldrb	r3, [r3, #0]
}
 80041aa:	0018      	movs	r0, r3
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b003      	add	sp, #12
 80041b0:	bd90      	pop	{r4, r7, pc}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	00000bb8 	.word	0x00000bb8
 80041b8:	00000707 	.word	0x00000707
 80041bc:	fffff8f8 	.word	0xfffff8f8

080041c0 <Analog>:
  //	}
  //	HAL_UART_Receive_DMA(&huart1, (uint8_t *)rx_buffer, 4);

}
 void Analog()
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
	       //   HAL_ADC_Start(&hadc);
	         // HAL_ADC_PollForConversion(&hadc, 100);
	      //    adcResult = HAL_ADC_GetValue(&hadc);
	       //   sprintf(msg,"adc=%hu\r\n", adcResult);
	     	//  PRINTF(msg);
	          PRINTF("ADC-3..pin A_3\r\n");
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <Analog+0x3c>)
 80041c6:	0018      	movs	r0, r3
 80041c8:	f015 fa3a 	bl	8019640 <TraceSend>
	          //HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
	         // HAL_Delay(1000);
	         adcResult = HW_AdcReadChannel(ADC_CHANNEL_3);
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <Analog+0x40>)
 80041ce:	0018      	movs	r0, r3
 80041d0:	f000 fb4c 	bl	800486c <HW_AdcReadChannel>
 80041d4:	0003      	movs	r3, r0
 80041d6:	001a      	movs	r2, r3
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <Analog+0x44>)
 80041da:	801a      	strh	r2, [r3, #0]
	          sprintf(msg,"adc_channel3=%hu\r\n", adcResult);
 80041dc:	4b09      	ldr	r3, [pc, #36]	; (8004204 <Analog+0x44>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	001a      	movs	r2, r3
 80041e2:	4909      	ldr	r1, [pc, #36]	; (8004208 <Analog+0x48>)
 80041e4:	4b09      	ldr	r3, [pc, #36]	; (800420c <Analog+0x4c>)
 80041e6:	0018      	movs	r0, r3
 80041e8:	f015 fbbe 	bl	8019968 <siprintf>
	          PRINTF(msg);
 80041ec:	4b07      	ldr	r3, [pc, #28]	; (800420c <Analog+0x4c>)
 80041ee:	0018      	movs	r0, r3
 80041f0:	f015 fa26 	bl	8019640 <TraceSend>
}
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	0801a564 	.word	0x0801a564
 8004200:	0c000008 	.word	0x0c000008
 8004204:	200002b8 	.word	0x200002b8
 8004208:	0801a578 	.word	0x0801a578
 800420c:	20001580 	.word	0x20001580

08004210 <OnTimerLedEvent>:

#ifdef USE_B_L072Z_LRWAN1
static void OnTimerLedEvent(void *context)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  LED_Off(LED_RED1) ;
 8004218:	2001      	movs	r0, #1
 800421a:	f000 fed7 	bl	8004fcc <BSP_LED_Off>
}
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_InitTick>:
  * @brief  don't enable systick
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HW_RTC_DelayMs(Delay);   /* based on RTC */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f7ff f930 	bl	80034a8 <HW_RTC_DelayMs>
}
 8004248:	46c0      	nop			; (mov r8, r8)
 800424a:	46bd      	mov	sp, r7
 800424c:	b002      	add	sp, #8
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8004254:	4b0e      	ldr	r3, [pc, #56]	; (8004290 <HAL_MspInit+0x40>)
 8004256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004258:	4b0d      	ldr	r3, [pc, #52]	; (8004290 <HAL_MspInit+0x40>)
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	0549      	lsls	r1, r1, #21
 800425e:	430a      	orrs	r2, r1
 8004260:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8004262:	f004 fe9b 	bl	8008f9c <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8004266:	f004 feb5 	bl	8008fd4 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_MspInit+0x44>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	4b09      	ldr	r3, [pc, #36]	; (8004294 <HAL_MspInit+0x44>)
 8004270:	2108      	movs	r1, #8
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]

  /*In debug mode, e.g. when DBGMCU is activated, Arm core has always clocks
   * And will not wait that the FLACH is ready to be read. It can miss in this
   * case the first instruction. To overcome this issue, the flash remain clcoked during sleep mode
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_MspInit+0x44>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_MspInit+0x44>)
 800427c:	2108      	movs	r1, #8
 800427e:	438a      	bics	r2, r1
 8004280:	601a      	str	r2, [r3, #0]

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8004282:	f004 fe99 	bl	8008fb8 <HAL_PWREx_EnableFastWakeUp>
#else
  HAL_PWREx_DisableFastWakeUp();
#endif

  HW_GpioInit();
 8004286:	f000 f8b5 	bl	80043f4 <HW_GpioInit>
}
 800428a:	46c0      	nop			; (mov r8, r8)
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40021000 	.word	0x40021000
 8004294:	40022000 	.word	0x40022000

08004298 <HAL_RTC_MspInit>:
  *        order to modify the RTC Clock source, as consequence RTC registers (including
  *        the backup registers) and RCC_CSR register are set to their reset values.
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
{
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b09b      	sub	sp, #108	; 0x6c
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042a0:	2430      	movs	r4, #48	; 0x30
 80042a2:	193b      	adds	r3, r7, r4
 80042a4:	0018      	movs	r0, r3
 80042a6:	2338      	movs	r3, #56	; 0x38
 80042a8:	001a      	movs	r2, r3
 80042aa:	2100      	movs	r1, #0
 80042ac:	f015 fb54 	bl	8019958 <memset>
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct = {0};
 80042b0:	230c      	movs	r3, #12
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	0018      	movs	r0, r3
 80042b6:	2324      	movs	r3, #36	; 0x24
 80042b8:	001a      	movs	r2, r3
 80042ba:	2100      	movs	r1, #0
 80042bc:	f015 fb4c 	bl	8019958 <memset>

  /*##-1- Configue the RTC clock soucre ######################################*/
  /* -a- Enable LSE Oscillator */
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSE;
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	2204      	movs	r2, #4
 80042c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80042c6:	193b      	adds	r3, r7, r4
 80042c8:	2200      	movs	r2, #0
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80042cc:	193b      	adds	r3, r7, r4
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	0052      	lsls	r2, r2, #1
 80042d2:	609a      	str	r2, [r3, #8]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042d4:	193b      	adds	r3, r7, r4
 80042d6:	0018      	movs	r0, r3
 80042d8:	f004 fe8a 	bl	8008ff0 <HAL_RCC_OscConfig>
 80042dc:	1e03      	subs	r3, r0, #0
 80042de:	d001      	beq.n	80042e4 <HAL_RTC_MspInit+0x4c>
  {
    Error_Handler();
 80042e0:	f7fe fda4 	bl	8002e2c <Error_Handler>
  }

  /* -b- Select LSI as RTC clock source */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80042e4:	210c      	movs	r1, #12
 80042e6:	187b      	adds	r3, r7, r1
 80042e8:	2220      	movs	r2, #32
 80042ea:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	2280      	movs	r2, #128	; 0x80
 80042f0:	0252      	lsls	r2, r2, #9
 80042f2:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	0018      	movs	r0, r3
 80042f8:	f005 fc2e 	bl	8009b58 <HAL_RCCEx_PeriphCLKConfig>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d001      	beq.n	8004304 <HAL_RTC_MspInit+0x6c>
  {
    Error_Handler();
 8004300:	f7fe fd94 	bl	8002e2c <Error_Handler>
  }

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8004304:	4b09      	ldr	r3, [pc, #36]	; (800432c <HAL_RTC_MspInit+0x94>)
 8004306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_RTC_MspInit+0x94>)
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	02c9      	lsls	r1, r1, #11
 800430e:	430a      	orrs	r2, r1
 8004310:	651a      	str	r2, [r3, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0, 0);
 8004312:	2200      	movs	r2, #0
 8004314:	2100      	movs	r1, #0
 8004316:	2002      	movs	r0, #2
 8004318:	f004 f932 	bl	8008580 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800431c:	2002      	movs	r0, #2
 800431e:	f004 f944 	bl	80085aa <HAL_NVIC_EnableIRQ>
}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	46bd      	mov	sp, r7
 8004326:	b01b      	add	sp, #108	; 0x6c
 8004328:	bd90      	pop	{r4, r7, pc}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	40021000 	.word	0x40021000

08004330 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  TimerIrqHandler();
 8004338:	f014 ff8e 	bl	8019258 <TimerIrqHandler>
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	46bd      	mov	sp, r7
 8004340:	b002      	add	sp, #8
 8004342:	bd80      	pop	{r7, pc}

08004344 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	0002      	movs	r2, r0
 800434c:	1dbb      	adds	r3, r7, #6
 800434e:	801a      	strh	r2, [r3, #0]
  HW_GPIO_IrqHandler(GPIO_Pin);
 8004350:	1dbb      	adds	r3, r7, #6
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	0018      	movs	r0, r3
 8004356:	f7fe fe25 	bl	8002fa4 <HW_GPIO_IrqHandler>
}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	46bd      	mov	sp, r7
 800435e:	b002      	add	sp, #8
 8004360:	bd80      	pop	{r7, pc}

08004362 <MSP_GetIRQn>:
  * @brief  Gets IRQ number as a function of the GPIO_Pin.
  * @param  GPIO_Pin: Specifies the pins connected to the EXTI line.
  * @retval IRQ number
  */
IRQn_Type MSP_GetIRQn(uint16_t GPIO_Pin)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	0002      	movs	r2, r0
 800436a:	1dbb      	adds	r3, r7, #6
 800436c:	801a      	strh	r2, [r3, #0]
  switch (GPIO_Pin)
 800436e:	1dbb      	adds	r3, r7, #6
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	2b04      	cmp	r3, #4
 8004374:	d009      	beq.n	800438a <MSP_GetIRQn+0x28>
 8004376:	dc03      	bgt.n	8004380 <MSP_GetIRQn+0x1e>
 8004378:	3b01      	subs	r3, #1
 800437a:	2b01      	cmp	r3, #1
 800437c:	d807      	bhi.n	800438e <MSP_GetIRQn+0x2c>
 800437e:	e002      	b.n	8004386 <MSP_GetIRQn+0x24>
 8004380:	2b08      	cmp	r3, #8
 8004382:	d002      	beq.n	800438a <MSP_GetIRQn+0x28>
 8004384:	e003      	b.n	800438e <MSP_GetIRQn+0x2c>
  {
    case GPIO_PIN_0:
    case GPIO_PIN_1:
      return EXTI0_1_IRQn;
 8004386:	2305      	movs	r3, #5
 8004388:	e002      	b.n	8004390 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_2:
    case GPIO_PIN_3:
      return EXTI2_3_IRQn;
 800438a:	2306      	movs	r3, #6
 800438c:	e000      	b.n	8004390 <MSP_GetIRQn+0x2e>
    case GPIO_PIN_12:
    case GPIO_PIN_13:
    case GPIO_PIN_14:
    case GPIO_PIN_15:
    default:
      return EXTI4_15_IRQn;
 800438e:	2307      	movs	r3, #7
  }
}
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b002      	add	sp, #8
 8004396:	bd80      	pop	{r7, pc}

08004398 <HW_Init>:
  * @brief This function initializes the hardware
  * @param None
  * @retval None
  */
void HW_Init(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  if (McuInitialized == false)
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <HW_Init+0x54>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	4053      	eors	r3, r2
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01d      	beq.n	80043e6 <HW_Init+0x4e>
#if defined( USE_BOOTLOADER )
    /* Set the Vector Table base location at 0x3000 */
    NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0x3000);
#endif

    HW_AdcInit();
 80043aa:	f000 fa0b 	bl	80047c4 <HW_AdcInit>

    Radio.IoInit();
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HW_Init+0x58>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4798      	blx	r3

    HW_SPI_Init();
 80043b4:	f7ff fb40 	bl	8003a38 <HW_SPI_Init>
    MX_I2C1_Init();
 80043b8:	f7fe fe72 	bl	80030a0 <MX_I2C1_Init>
    HW_RTC_Init();
 80043bc:	f7fe ff18 	bl	80031f0 <HW_RTC_Init>

    TraceInit();
 80043c0:	f015 f928 	bl	8019614 <TraceInit>

    BSP_sensor_Init();
 80043c4:	f7fe fcd2 	bl	8002d6c <BSP_sensor_Init>

    BSP_LED_Init(LED1);
 80043c8:	2000      	movs	r0, #0
 80043ca:	f000 fd75 	bl	8004eb8 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 80043ce:	2001      	movs	r0, #1
 80043d0:	f000 fd72 	bl	8004eb8 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 80043d4:	2002      	movs	r0, #2
 80043d6:	f000 fd6f 	bl	8004eb8 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 80043da:	2003      	movs	r0, #3
 80043dc:	f000 fd6c 	bl	8004eb8 <BSP_LED_Init>

    McuInitialized = true;
 80043e0:	4b02      	ldr	r3, [pc, #8]	; (80043ec <HW_Init+0x54>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
  }
}
 80043e6:	46c0      	nop			; (mov r8, r8)
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	2000034d 	.word	0x2000034d
 80043f0:	0801acec 	.word	0x0801acec

080043f4 <HW_GpioInit>:
  vcom_IoDeInit();
}


void HW_GpioInit(void)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b08b      	sub	sp, #44	; 0x2c
 80043f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fa:	2414      	movs	r4, #20
 80043fc:	193b      	adds	r3, r7, r4
 80043fe:	0018      	movs	r0, r3
 8004400:	2314      	movs	r3, #20
 8004402:	001a      	movs	r2, r3
 8004404:	2100      	movs	r1, #0
 8004406:	f015 faa7 	bl	8019958 <memset>

  /* Configure all GPIO as analog to reduce current consumption on non used IOs */
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <HW_GpioInit+0xf8>)
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HW_GpioInit+0xf8>)
 8004410:	2101      	movs	r1, #1
 8004412:	430a      	orrs	r2, r1
 8004414:	62da      	str	r2, [r3, #44]	; 0x2c
 8004416:	4b35      	ldr	r3, [pc, #212]	; (80044ec <HW_GpioInit+0xf8>)
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	2201      	movs	r2, #1
 800441c:	4013      	ands	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
 8004420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004422:	4b32      	ldr	r3, [pc, #200]	; (80044ec <HW_GpioInit+0xf8>)
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	4b31      	ldr	r3, [pc, #196]	; (80044ec <HW_GpioInit+0xf8>)
 8004428:	2102      	movs	r1, #2
 800442a:	430a      	orrs	r2, r1
 800442c:	62da      	str	r2, [r3, #44]	; 0x2c
 800442e:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <HW_GpioInit+0xf8>)
 8004430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004432:	2202      	movs	r2, #2
 8004434:	4013      	ands	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800443a:	4b2c      	ldr	r3, [pc, #176]	; (80044ec <HW_GpioInit+0xf8>)
 800443c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800443e:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HW_GpioInit+0xf8>)
 8004440:	2104      	movs	r1, #4
 8004442:	430a      	orrs	r2, r1
 8004444:	62da      	str	r2, [r3, #44]	; 0x2c
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <HW_GpioInit+0xf8>)
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	2204      	movs	r2, #4
 800444c:	4013      	ands	r3, r2
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004452:	4b26      	ldr	r3, [pc, #152]	; (80044ec <HW_GpioInit+0xf8>)
 8004454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004456:	4b25      	ldr	r3, [pc, #148]	; (80044ec <HW_GpioInit+0xf8>)
 8004458:	2180      	movs	r1, #128	; 0x80
 800445a:	430a      	orrs	r2, r1
 800445c:	62da      	str	r2, [r3, #44]	; 0x2c
 800445e:	4b23      	ldr	r3, [pc, #140]	; (80044ec <HW_GpioInit+0xf8>)
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	4013      	ands	r3, r2
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800446a:	193b      	adds	r3, r7, r4
 800446c:	2203      	movs	r2, #3
 800446e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004470:	193b      	adds	r3, r7, r4
 8004472:	2200      	movs	r2, #0
 8004474:	609a      	str	r2, [r3, #8]
  /* All GPIOs except debug pins (SWCLK and SWD) */
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8004476:	193b      	adds	r3, r7, r4
 8004478:	4a1d      	ldr	r2, [pc, #116]	; (80044f0 <HW_GpioInit+0xfc>)
 800447a:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447c:	193a      	adds	r2, r7, r4
 800447e:	23a0      	movs	r3, #160	; 0xa0
 8004480:	05db      	lsls	r3, r3, #23
 8004482:	0011      	movs	r1, r2
 8004484:	0018      	movs	r0, r3
 8004486:	f004 faa3 	bl	80089d0 <HAL_GPIO_Init>

  /* All GPIOs */
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 800448a:	193b      	adds	r3, r7, r4
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <HW_GpioInit+0x100>)
 800448e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004490:	193b      	adds	r3, r7, r4
 8004492:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <HW_GpioInit+0x104>)
 8004494:	0019      	movs	r1, r3
 8004496:	0010      	movs	r0, r2
 8004498:	f004 fa9a 	bl	80089d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800449c:	193b      	adds	r3, r7, r4
 800449e:	4a17      	ldr	r2, [pc, #92]	; (80044fc <HW_GpioInit+0x108>)
 80044a0:	0019      	movs	r1, r3
 80044a2:	0010      	movs	r0, r2
 80044a4:	f004 fa94 	bl	80089d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80044a8:	193b      	adds	r3, r7, r4
 80044aa:	4a15      	ldr	r2, [pc, #84]	; (8004500 <HW_GpioInit+0x10c>)
 80044ac:	0019      	movs	r1, r3
 80044ae:	0010      	movs	r0, r2
 80044b0:	f004 fa8e 	bl	80089d0 <HAL_GPIO_Init>

  /* Disable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80044b4:	4b0d      	ldr	r3, [pc, #52]	; (80044ec <HW_GpioInit+0xf8>)
 80044b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HW_GpioInit+0xf8>)
 80044ba:	2101      	movs	r1, #1
 80044bc:	438a      	bics	r2, r1
 80044be:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HW_GpioInit+0xf8>)
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4b09      	ldr	r3, [pc, #36]	; (80044ec <HW_GpioInit+0xf8>)
 80044c6:	2102      	movs	r1, #2
 80044c8:	438a      	bics	r2, r1
 80044ca:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80044cc:	4b07      	ldr	r3, [pc, #28]	; (80044ec <HW_GpioInit+0xf8>)
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HW_GpioInit+0xf8>)
 80044d2:	2104      	movs	r1, #4
 80044d4:	438a      	bics	r2, r1
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <HW_GpioInit+0xf8>)
 80044da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044dc:	4b03      	ldr	r3, [pc, #12]	; (80044ec <HW_GpioInit+0xf8>)
 80044de:	2180      	movs	r1, #128	; 0x80
 80044e0:	438a      	bics	r2, r1
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80044e4:	46c0      	nop			; (mov r8, r8)
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b00b      	add	sp, #44	; 0x2c
 80044ea:	bd90      	pop	{r4, r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	00009fff 	.word	0x00009fff
 80044f4:	0000ffff 	.word	0x0000ffff
 80044f8:	50000400 	.word	0x50000400
 80044fc:	50000800 	.word	0x50000800
 8004500:	50001c00 	.word	0x50001c00

08004504 <SystemClock_Config>:
  *            Flash Latency(WS)              = 1
  * @retval None
  */

void SystemClock_Config(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b094      	sub	sp, #80	; 0x50
 8004508:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800450a:	233c      	movs	r3, #60	; 0x3c
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	0018      	movs	r0, r3
 8004510:	2314      	movs	r3, #20
 8004512:	001a      	movs	r2, r3
 8004514:	2100      	movs	r1, #0
 8004516:	f015 fa1f 	bl	8019958 <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	0018      	movs	r0, r3
 800451e:	2338      	movs	r3, #56	; 0x38
 8004520:	001a      	movs	r2, r3
 8004522:	2100      	movs	r1, #0
 8004524:	f015 fa18 	bl	8019958 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8004528:	1d3b      	adds	r3, r7, #4
 800452a:	2202      	movs	r2, #2
 800452c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 800452e:	1d3b      	adds	r3, r7, #4
 8004530:	2200      	movs	r2, #0
 8004532:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8004534:	1d3b      	adds	r3, r7, #4
 8004536:	2201      	movs	r2, #1
 8004538:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800453a:	1d3b      	adds	r3, r7, #4
 800453c:	2210      	movs	r2, #16
 800453e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8004540:	1d3b      	adds	r3, r7, #4
 8004542:	2202      	movs	r2, #2
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	2200      	movs	r2, #0
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	2280      	movs	r2, #128	; 0x80
 8004550:	0312      	lsls	r2, r2, #12
 8004552:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	0412      	lsls	r2, r2, #16
 800455a:	635a      	str	r2, [r3, #52]	; 0x34

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	0018      	movs	r0, r3
 8004560:	f004 fd46 	bl	8008ff0 <HAL_RCC_OscConfig>
 8004564:	1e03      	subs	r3, r0, #0
 8004566:	d001      	beq.n	800456c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8004568:	f7fe fc60 	bl	8002e2c <Error_Handler>
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <SystemClock_Config+0xd0>)
 800456e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004570:	4b18      	ldr	r3, [pc, #96]	; (80045d4 <SystemClock_Config+0xd0>)
 8004572:	2180      	movs	r1, #128	; 0x80
 8004574:	0549      	lsls	r1, r1, #21
 8004576:	430a      	orrs	r2, r1
 8004578:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800457a:	4b17      	ldr	r3, [pc, #92]	; (80045d8 <SystemClock_Config+0xd4>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a17      	ldr	r2, [pc, #92]	; (80045dc <SystemClock_Config+0xd8>)
 8004580:	401a      	ands	r2, r3
 8004582:	4b15      	ldr	r3, [pc, #84]	; (80045d8 <SystemClock_Config+0xd4>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0109      	lsls	r1, r1, #4
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <SystemClock_Config+0xd4>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2210      	movs	r2, #16
 8004594:	4013      	ands	r3, r2
 8004596:	2b10      	cmp	r3, #16
 8004598:	d0f9      	beq.n	800458e <SystemClock_Config+0x8a>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800459a:	213c      	movs	r1, #60	; 0x3c
 800459c:	187b      	adds	r3, r7, r1
 800459e:	220f      	movs	r2, #15
 80045a0:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045a2:	187b      	adds	r3, r7, r1
 80045a4:	2203      	movs	r2, #3
 80045a6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80045ae:	187b      	adds	r3, r7, r1
 80045b0:	2200      	movs	r2, #0
 80045b2:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	2200      	movs	r2, #0
 80045b8:	611a      	str	r2, [r3, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80045ba:	187b      	adds	r3, r7, r1
 80045bc:	2101      	movs	r1, #1
 80045be:	0018      	movs	r0, r3
 80045c0:	f005 f8e6 	bl	8009790 <HAL_RCC_ClockConfig>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80045c8:	f7fe fc30 	bl	8002e2c <Error_Handler>
  }
}
 80045cc:	46c0      	nop			; (mov r8, r8)
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b014      	add	sp, #80	; 0x50
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40007000 	.word	0x40007000
 80045dc:	ffffe7ff 	.word	0xffffe7ff

080045e0 <HW_GetRandomSeed>:
  * @note based on the device unique ID
  * @param None
  * @retval see
  */
uint32_t HW_GetRandomSeed(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  return ((*(uint32_t *)ID1) ^ (*(uint32_t *)ID2) ^ (*(uint32_t *)ID3));
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HW_GetRandomSeed+0x1c>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HW_GetRandomSeed+0x20>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	405a      	eors	r2, r3
 80045ee:	4b05      	ldr	r3, [pc, #20]	; (8004604 <HW_GetRandomSeed+0x24>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4053      	eors	r3, r2
}
 80045f4:	0018      	movs	r0, r3
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	1ff80050 	.word	0x1ff80050
 8004600:	1ff80054 	.word	0x1ff80054
 8004604:	1ff80064 	.word	0x1ff80064

08004608 <HW_GetUniqueId>:
  * @brief This function return a unique ID
  * @param unique ID
  * @retval none
  */
void HW_GetUniqueId(uint8_t *id)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  id[7] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 24;
 8004610:	4b23      	ldr	r3, [pc, #140]	; (80046a0 <HW_GetUniqueId+0x98>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <HW_GetUniqueId+0x9c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	18d3      	adds	r3, r2, r3
 800461a:	0e1a      	lsrs	r2, r3, #24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3307      	adds	r3, #7
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
  id[6] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 16;
 8004624:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HW_GetUniqueId+0x98>)
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b1e      	ldr	r3, [pc, #120]	; (80046a4 <HW_GetUniqueId+0x9c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	18d3      	adds	r3, r2, r3
 800462e:	0c1a      	lsrs	r2, r3, #16
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3306      	adds	r3, #6
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
  id[5] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3)) >> 8;
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <HW_GetUniqueId+0x98>)
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <HW_GetUniqueId+0x9c>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	18d3      	adds	r3, r2, r3
 8004642:	0a1a      	lsrs	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3305      	adds	r3, #5
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	701a      	strb	r2, [r3, #0]
  id[4] = ((*(uint32_t *)ID1) + (*(uint32_t *)ID3));
 800464c:	4b14      	ldr	r3, [pc, #80]	; (80046a0 <HW_GetUniqueId+0x98>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	b2d9      	uxtb	r1, r3
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HW_GetUniqueId+0x9c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	3304      	adds	r3, #4
 800465c:	188a      	adds	r2, r1, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
  id[3] = ((*(uint32_t *)ID2)) >> 24;
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HW_GetUniqueId+0xa0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	0e1a      	lsrs	r2, r3, #24
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3303      	adds	r3, #3
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
  id[2] = ((*(uint32_t *)ID2)) >> 16;
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <HW_GetUniqueId+0xa0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	0c1a      	lsrs	r2, r3, #16
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	3302      	adds	r3, #2
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
  id[1] = ((*(uint32_t *)ID2)) >> 8;
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HW_GetUniqueId+0xa0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0a1a      	lsrs	r2, r3, #8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3301      	adds	r3, #1
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	701a      	strb	r2, [r3, #0]
  id[0] = ((*(uint32_t *)ID2));
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HW_GetUniqueId+0xa0>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	701a      	strb	r2, [r3, #0]
}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	46bd      	mov	sp, r7
 800469a:	b002      	add	sp, #8
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	1ff80050 	.word	0x1ff80050
 80046a4:	1ff80064 	.word	0x1ff80064
 80046a8:	1ff80054 	.word	0x1ff80054

080046ac <HW_GetTemperatureLevel>:

uint16_t HW_GetTemperatureLevel(void)
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 80046b2:	1cbb      	adds	r3, r7, #2
 80046b4:	2200      	movs	r2, #0
 80046b6:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;
  uint16_t temperatureDegreeC;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 80046b8:	1cbc      	adds	r4, r7, #2
 80046ba:	4b25      	ldr	r3, [pc, #148]	; (8004750 <HW_GetTemperatureLevel+0xa4>)
 80046bc:	0018      	movs	r0, r3
 80046be:	f000 f8d5 	bl	800486c <HW_AdcReadChannel>
 80046c2:	0003      	movs	r3, r0
 80046c4:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 80046c6:	1cbb      	adds	r3, r7, #2
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <HW_GetTemperatureLevel+0x28>
  {
    batteryLevelmV = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	607b      	str	r3, [r7, #4]
 80046d2:	e00c      	b.n	80046ee <HW_GetTemperatureLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HW_GetTemperatureLevel+0xa8>)
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	001a      	movs	r2, r3
 80046da:	4b1f      	ldr	r3, [pc, #124]	; (8004758 <HW_GetTemperatureLevel+0xac>)
 80046dc:	435a      	muls	r2, r3
 80046de:	1cbb      	adds	r3, r7, #2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	0019      	movs	r1, r3
 80046e4:	0010      	movs	r0, r2
 80046e6:	f7fb fd0f 	bl	8000108 <__udivsi3>
 80046ea:	0003      	movs	r3, r0
 80046ec:	607b      	str	r3, [r7, #4]
  }
#if 0
  PRINTF("VDDA= %d\n\r", batteryLevelmV);
#endif

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_TEMPSENSOR);
 80046ee:	1cbc      	adds	r4, r7, #2
 80046f0:	4b1a      	ldr	r3, [pc, #104]	; (800475c <HW_GetTemperatureLevel+0xb0>)
 80046f2:	0018      	movs	r0, r3
 80046f4:	f000 f8ba 	bl	800486c <HW_AdcReadChannel>
 80046f8:	0003      	movs	r3, r0
 80046fa:	8023      	strh	r3, [r4, #0]

  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 80046fc:	1cbb      	adds	r3, r7, #2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	4353      	muls	r3, r2
 8004704:	4914      	ldr	r1, [pc, #80]	; (8004758 <HW_GetTemperatureLevel+0xac>)
 8004706:	0018      	movs	r0, r3
 8004708:	f7fb fcfe 	bl	8000108 <__udivsi3>
 800470c:	0003      	movs	r3, r0
 800470e:	001a      	movs	r2, r3
 8004710:	4b13      	ldr	r3, [pc, #76]	; (8004760 <HW_GetTemperatureLevel+0xb4>)
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	1ad2      	subs	r2, r2, r3
 8004716:	0013      	movs	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	189b      	adds	r3, r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	4b10      	ldr	r3, [pc, #64]	; (8004764 <HW_GetTemperatureLevel+0xb8>)
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	0019      	movs	r1, r3
 8004726:	4b0e      	ldr	r3, [pc, #56]	; (8004760 <HW_GetTemperatureLevel+0xb4>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	1acb      	subs	r3, r1, r3
 800472c:	0019      	movs	r1, r3
 800472e:	0010      	movs	r0, r2
 8004730:	f7fb fd74 	bl	800021c <__divsi3>
 8004734:	0003      	movs	r3, r0
 8004736:	b29a      	uxth	r2, r3
 8004738:	003b      	movs	r3, r7
 800473a:	21f0      	movs	r1, #240	; 0xf0
 800473c:	0149      	lsls	r1, r1, #5
 800473e:	468c      	mov	ip, r1
 8004740:	4462      	add	r2, ip
 8004742:	801a      	strh	r2, [r3, #0]
    uint16_t temperatureDegreeC_Frac = ((temperatureDegreeC - (temperatureDegreeC_Int << 8)) * 100) >> 8;
    PRINTF("temp= %d, %d,%d\n\r", temperatureDegreeC, temperatureDegreeC_Int, temperatureDegreeC_Frac);
  }
#endif

  return (uint16_t) temperatureDegreeC;
 8004744:	003b      	movs	r3, r7
 8004746:	881b      	ldrh	r3, [r3, #0]
}
 8004748:	0018      	movs	r0, r3
 800474a:	46bd      	mov	sp, r7
 800474c:	b003      	add	sp, #12
 800474e:	bd90      	pop	{r4, r7, pc}
 8004750:	44020000 	.word	0x44020000
 8004754:	1ff80078 	.word	0x1ff80078
 8004758:	00000bb8 	.word	0x00000bb8
 800475c:	48040000 	.word	0x48040000
 8004760:	1ff8007a 	.word	0x1ff8007a
 8004764:	1ff8007e 	.word	0x1ff8007e

08004768 <HW_GetBatteryLevel>:
  * @brief This function return the battery level
  * @param none
  * @retval the battery level in mV
  */
uint16_t HW_GetBatteryLevel(void)
{
 8004768:	b590      	push	{r4, r7, lr}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
  uint16_t measuredLevel = 0;
 800476e:	1cbb      	adds	r3, r7, #2
 8004770:	2200      	movs	r2, #0
 8004772:	801a      	strh	r2, [r3, #0]
  uint32_t batteryLevelmV;

  measuredLevel = HW_AdcReadChannel(ADC_CHANNEL_VREFINT);
 8004774:	1cbc      	adds	r4, r7, #2
 8004776:	4b10      	ldr	r3, [pc, #64]	; (80047b8 <HW_GetBatteryLevel+0x50>)
 8004778:	0018      	movs	r0, r3
 800477a:	f000 f877 	bl	800486c <HW_AdcReadChannel>
 800477e:	0003      	movs	r3, r0
 8004780:	8023      	strh	r3, [r4, #0]

  if (measuredLevel == 0)
 8004782:	1cbb      	adds	r3, r7, #2
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HW_GetBatteryLevel+0x28>
  {
    batteryLevelmV = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	e00c      	b.n	80047aa <HW_GetBatteryLevel+0x42>
  }
  else
  {
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 8004790:	4b0a      	ldr	r3, [pc, #40]	; (80047bc <HW_GetBatteryLevel+0x54>)
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	001a      	movs	r2, r3
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HW_GetBatteryLevel+0x58>)
 8004798:	435a      	muls	r2, r3
 800479a:	1cbb      	adds	r3, r7, #2
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	0019      	movs	r1, r3
 80047a0:	0010      	movs	r0, r2
 80047a2:	f7fb fcb1 	bl	8000108 <__udivsi3>
 80047a6:	0003      	movs	r3, r0
 80047a8:	607b      	str	r3, [r7, #4]
  }

  return batteryLevelmV;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	b29b      	uxth	r3, r3
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b003      	add	sp, #12
 80047b4:	bd90      	pop	{r4, r7, pc}
 80047b6:	46c0      	nop			; (mov r8, r8)
 80047b8:	44020000 	.word	0x44020000
 80047bc:	1ff80078 	.word	0x1ff80078
 80047c0:	00000bb8 	.word	0x00000bb8

080047c4 <HW_AdcInit>:
  * @brief This function initializes the ADC
  * @param none
  * @retval none
  */
void HW_AdcInit(void)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	af00      	add	r7, sp, #0
  if (AdcInitialized == false)
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <HW_AdcInit+0x98>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2201      	movs	r2, #1
 80047ce:	4053      	eors	r3, r2
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d03e      	beq.n	8004854 <HW_AdcInit+0x90>
  {
    AdcInitialized = true;
 80047d6:	4b21      	ldr	r3, [pc, #132]	; (800485c <HW_AdcInit+0x98>)
 80047d8:	2201      	movs	r2, #1
 80047da:	701a      	strb	r2, [r3, #0]


    hadc.Instance  = ADC1;
 80047dc:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HW_AdcInit+0x9c>)
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <HW_AdcInit+0xa0>)
 80047e0:	601a      	str	r2, [r3, #0]

    hadc.Init.OversamplingMode      = DISABLE;
 80047e2:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <HW_AdcInit+0x9c>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	63da      	str	r2, [r3, #60]	; 0x3c

    hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80047e8:	4b1d      	ldr	r3, [pc, #116]	; (8004860 <HW_AdcInit+0x9c>)
 80047ea:	2280      	movs	r2, #128	; 0x80
 80047ec:	0612      	lsls	r2, r2, #24
 80047ee:	605a      	str	r2, [r3, #4]
    hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <HW_AdcInit+0x9c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	61da      	str	r2, [r3, #28]
    hadc.Init.LowPowerFrequencyMode = ENABLE;
 80047f6:	4b1a      	ldr	r3, [pc, #104]	; (8004860 <HW_AdcInit+0x9c>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	635a      	str	r2, [r3, #52]	; 0x34
    hadc.Init.LowPowerAutoWait      = DISABLE;
 80047fc:	4b18      	ldr	r3, [pc, #96]	; (8004860 <HW_AdcInit+0x9c>)
 80047fe:	2200      	movs	r2, #0
 8004800:	619a      	str	r2, [r3, #24]

    hadc.Init.Resolution            = ADC_RESOLUTION_10B;
 8004802:	4b17      	ldr	r3, [pc, #92]	; (8004860 <HW_AdcInit+0x9c>)
 8004804:	2208      	movs	r2, #8
 8004806:	609a      	str	r2, [r3, #8]
    hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <HW_AdcInit+0x9c>)
 800480a:	2207      	movs	r2, #7
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
    hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 800480e:	4b14      	ldr	r3, [pc, #80]	; (8004860 <HW_AdcInit+0x9c>)
 8004810:	2201      	movs	r2, #1
 8004812:	611a      	str	r2, [r3, #16]
    hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <HW_AdcInit+0x9c>)
 8004816:	2200      	movs	r2, #0
 8004818:	60da      	str	r2, [r3, #12]
    hadc.Init.ContinuousConvMode    = DISABLE;
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HW_AdcInit+0x9c>)
 800481c:	2220      	movs	r2, #32
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]
    hadc.Init.DiscontinuousConvMode = DISABLE;
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <HW_AdcInit+0x9c>)
 8004824:	2221      	movs	r2, #33	; 0x21
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]
    hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800482a:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <HW_AdcInit+0x9c>)
 800482c:	2200      	movs	r2, #0
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
    hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HW_AdcInit+0x9c>)
 8004832:	2204      	movs	r2, #4
 8004834:	615a      	str	r2, [r3, #20]
    hadc.Init.DMAContinuousRequests = DISABLE;
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HW_AdcInit+0x9c>)
 8004838:	222c      	movs	r2, #44	; 0x2c
 800483a:	2100      	movs	r1, #0
 800483c:	5499      	strb	r1, [r3, r2]

    ADCCLK_ENABLE();
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <HW_AdcInit+0xa4>)
 8004840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004842:	4b09      	ldr	r3, [pc, #36]	; (8004868 <HW_AdcInit+0xa4>)
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	0089      	lsls	r1, r1, #2
 8004848:	430a      	orrs	r2, r1
 800484a:	635a      	str	r2, [r3, #52]	; 0x34


    HAL_ADC_Init(&hadc);
 800484c:	4b04      	ldr	r3, [pc, #16]	; (8004860 <HW_AdcInit+0x9c>)
 800484e:	0018      	movs	r0, r3
 8004850:	f003 fa06 	bl	8007c60 <HAL_ADC_Init>

  }
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	2000034c 	.word	0x2000034c
 8004860:	200002f0 	.word	0x200002f0
 8004864:	40012400 	.word	0x40012400
 8004868:	40021000 	.word	0x40021000

0800486c <HW_AdcReadChannel>:
  * @brief This function De-initializes the ADC
  * @param Channel
  * @retval Value
  */
uint16_t HW_AdcReadChannel(uint32_t Channel)
{
 800486c:	b590      	push	{r4, r7, lr}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]

  ADC_ChannelConfTypeDef adcConf = {0};
 8004874:	230c      	movs	r3, #12
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	0018      	movs	r0, r3
 800487a:	2308      	movs	r3, #8
 800487c:	001a      	movs	r2, r3
 800487e:	2100      	movs	r1, #0
 8004880:	f015 f86a 	bl	8019958 <memset>

  uint16_t adcData = 0;
 8004884:	2316      	movs	r3, #22
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2200      	movs	r2, #0
 800488a:	801a      	strh	r2, [r3, #0]

  HW_AdcInit();
 800488c:	f7ff ff9a 	bl	80047c4 <HW_AdcInit>

  if (AdcInitialized == true)
 8004890:	4b2f      	ldr	r3, [pc, #188]	; (8004950 <HW_AdcReadChannel+0xe4>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d053      	beq.n	8004940 <HW_AdcReadChannel+0xd4>
  {
    /* wait the the Vrefint used by adc is set */
    while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	4b2e      	ldr	r3, [pc, #184]	; (8004954 <HW_AdcReadChannel+0xe8>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	2208      	movs	r2, #8
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d1f9      	bne.n	800489a <HW_AdcReadChannel+0x2e>

    ADCCLK_ENABLE();
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HW_AdcReadChannel+0xec>)
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <HW_AdcReadChannel+0xec>)
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	0089      	lsls	r1, r1, #2
 80048b0:	430a      	orrs	r2, r1
 80048b2:	635a      	str	r2, [r3, #52]	; 0x34

    /*calibrate ADC if any calibraiton hardware*/
    HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <HW_AdcReadChannel+0xf0>)
 80048b6:	2100      	movs	r1, #0
 80048b8:	0018      	movs	r0, r3
 80048ba:	f003 fd47 	bl	800834c <HAL_ADCEx_Calibration_Start>

    /* Deselects all channels*/
    adcConf.Channel = ADC_CHANNEL_MASK;
 80048be:	210c      	movs	r1, #12
 80048c0:	187b      	adds	r3, r7, r1
 80048c2:	4a27      	ldr	r2, [pc, #156]	; (8004960 <HW_AdcReadChannel+0xf4>)
 80048c4:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_NONE;
 80048c6:	187b      	adds	r3, r7, r1
 80048c8:	4a26      	ldr	r2, [pc, #152]	; (8004964 <HW_AdcReadChannel+0xf8>)
 80048ca:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 80048cc:	000c      	movs	r4, r1
 80048ce:	187a      	adds	r2, r7, r1
 80048d0:	4b22      	ldr	r3, [pc, #136]	; (800495c <HW_AdcReadChannel+0xf0>)
 80048d2:	0011      	movs	r1, r2
 80048d4:	0018      	movs	r0, r3
 80048d6:	f003 fc35 	bl	8008144 <HAL_ADC_ConfigChannel>

    /* configure adc channel */
    adcConf.Channel = Channel;
 80048da:	0021      	movs	r1, r4
 80048dc:	187b      	adds	r3, r7, r1
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	601a      	str	r2, [r3, #0]
    adcConf.Rank = ADC_RANK_CHANNEL_NUMBER;
 80048e2:	187b      	adds	r3, r7, r1
 80048e4:	2280      	movs	r2, #128	; 0x80
 80048e6:	0152      	lsls	r2, r2, #5
 80048e8:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &adcConf);
 80048ea:	187a      	adds	r2, r7, r1
 80048ec:	4b1b      	ldr	r3, [pc, #108]	; (800495c <HW_AdcReadChannel+0xf0>)
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f003 fc27 	bl	8008144 <HAL_ADC_ConfigChannel>

    /* Start the conversion process */
    HAL_ADC_Start(&hadc);
 80048f6:	4b19      	ldr	r3, [pc, #100]	; (800495c <HW_AdcReadChannel+0xf0>)
 80048f8:	0018      	movs	r0, r3
 80048fa:	f003 fb2d 	bl	8007f58 <HAL_ADC_Start>

    /* Wait for the end of conversion */
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80048fe:	2301      	movs	r3, #1
 8004900:	425a      	negs	r2, r3
 8004902:	4b16      	ldr	r3, [pc, #88]	; (800495c <HW_AdcReadChannel+0xf0>)
 8004904:	0011      	movs	r1, r2
 8004906:	0018      	movs	r0, r3
 8004908:	f003 fb7a 	bl	8008000 <HAL_ADC_PollForConversion>

    /* Get the converted value of regular channel */
    adcData = HAL_ADC_GetValue(&hadc);
 800490c:	4b13      	ldr	r3, [pc, #76]	; (800495c <HW_AdcReadChannel+0xf0>)
 800490e:	0018      	movs	r0, r3
 8004910:	f003 fc0c 	bl	800812c <HAL_ADC_GetValue>
 8004914:	0002      	movs	r2, r0
 8004916:	2316      	movs	r3, #22
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	801a      	strh	r2, [r3, #0]

    __HAL_ADC_DISABLE(&hadc) ;
 800491c:	4b0f      	ldr	r3, [pc, #60]	; (800495c <HW_AdcReadChannel+0xf0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	689a      	ldr	r2, [r3, #8]
 8004922:	4b0e      	ldr	r3, [pc, #56]	; (800495c <HW_AdcReadChannel+0xf0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2102      	movs	r1, #2
 8004928:	430a      	orrs	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <HW_AdcReadChannel+0xf0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2203      	movs	r2, #3
 8004932:	601a      	str	r2, [r3, #0]

    ADCCLK_DISABLE();
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <HW_AdcReadChannel+0xec>)
 8004936:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HW_AdcReadChannel+0xec>)
 800493a:	490b      	ldr	r1, [pc, #44]	; (8004968 <HW_AdcReadChannel+0xfc>)
 800493c:	400a      	ands	r2, r1
 800493e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return adcData;
 8004940:	2316      	movs	r3, #22
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	881b      	ldrh	r3, [r3, #0]
}
 8004946:	0018      	movs	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	b007      	add	sp, #28
 800494c:	bd90      	pop	{r4, r7, pc}
 800494e:	46c0      	nop			; (mov r8, r8)
 8004950:	2000034c 	.word	0x2000034c
 8004954:	40007000 	.word	0x40007000
 8004958:	40021000 	.word	0x40021000
 800495c:	200002f0 	.word	0x200002f0
 8004960:	0007ffff 	.word	0x0007ffff
 8004964:	00001001 	.word	0x00001001
 8004968:	fffffdff 	.word	0xfffffdff

0800496c <NMI_Handler>:
  * @param  None
  * @retval None
  */

void NMI_Handler(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HardFault_Handler>:
  * @retval None
  */


void HardFault_Handler(void)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	af00      	add	r7, sp, #0
  __ASM volatile ("nop");
 800497a:	46c0      	nop			; (mov r8, r8)
  while (1)
  {
    __NOP();
 800497c:	e7fd      	b.n	800497a <HardFault_Handler+0x4>

0800497e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	af00      	add	r7, sp, #0
}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8004996:	f003 f923 	bl	8007be0 <HAL_IncTick>
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <USART2_IRQHandler>:
  */
/*void PPP_IRQHandler(void)
{
}*/
void USARTx_IRQHandler(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  vcom_IRQHandler();
 80049a4:	f000 f928 	bl	8004bf8 <vcom_IRQHandler>
}
 80049a8:	46c0      	nop			; (mov r8, r8)
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <DMA1_Channel4_5_6_7_IRQHandler>:

void USARTx_DMA_TX_IRQHandler(void)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	af00      	add	r7, sp, #0
  vcom_DMA_TX_IRQHandler();
 80049b2:	f000 f915 	bl	8004be0 <vcom_DMA_TX_IRQHandler>
}
 80049b6:	46c0      	nop			; (mov r8, r8)
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  HW_RTC_IrqHandler();
 80049c0:	f7fe fd3e 	bl	8003440 <HW_RTC_IrqHandler>
}
 80049c4:	46c0      	nop			; (mov r8, r8)
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80049ce:	2001      	movs	r0, #1
 80049d0:	f004 f99a 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80049d4:	2002      	movs	r0, #2
 80049d6:	f004 f997 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80049e4:	2004      	movs	r0, #4
 80049e6:	f004 f98f 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80049ea:	2008      	movs	r0, #8
 80049ec:	f004 f98c 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>
}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <EXTI4_15_IRQHandler>:


void EXTI4_15_IRQHandler(void)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80049fa:	2010      	movs	r0, #16
 80049fc:	f004 f984 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004a00:	2020      	movs	r0, #32
 8004a02:	f004 f981 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004a06:	2040      	movs	r0, #64	; 0x40
 8004a08:	f004 f97e 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004a0c:	2080      	movs	r0, #128	; 0x80
 8004a0e:	f004 f97b 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004a12:	2380      	movs	r3, #128	; 0x80
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	0018      	movs	r0, r3
 8004a18:	f004 f976 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	0018      	movs	r0, r3
 8004a22:	f004 f971 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004a26:	2380      	movs	r3, #128	; 0x80
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f004 f96c 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	011b      	lsls	r3, r3, #4
 8004a34:	0018      	movs	r0, r3
 8004a36:	f004 f967 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004a3a:	2380      	movs	r3, #128	; 0x80
 8004a3c:	015b      	lsls	r3, r3, #5
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f004 f962 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	019b      	lsls	r3, r3, #6
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f004 f95d 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	01db      	lsls	r3, r3, #7
 8004a52:	0018      	movs	r0, r3
 8004a54:	f004 f958 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a58:	2380      	movs	r3, #128	; 0x80
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f004 f953 	bl	8008d08 <HAL_GPIO_EXTI_IRQHandler>
}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <_sbrk+0x50>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d102      	bne.n	8004a7e <_sbrk+0x16>
		heap_end = &end;
 8004a78:	4b0f      	ldr	r3, [pc, #60]	; (8004ab8 <_sbrk+0x50>)
 8004a7a:	4a10      	ldr	r2, [pc, #64]	; (8004abc <_sbrk+0x54>)
 8004a7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <_sbrk+0x50>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <_sbrk+0x50>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	18d3      	adds	r3, r2, r3
 8004a8c:	466a      	mov	r2, sp
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d907      	bls.n	8004aa2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004a92:	f014 ff37 	bl	8019904 <__errno>
 8004a96:	0003      	movs	r3, r0
 8004a98:	220c      	movs	r2, #12
 8004a9a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	425b      	negs	r3, r3
 8004aa0:	e006      	b.n	8004ab0 <_sbrk+0x48>
	}

	heap_end += incr;
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <_sbrk+0x50>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	18d2      	adds	r2, r2, r3
 8004aaa:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <_sbrk+0x50>)
 8004aac:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8004aae:	68fb      	ldr	r3, [r7, #12]
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b004      	add	sp, #16
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000350 	.word	0x20000350
 8004abc:	20001698 	.word	0x20001698

08004ac0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <SystemInit+0x64>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <SystemInit+0x64>)
 8004aca:	2180      	movs	r1, #128	; 0x80
 8004acc:	0049      	lsls	r1, r1, #1
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004ad2:	4b14      	ldr	r3, [pc, #80]	; (8004b24 <SystemInit+0x64>)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <SystemInit+0x64>)
 8004ad8:	4913      	ldr	r1, [pc, #76]	; (8004b28 <SystemInit+0x68>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <SystemInit+0x64>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	4b10      	ldr	r3, [pc, #64]	; (8004b24 <SystemInit+0x64>)
 8004ae4:	4911      	ldr	r1, [pc, #68]	; (8004b2c <SystemInit+0x6c>)
 8004ae6:	400a      	ands	r2, r1
 8004ae8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <SystemInit+0x64>)
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <SystemInit+0x64>)
 8004af0:	2101      	movs	r1, #1
 8004af2:	438a      	bics	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <SystemInit+0x64>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <SystemInit+0x64>)
 8004afc:	490c      	ldr	r1, [pc, #48]	; (8004b30 <SystemInit+0x70>)
 8004afe:	400a      	ands	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <SystemInit+0x64>)
 8004b04:	68da      	ldr	r2, [r3, #12]
 8004b06:	4b07      	ldr	r3, [pc, #28]	; (8004b24 <SystemInit+0x64>)
 8004b08:	490a      	ldr	r1, [pc, #40]	; (8004b34 <SystemInit+0x74>)
 8004b0a:	400a      	ands	r2, r1
 8004b0c:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <SystemInit+0x64>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b14:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <SystemInit+0x78>)
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	0512      	lsls	r2, r2, #20
 8004b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8004b1c:	46c0      	nop			; (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	40021000 	.word	0x40021000
 8004b28:	88ff400c 	.word	0x88ff400c
 8004b2c:	fef6fff6 	.word	0xfef6fff6
 8004b30:	fffbffff 	.word	0xfffbffff
 8004b34:	ff02ffff 	.word	0xff02ffff
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <vcom_Init>:

static void (*TxCpltCallback)(void);
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void vcom_Init(void (*TxCb)(void))
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  /*Record Tx complete for DMA*/
  TxCpltCallback = TxCb;
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <vcom_Init+0x54>)
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	601a      	str	r2, [r3, #0]
      - Word Length = 8 Bits
      - Stop Bit = One Stop bit
      - Parity = ODD parity
      - BaudRate = 921600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <vcom_Init+0x58>)
 8004b4c:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <vcom_Init+0x5c>)
 8004b4e:	601a      	str	r2, [r3, #0]

  UartHandle.Init.BaudRate   = 115200;
 8004b50:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <vcom_Init+0x58>)
 8004b52:	22e1      	movs	r2, #225	; 0xe1
 8004b54:	0252      	lsls	r2, r2, #9
 8004b56:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8004b58:	4b0e      	ldr	r3, [pc, #56]	; (8004b94 <vcom_Init+0x58>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	; (8004b94 <vcom_Init+0x58>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8004b64:	4b0b      	ldr	r3, [pc, #44]	; (8004b94 <vcom_Init+0x58>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004b6a:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <vcom_Init+0x58>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX;
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <vcom_Init+0x58>)
 8004b72:	2208      	movs	r2, #8
 8004b74:	615a      	str	r2, [r3, #20]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <vcom_Init+0x58>)
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f006 f9bd 	bl	800aef8 <HAL_UART_Init>
 8004b7e:	1e03      	subs	r3, r0, #0
 8004b80:	d001      	beq.n	8004b86 <vcom_Init+0x4a>
  {
    /* Initialization Error */
    Error_Handler();
 8004b82:	f7fe f953 	bl	8002e2c <Error_Handler>
  }
}
 8004b86:	46c0      	nop			; (mov r8, r8)
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b002      	add	sp, #8
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	200003d4 	.word	0x200003d4
 8004b94:	20000354 	.word	0x20000354
 8004b98:	40004400 	.word	0x40004400

08004b9c <vcom_Trace>:

void vcom_Trace(uint8_t *p_data, uint16_t size)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	000a      	movs	r2, r1
 8004ba6:	1cbb      	adds	r3, r7, #2
 8004ba8:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8004baa:	1cbb      	adds	r3, r7, #2
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4b03      	ldr	r3, [pc, #12]	; (8004bc0 <vcom_Trace+0x24>)
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f006 f9f4 	bl	800afa0 <HAL_UART_Transmit_DMA>
}
 8004bb8:	46c0      	nop			; (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	b002      	add	sp, #8
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000354 	.word	0x20000354

08004bc4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  /* buffer transmission complete*/
  TxCpltCallback();
 8004bcc:	4b03      	ldr	r3, [pc, #12]	; (8004bdc <HAL_UART_TxCpltCallback+0x18>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4798      	blx	r3
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b002      	add	sp, #8
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	200003d4 	.word	0x200003d4

08004be0 <vcom_DMA_TX_IRQHandler>:

void vcom_DMA_TX_IRQHandler(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(UartHandle.hdmatx);
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <vcom_DMA_TX_IRQHandler+0x14>)
 8004be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be8:	0018      	movs	r0, r3
 8004bea:	f003 fe15 	bl	8008818 <HAL_DMA_IRQHandler>
}
 8004bee:	46c0      	nop			; (mov r8, r8)
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	20000354 	.word	0x20000354

08004bf8 <vcom_IRQHandler>:

void vcom_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&UartHandle);
 8004bfc:	4b03      	ldr	r3, [pc, #12]	; (8004c0c <vcom_IRQHandler+0x14>)
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f006 fa5e 	bl	800b0c0 <HAL_UART_IRQHandler>
}
 8004c04:	46c0      	nop			; (mov r8, r8)
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	20000354 	.word	0x20000354

08004c10 <HAL_UART_MspInit>:
{
  HAL_UART_DeInit(&UartHandle);
}

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c18:	231c      	movs	r3, #28
 8004c1a:	18fb      	adds	r3, r7, r3
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	2314      	movs	r3, #20
 8004c20:	001a      	movs	r2, r3
 8004c22:	2100      	movs	r1, #0
 8004c24:	f014 fe98 	bl	8019958 <memset>
  if (huart->Instance == USARTx)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a60      	ldr	r2, [pc, #384]	; (8004db0 <HAL_UART_MspInit+0x1a0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d161      	bne.n	8004cf6 <HAL_UART_MspInit+0xe6>
    static DMA_HandleTypeDef hdma_tx;


    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8004c32:	4b60      	ldr	r3, [pc, #384]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c36:	4b5f      	ldr	r3, [pc, #380]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c38:	2101      	movs	r1, #1
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c3e:	4b5d      	ldr	r3, [pc, #372]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c42:	2201      	movs	r2, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	69bb      	ldr	r3, [r7, #24]
    USARTx_RX_GPIO_CLK_ENABLE();
 8004c4a:	4b5a      	ldr	r3, [pc, #360]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4e:	4b59      	ldr	r3, [pc, #356]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c50:	2101      	movs	r1, #1
 8004c52:	430a      	orrs	r2, r1
 8004c54:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c56:	4b57      	ldr	r3, [pc, #348]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	697b      	ldr	r3, [r7, #20]

    /* Enable USARTx clock */
    USARTx_CLK_ENABLE();
 8004c62:	4b54      	ldr	r3, [pc, #336]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c66:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	0289      	lsls	r1, r1, #10
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8004c70:	4b50      	ldr	r3, [pc, #320]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c74:	4b4f      	ldr	r3, [pc, #316]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c76:	2101      	movs	r1, #1
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c7c:	4b4d      	ldr	r3, [pc, #308]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c80:	2201      	movs	r2, #1
 8004c82:	4013      	ands	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	693b      	ldr	r3, [r7, #16]

    /*##-2- Configure peripheral GPIO ##########################################*/
    /* UART  pin configuration  */
    vcom_IoInit();
 8004c88:	f000 f8a0 	bl	8004dcc <vcom_IoInit>

    /*##-3- Configure the DMA ##################################################*/
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8004c8c:	4b4a      	ldr	r3, [pc, #296]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004c8e:	4a4b      	ldr	r2, [pc, #300]	; (8004dbc <HAL_UART_MspInit+0x1ac>)
 8004c90:	601a      	str	r2, [r3, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8004c92:	4b49      	ldr	r3, [pc, #292]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004c94:	2210      	movs	r2, #16
 8004c96:	609a      	str	r2, [r3, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004c98:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004c9e:	4b46      	ldr	r3, [pc, #280]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004ca0:	2280      	movs	r2, #128	; 0x80
 8004ca2:	611a      	str	r2, [r3, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ca4:	4b44      	ldr	r3, [pc, #272]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	615a      	str	r2, [r3, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8004caa:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8004cb0:	4b41      	ldr	r3, [pc, #260]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	61da      	str	r2, [r3, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8004cb6:	4b40      	ldr	r3, [pc, #256]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	621a      	str	r2, [r3, #32]
#ifndef STM32L152xE
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8004cbc:	4b3e      	ldr	r3, [pc, #248]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004cbe:	2204      	movs	r2, #4
 8004cc0:	605a      	str	r2, [r3, #4]
#endif
    HAL_DMA_Init(&hdma_tx);
 8004cc2:	4b3d      	ldr	r3, [pc, #244]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f003 fc81 	bl	80085cc <HAL_DMA_Init>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(huart, hdmatx, hdma_tx);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a3a      	ldr	r2, [pc, #232]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004cce:	669a      	str	r2, [r3, #104]	; 0x68
 8004cd0:	4b39      	ldr	r3, [pc, #228]	; (8004db8 <HAL_UART_MspInit+0x1a8>)
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28

    /*##-4- Configure the NVIC for DMA #########################################*/
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2100      	movs	r1, #0
 8004cda:	200b      	movs	r0, #11
 8004cdc:	f003 fc50 	bl	8008580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8004ce0:	200b      	movs	r0, #11
 8004ce2:	f003 fc62 	bl	80085aa <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2100      	movs	r1, #0
 8004cea:	201c      	movs	r0, #28
 8004cec:	f003 fc48 	bl	8008580 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8004cf0:	201c      	movs	r0, #28
 8004cf2:	f003 fc5a 	bl	80085aa <HAL_NVIC_EnableIRQ>
  }
  if(huart->Instance==USART1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a31      	ldr	r2, [pc, #196]	; (8004dc0 <HAL_UART_MspInit+0x1b0>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d153      	bne.n	8004da8 <HAL_UART_MspInit+0x198>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
	/* USART1 clock enable */
	__HAL_RCC_USART1_CLK_ENABLE();
 8004d00:	4b2c      	ldr	r3, [pc, #176]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d04:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004d06:	2180      	movs	r1, #128	; 0x80
 8004d08:	01c9      	lsls	r1, r1, #7
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004d0e:	4b29      	ldr	r3, [pc, #164]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d12:	4b28      	ldr	r3, [pc, #160]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004d14:	2101      	movs	r1, #1
 8004d16:	430a      	orrs	r2, r1
 8004d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d1a:	4b26      	ldr	r3, [pc, #152]	; (8004db4 <HAL_UART_MspInit+0x1a4>)
 8004d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4013      	ands	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
	/**USART1 GPIO Configuration
	PA10     ------> USART1_RX
	PA9     ------> USART1_TX
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8004d26:	211c      	movs	r1, #28
 8004d28:	187b      	adds	r3, r7, r1
 8004d2a:	22c0      	movs	r2, #192	; 0xc0
 8004d2c:	00d2      	lsls	r2, r2, #3
 8004d2e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d30:	187b      	adds	r3, r7, r1
 8004d32:	2202      	movs	r2, #2
 8004d34:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d36:	187b      	adds	r3, r7, r1
 8004d38:	2200      	movs	r2, #0
 8004d3a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d3c:	187b      	adds	r3, r7, r1
 8004d3e:	2203      	movs	r2, #3
 8004d40:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004d42:	187b      	adds	r3, r7, r1
 8004d44:	2204      	movs	r2, #4
 8004d46:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d48:	187a      	adds	r2, r7, r1
 8004d4a:	23a0      	movs	r3, #160	; 0xa0
 8004d4c:	05db      	lsls	r3, r3, #23
 8004d4e:	0011      	movs	r1, r2
 8004d50:	0018      	movs	r0, r3
 8004d52:	f003 fe3d 	bl	80089d0 <HAL_GPIO_Init>

	/* USART1 DMA Init */
	/* USART1_RX Init */
	hdma_usart1_rx.Instance = DMA1_Channel3;
 8004d56:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d58:	4a1b      	ldr	r2, [pc, #108]	; (8004dc8 <HAL_UART_MspInit+0x1b8>)
 8004d5a:	601a      	str	r2, [r3, #0]
	hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d5e:	2203      	movs	r2, #3
 8004d60:	605a      	str	r2, [r3, #4]
	hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	609a      	str	r2, [r3, #8]
	hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	60da      	str	r2, [r3, #12]
	hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d70:	2280      	movs	r2, #128	; 0x80
 8004d72:	611a      	str	r2, [r3, #16]
	hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d74:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	615a      	str	r2, [r3, #20]
	hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d7a:	4b12      	ldr	r3, [pc, #72]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	619a      	str	r2, [r3, #24]
	hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004d80:	4b10      	ldr	r3, [pc, #64]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	61da      	str	r2, [r3, #28]
	hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d86:	4b0f      	ldr	r3, [pc, #60]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004d8c:	4b0d      	ldr	r3, [pc, #52]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f003 fc1c 	bl	80085cc <HAL_DMA_Init>
 8004d94:	1e03      	subs	r3, r0, #0
 8004d96:	d001      	beq.n	8004d9c <HAL_UART_MspInit+0x18c>
	{
	  Error_Handler();
 8004d98:	f7fe f848 	bl	8002e2c <Error_Handler>
	}

	__HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004da0:	66da      	str	r2, [r3, #108]	; 0x6c
 8004da2:	4b08      	ldr	r3, [pc, #32]	; (8004dc4 <HAL_UART_MspInit+0x1b4>)
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b00c      	add	sp, #48	; 0x30
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40004400 	.word	0x40004400
 8004db4:	40021000 	.word	0x40021000
 8004db8:	200003d8 	.word	0x200003d8
 8004dbc:	40020080 	.word	0x40020080
 8004dc0:	40013800 	.word	0x40013800
 8004dc4:	200014b8 	.word	0x200014b8
 8004dc8:	40020030 	.word	0x40020030

08004dcc <vcom_IoInit>:
  /*##-4- Disable the NVIC for DMA ###########################################*/
  HAL_NVIC_DisableIRQ(USARTx_DMA_TX_IRQn);
}

void vcom_IoInit(void)
{
 8004dcc:	b590      	push	{r4, r7, lr}
 8004dce:	b089      	sub	sp, #36	; 0x24
 8004dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8004dd2:	240c      	movs	r4, #12
 8004dd4:	193b      	adds	r3, r7, r4
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	2314      	movs	r3, #20
 8004dda:	001a      	movs	r2, r3
 8004ddc:	2100      	movs	r1, #0
 8004dde:	f014 fdbb 	bl	8019958 <memset>
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8004de2:	4b1f      	ldr	r3, [pc, #124]	; (8004e60 <vcom_IoInit+0x94>)
 8004de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de6:	4b1e      	ldr	r3, [pc, #120]	; (8004e60 <vcom_IoInit+0x94>)
 8004de8:	2101      	movs	r1, #1
 8004dea:	430a      	orrs	r2, r1
 8004dec:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dee:	4b1c      	ldr	r3, [pc, #112]	; (8004e60 <vcom_IoInit+0x94>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	2201      	movs	r2, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	60bb      	str	r3, [r7, #8]
 8004df8:	68bb      	ldr	r3, [r7, #8]
  USARTx_RX_GPIO_CLK_ENABLE();
 8004dfa:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <vcom_IoInit+0x94>)
 8004dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfe:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <vcom_IoInit+0x94>)
 8004e00:	2101      	movs	r1, #1
 8004e02:	430a      	orrs	r2, r1
 8004e04:	62da      	str	r2, [r3, #44]	; 0x2c
 8004e06:	4b16      	ldr	r3, [pc, #88]	; (8004e60 <vcom_IoInit+0x94>)
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8004e12:	193b      	adds	r3, r7, r4
 8004e14:	2204      	movs	r2, #4
 8004e16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8004e1e:	193b      	adds	r3, r7, r4
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8004e24:	193b      	adds	r3, r7, r4
 8004e26:	2203      	movs	r2, #3
 8004e28:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004e2a:	193b      	adds	r3, r7, r4
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8004e30:	193a      	adds	r2, r7, r4
 8004e32:	23a0      	movs	r3, #160	; 0xa0
 8004e34:	05db      	lsls	r3, r3, #23
 8004e36:	0011      	movs	r1, r2
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f003 fdc9 	bl	80089d0 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	2208      	movs	r2, #8
 8004e42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8004e44:	193b      	adds	r3, r7, r4
 8004e46:	2204      	movs	r2, #4
 8004e48:	611a      	str	r2, [r3, #16]

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8004e4a:	193a      	adds	r2, r7, r4
 8004e4c:	23a0      	movs	r3, #160	; 0xa0
 8004e4e:	05db      	lsls	r3, r3, #23
 8004e50:	0011      	movs	r1, r2
 8004e52:	0018      	movs	r0, r3
 8004e54:	f003 fdbc 	bl	80089d0 <HAL_GPIO_Init>
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b009      	add	sp, #36	; 0x24
 8004e5e:	bd90      	pop	{r4, r7, pc}
 8004e60:	40021000 	.word	0x40021000

08004e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8004e64:	480d      	ldr	r0, [pc, #52]	; (8004e9c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8004e66:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004e68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004e6a:	e003      	b.n	8004e74 <LoopCopyDataInit>

08004e6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ea0 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004e6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004e70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004e72:	3104      	adds	r1, #4

08004e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004e74:	480b      	ldr	r0, [pc, #44]	; (8004ea4 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <LoopForever+0xe>)
  adds  r2, r0, r1
 8004e78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004e7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004e7c:	d3f6      	bcc.n	8004e6c <CopyDataInit>
  ldr  r2, =_sbss
 8004e7e:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <LoopForever+0x12>)
  b  LoopFillZerobss
 8004e80:	e002      	b.n	8004e88 <LoopFillZerobss>

08004e82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004e82:	2300      	movs	r3, #0
  str  r3, [r2]
 8004e84:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e86:	3204      	adds	r2, #4

08004e88 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004e88:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <LoopForever+0x16>)
  cmp  r2, r3
 8004e8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e8c:	d3f9      	bcc.n	8004e82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004e8e:	f7ff fe17 	bl	8004ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e92:	f014 fd3d 	bl	8019910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e96:	f7fe feab 	bl	8003bf0 <main>

08004e9a <LoopForever>:

LoopForever:
    b LoopForever
 8004e9a:	e7fe      	b.n	8004e9a <LoopForever>
   ldr   r0, =_estack
 8004e9c:	20005000 	.word	0x20005000
  ldr  r3, =_sidata
 8004ea0:	0801b664 	.word	0x0801b664
  ldr  r0, =_sdata
 8004ea4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ea8:	20000158 	.word	0x20000158
  ldr  r2, =_sbss
 8004eac:	20000158 	.word	0x20000158
  ldr  r3, = _ebss
 8004eb0:	20001694 	.word	0x20001694

08004eb4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eb4:	e7fe      	b.n	8004eb4 <ADC1_COMP_IRQHandler>
	...

08004eb8 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08c      	sub	sp, #48	; 0x30
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	0002      	movs	r2, r0
 8004ec0:	1dfb      	adds	r3, r7, #7
 8004ec2:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE( Led );
 8004ec4:	1dfb      	adds	r3, r7, #7
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d015      	beq.n	8004ef8 <BSP_LED_Init+0x40>
 8004ecc:	dc02      	bgt.n	8004ed4 <BSP_LED_Init+0x1c>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d005      	beq.n	8004ede <BSP_LED_Init+0x26>
 8004ed2:	e037      	b.n	8004f44 <BSP_LED_Init+0x8c>
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d01c      	beq.n	8004f12 <BSP_LED_Init+0x5a>
 8004ed8:	2b03      	cmp	r3, #3
 8004eda:	d027      	beq.n	8004f2c <BSP_LED_Init+0x74>
 8004edc:	e032      	b.n	8004f44 <BSP_LED_Init+0x8c>
 8004ede:	4b2a      	ldr	r3, [pc, #168]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee2:	4b29      	ldr	r3, [pc, #164]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004ee4:	2102      	movs	r1, #2
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eea:	4b27      	ldr	r3, [pc, #156]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	e025      	b.n	8004f44 <BSP_LED_Init+0x8c>
 8004ef8:	4b23      	ldr	r3, [pc, #140]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004efc:	4b22      	ldr	r3, [pc, #136]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004efe:	2101      	movs	r1, #1
 8004f00:	430a      	orrs	r2, r1
 8004f02:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f04:	4b20      	ldr	r3, [pc, #128]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	2201      	movs	r2, #1
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	e018      	b.n	8004f44 <BSP_LED_Init+0x8c>
 8004f12:	4b1d      	ldr	r3, [pc, #116]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004f14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f16:	4b1c      	ldr	r3, [pc, #112]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004f18:	2102      	movs	r1, #2
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f1e:	4b1a      	ldr	r3, [pc, #104]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f22:	2202      	movs	r2, #2
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	e00b      	b.n	8004f44 <BSP_LED_Init+0x8c>
 8004f2c:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f30:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004f32:	2102      	movs	r1, #2
 8004f34:	430a      	orrs	r2, r1
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f38:	4b13      	ldr	r3, [pc, #76]	; (8004f88 <BSP_LED_Init+0xd0>)
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	46c0      	nop			; (mov r8, r8)

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004f46:	1dfb      	adds	r3, r7, #7
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <BSP_LED_Init+0xd4>)
 8004f4c:	0052      	lsls	r2, r2, #1
 8004f4e:	5ad3      	ldrh	r3, [r2, r3]
 8004f50:	001a      	movs	r2, r3
 8004f52:	211c      	movs	r1, #28
 8004f54:	187b      	adds	r3, r7, r1
 8004f56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f58:	187b      	adds	r3, r7, r1
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f5e:	187b      	adds	r3, r7, r1
 8004f60:	2200      	movs	r2, #0
 8004f62:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	2203      	movs	r2, #3
 8004f68:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004f6a:	1dfb      	adds	r3, r7, #7
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <BSP_LED_Init+0xd8>)
 8004f70:	0092      	lsls	r2, r2, #2
 8004f72:	58d3      	ldr	r3, [r2, r3]
 8004f74:	187a      	adds	r2, r7, r1
 8004f76:	0011      	movs	r1, r2
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f003 fd29 	bl	80089d0 <HAL_GPIO_Init>
}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b00c      	add	sp, #48	; 0x30
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	40021000 	.word	0x40021000
 8004f8c:	0801ace4 	.word	0x0801ace4
 8004f90:	20000034 	.word	0x20000034

08004f94 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	0002      	movs	r2, r0
 8004f9c:	1dfb      	adds	r3, r7, #7
 8004f9e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8004fa0:	1dfb      	adds	r3, r7, #7
 8004fa2:	781a      	ldrb	r2, [r3, #0]
 8004fa4:	4b07      	ldr	r3, [pc, #28]	; (8004fc4 <BSP_LED_On+0x30>)
 8004fa6:	0092      	lsls	r2, r2, #2
 8004fa8:	58d0      	ldr	r0, [r2, r3]
 8004faa:	1dfb      	adds	r3, r7, #7
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <BSP_LED_On+0x34>)
 8004fb0:	0052      	lsls	r2, r2, #1
 8004fb2:	5ad3      	ldrh	r3, [r2, r3]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	0019      	movs	r1, r3
 8004fb8:	f003 fe88 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	b002      	add	sp, #8
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000034 	.word	0x20000034
 8004fc8:	0801ace4 	.word	0x0801ace4

08004fcc <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	0002      	movs	r2, r0
 8004fd4:	1dfb      	adds	r3, r7, #7
 8004fd6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004fd8:	1dfb      	adds	r3, r7, #7
 8004fda:	781a      	ldrb	r2, [r3, #0]
 8004fdc:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <BSP_LED_Off+0x30>)
 8004fde:	0092      	lsls	r2, r2, #2
 8004fe0:	58d0      	ldr	r0, [r2, r3]
 8004fe2:	1dfb      	adds	r3, r7, #7
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <BSP_LED_Off+0x34>)
 8004fe8:	0052      	lsls	r2, r2, #1
 8004fea:	5ad3      	ldrh	r3, [r2, r3]
 8004fec:	2200      	movs	r2, #0
 8004fee:	0019      	movs	r1, r3
 8004ff0:	f003 fe6c 	bl	8008ccc <HAL_GPIO_WritePin>
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b002      	add	sp, #8
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000034 	.word	0x20000034
 8005000:	0801ace4 	.word	0x0801ace4

08005004 <SX1276GetWakeTime>:
    SX1276SetPublicNetwork,
    SX1276GetWakeupTime
};

uint32_t SX1276GetWakeTime( void )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	af00      	add	r7, sp, #0
  return  BOARD_WAKEUP_TIME;
 8005008:	2305      	movs	r3, #5
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <SX1276SetXO>:

void SX1276SetXO( uint8_t state )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	0002      	movs	r2, r0
 8005018:	1dfb      	adds	r3, r7, #7
 800501a:	701a      	strb	r2, [r3, #0]

  if (state == SET )
 800501c:	1dfb      	adds	r3, r7, #7
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d10b      	bne.n	800503c <SX1276SetXO+0x2c>
  {
    TCXO_ON(); 
 8005024:	2380      	movs	r3, #128	; 0x80
 8005026:	0159      	lsls	r1, r3, #5
 8005028:	23a0      	movs	r3, #160	; 0xa0
 800502a:	05db      	lsls	r3, r3, #23
 800502c:	2201      	movs	r2, #1
 800502e:	0018      	movs	r0, r3
 8005030:	f7fd ffd8 	bl	8002fe4 <HW_GPIO_Write>
    
    DelayMs( BOARD_WAKEUP_TIME ); //start up time of TCXO
 8005034:	2005      	movs	r0, #5
 8005036:	f7ff f8ff 	bl	8004238 <HAL_Delay>
  }
  else
  {
    TCXO_OFF(); 
  }
}
 800503a:	e007      	b.n	800504c <SX1276SetXO+0x3c>
    TCXO_OFF(); 
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	0159      	lsls	r1, r3, #5
 8005040:	23a0      	movs	r3, #160	; 0xa0
 8005042:	05db      	lsls	r3, r3, #23
 8005044:	2200      	movs	r2, #0
 8005046:	0018      	movs	r0, r3
 8005048:	f7fd ffcc 	bl	8002fe4 <HW_GPIO_Write>
}
 800504c:	46c0      	nop			; (mov r8, r8)
 800504e:	46bd      	mov	sp, r7
 8005050:	b002      	add	sp, #8
 8005052:	bd80      	pop	{r7, pc}

08005054 <SX1276IoInit>:
void SX1276IoInit( void )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800505a:	1d3b      	adds	r3, r7, #4
 800505c:	0018      	movs	r0, r3
 800505e:	2314      	movs	r3, #20
 8005060:	001a      	movs	r2, r3
 8005062:	2100      	movs	r1, #0
 8005064:	f014 fc78 	bl	8019958 <memset>
  
  SX1276BoardInit( &BoardCallbacks );
 8005068:	4b1b      	ldr	r3, [pc, #108]	; (80050d8 <SX1276IoInit+0x84>)
 800506a:	0018      	movs	r0, r3
 800506c:	f000 fa6e 	bl	800554c <SX1276BoardInit>
  
  initStruct.Mode =GPIO_MODE_IT_RISING;
 8005070:	1d3b      	adds	r3, r7, #4
 8005072:	4a1a      	ldr	r2, [pc, #104]	; (80050dc <SX1276IoInit+0x88>)
 8005074:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 8005076:	1d3b      	adds	r3, r7, #4
 8005078:	2202      	movs	r2, #2
 800507a:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800507c:	1d3b      	adds	r3, r7, #4
 800507e:	2203      	movs	r2, #3
 8005080:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8005082:	1d3b      	adds	r3, r7, #4
 8005084:	4816      	ldr	r0, [pc, #88]	; (80050e0 <SX1276IoInit+0x8c>)
 8005086:	001a      	movs	r2, r3
 8005088:	2110      	movs	r1, #16
 800508a:	f7fd fed9 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 800508e:	1d3b      	adds	r3, r7, #4
 8005090:	4813      	ldr	r0, [pc, #76]	; (80050e0 <SX1276IoInit+0x8c>)
 8005092:	001a      	movs	r2, r3
 8005094:	2102      	movs	r1, #2
 8005096:	f7fd fed3 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	4810      	ldr	r0, [pc, #64]	; (80050e0 <SX1276IoInit+0x8c>)
 800509e:	001a      	movs	r2, r3
 80050a0:	2101      	movs	r1, #1
 80050a2:	f7fd fecd 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 80050a6:	1d3a      	adds	r2, r7, #4
 80050a8:	2380      	movs	r3, #128	; 0x80
 80050aa:	019b      	lsls	r3, r3, #6
 80050ac:	480d      	ldr	r0, [pc, #52]	; (80050e4 <SX1276IoInit+0x90>)
 80050ae:	0019      	movs	r1, r3
 80050b0:	f7fd fec6 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80050b4:	1d3b      	adds	r3, r7, #4
 80050b6:	2201      	movs	r2, #1
 80050b8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL;  
 80050ba:	1d3b      	adds	r3, r7, #4
 80050bc:	2200      	movs	r2, #0
 80050be:	609a      	str	r2, [r3, #8]
  HW_GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
 80050c0:	1d3a      	adds	r2, r7, #4
 80050c2:	2380      	movs	r3, #128	; 0x80
 80050c4:	0159      	lsls	r1, r3, #5
 80050c6:	23a0      	movs	r3, #160	; 0xa0
 80050c8:	05db      	lsls	r3, r3, #23
 80050ca:	0018      	movs	r0, r3
 80050cc:	f7fd feb8 	bl	8002e40 <HW_GPIO_Init>
}
 80050d0:	46c0      	nop			; (mov r8, r8)
 80050d2:	46bd      	mov	sp, r7
 80050d4:	b006      	add	sp, #24
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20000044 	.word	0x20000044
 80050dc:	10110000 	.word	0x10110000
 80050e0:	50000400 	.word	0x50000400
 80050e4:	50000800 	.word	0x50000800

080050e8 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  HW_GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4811      	ldr	r0, [pc, #68]	; (800513c <SX1276IoIrqInit+0x54>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	2110      	movs	r1, #16
 80050fa:	f7fd ff15 	bl	8002f28 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3304      	adds	r3, #4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	480d      	ldr	r0, [pc, #52]	; (800513c <SX1276IoIrqInit+0x54>)
 8005106:	2200      	movs	r2, #0
 8005108:	2102      	movs	r1, #2
 800510a:	f7fd ff0d 	bl	8002f28 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3308      	adds	r3, #8
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4809      	ldr	r0, [pc, #36]	; (800513c <SX1276IoIrqInit+0x54>)
 8005116:	2200      	movs	r2, #0
 8005118:	2101      	movs	r1, #1
 800511a:	f7fd ff05 	bl	8002f28 <HW_GPIO_SetIrq>
  HW_GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	330c      	adds	r3, #12
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	0199      	lsls	r1, r3, #6
 8005128:	4805      	ldr	r0, [pc, #20]	; (8005140 <SX1276IoIrqInit+0x58>)
 800512a:	0013      	movs	r3, r2
 800512c:	2200      	movs	r2, #0
 800512e:	f7fd fefb 	bl	8002f28 <HW_GPIO_SetIrq>
}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	46bd      	mov	sp, r7
 8005136:	b002      	add	sp, #8
 8005138:	bd80      	pop	{r7, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	50000400 	.word	0x50000400
 8005140:	50000800 	.word	0x50000800

08005144 <SX1276IoDeInit>:

void SX1276IoDeInit( void )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	0018      	movs	r0, r3
 800514e:	2314      	movs	r3, #20
 8005150:	001a      	movs	r2, r3
 8005152:	2100      	movs	r1, #0
 8005154:	f014 fc00 	bl	8019958 <memset>

  initStruct.Mode = GPIO_MODE_IT_RISING ; //GPIO_MODE_ANALOG;
 8005158:	1d3b      	adds	r3, r7, #4
 800515a:	4a11      	ldr	r2, [pc, #68]	; (80051a0 <SX1276IoDeInit+0x5c>)
 800515c:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_PULLDOWN;
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	2202      	movs	r2, #2
 8005162:	609a      	str	r2, [r3, #8]
  
  HW_GPIO_Init( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, &initStruct );
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	480f      	ldr	r0, [pc, #60]	; (80051a4 <SX1276IoDeInit+0x60>)
 8005168:	001a      	movs	r2, r3
 800516a:	2110      	movs	r1, #16
 800516c:	f7fd fe68 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, &initStruct );
 8005170:	1d3b      	adds	r3, r7, #4
 8005172:	480c      	ldr	r0, [pc, #48]	; (80051a4 <SX1276IoDeInit+0x60>)
 8005174:	001a      	movs	r2, r3
 8005176:	2102      	movs	r1, #2
 8005178:	f7fd fe62 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, &initStruct );
 800517c:	1d3b      	adds	r3, r7, #4
 800517e:	4809      	ldr	r0, [pc, #36]	; (80051a4 <SX1276IoDeInit+0x60>)
 8005180:	001a      	movs	r2, r3
 8005182:	2101      	movs	r1, #1
 8005184:	f7fd fe5c 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, &initStruct );
 8005188:	1d3a      	adds	r2, r7, #4
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	019b      	lsls	r3, r3, #6
 800518e:	4806      	ldr	r0, [pc, #24]	; (80051a8 <SX1276IoDeInit+0x64>)
 8005190:	0019      	movs	r1, r3
 8005192:	f7fd fe55 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
#endif
#ifdef RADIO_DIO_5
  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
#endif
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	46bd      	mov	sp, r7
 800519a:	b006      	add	sp, #24
 800519c:	bd80      	pop	{r7, pc}
 800519e:	46c0      	nop			; (mov r8, r8)
 80051a0:	10110000 	.word	0x10110000
 80051a4:	50000400 	.word	0x50000400
 80051a8:	50000800 	.word	0x50000800

080051ac <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 80051ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	0002      	movs	r2, r0
 80051b4:	1dfb      	adds	r3, r7, #7
 80051b6:	701a      	strb	r2, [r3, #0]
    uint8_t paConfig = 0;
 80051b8:	250f      	movs	r5, #15
 80051ba:	197b      	adds	r3, r7, r5
 80051bc:	2200      	movs	r2, #0
 80051be:	701a      	strb	r2, [r3, #0]
    uint8_t paDac = 0;
 80051c0:	260e      	movs	r6, #14
 80051c2:	19bb      	adds	r3, r7, r6
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]

    paConfig = SX1276Read( REG_PACONFIG );
 80051c8:	197c      	adds	r4, r7, r5
 80051ca:	2009      	movs	r0, #9
 80051cc:	f001 fee8 	bl	8006fa0 <SX1276Read>
 80051d0:	0003      	movs	r3, r0
 80051d2:	7023      	strb	r3, [r4, #0]
    paDac = SX1276Read( REG_PADAC );
 80051d4:	19bc      	adds	r4, r7, r6
 80051d6:	204d      	movs	r0, #77	; 0x4d
 80051d8:	f001 fee2 	bl	8006fa0 <SX1276Read>
 80051dc:	0003      	movs	r3, r0
 80051de:	7023      	strb	r3, [r4, #0]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( power );
 80051e0:	197b      	adds	r3, r7, r5
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b25b      	sxtb	r3, r3
 80051e6:	227f      	movs	r2, #127	; 0x7f
 80051e8:	4013      	ands	r3, r2
 80051ea:	b25c      	sxtb	r4, r3
 80051ec:	1dfb      	adds	r3, r7, #7
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b25b      	sxtb	r3, r3
 80051f2:	0018      	movs	r0, r3
 80051f4:	f000 f8bb 	bl	800536e <SX1276GetPaSelect>
 80051f8:	0003      	movs	r3, r0
 80051fa:	b25b      	sxtb	r3, r3
 80051fc:	4323      	orrs	r3, r4
 80051fe:	b25a      	sxtb	r2, r3
 8005200:	197b      	adds	r3, r7, r5
 8005202:	701a      	strb	r2, [r3, #0]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8005204:	197b      	adds	r3, r7, r5
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b25b      	sxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	da67      	bge.n	80052de <SX1276SetRfTxPower+0x132>
    {
        if( power > 17 )
 800520e:	1dfb      	adds	r3, r7, #7
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	b25b      	sxtb	r3, r3
 8005214:	2b11      	cmp	r3, #17
 8005216:	dd07      	ble.n	8005228 <SX1276SetRfTxPower+0x7c>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8005218:	220e      	movs	r2, #14
 800521a:	18bb      	adds	r3, r7, r2
 800521c:	18ba      	adds	r2, r7, r2
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	2107      	movs	r1, #7
 8005222:	430a      	orrs	r2, r1
 8005224:	701a      	strb	r2, [r3, #0]
 8005226:	e00b      	b.n	8005240 <SX1276SetRfTxPower+0x94>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8005228:	210e      	movs	r1, #14
 800522a:	187b      	adds	r3, r7, r1
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	b25b      	sxtb	r3, r3
 8005230:	2207      	movs	r2, #7
 8005232:	4393      	bics	r3, r2
 8005234:	b25b      	sxtb	r3, r3
 8005236:	2204      	movs	r2, #4
 8005238:	4313      	orrs	r3, r2
 800523a:	b25a      	sxtb	r2, r3
 800523c:	187b      	adds	r3, r7, r1
 800523e:	701a      	strb	r2, [r3, #0]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8005240:	230e      	movs	r3, #14
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2207      	movs	r2, #7
 8005248:	4013      	ands	r3, r2
 800524a:	2b07      	cmp	r3, #7
 800524c:	d123      	bne.n	8005296 <SX1276SetRfTxPower+0xea>
        {
            if( power < 5 )
 800524e:	1dfb      	adds	r3, r7, #7
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b25b      	sxtb	r3, r3
 8005254:	2b04      	cmp	r3, #4
 8005256:	dc02      	bgt.n	800525e <SX1276SetRfTxPower+0xb2>
            {
                power = 5;
 8005258:	1dfb      	adds	r3, r7, #7
 800525a:	2205      	movs	r2, #5
 800525c:	701a      	strb	r2, [r3, #0]
            }
            if( power > 20 )
 800525e:	1dfb      	adds	r3, r7, #7
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b25b      	sxtb	r3, r3
 8005264:	2b14      	cmp	r3, #20
 8005266:	dd02      	ble.n	800526e <SX1276SetRfTxPower+0xc2>
            {
                power = 20;
 8005268:	1dfb      	adds	r3, r7, #7
 800526a:	2214      	movs	r2, #20
 800526c:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800526e:	200f      	movs	r0, #15
 8005270:	183b      	adds	r3, r7, r0
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	b25b      	sxtb	r3, r3
 8005276:	220f      	movs	r2, #15
 8005278:	4393      	bics	r3, r2
 800527a:	b25a      	sxtb	r2, r3
 800527c:	1dfb      	adds	r3, r7, #7
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	3b05      	subs	r3, #5
 8005282:	b2db      	uxtb	r3, r3
 8005284:	b25b      	sxtb	r3, r3
 8005286:	210f      	movs	r1, #15
 8005288:	400b      	ands	r3, r1
 800528a:	b25b      	sxtb	r3, r3
 800528c:	4313      	orrs	r3, r2
 800528e:	b25a      	sxtb	r2, r3
 8005290:	183b      	adds	r3, r7, r0
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e059      	b.n	800534a <SX1276SetRfTxPower+0x19e>
        }
        else
        {
            if( power < 2 )
 8005296:	1dfb      	adds	r3, r7, #7
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	b25b      	sxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	dc02      	bgt.n	80052a6 <SX1276SetRfTxPower+0xfa>
            {
                power = 2;
 80052a0:	1dfb      	adds	r3, r7, #7
 80052a2:	2202      	movs	r2, #2
 80052a4:	701a      	strb	r2, [r3, #0]
            }
            if( power > 17 )
 80052a6:	1dfb      	adds	r3, r7, #7
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	b25b      	sxtb	r3, r3
 80052ac:	2b11      	cmp	r3, #17
 80052ae:	dd02      	ble.n	80052b6 <SX1276SetRfTxPower+0x10a>
            {
                power = 17;
 80052b0:	1dfb      	adds	r3, r7, #7
 80052b2:	2211      	movs	r2, #17
 80052b4:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80052b6:	200f      	movs	r0, #15
 80052b8:	183b      	adds	r3, r7, r0
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	b25b      	sxtb	r3, r3
 80052be:	220f      	movs	r2, #15
 80052c0:	4393      	bics	r3, r2
 80052c2:	b25a      	sxtb	r2, r3
 80052c4:	1dfb      	adds	r3, r7, #7
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	3b02      	subs	r3, #2
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	b25b      	sxtb	r3, r3
 80052ce:	210f      	movs	r1, #15
 80052d0:	400b      	ands	r3, r1
 80052d2:	b25b      	sxtb	r3, r3
 80052d4:	4313      	orrs	r3, r2
 80052d6:	b25a      	sxtb	r2, r3
 80052d8:	183b      	adds	r3, r7, r0
 80052da:	701a      	strb	r2, [r3, #0]
 80052dc:	e035      	b.n	800534a <SX1276SetRfTxPower+0x19e>
        }
    }
    else
    {
        if( power > 0 )
 80052de:	1dfb      	adds	r3, r7, #7
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b25b      	sxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	dd18      	ble.n	800531a <SX1276SetRfTxPower+0x16e>
        {
            if( power > 15 )
 80052e8:	1dfb      	adds	r3, r7, #7
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	2b0f      	cmp	r3, #15
 80052f0:	dd02      	ble.n	80052f8 <SX1276SetRfTxPower+0x14c>
            {
                power = 15;
 80052f2:	1dfb      	adds	r3, r7, #7
 80052f4:	220f      	movs	r2, #15
 80052f6:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80052f8:	210f      	movs	r1, #15
 80052fa:	187b      	adds	r3, r7, r1
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b25b      	sxtb	r3, r3
 8005300:	227f      	movs	r2, #127	; 0x7f
 8005302:	4393      	bics	r3, r2
 8005304:	b25b      	sxtb	r3, r3
 8005306:	2270      	movs	r2, #112	; 0x70
 8005308:	4313      	orrs	r3, r2
 800530a:	b25a      	sxtb	r2, r3
 800530c:	1dfb      	adds	r3, r7, #7
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	4313      	orrs	r3, r2
 8005312:	b25a      	sxtb	r2, r3
 8005314:	187b      	adds	r3, r7, r1
 8005316:	701a      	strb	r2, [r3, #0]
 8005318:	e017      	b.n	800534a <SX1276SetRfTxPower+0x19e>
        }
        else
        {
            if( power < -4 )
 800531a:	1dfb      	adds	r3, r7, #7
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	b25b      	sxtb	r3, r3
 8005320:	3304      	adds	r3, #4
 8005322:	da02      	bge.n	800532a <SX1276SetRfTxPower+0x17e>
            {
                power = -4;
 8005324:	1dfb      	adds	r3, r7, #7
 8005326:	22fc      	movs	r2, #252	; 0xfc
 8005328:	701a      	strb	r2, [r3, #0]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800532a:	210f      	movs	r1, #15
 800532c:	187b      	adds	r3, r7, r1
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	b25b      	sxtb	r3, r3
 8005332:	227f      	movs	r2, #127	; 0x7f
 8005334:	4393      	bics	r3, r2
 8005336:	b25a      	sxtb	r2, r3
 8005338:	1dfb      	adds	r3, r7, #7
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	3304      	adds	r3, #4
 800533e:	b2db      	uxtb	r3, r3
 8005340:	b25b      	sxtb	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	b25a      	sxtb	r2, r3
 8005346:	187b      	adds	r3, r7, r1
 8005348:	701a      	strb	r2, [r3, #0]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800534a:	230f      	movs	r3, #15
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	0019      	movs	r1, r3
 8005352:	2009      	movs	r0, #9
 8005354:	f001 fe10 	bl	8006f78 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8005358:	230e      	movs	r3, #14
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	0019      	movs	r1, r3
 8005360:	204d      	movs	r0, #77	; 0x4d
 8005362:	f001 fe09 	bl	8006f78 <SX1276Write>
}
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	46bd      	mov	sp, r7
 800536a:	b005      	add	sp, #20
 800536c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800536e <SX1276GetPaSelect>:

uint8_t SX1276GetPaSelect( int8_t power )
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	0002      	movs	r2, r0
 8005376:	1dfb      	adds	r3, r7, #7
 8005378:	701a      	strb	r2, [r3, #0]
    if (power >14)
 800537a:	1dfb      	adds	r3, r7, #7
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	b25b      	sxtb	r3, r3
 8005380:	2b0e      	cmp	r3, #14
 8005382:	dd01      	ble.n	8005388 <SX1276GetPaSelect+0x1a>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8005384:	2380      	movs	r3, #128	; 0x80
 8005386:	e000      	b.n	800538a <SX1276GetPaSelect+0x1c>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8005388:	2300      	movs	r3, #0
    }
}
 800538a:	0018      	movs	r0, r3
 800538c:	46bd      	mov	sp, r7
 800538e:	b002      	add	sp, #8
 8005390:	bd80      	pop	{r7, pc}

08005392 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b082      	sub	sp, #8
 8005396:	af00      	add	r7, sp, #0
 8005398:	0002      	movs	r2, r0
 800539a:	1dfb      	adds	r3, r7, #7
 800539c:	701a      	strb	r2, [r3, #0]
    if( status == false )
 800539e:	1dfb      	adds	r3, r7, #7
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2201      	movs	r2, #1
 80053a4:	4053      	eors	r3, r2
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <SX1276SetAntSwLowPower+0x20>
    {
      SX1276AntSwInit( );
 80053ac:	f000 f808 	bl	80053c0 <SX1276AntSwInit>
    }
    else 
    {
      SX1276AntSwDeInit( );
    }
}
 80053b0:	e001      	b.n	80053b6 <SX1276SetAntSwLowPower+0x24>
      SX1276AntSwDeInit( );
 80053b2:	f000 f845 	bl	8005440 <SX1276AntSwDeInit>
}
 80053b6:	46c0      	nop			; (mov r8, r8)
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b002      	add	sp, #8
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <SX1276AntSwInit>:

static void SX1276AntSwInit( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 80053c6:	1d3b      	adds	r3, r7, #4
 80053c8:	0018      	movs	r0, r3
 80053ca:	2314      	movs	r3, #20
 80053cc:	001a      	movs	r2, r3
 80053ce:	2100      	movs	r1, #0
 80053d0:	f014 fac2 	bl	8019958 <memset>

  initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 80053d4:	1d3b      	adds	r3, r7, #4
 80053d6:	2201      	movs	r2, #1
 80053d8:	605a      	str	r2, [r3, #4]
  initStruct.Pull = GPIO_NOPULL; 
 80053da:	1d3b      	adds	r3, r7, #4
 80053dc:	2200      	movs	r2, #0
 80053de:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80053e0:	1d3b      	adds	r3, r7, #4
 80053e2:	2203      	movs	r2, #3
 80053e4:	60da      	str	r2, [r3, #12]
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 80053e6:	1d3a      	adds	r2, r7, #4
 80053e8:	23a0      	movs	r3, #160	; 0xa0
 80053ea:	05db      	lsls	r3, r3, #23
 80053ec:	2102      	movs	r1, #2
 80053ee:	0018      	movs	r0, r3
 80053f0:	f7fd fd26 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 80053f4:	23a0      	movs	r3, #160	; 0xa0
 80053f6:	05db      	lsls	r3, r3, #23
 80053f8:	2200      	movs	r2, #0
 80053fa:	2102      	movs	r1, #2
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fd fdf1 	bl	8002fe4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8005402:	1d3b      	adds	r3, r7, #4
 8005404:	480d      	ldr	r0, [pc, #52]	; (800543c <SX1276AntSwInit+0x7c>)
 8005406:	001a      	movs	r2, r3
 8005408:	2102      	movs	r1, #2
 800540a:	f7fd fd19 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 800540e:	4b0b      	ldr	r3, [pc, #44]	; (800543c <SX1276AntSwInit+0x7c>)
 8005410:	2200      	movs	r2, #0
 8005412:	2102      	movs	r1, #2
 8005414:	0018      	movs	r0, r3
 8005416:	f7fd fde5 	bl	8002fe4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	4807      	ldr	r0, [pc, #28]	; (800543c <SX1276AntSwInit+0x7c>)
 800541e:	001a      	movs	r2, r3
 8005420:	2104      	movs	r1, #4
 8005422:	f7fd fd0d 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 8005426:	4b05      	ldr	r3, [pc, #20]	; (800543c <SX1276AntSwInit+0x7c>)
 8005428:	2200      	movs	r2, #0
 800542a:	2104      	movs	r1, #4
 800542c:	0018      	movs	r0, r3
 800542e:	f7fd fdd9 	bl	8002fe4 <HW_GPIO_Write>
}
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b006      	add	sp, #24
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	50000800 	.word	0x50000800

08005440 <SX1276AntSwDeInit>:

static void SX1276AntSwDeInit( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef initStruct={0};
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	0018      	movs	r0, r3
 800544a:	2314      	movs	r3, #20
 800544c:	001a      	movs	r2, r3
 800544e:	2100      	movs	r1, #0
 8005450:	f014 fa82 	bl	8019958 <memset>

  initStruct.Mode = GPIO_MODE_ANALOG ;
 8005454:	1d3b      	adds	r3, r7, #4
 8005456:	2203      	movs	r2, #3
 8005458:	605a      	str	r2, [r3, #4]
  
  initStruct.Pull = GPIO_NOPULL;
 800545a:	1d3b      	adds	r3, r7, #4
 800545c:	2200      	movs	r2, #0
 800545e:	609a      	str	r2, [r3, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8005460:	1d3b      	adds	r3, r7, #4
 8005462:	2203      	movs	r2, #3
 8005464:	60da      	str	r2, [r3, #12]

  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, &initStruct  ); 
 8005466:	1d3a      	adds	r2, r7, #4
 8005468:	23a0      	movs	r3, #160	; 0xa0
 800546a:	05db      	lsls	r3, r3, #23
 800546c:	2102      	movs	r1, #2
 800546e:	0018      	movs	r0, r3
 8005470:	f7fd fce6 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 0);
 8005474:	23a0      	movs	r3, #160	; 0xa0
 8005476:	05db      	lsls	r3, r3, #23
 8005478:	2200      	movs	r2, #0
 800547a:	2102      	movs	r1, #2
 800547c:	0018      	movs	r0, r3
 800547e:	f7fd fdb1 	bl	8002fe4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, &initStruct  ); 
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	480d      	ldr	r0, [pc, #52]	; (80054bc <SX1276AntSwDeInit+0x7c>)
 8005486:	001a      	movs	r2, r3
 8005488:	2102      	movs	r1, #2
 800548a:	f7fd fcd9 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 0);
 800548e:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <SX1276AntSwDeInit+0x7c>)
 8005490:	2200      	movs	r2, #0
 8005492:	2102      	movs	r1, #2
 8005494:	0018      	movs	r0, r3
 8005496:	f7fd fda5 	bl	8002fe4 <HW_GPIO_Write>
  
  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  ); 
 800549a:	1d3b      	adds	r3, r7, #4
 800549c:	4807      	ldr	r0, [pc, #28]	; (80054bc <SX1276AntSwDeInit+0x7c>)
 800549e:	001a      	movs	r2, r3
 80054a0:	2104      	movs	r1, #4
 80054a2:	f7fd fccd 	bl	8002e40 <HW_GPIO_Init>
  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <SX1276AntSwDeInit+0x7c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	2104      	movs	r1, #4
 80054ac:	0018      	movs	r0, r3
 80054ae:	f7fd fd99 	bl	8002fe4 <HW_GPIO_Write>
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	46bd      	mov	sp, r7
 80054b6:	b006      	add	sp, #24
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	50000800 	.word	0x50000800

080054c0 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 80054c0:	b590      	push	{r4, r7, lr}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	0002      	movs	r2, r0
 80054c8:	1dfb      	adds	r3, r7, #7
 80054ca:	701a      	strb	r2, [r3, #0]
 uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80054cc:	230f      	movs	r3, #15
 80054ce:	18fc      	adds	r4, r7, r3
 80054d0:	2009      	movs	r0, #9
 80054d2:	f001 fd65 	bl	8006fa0 <SX1276Read>
 80054d6:	0003      	movs	r3, r0
 80054d8:	7023      	strb	r3, [r4, #0]
    switch( opMode )
 80054da:	1dfb      	adds	r3, r7, #7
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d116      	bne.n	8005510 <SX1276SetAntSw+0x50>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80054e2:	230f      	movs	r3, #15
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	b25b      	sxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	da06      	bge.n	80054fc <SX1276SetAntSw+0x3c>
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 80054ee:	4b10      	ldr	r3, [pc, #64]	; (8005530 <SX1276SetAntSw+0x70>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	2102      	movs	r1, #2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f7fd fd75 	bl	8002fe4 <HW_GPIO_Write>
 80054fa:	e005      	b.n	8005508 <SX1276SetAntSw+0x48>
      }
      else
      {
        HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 80054fc:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <SX1276SetAntSw+0x70>)
 80054fe:	2201      	movs	r2, #1
 8005500:	2104      	movs	r1, #4
 8005502:	0018      	movs	r0, r3
 8005504:	f7fd fd6e 	bl	8002fe4 <HW_GPIO_Write>
      }
      SX1276.RxTx = 1;
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <SX1276SetAntSw+0x74>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
        break;
 800550e:	e00a      	b.n	8005526 <SX1276SetAntSw+0x66>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
     SX1276.RxTx = 0;
 8005510:	4b08      	ldr	r3, [pc, #32]	; (8005534 <SX1276SetAntSw+0x74>)
 8005512:	2200      	movs	r2, #0
 8005514:	701a      	strb	r2, [r3, #0]
     HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8005516:	23a0      	movs	r3, #160	; 0xa0
 8005518:	05db      	lsls	r3, r3, #23
 800551a:	2201      	movs	r2, #1
 800551c:	2102      	movs	r1, #2
 800551e:	0018      	movs	r0, r3
 8005520:	f7fd fd60 	bl	8002fe4 <HW_GPIO_Write>
     break;
 8005524:	46c0      	nop			; (mov r8, r8)
    }
}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b005      	add	sp, #20
 800552c:	bd90      	pop	{r4, r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	50000800 	.word	0x50000800
 8005534:	200015c0 	.word	0x200015c0

08005538 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8005540:	2301      	movs	r3, #1
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b002      	add	sp, #8
 8005548:	bd80      	pop	{r7, pc}
	...

0800554c <SX1276BoardInit>:

/*
 * Radio driver functions implementation
 */
void SX1276BoardInit( LoRaBoardCallback_t *callbacks )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b082      	sub	sp, #8
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    LoRaBoardCallbacks =callbacks;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <SX1276BoardInit+0x18>)
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	601a      	str	r2, [r3, #0]
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	46bd      	mov	sp, r7
 800555e:	b002      	add	sp, #8
 8005560:	bd80      	pop	{r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	20000524 	.word	0x20000524

08005568 <SX1276Init>:

uint32_t SX1276Init( RadioEvents_t *events )
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 8005570:	4b33      	ldr	r3, [pc, #204]	; (8005640 <SX1276Init+0xd8>)
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	601a      	str	r2, [r3, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8005576:	4a33      	ldr	r2, [pc, #204]	; (8005644 <SX1276Init+0xdc>)
 8005578:	4b33      	ldr	r3, [pc, #204]	; (8005648 <SX1276Init+0xe0>)
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f013 fdf8 	bl	8019172 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8005582:	4a30      	ldr	r2, [pc, #192]	; (8005644 <SX1276Init+0xdc>)
 8005584:	4b31      	ldr	r3, [pc, #196]	; (800564c <SX1276Init+0xe4>)
 8005586:	0011      	movs	r1, r2
 8005588:	0018      	movs	r0, r3
 800558a:	f013 fdf2 	bl	8019172 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800558e:	4a2d      	ldr	r2, [pc, #180]	; (8005644 <SX1276Init+0xdc>)
 8005590:	4b2f      	ldr	r3, [pc, #188]	; (8005650 <SX1276Init+0xe8>)
 8005592:	0011      	movs	r1, r2
 8005594:	0018      	movs	r0, r3
 8005596:	f013 fdec 	bl	8019172 <TimerInit>

    LoRaBoardCallbacks->SX1276BoardSetXO( SET );
 800559a:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <SX1276Init+0xec>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2001      	movs	r0, #1
 80055a2:	4798      	blx	r3

    SX1276Reset( );
 80055a4:	f001 fc0a 	bl	8006dbc <SX1276Reset>

    RxChainCalibration( );
 80055a8:	f000 f93c 	bl	8005824 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80055ac:	2000      	movs	r0, #0
 80055ae:	f001 fc39 	bl	8006e24 <SX1276SetOpMode>

    LoRaBoardCallbacks->SX1276BoardIoIrqInit( DioIrq );
 80055b2:	4b28      	ldr	r3, [pc, #160]	; (8005654 <SX1276Init+0xec>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a27      	ldr	r2, [pc, #156]	; (8005658 <SX1276Init+0xf0>)
 80055ba:	0010      	movs	r0, r2
 80055bc:	4798      	blx	r3

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80055be:	230f      	movs	r3, #15
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e025      	b.n	8005614 <SX1276Init+0xac>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80055c8:	240f      	movs	r4, #15
 80055ca:	193b      	adds	r3, r7, r4
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	4923      	ldr	r1, [pc, #140]	; (800565c <SX1276Init+0xf4>)
 80055d0:	0013      	movs	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	189b      	adds	r3, r3, r2
 80055d6:	5c5b      	ldrb	r3, [r3, r1]
 80055d8:	0018      	movs	r0, r3
 80055da:	f001 fc73 	bl	8006ec4 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80055de:	193b      	adds	r3, r7, r4
 80055e0:	781a      	ldrb	r2, [r3, #0]
 80055e2:	491e      	ldr	r1, [pc, #120]	; (800565c <SX1276Init+0xf4>)
 80055e4:	0013      	movs	r3, r2
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	189b      	adds	r3, r3, r2
 80055ea:	18cb      	adds	r3, r1, r3
 80055ec:	3301      	adds	r3, #1
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b298      	uxth	r0, r3
 80055f2:	193b      	adds	r3, r7, r4
 80055f4:	781a      	ldrb	r2, [r3, #0]
 80055f6:	4919      	ldr	r1, [pc, #100]	; (800565c <SX1276Init+0xf4>)
 80055f8:	0013      	movs	r3, r2
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	189b      	adds	r3, r3, r2
 80055fe:	18cb      	adds	r3, r1, r3
 8005600:	3302      	adds	r3, #2
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	0019      	movs	r1, r3
 8005606:	f001 fcb7 	bl	8006f78 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800560a:	193b      	adds	r3, r7, r4
 800560c:	781a      	ldrb	r2, [r3, #0]
 800560e:	193b      	adds	r3, r7, r4
 8005610:	3201      	adds	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	230f      	movs	r3, #15
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b0f      	cmp	r3, #15
 800561c:	d9d4      	bls.n	80055c8 <SX1276Init+0x60>
    }

    SX1276SetModem( MODEM_FSK );
 800561e:	2000      	movs	r0, #0
 8005620:	f001 fc50 	bl	8006ec4 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <SX1276Init+0xf8>)
 8005626:	2200      	movs	r2, #0
 8005628:	711a      	strb	r2, [r3, #4]

    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <SX1276Init+0xec>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4798      	blx	r3
 8005632:	0003      	movs	r3, r0
 8005634:	3302      	adds	r3, #2
}
 8005636:	0018      	movs	r0, r3
 8005638:	46bd      	mov	sp, r7
 800563a:	b005      	add	sp, #20
 800563c:	bd90      	pop	{r4, r7, pc}
 800563e:	46c0      	nop			; (mov r8, r8)
 8005640:	20000420 	.word	0x20000420
 8005644:	080071e1 	.word	0x080071e1
 8005648:	20001590 	.word	0x20001590
 800564c:	20001628 	.word	0x20001628
 8005650:	200015a8 	.word	0x200015a8
 8005654:	20000524 	.word	0x20000524
 8005658:	2000005c 	.word	0x2000005c
 800565c:	0801ad60 	.word	0x0801ad60
 8005660:	200015c0 	.word	0x200015c0

08005664 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8005668:	4b02      	ldr	r3, [pc, #8]	; (8005674 <SX1276GetStatus+0x10>)
 800566a:	791b      	ldrb	r3, [r3, #4]
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	46c0      	nop			; (mov r8, r8)
 8005674:	200015c0 	.word	0x200015c0

08005678 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
    uint32_t channel;

    SX1276.Settings.Channel = freq;
 8005680:	4b1d      	ldr	r3, [pc, #116]	; (80056f8 <SX1276SetChannel+0x80>)
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]

    SX_FREQ_TO_CHANNEL( channel, freq );
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	491c      	ldr	r1, [pc, #112]	; (80056fc <SX1276SetChannel+0x84>)
 800568a:	0018      	movs	r0, r3
 800568c:	f7fa fd3c 	bl	8000108 <__udivsi3>
 8005690:	0003      	movs	r3, r0
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	6979      	ldr	r1, [r7, #20]
 8005696:	000b      	movs	r3, r1
 8005698:	015b      	lsls	r3, r3, #5
 800569a:	1a5b      	subs	r3, r3, r1
 800569c:	019a      	lsls	r2, r3, #6
 800569e:	1ad2      	subs	r2, r2, r3
 80056a0:	00d2      	lsls	r2, r2, #3
 80056a2:	1853      	adds	r3, r2, r1
 80056a4:	687a      	ldr	r2, [r7, #4]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	021c      	lsls	r4, r3, #8
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	021b      	lsls	r3, r3, #8
 80056b2:	4a13      	ldr	r2, [pc, #76]	; (8005700 <SX1276SetChannel+0x88>)
 80056b4:	4694      	mov	ip, r2
 80056b6:	4463      	add	r3, ip
 80056b8:	4910      	ldr	r1, [pc, #64]	; (80056fc <SX1276SetChannel+0x84>)
 80056ba:	0018      	movs	r0, r3
 80056bc:	f7fa fd24 	bl	8000108 <__udivsi3>
 80056c0:	0003      	movs	r3, r0
 80056c2:	18e3      	adds	r3, r4, r3
 80056c4:	60fb      	str	r3, [r7, #12]

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( channel >> 16 ) & 0xFF ) );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	0c1b      	lsrs	r3, r3, #16
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	0019      	movs	r1, r3
 80056ce:	2006      	movs	r0, #6
 80056d0:	f001 fc52 	bl	8006f78 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( channel >> 8 ) & 0xFF ) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	0a1b      	lsrs	r3, r3, #8
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	0019      	movs	r1, r3
 80056dc:	2007      	movs	r0, #7
 80056de:	f001 fc4b 	bl	8006f78 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( channel & 0xFF ) );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	0019      	movs	r1, r3
 80056e8:	2008      	movs	r0, #8
 80056ea:	f001 fc45 	bl	8006f78 <SX1276Write>
}
 80056ee:	46c0      	nop			; (mov r8, r8)
 80056f0:	46bd      	mov	sp, r7
 80056f2:	b007      	add	sp, #28
 80056f4:	bd90      	pop	{r4, r7, pc}
 80056f6:	46c0      	nop			; (mov r8, r8)
 80056f8:	200015c0 	.word	0x200015c0
 80056fc:	00003d09 	.word	0x00003d09
 8005700:	00001e84 	.word	0x00001e84

08005704 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8005704:	b5b0      	push	{r4, r5, r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	0011      	movs	r1, r2
 800570e:	607b      	str	r3, [r7, #4]
 8005710:	230f      	movs	r3, #15
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	1c02      	adds	r2, r0, #0
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	230c      	movs	r3, #12
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	1c0a      	adds	r2, r1, #0
 800571e:	801a      	strh	r2, [r3, #0]
    bool status = true;
 8005720:	2317      	movs	r3, #23
 8005722:	18fb      	adds	r3, r7, r3
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8005728:	2314      	movs	r3, #20
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2200      	movs	r2, #0
 800572e:	801a      	strh	r2, [r3, #0]
    uint32_t carrierSenseTime = 0;
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]

    if( SX1276GetStatus( ) != RF_IDLE )
 8005734:	f7ff ff96 	bl	8005664 <SX1276GetStatus>
 8005738:	1e03      	subs	r3, r0, #0
 800573a:	d001      	beq.n	8005740 <SX1276IsChannelFree+0x3c>
    {
        return false;
 800573c:	2300      	movs	r3, #0
 800573e:	e039      	b.n	80057b4 <SX1276IsChannelFree+0xb0>
    }

    SX1276SetModem( modem );
 8005740:	230f      	movs	r3, #15
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	0018      	movs	r0, r3
 8005748:	f001 fbbc 	bl	8006ec4 <SX1276SetModem>

    SX1276SetChannel( freq );
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	0018      	movs	r0, r3
 8005750:	f7ff ff92 	bl	8005678 <SX1276SetChannel>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8005754:	2005      	movs	r0, #5
 8005756:	f001 fb65 	bl	8006e24 <SX1276SetOpMode>

    DelayMs( 1 );
 800575a:	2001      	movs	r0, #1
 800575c:	f7fe fd6c 	bl	8004238 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8005760:	f013 fe9d 	bl	801949e <TimerGetCurrentTime>
 8005764:	0003      	movs	r3, r0
 8005766:	613b      	str	r3, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8005768:	e017      	b.n	800579a <SX1276IsChannelFree+0x96>
    {
        rssi = SX1276ReadRssi( modem );
 800576a:	2514      	movs	r5, #20
 800576c:	197c      	adds	r4, r7, r5
 800576e:	230f      	movs	r3, #15
 8005770:	18fb      	adds	r3, r7, r3
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	0018      	movs	r0, r3
 8005776:	f001 fad5 	bl	8006d24 <SX1276ReadRssi>
 800577a:	0003      	movs	r3, r0
 800577c:	8023      	strh	r3, [r4, #0]

        if( rssi > rssiThresh )
 800577e:	197a      	adds	r2, r7, r5
 8005780:	230c      	movs	r3, #12
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	2100      	movs	r1, #0
 8005786:	5e52      	ldrsh	r2, [r2, r1]
 8005788:	2100      	movs	r1, #0
 800578a:	5e5b      	ldrsh	r3, [r3, r1]
 800578c:	429a      	cmp	r2, r3
 800578e:	dd04      	ble.n	800579a <SX1276IsChannelFree+0x96>
        {
            status = false;
 8005790:	2317      	movs	r3, #23
 8005792:	18fb      	adds	r3, r7, r3
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
            break;
 8005798:	e007      	b.n	80057aa <SX1276IsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	0018      	movs	r0, r3
 800579e:	f013 fe8e 	bl	80194be <TimerGetElapsedTime>
 80057a2:	0002      	movs	r2, r0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d8df      	bhi.n	800576a <SX1276IsChannelFree+0x66>
        }
    }
    SX1276SetSleep( );
 80057aa:	f000 ffdd 	bl	8006768 <SX1276SetSleep>
    return status;
 80057ae:	2317      	movs	r3, #23
 80057b0:	18fb      	adds	r3, r7, r3
 80057b2:	781b      	ldrb	r3, [r3, #0]
}
 80057b4:	0018      	movs	r0, r3
 80057b6:	46bd      	mov	sp, r7
 80057b8:	b006      	add	sp, #24
 80057ba:	bdb0      	pop	{r4, r5, r7, pc}

080057bc <SX1276Random>:

uint32_t SX1276Random( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 80057c2:	2300      	movs	r3, #0
 80057c4:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 80057c6:	2001      	movs	r0, #1
 80057c8:	f001 fb7c 	bl	8006ec4 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80057cc:	21ff      	movs	r1, #255	; 0xff
 80057ce:	2011      	movs	r0, #17
 80057d0:	f001 fbd2 	bl	8006f78 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 80057d4:	2005      	movs	r0, #5
 80057d6:	f001 fb25 	bl	8006e24 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 80057da:	1dfb      	adds	r3, r7, #7
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
 80057e0:	e015      	b.n	800580e <SX1276Random+0x52>
    {
        DelayMs( 1 );
 80057e2:	2001      	movs	r0, #1
 80057e4:	f7fe fd28 	bl	8004238 <HAL_Delay>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 80057e8:	202c      	movs	r0, #44	; 0x2c
 80057ea:	f001 fbd9 	bl	8006fa0 <SX1276Read>
 80057ee:	0003      	movs	r3, r0
 80057f0:	001a      	movs	r2, r3
 80057f2:	2301      	movs	r3, #1
 80057f4:	401a      	ands	r2, r3
 80057f6:	1dfb      	adds	r3, r7, #7
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	409a      	lsls	r2, r3
 80057fc:	0013      	movs	r3, r2
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	4313      	orrs	r3, r2
 8005802:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8005804:	1dfb      	adds	r3, r7, #7
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	1dfb      	adds	r3, r7, #7
 800580a:	3201      	adds	r2, #1
 800580c:	701a      	strb	r2, [r3, #0]
 800580e:	1dfb      	adds	r3, r7, #7
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b1f      	cmp	r3, #31
 8005814:	d9e5      	bls.n	80057e2 <SX1276Random+0x26>
    }

    SX1276SetSleep( );
 8005816:	f000 ffa7 	bl	8006768 <SX1276SetSleep>

    return rnd;
 800581a:	683b      	ldr	r3, [r7, #0]
}
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	b002      	add	sp, #8
 8005822:	bd80      	pop	{r7, pc}

08005824 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
void RxChainCalibration( void )
{
 8005824:	b590      	push	{r4, r7, lr}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;
    uint32_t channel;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800582a:	2317      	movs	r3, #23
 800582c:	18fc      	adds	r4, r7, r3
 800582e:	2009      	movs	r0, #9
 8005830:	f001 fbb6 	bl	8006fa0 <SX1276Read>
 8005834:	0003      	movs	r3, r0
 8005836:	7023      	strb	r3, [r4, #0]

    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005838:	2006      	movs	r0, #6
 800583a:	f001 fbb1 	bl	8006fa0 <SX1276Read>
 800583e:	0003      	movs	r3, r0
 8005840:	041c      	lsls	r4, r3, #16
                ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005842:	2007      	movs	r0, #7
 8005844:	f001 fbac 	bl	8006fa0 <SX1276Read>
 8005848:	0003      	movs	r3, r0
 800584a:	021b      	lsls	r3, r3, #8
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800584c:	431c      	orrs	r4, r3
                ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) );
 800584e:	2008      	movs	r0, #8
 8005850:	f001 fba6 	bl	8006fa0 <SX1276Read>
 8005854:	0003      	movs	r3, r0
    channel = ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005856:	4323      	orrs	r3, r4
 8005858:	613b      	str	r3, [r7, #16]

    SX_CHANNEL_TO_FREQ(channel, initialFreq);
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	0a1b      	lsrs	r3, r3, #8
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	000b      	movs	r3, r1
 800586e:	015b      	lsls	r3, r3, #5
 8005870:	1a5b      	subs	r3, r3, r1
 8005872:	019a      	lsls	r2, r3, #6
 8005874:	1ad2      	subs	r2, r2, r3
 8005876:	00d2      	lsls	r2, r2, #3
 8005878:	1850      	adds	r0, r2, r1
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	000b      	movs	r3, r1
 800587e:	015b      	lsls	r3, r3, #5
 8005880:	1a5b      	subs	r3, r3, r1
 8005882:	019a      	lsls	r2, r3, #6
 8005884:	1ad2      	subs	r2, r2, r3
 8005886:	00d2      	lsls	r2, r2, #3
 8005888:	1853      	adds	r3, r2, r1
 800588a:	3380      	adds	r3, #128	; 0x80
 800588c:	0a1b      	lsrs	r3, r3, #8
 800588e:	18c3      	adds	r3, r0, r3
 8005890:	607b      	str	r3, [r7, #4]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8005892:	2100      	movs	r1, #0
 8005894:	2009      	movs	r0, #9
 8005896:	f001 fb6f 	bl	8006f78 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800589a:	203b      	movs	r0, #59	; 0x3b
 800589c:	f001 fb80 	bl	8006fa0 <SX1276Read>
 80058a0:	0003      	movs	r3, r0
 80058a2:	001a      	movs	r2, r3
 80058a4:	2340      	movs	r3, #64	; 0x40
 80058a6:	4313      	orrs	r3, r2
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	0019      	movs	r1, r3
 80058ac:	203b      	movs	r0, #59	; 0x3b
 80058ae:	f001 fb63 	bl	8006f78 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80058b2:	46c0      	nop			; (mov r8, r8)
 80058b4:	203b      	movs	r0, #59	; 0x3b
 80058b6:	f001 fb73 	bl	8006fa0 <SX1276Read>
 80058ba:	0003      	movs	r3, r0
 80058bc:	001a      	movs	r2, r3
 80058be:	2320      	movs	r3, #32
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d0f6      	beq.n	80058b4 <RxChainCalibration+0x90>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <RxChainCalibration+0xf4>)
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff fed5 	bl	8005678 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 80058ce:	203b      	movs	r0, #59	; 0x3b
 80058d0:	f001 fb66 	bl	8006fa0 <SX1276Read>
 80058d4:	0003      	movs	r3, r0
 80058d6:	001a      	movs	r2, r3
 80058d8:	2340      	movs	r3, #64	; 0x40
 80058da:	4313      	orrs	r3, r2
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	0019      	movs	r1, r3
 80058e0:	203b      	movs	r0, #59	; 0x3b
 80058e2:	f001 fb49 	bl	8006f78 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 80058e6:	46c0      	nop			; (mov r8, r8)
 80058e8:	203b      	movs	r0, #59	; 0x3b
 80058ea:	f001 fb59 	bl	8006fa0 <SX1276Read>
 80058ee:	0003      	movs	r3, r0
 80058f0:	001a      	movs	r2, r3
 80058f2:	2320      	movs	r3, #32
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d0f6      	beq.n	80058e8 <RxChainCalibration+0xc4>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 80058fa:	2317      	movs	r3, #23
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	0019      	movs	r1, r3
 8005902:	2009      	movs	r0, #9
 8005904:	f001 fb38 	bl	8006f78 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	0018      	movs	r0, r3
 800590c:	f7ff feb4 	bl	8005678 <SX1276SetChannel>
}
 8005910:	46c0      	nop			; (mov r8, r8)
 8005912:	46bd      	mov	sp, r7
 8005914:	b007      	add	sp, #28
 8005916:	bd90      	pop	{r4, r7, pc}
 8005918:	33bca100 	.word	0x33bca100

0800591c <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005924:	230f      	movs	r3, #15
 8005926:	18fb      	adds	r3, r7, r3
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
 800592c:	e021      	b.n	8005972 <GetFskBandwidthRegValue+0x56>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800592e:	230f      	movs	r3, #15
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	781a      	ldrb	r2, [r3, #0]
 8005934:	4b14      	ldr	r3, [pc, #80]	; (8005988 <GetFskBandwidthRegValue+0x6c>)
 8005936:	00d2      	lsls	r2, r2, #3
 8005938:	58d3      	ldr	r3, [r2, r3]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	429a      	cmp	r2, r3
 800593e:	d312      	bcc.n	8005966 <GetFskBandwidthRegValue+0x4a>
 8005940:	230f      	movs	r3, #15
 8005942:	18fb      	adds	r3, r7, r3
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	4b0f      	ldr	r3, [pc, #60]	; (8005988 <GetFskBandwidthRegValue+0x6c>)
 800594a:	00d2      	lsls	r2, r2, #3
 800594c:	58d3      	ldr	r3, [r2, r3]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	429a      	cmp	r2, r3
 8005952:	d208      	bcs.n	8005966 <GetFskBandwidthRegValue+0x4a>
        {
            return FskBandwidths[i].RegValue;
 8005954:	230f      	movs	r3, #15
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	4a0b      	ldr	r2, [pc, #44]	; (8005988 <GetFskBandwidthRegValue+0x6c>)
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	3304      	adds	r3, #4
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	e00b      	b.n	800597e <GetFskBandwidthRegValue+0x62>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8005966:	210f      	movs	r1, #15
 8005968:	187b      	adds	r3, r7, r1
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	187b      	adds	r3, r7, r1
 800596e:	3201      	adds	r2, #1
 8005970:	701a      	strb	r2, [r3, #0]
 8005972:	230f      	movs	r3, #15
 8005974:	18fb      	adds	r3, r7, r3
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b14      	cmp	r3, #20
 800597a:	d9d8      	bls.n	800592e <GetFskBandwidthRegValue+0x12>
        }
    }
    // ERROR: Value not found
    while( 1 );
 800597c:	e7fe      	b.n	800597c <GetFskBandwidthRegValue+0x60>
}
 800597e:	0018      	movs	r0, r3
 8005980:	46bd      	mov	sp, r7
 8005982:	b004      	add	sp, #16
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	0801ad90 	.word	0x0801ad90

0800598c <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 800598c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800598e:	46c6      	mov	lr, r8
 8005990:	b500      	push	{lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	0019      	movs	r1, r3
 800599c:	240f      	movs	r4, #15
 800599e:	193b      	adds	r3, r7, r4
 80059a0:	1c02      	adds	r2, r0, #0
 80059a2:	701a      	strb	r2, [r3, #0]
 80059a4:	230e      	movs	r3, #14
 80059a6:	18fb      	adds	r3, r7, r3
 80059a8:	1c0a      	adds	r2, r1, #0
 80059aa:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 80059ac:	193b      	adds	r3, r7, r4
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	0018      	movs	r0, r3
 80059b2:	f001 fa87 	bl	8006ec4 <SX1276SetModem>

    switch( modem )
 80059b6:	193b      	adds	r3, r7, r4
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <SX1276SetRxConfig+0x3a>
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d100      	bne.n	80059c4 <SX1276SetRxConfig+0x38>
 80059c2:	e100      	b.n	8005bc6 <SX1276SetRxConfig+0x23a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80059c4:	e274      	b.n	8005eb0 <SX1276SetRxConfig+0x524>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80059c6:	4bc0      	ldr	r3, [pc, #768]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 80059cc:	4bbe      	ldr	r3, [pc, #760]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 80059d2:	4bbd      	ldr	r3, [pc, #756]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 80059d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d6:	619a      	str	r2, [r3, #24]
            SX1276.Settings.Fsk.FixLen = fixLen;
 80059d8:	4bbb      	ldr	r3, [pc, #748]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 80059da:	222c      	movs	r2, #44	; 0x2c
 80059dc:	2108      	movs	r1, #8
 80059de:	468c      	mov	ip, r1
 80059e0:	44bc      	add	ip, r7
 80059e2:	4462      	add	r2, ip
 80059e4:	2122      	movs	r1, #34	; 0x22
 80059e6:	7812      	ldrb	r2, [r2, #0]
 80059e8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 80059ea:	4bb7      	ldr	r3, [pc, #732]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 80059ec:	2130      	movs	r1, #48	; 0x30
 80059ee:	2008      	movs	r0, #8
 80059f0:	183a      	adds	r2, r7, r0
 80059f2:	1852      	adds	r2, r2, r1
 80059f4:	2123      	movs	r1, #35	; 0x23
 80059f6:	7812      	ldrb	r2, [r2, #0]
 80059f8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 80059fa:	4bb3      	ldr	r3, [pc, #716]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 80059fc:	2134      	movs	r1, #52	; 0x34
 80059fe:	183a      	adds	r2, r7, r0
 8005a00:	1852      	adds	r2, r2, r1
 8005a02:	2124      	movs	r1, #36	; 0x24
 8005a04:	7812      	ldrb	r2, [r2, #0]
 8005a06:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005a08:	4baf      	ldr	r3, [pc, #700]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	2120      	movs	r1, #32
 8005a0e:	468c      	mov	ip, r1
 8005a10:	2108      	movs	r1, #8
 8005a12:	4688      	mov	r8, r1
 8005a14:	44b8      	add	r8, r7
 8005a16:	44c4      	add	ip, r8
 8005a18:	4462      	add	r2, ip
 8005a1a:	2125      	movs	r1, #37	; 0x25
 8005a1c:	7812      	ldrb	r2, [r2, #0]
 8005a1e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8005a20:	4ba9      	ldr	r3, [pc, #676]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005a22:	2224      	movs	r2, #36	; 0x24
 8005a24:	2120      	movs	r1, #32
 8005a26:	468c      	mov	ip, r1
 8005a28:	2108      	movs	r1, #8
 8005a2a:	4688      	mov	r8, r1
 8005a2c:	44b8      	add	r8, r7
 8005a2e:	44c4      	add	ip, r8
 8005a30:	4462      	add	r2, ip
 8005a32:	2126      	movs	r1, #38	; 0x26
 8005a34:	7812      	ldrb	r2, [r2, #0]
 8005a36:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005a38:	4ba3      	ldr	r3, [pc, #652]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005a3a:	2624      	movs	r6, #36	; 0x24
 8005a3c:	183a      	adds	r2, r7, r0
 8005a3e:	1992      	adds	r2, r2, r6
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 8005a44:	2328      	movs	r3, #40	; 0x28
 8005a46:	2208      	movs	r2, #8
 8005a48:	4694      	mov	ip, r2
 8005a4a:	44bc      	add	ip, r7
 8005a4c:	4463      	add	r3, ip
 8005a4e:	881b      	ldrh	r3, [r3, #0]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f7fd f8a3 	bl	8002b9c <__aeabi_i2d>
 8005a56:	0004      	movs	r4, r0
 8005a58:	000d      	movs	r5, r1
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fd f8d8 	bl	8002c10 <__aeabi_ui2d>
 8005a60:	0002      	movs	r2, r0
 8005a62:	000b      	movs	r3, r1
 8005a64:	2000      	movs	r0, #0
 8005a66:	4999      	ldr	r1, [pc, #612]	; (8005ccc <SX1276SetRxConfig+0x340>)
 8005a68:	f7fb fe9e 	bl	80017a8 <__aeabi_ddiv>
 8005a6c:	0002      	movs	r2, r0
 8005a6e:	000b      	movs	r3, r1
 8005a70:	0010      	movs	r0, r2
 8005a72:	0019      	movs	r1, r3
 8005a74:	2200      	movs	r2, #0
 8005a76:	4b96      	ldr	r3, [pc, #600]	; (8005cd0 <SX1276SetRxConfig+0x344>)
 8005a78:	f7fc faa0 	bl	8001fbc <__aeabi_dmul>
 8005a7c:	0002      	movs	r2, r0
 8005a7e:	000b      	movs	r3, r1
 8005a80:	0020      	movs	r0, r4
 8005a82:	0029      	movs	r1, r5
 8005a84:	f7fc fa9a 	bl	8001fbc <__aeabi_dmul>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	000c      	movs	r4, r1
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	0021      	movs	r1, r4
 8005a90:	2200      	movs	r2, #0
 8005a92:	4b90      	ldr	r3, [pc, #576]	; (8005cd4 <SX1276SetRxConfig+0x348>)
 8005a94:	f7fc fa92 	bl	8001fbc <__aeabi_dmul>
 8005a98:	0003      	movs	r3, r0
 8005a9a:	000c      	movs	r4, r1
 8005a9c:	0018      	movs	r0, r3
 8005a9e:	0021      	movs	r1, r4
 8005aa0:	f7fa fd58 	bl	8000554 <__aeabi_d2uiz>
 8005aa4:	0002      	movs	r2, r0
 8005aa6:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005aa8:	62da      	str	r2, [r3, #44]	; 0x2c
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fd f8b0 	bl	8002c10 <__aeabi_ui2d>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	000c      	movs	r4, r1
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	0023      	movs	r3, r4
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4987      	ldr	r1, [pc, #540]	; (8005cd8 <SX1276SetRxConfig+0x34c>)
 8005abc:	f7fb fe74 	bl	80017a8 <__aeabi_ddiv>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	000c      	movs	r4, r1
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	0021      	movs	r1, r4
 8005ac8:	f7fa fd44 	bl	8000554 <__aeabi_d2uiz>
 8005acc:	0003      	movs	r3, r0
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	607b      	str	r3, [r7, #4]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0a1b      	lsrs	r3, r3, #8
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	0019      	movs	r1, r3
 8005ada:	2002      	movs	r0, #2
 8005adc:	f001 fa4c 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	2003      	movs	r0, #3
 8005ae8:	f001 fa46 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	0018      	movs	r0, r3
 8005af0:	f7ff ff14 	bl	800591c <GetFskBandwidthRegValue>
 8005af4:	0003      	movs	r3, r0
 8005af6:	0019      	movs	r1, r3
 8005af8:	2012      	movs	r0, #18
 8005afa:	f001 fa3d 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8005afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b00:	0018      	movs	r0, r3
 8005b02:	f7ff ff0b 	bl	800591c <GetFskBandwidthRegValue>
 8005b06:	0003      	movs	r3, r0
 8005b08:	0019      	movs	r1, r3
 8005b0a:	2013      	movs	r0, #19
 8005b0c:	f001 fa34 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005b10:	2008      	movs	r0, #8
 8005b12:	0004      	movs	r4, r0
 8005b14:	183b      	adds	r3, r7, r0
 8005b16:	199b      	adds	r3, r3, r6
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	0a1b      	lsrs	r3, r3, #8
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	0019      	movs	r1, r3
 8005b22:	2025      	movs	r0, #37	; 0x25
 8005b24:	f001 fa28 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005b28:	193b      	adds	r3, r7, r4
 8005b2a:	199b      	adds	r3, r3, r6
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	0019      	movs	r1, r3
 8005b32:	2026      	movs	r0, #38	; 0x26
 8005b34:	f001 fa20 	bl	8006f78 <SX1276Write>
            if( fixLen == 1 )
 8005b38:	222c      	movs	r2, #44	; 0x2c
 8005b3a:	193b      	adds	r3, r7, r4
 8005b3c:	189b      	adds	r3, r3, r2
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <SX1276SetRxConfig+0x1ce>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8005b44:	2330      	movs	r3, #48	; 0x30
 8005b46:	2208      	movs	r2, #8
 8005b48:	4694      	mov	ip, r2
 8005b4a:	44bc      	add	ip, r7
 8005b4c:	4463      	add	r3, ip
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	0019      	movs	r1, r3
 8005b52:	2032      	movs	r0, #50	; 0x32
 8005b54:	f001 fa10 	bl	8006f78 <SX1276Write>
 8005b58:	e003      	b.n	8005b62 <SX1276SetRxConfig+0x1d6>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8005b5a:	21ff      	movs	r1, #255	; 0xff
 8005b5c:	2032      	movs	r0, #50	; 0x32
 8005b5e:	f001 fa0b 	bl	8006f78 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8005b62:	2030      	movs	r0, #48	; 0x30
 8005b64:	f001 fa1c 	bl	8006fa0 <SX1276Read>
 8005b68:	0003      	movs	r3, r0
 8005b6a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8005b6c:	226f      	movs	r2, #111	; 0x6f
 8005b6e:	4013      	ands	r3, r2
 8005b70:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8005b72:	232c      	movs	r3, #44	; 0x2c
 8005b74:	2108      	movs	r1, #8
 8005b76:	468c      	mov	ip, r1
 8005b78:	44bc      	add	ip, r7
 8005b7a:	4463      	add	r3, ip
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <SX1276SetRxConfig+0x1fa>
 8005b82:	2300      	movs	r3, #0
 8005b84:	e001      	b.n	8005b8a <SX1276SetRxConfig+0x1fe>
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	425b      	negs	r3, r3
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8005b8e:	2334      	movs	r3, #52	; 0x34
 8005b90:	2108      	movs	r1, #8
 8005b92:	468c      	mov	ip, r1
 8005b94:	44bc      	add	ip, r7
 8005b96:	4463      	add	r3, ip
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	2030      	movs	r0, #48	; 0x30
 8005ba8:	f001 f9e6 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005bac:	2031      	movs	r0, #49	; 0x31
 8005bae:	f001 f9f7 	bl	8006fa0 <SX1276Read>
 8005bb2:	0003      	movs	r3, r0
 8005bb4:	001a      	movs	r2, r3
 8005bb6:	2340      	movs	r3, #64	; 0x40
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	2031      	movs	r0, #49	; 0x31
 8005bc0:	f001 f9da 	bl	8006f78 <SX1276Write>
        break;
 8005bc4:	e174      	b.n	8005eb0 <SX1276SetRxConfig+0x524>
            if( bandwidth > 2 )
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d900      	bls.n	8005bce <SX1276SetRxConfig+0x242>
                while( 1 );
 8005bcc:	e7fe      	b.n	8005bcc <SX1276SetRxConfig+0x240>
            bandwidth += 7;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	3307      	adds	r3, #7
 8005bd2:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005bd4:	4b3c      	ldr	r3, [pc, #240]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8005bda:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8005be0:	4b39      	ldr	r3, [pc, #228]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005be2:	220e      	movs	r2, #14
 8005be4:	18ba      	adds	r2, r7, r2
 8005be6:	214d      	movs	r1, #77	; 0x4d
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8005bec:	4b36      	ldr	r3, [pc, #216]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005bee:	2224      	movs	r2, #36	; 0x24
 8005bf0:	2108      	movs	r1, #8
 8005bf2:	468c      	mov	ip, r1
 8005bf4:	44bc      	add	ip, r7
 8005bf6:	4462      	add	r2, ip
 8005bf8:	214e      	movs	r1, #78	; 0x4e
 8005bfa:	8812      	ldrh	r2, [r2, #0]
 8005bfc:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005bfe:	4b32      	ldr	r3, [pc, #200]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005c00:	222c      	movs	r2, #44	; 0x2c
 8005c02:	2108      	movs	r1, #8
 8005c04:	468c      	mov	ip, r1
 8005c06:	44bc      	add	ip, r7
 8005c08:	4462      	add	r2, ip
 8005c0a:	2150      	movs	r1, #80	; 0x50
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8005c10:	4b2d      	ldr	r3, [pc, #180]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005c12:	2230      	movs	r2, #48	; 0x30
 8005c14:	2108      	movs	r1, #8
 8005c16:	468c      	mov	ip, r1
 8005c18:	44bc      	add	ip, r7
 8005c1a:	4462      	add	r2, ip
 8005c1c:	2151      	movs	r1, #81	; 0x51
 8005c1e:	7812      	ldrb	r2, [r2, #0]
 8005c20:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8005c22:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005c24:	2234      	movs	r2, #52	; 0x34
 8005c26:	2108      	movs	r1, #8
 8005c28:	468c      	mov	ip, r1
 8005c2a:	44bc      	add	ip, r7
 8005c2c:	4462      	add	r2, ip
 8005c2e:	2152      	movs	r1, #82	; 0x52
 8005c30:	7812      	ldrb	r2, [r2, #0]
 8005c32:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8005c34:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005c36:	2238      	movs	r2, #56	; 0x38
 8005c38:	2108      	movs	r1, #8
 8005c3a:	468c      	mov	ip, r1
 8005c3c:	44bc      	add	ip, r7
 8005c3e:	4462      	add	r2, ip
 8005c40:	2153      	movs	r1, #83	; 0x53
 8005c42:	7812      	ldrb	r2, [r2, #0]
 8005c44:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005c46:	4b20      	ldr	r3, [pc, #128]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005c48:	223c      	movs	r2, #60	; 0x3c
 8005c4a:	2108      	movs	r1, #8
 8005c4c:	468c      	mov	ip, r1
 8005c4e:	44bc      	add	ip, r7
 8005c50:	4462      	add	r2, ip
 8005c52:	2154      	movs	r1, #84	; 0x54
 8005c54:	7812      	ldrb	r2, [r2, #0]
 8005c56:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005c58:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	2120      	movs	r1, #32
 8005c5e:	468c      	mov	ip, r1
 8005c60:	2108      	movs	r1, #8
 8005c62:	4688      	mov	r8, r1
 8005c64:	44b8      	add	r8, r7
 8005c66:	44c4      	add	ip, r8
 8005c68:	4462      	add	r2, ip
 8005c6a:	2155      	movs	r1, #85	; 0x55
 8005c6c:	7812      	ldrb	r2, [r2, #0]
 8005c6e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8005c70:	4b15      	ldr	r3, [pc, #84]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005c72:	2224      	movs	r2, #36	; 0x24
 8005c74:	2120      	movs	r1, #32
 8005c76:	468c      	mov	ip, r1
 8005c78:	2108      	movs	r1, #8
 8005c7a:	4688      	mov	r8, r1
 8005c7c:	44b8      	add	r8, r7
 8005c7e:	44c4      	add	ip, r8
 8005c80:	4462      	add	r2, ip
 8005c82:	2156      	movs	r1, #86	; 0x56
 8005c84:	7812      	ldrb	r2, [r2, #0]
 8005c86:	545a      	strb	r2, [r3, r1]
            if( datarate > 12 )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b0c      	cmp	r3, #12
 8005c8c:	d902      	bls.n	8005c94 <SX1276SetRxConfig+0x308>
                datarate = 12;
 8005c8e:	230c      	movs	r3, #12
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	e004      	b.n	8005c9e <SX1276SetRxConfig+0x312>
            else if( datarate < 6 )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b05      	cmp	r3, #5
 8005c98:	d801      	bhi.n	8005c9e <SX1276SetRxConfig+0x312>
                datarate = 6;
 8005c9a:	2306      	movs	r3, #6
 8005c9c:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b07      	cmp	r3, #7
 8005ca2:	d105      	bne.n	8005cb0 <SX1276SetRxConfig+0x324>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b0b      	cmp	r3, #11
 8005ca8:	d008      	beq.n	8005cbc <SX1276SetRxConfig+0x330>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	d005      	beq.n	8005cbc <SX1276SetRxConfig+0x330>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d112      	bne.n	8005cdc <SX1276SetRxConfig+0x350>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b0c      	cmp	r3, #12
 8005cba:	d10f      	bne.n	8005cdc <SX1276SetRxConfig+0x350>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8005cbc:	4b02      	ldr	r3, [pc, #8]	; (8005cc8 <SX1276SetRxConfig+0x33c>)
 8005cbe:	224c      	movs	r2, #76	; 0x4c
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	5499      	strb	r1, [r3, r2]
 8005cc4:	e00e      	b.n	8005ce4 <SX1276SetRxConfig+0x358>
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	200015c0 	.word	0x200015c0
 8005ccc:	3ff00000 	.word	0x3ff00000
 8005cd0:	40200000 	.word	0x40200000
 8005cd4:	408f4000 	.word	0x408f4000
 8005cd8:	417e8480 	.word	0x417e8480
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8005cdc:	4b77      	ldr	r3, [pc, #476]	; (8005ebc <SX1276SetRxConfig+0x530>)
 8005cde:	224c      	movs	r2, #76	; 0x4c
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	5499      	strb	r1, [r3, r2]
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8005ce4:	201d      	movs	r0, #29
 8005ce6:	f001 f95b 	bl	8006fa0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	011b      	lsls	r3, r3, #4
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	230e      	movs	r3, #14
 8005cf4:	18fb      	adds	r3, r7, r3
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	18db      	adds	r3, r3, r3
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005d00:	242c      	movs	r4, #44	; 0x2c
 8005d02:	2608      	movs	r6, #8
 8005d04:	19bb      	adds	r3, r7, r6
 8005d06:	191b      	adds	r3, r3, r4
 8005d08:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8005d0e:	0019      	movs	r1, r3
 8005d10:	201d      	movs	r0, #29
 8005d12:	f001 f931 	bl	8006f78 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8005d16:	201e      	movs	r0, #30
 8005d18:	f001 f942 	bl	8006fa0 <SX1276Read>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8005d20:	2308      	movs	r3, #8
 8005d22:	4013      	ands	r3, r2
 8005d24:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8005d32:	2334      	movs	r3, #52	; 0x34
 8005d34:	2108      	movs	r1, #8
 8005d36:	468c      	mov	ip, r1
 8005d38:	44bc      	add	ip, r7
 8005d3a:	4463      	add	r3, ip
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	4313      	orrs	r3, r2
 8005d44:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8005d46:	2528      	movs	r5, #40	; 0x28
 8005d48:	19bb      	adds	r3, r7, r6
 8005d4a:	195b      	adds	r3, r3, r5
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2103      	movs	r1, #3
 8005d56:	400b      	ands	r3, r1
 8005d58:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	0019      	movs	r1, r3
 8005d60:	201e      	movs	r0, #30
 8005d62:	f001 f909 	bl	8006f78 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8005d66:	2026      	movs	r0, #38	; 0x26
 8005d68:	f001 f91a 	bl	8006fa0 <SX1276Read>
 8005d6c:	0003      	movs	r3, r0
 8005d6e:	b25b      	sxtb	r3, r3
 8005d70:	2208      	movs	r2, #8
 8005d72:	4393      	bics	r3, r2
 8005d74:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005d76:	4b51      	ldr	r3, [pc, #324]	; (8005ebc <SX1276SetRxConfig+0x530>)
 8005d78:	214c      	movs	r1, #76	; 0x4c
 8005d7a:	5c5b      	ldrb	r3, [r3, r1]
 8005d7c:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8005d7e:	b25b      	sxtb	r3, r3
 8005d80:	4313      	orrs	r3, r2
 8005d82:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	0019      	movs	r1, r3
 8005d88:	2026      	movs	r0, #38	; 0x26
 8005d8a:	f001 f8f5 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8005d8e:	19bb      	adds	r3, r7, r6
 8005d90:	195b      	adds	r3, r3, r5
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	0019      	movs	r1, r3
 8005d98:	201f      	movs	r0, #31
 8005d9a:	f001 f8ed 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8005d9e:	2524      	movs	r5, #36	; 0x24
 8005da0:	19bb      	adds	r3, r7, r6
 8005da2:	195b      	adds	r3, r3, r5
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	0019      	movs	r1, r3
 8005dae:	2020      	movs	r0, #32
 8005db0:	f001 f8e2 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8005db4:	19bb      	adds	r3, r7, r6
 8005db6:	195b      	adds	r3, r3, r5
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	0019      	movs	r1, r3
 8005dbe:	2021      	movs	r0, #33	; 0x21
 8005dc0:	f001 f8da 	bl	8006f78 <SX1276Write>
            if( fixLen == 1 )
 8005dc4:	19bb      	adds	r3, r7, r6
 8005dc6:	191b      	adds	r3, r3, r4
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d009      	beq.n	8005de2 <SX1276SetRxConfig+0x456>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8005dce:	2330      	movs	r3, #48	; 0x30
 8005dd0:	2208      	movs	r2, #8
 8005dd2:	4694      	mov	ip, r2
 8005dd4:	44bc      	add	ip, r7
 8005dd6:	4463      	add	r3, ip
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	0019      	movs	r1, r3
 8005ddc:	2022      	movs	r0, #34	; 0x22
 8005dde:	f001 f8cb 	bl	8006f78 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005de2:	4b36      	ldr	r3, [pc, #216]	; (8005ebc <SX1276SetRxConfig+0x530>)
 8005de4:	2253      	movs	r2, #83	; 0x53
 8005de6:	5c9b      	ldrb	r3, [r3, r2]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d013      	beq.n	8005e14 <SX1276SetRxConfig+0x488>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8005dec:	2044      	movs	r0, #68	; 0x44
 8005dee:	f001 f8d7 	bl	8006fa0 <SX1276Read>
 8005df2:	0003      	movs	r3, r0
 8005df4:	001a      	movs	r2, r3
 8005df6:	2380      	movs	r3, #128	; 0x80
 8005df8:	425b      	negs	r3, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	0019      	movs	r1, r3
 8005e00:	2044      	movs	r0, #68	; 0x44
 8005e02:	f001 f8b9 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8005e06:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <SX1276SetRxConfig+0x530>)
 8005e08:	2254      	movs	r2, #84	; 0x54
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	0019      	movs	r1, r3
 8005e0e:	2024      	movs	r0, #36	; 0x24
 8005e10:	f001 f8b2 	bl	8006f78 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b09      	cmp	r3, #9
 8005e18:	d10d      	bne.n	8005e36 <SX1276SetRxConfig+0x4aa>
 8005e1a:	4b28      	ldr	r3, [pc, #160]	; (8005ebc <SX1276SetRxConfig+0x530>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <SX1276SetRxConfig+0x534>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d908      	bls.n	8005e36 <SX1276SetRxConfig+0x4aa>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005e24:	2102      	movs	r1, #2
 8005e26:	2036      	movs	r0, #54	; 0x36
 8005e28:	f001 f8a6 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8005e2c:	2164      	movs	r1, #100	; 0x64
 8005e2e:	203a      	movs	r0, #58	; 0x3a
 8005e30:	f001 f8a2 	bl	8006f78 <SX1276Write>
 8005e34:	e00f      	b.n	8005e56 <SX1276SetRxConfig+0x4ca>
            else if( bandwidth == 9 )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b09      	cmp	r3, #9
 8005e3a:	d108      	bne.n	8005e4e <SX1276SetRxConfig+0x4c2>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8005e3c:	2102      	movs	r1, #2
 8005e3e:	2036      	movs	r0, #54	; 0x36
 8005e40:	f001 f89a 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8005e44:	217f      	movs	r1, #127	; 0x7f
 8005e46:	203a      	movs	r0, #58	; 0x3a
 8005e48:	f001 f896 	bl	8006f78 <SX1276Write>
 8005e4c:	e003      	b.n	8005e56 <SX1276SetRxConfig+0x4ca>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8005e4e:	2103      	movs	r1, #3
 8005e50:	2036      	movs	r0, #54	; 0x36
 8005e52:	f001 f891 	bl	8006f78 <SX1276Write>
            if( datarate == 6 )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b06      	cmp	r3, #6
 8005e5a:	d114      	bne.n	8005e86 <SX1276SetRxConfig+0x4fa>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005e5c:	2031      	movs	r0, #49	; 0x31
 8005e5e:	f001 f89f 	bl	8006fa0 <SX1276Read>
 8005e62:	0003      	movs	r3, r0
 8005e64:	b25b      	sxtb	r3, r3
 8005e66:	2207      	movs	r2, #7
 8005e68:	4393      	bics	r3, r2
 8005e6a:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005e6c:	2205      	movs	r2, #5
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	0019      	movs	r1, r3
 8005e76:	2031      	movs	r0, #49	; 0x31
 8005e78:	f001 f87e 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005e7c:	210c      	movs	r1, #12
 8005e7e:	2037      	movs	r0, #55	; 0x37
 8005e80:	f001 f87a 	bl	8006f78 <SX1276Write>
        break;
 8005e84:	e013      	b.n	8005eae <SX1276SetRxConfig+0x522>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005e86:	2031      	movs	r0, #49	; 0x31
 8005e88:	f001 f88a 	bl	8006fa0 <SX1276Read>
 8005e8c:	0003      	movs	r3, r0
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	2207      	movs	r2, #7
 8005e92:	4393      	bics	r3, r2
 8005e94:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8005e96:	2203      	movs	r2, #3
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	2031      	movs	r0, #49	; 0x31
 8005ea2:	f001 f869 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8005ea6:	210a      	movs	r1, #10
 8005ea8:	2037      	movs	r0, #55	; 0x37
 8005eaa:	f001 f865 	bl	8006f78 <SX1276Write>
        break;
 8005eae:	46c0      	nop			; (mov r8, r8)
}
 8005eb0:	46c0      	nop			; (mov r8, r8)
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bc04      	pop	{r2}
 8005eb8:	4690      	mov	r8, r2
 8005eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ebc:	200015c0 	.word	0x200015c0
 8005ec0:	1f4add40 	.word	0x1f4add40

08005ec4 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8005ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60ba      	str	r2, [r7, #8]
 8005ecc:	607b      	str	r3, [r7, #4]
 8005ece:	240f      	movs	r4, #15
 8005ed0:	193b      	adds	r3, r7, r4
 8005ed2:	1c02      	adds	r2, r0, #0
 8005ed4:	701a      	strb	r2, [r3, #0]
 8005ed6:	250e      	movs	r5, #14
 8005ed8:	197b      	adds	r3, r7, r5
 8005eda:	1c0a      	adds	r2, r1, #0
 8005edc:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 8005ede:	193b      	adds	r3, r7, r4
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 ffee 	bl	8006ec4 <SX1276SetModem>

    LoRaBoardCallbacks->SX1276BoardSetRfTxPower( power );
 8005ee8:	4be5      	ldr	r3, [pc, #916]	; (8006280 <SX1276SetTxConfig+0x3bc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	197a      	adds	r2, r7, r5
 8005ef0:	7812      	ldrb	r2, [r2, #0]
 8005ef2:	b252      	sxtb	r2, r2
 8005ef4:	0010      	movs	r0, r2
 8005ef6:	4798      	blx	r3

    switch( modem )
 8005ef8:	193b      	adds	r3, r7, r4
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <SX1276SetTxConfig+0x44>
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d100      	bne.n	8005f06 <SX1276SetTxConfig+0x42>
 8005f04:	e0b1      	b.n	800606a <SX1276SetTxConfig+0x1a6>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8005f06:	e1d8      	b.n	80062ba <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.Fsk.Power = power;
 8005f08:	4bde      	ldr	r3, [pc, #888]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f0a:	220e      	movs	r2, #14
 8005f0c:	18ba      	adds	r2, r7, r2
 8005f0e:	7812      	ldrb	r2, [r2, #0]
 8005f10:	731a      	strb	r2, [r3, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8005f12:	4bdc      	ldr	r3, [pc, #880]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8005f18:	4bda      	ldr	r3, [pc, #872]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.Datarate = datarate;
 8005f1e:	4bd9      	ldr	r3, [pc, #868]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f22:	61da      	str	r2, [r3, #28]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8005f24:	4bd7      	ldr	r3, [pc, #860]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f26:	2528      	movs	r5, #40	; 0x28
 8005f28:	2408      	movs	r4, #8
 8005f2a:	193a      	adds	r2, r7, r4
 8005f2c:	1952      	adds	r2, r2, r5
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8005f32:	4bd4      	ldr	r3, [pc, #848]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f34:	262c      	movs	r6, #44	; 0x2c
 8005f36:	193a      	adds	r2, r7, r4
 8005f38:	1992      	adds	r2, r2, r6
 8005f3a:	2122      	movs	r1, #34	; 0x22
 8005f3c:	7812      	ldrb	r2, [r2, #0]
 8005f3e:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8005f40:	4bd0      	ldr	r3, [pc, #832]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f42:	2230      	movs	r2, #48	; 0x30
 8005f44:	2108      	movs	r1, #8
 8005f46:	468c      	mov	ip, r1
 8005f48:	44bc      	add	ip, r7
 8005f4a:	4462      	add	r2, ip
 8005f4c:	2124      	movs	r1, #36	; 0x24
 8005f4e:	7812      	ldrb	r2, [r2, #0]
 8005f50:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8005f52:	4bcc      	ldr	r3, [pc, #816]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f54:	223c      	movs	r2, #60	; 0x3c
 8005f56:	2108      	movs	r1, #8
 8005f58:	468c      	mov	ip, r1
 8005f5a:	44bc      	add	ip, r7
 8005f5c:	4462      	add	r2, ip
 8005f5e:	2125      	movs	r1, #37	; 0x25
 8005f60:	7812      	ldrb	r2, [r2, #0]
 8005f62:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8005f64:	4bc7      	ldr	r3, [pc, #796]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8005f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f68:	629a      	str	r2, [r3, #40]	; 0x28
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8005f6a:	68b8      	ldr	r0, [r7, #8]
 8005f6c:	f7fc fe50 	bl	8002c10 <__aeabi_ui2d>
 8005f70:	2200      	movs	r2, #0
 8005f72:	4bc5      	ldr	r3, [pc, #788]	; (8006288 <SX1276SetTxConfig+0x3c4>)
 8005f74:	f7fb fc18 	bl	80017a8 <__aeabi_ddiv>
 8005f78:	0003      	movs	r3, r0
 8005f7a:	000c      	movs	r4, r1
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	0021      	movs	r1, r4
 8005f80:	f7fa fae8 	bl	8000554 <__aeabi_d2uiz>
 8005f84:	0003      	movs	r3, r0
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	60bb      	str	r3, [r7, #8]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0a1b      	lsrs	r3, r3, #8
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	0019      	movs	r1, r3
 8005f92:	2004      	movs	r0, #4
 8005f94:	f000 fff0 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	0019      	movs	r1, r3
 8005f9e:	2005      	movs	r0, #5
 8005fa0:	f000 ffea 	bl	8006f78 <SX1276Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 8005fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fa6:	f7fc fe33 	bl	8002c10 <__aeabi_ui2d>
 8005faa:	0003      	movs	r3, r0
 8005fac:	000c      	movs	r4, r1
 8005fae:	001a      	movs	r2, r3
 8005fb0:	0023      	movs	r3, r4
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	49b5      	ldr	r1, [pc, #724]	; (800628c <SX1276SetTxConfig+0x3c8>)
 8005fb6:	f7fb fbf7 	bl	80017a8 <__aeabi_ddiv>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	000c      	movs	r4, r1
 8005fbe:	0018      	movs	r0, r3
 8005fc0:	0021      	movs	r1, r4
 8005fc2:	f7fa fac7 	bl	8000554 <__aeabi_d2uiz>
 8005fc6:	0003      	movs	r3, r0
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	0a1b      	lsrs	r3, r3, #8
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	0019      	movs	r1, r3
 8005fd4:	2002      	movs	r0, #2
 8005fd6:	f000 ffcf 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8005fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	0019      	movs	r1, r3
 8005fe0:	2003      	movs	r0, #3
 8005fe2:	f000 ffc9 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8005fe6:	2408      	movs	r4, #8
 8005fe8:	193b      	adds	r3, r7, r4
 8005fea:	195b      	adds	r3, r3, r5
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	0019      	movs	r1, r3
 8005ff6:	2025      	movs	r0, #37	; 0x25
 8005ff8:	f000 ffbe 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8005ffc:	193b      	adds	r3, r7, r4
 8005ffe:	195b      	adds	r3, r3, r5
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b2db      	uxtb	r3, r3
 8006004:	0019      	movs	r1, r3
 8006006:	2026      	movs	r0, #38	; 0x26
 8006008:	f000 ffb6 	bl	8006f78 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800600c:	2030      	movs	r0, #48	; 0x30
 800600e:	f000 ffc7 	bl	8006fa0 <SX1276Read>
 8006012:	0003      	movs	r3, r0
 8006014:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8006016:	226f      	movs	r2, #111	; 0x6f
 8006018:	4013      	ands	r3, r2
 800601a:	b25a      	sxtb	r2, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800601c:	193b      	adds	r3, r7, r4
 800601e:	199b      	adds	r3, r3, r6
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <SX1276SetTxConfig+0x166>
 8006026:	2300      	movs	r3, #0
 8006028:	e001      	b.n	800602e <SX1276SetTxConfig+0x16a>
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	425b      	negs	r3, r3
 800602e:	4313      	orrs	r3, r2
 8006030:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8006032:	2330      	movs	r3, #48	; 0x30
 8006034:	2108      	movs	r1, #8
 8006036:	468c      	mov	ip, r1
 8006038:	44bc      	add	ip, r7
 800603a:	4463      	add	r3, ip
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8006040:	b25b      	sxtb	r3, r3
 8006042:	4313      	orrs	r3, r2
 8006044:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8006046:	b2db      	uxtb	r3, r3
 8006048:	0019      	movs	r1, r3
 800604a:	2030      	movs	r0, #48	; 0x30
 800604c:	f000 ff94 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8006050:	2031      	movs	r0, #49	; 0x31
 8006052:	f000 ffa5 	bl	8006fa0 <SX1276Read>
 8006056:	0003      	movs	r3, r0
 8006058:	001a      	movs	r2, r3
 800605a:	2340      	movs	r3, #64	; 0x40
 800605c:	4313      	orrs	r3, r2
 800605e:	b2db      	uxtb	r3, r3
 8006060:	0019      	movs	r1, r3
 8006062:	2031      	movs	r0, #49	; 0x31
 8006064:	f000 ff88 	bl	8006f78 <SX1276Write>
        break;
 8006068:	e127      	b.n	80062ba <SX1276SetTxConfig+0x3f6>
            SX1276.Settings.LoRa.Power = power;
 800606a:	4b86      	ldr	r3, [pc, #536]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 800606c:	220e      	movs	r2, #14
 800606e:	18ba      	adds	r2, r7, r2
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	7812      	ldrb	r2, [r2, #0]
 8006074:	545a      	strb	r2, [r3, r1]
            if( bandwidth > 2 )
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2b02      	cmp	r3, #2
 800607a:	d900      	bls.n	800607e <SX1276SetTxConfig+0x1ba>
                while( 1 );
 800607c:	e7fe      	b.n	800607c <SX1276SetTxConfig+0x1b8>
            bandwidth += 7;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3307      	adds	r3, #7
 8006082:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8006084:	4b7f      	ldr	r3, [pc, #508]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	645a      	str	r2, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800608a:	4b7e      	ldr	r3, [pc, #504]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 800608c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800608e:	649a      	str	r2, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.Coderate = coderate;
 8006090:	4b7c      	ldr	r3, [pc, #496]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8006092:	2224      	movs	r2, #36	; 0x24
 8006094:	2108      	movs	r1, #8
 8006096:	468c      	mov	ip, r1
 8006098:	44bc      	add	ip, r7
 800609a:	4462      	add	r2, ip
 800609c:	214d      	movs	r1, #77	; 0x4d
 800609e:	7812      	ldrb	r2, [r2, #0]
 80060a0:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80060a2:	4b78      	ldr	r3, [pc, #480]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 80060a4:	2228      	movs	r2, #40	; 0x28
 80060a6:	2108      	movs	r1, #8
 80060a8:	468c      	mov	ip, r1
 80060aa:	44bc      	add	ip, r7
 80060ac:	4462      	add	r2, ip
 80060ae:	214e      	movs	r1, #78	; 0x4e
 80060b0:	8812      	ldrh	r2, [r2, #0]
 80060b2:	525a      	strh	r2, [r3, r1]
            SX1276.Settings.LoRa.FixLen = fixLen;
 80060b4:	4b73      	ldr	r3, [pc, #460]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 80060b6:	222c      	movs	r2, #44	; 0x2c
 80060b8:	2108      	movs	r1, #8
 80060ba:	468c      	mov	ip, r1
 80060bc:	44bc      	add	ip, r7
 80060be:	4462      	add	r2, ip
 80060c0:	2150      	movs	r1, #80	; 0x50
 80060c2:	7812      	ldrb	r2, [r2, #0]
 80060c4:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80060c6:	4b6f      	ldr	r3, [pc, #444]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 80060c8:	2234      	movs	r2, #52	; 0x34
 80060ca:	2108      	movs	r1, #8
 80060cc:	468c      	mov	ip, r1
 80060ce:	44bc      	add	ip, r7
 80060d0:	4462      	add	r2, ip
 80060d2:	2153      	movs	r1, #83	; 0x53
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80060d8:	4b6a      	ldr	r3, [pc, #424]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 80060da:	2238      	movs	r2, #56	; 0x38
 80060dc:	2108      	movs	r1, #8
 80060de:	468c      	mov	ip, r1
 80060e0:	44bc      	add	ip, r7
 80060e2:	4462      	add	r2, ip
 80060e4:	2154      	movs	r1, #84	; 0x54
 80060e6:	7812      	ldrb	r2, [r2, #0]
 80060e8:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80060ea:	4b66      	ldr	r3, [pc, #408]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 80060ec:	2230      	movs	r2, #48	; 0x30
 80060ee:	2108      	movs	r1, #8
 80060f0:	468c      	mov	ip, r1
 80060f2:	44bc      	add	ip, r7
 80060f4:	4462      	add	r2, ip
 80060f6:	2152      	movs	r1, #82	; 0x52
 80060f8:	7812      	ldrb	r2, [r2, #0]
 80060fa:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80060fc:	4b61      	ldr	r3, [pc, #388]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 80060fe:	223c      	movs	r2, #60	; 0x3c
 8006100:	2108      	movs	r1, #8
 8006102:	468c      	mov	ip, r1
 8006104:	44bc      	add	ip, r7
 8006106:	4462      	add	r2, ip
 8006108:	2155      	movs	r1, #85	; 0x55
 800610a:	7812      	ldrb	r2, [r2, #0]
 800610c:	545a      	strb	r2, [r3, r1]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800610e:	4b5d      	ldr	r3, [pc, #372]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8006110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006112:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	2b0c      	cmp	r3, #12
 8006118:	d902      	bls.n	8006120 <SX1276SetTxConfig+0x25c>
                datarate = 12;
 800611a:	230c      	movs	r3, #12
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
 800611e:	e004      	b.n	800612a <SX1276SetTxConfig+0x266>
            else if( datarate < 6 )
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	2b05      	cmp	r3, #5
 8006124:	d801      	bhi.n	800612a <SX1276SetTxConfig+0x266>
                datarate = 6;
 8006126:	2306      	movs	r3, #6
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2b07      	cmp	r3, #7
 800612e:	d105      	bne.n	800613c <SX1276SetTxConfig+0x278>
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	2b0b      	cmp	r3, #11
 8006134:	d008      	beq.n	8006148 <SX1276SetTxConfig+0x284>
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	2b0c      	cmp	r3, #12
 800613a:	d005      	beq.n	8006148 <SX1276SetTxConfig+0x284>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b08      	cmp	r3, #8
 8006140:	d107      	bne.n	8006152 <SX1276SetTxConfig+0x28e>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	2b0c      	cmp	r3, #12
 8006146:	d104      	bne.n	8006152 <SX1276SetTxConfig+0x28e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8006148:	4b4e      	ldr	r3, [pc, #312]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 800614a:	224c      	movs	r2, #76	; 0x4c
 800614c:	2101      	movs	r1, #1
 800614e:	5499      	strb	r1, [r3, r2]
 8006150:	e003      	b.n	800615a <SX1276SetTxConfig+0x296>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8006152:	4b4c      	ldr	r3, [pc, #304]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8006154:	224c      	movs	r2, #76	; 0x4c
 8006156:	2100      	movs	r1, #0
 8006158:	5499      	strb	r1, [r3, r2]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800615a:	4b4a      	ldr	r3, [pc, #296]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 800615c:	2253      	movs	r2, #83	; 0x53
 800615e:	5c9b      	ldrb	r3, [r3, r2]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d013      	beq.n	800618c <SX1276SetTxConfig+0x2c8>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8006164:	2044      	movs	r0, #68	; 0x44
 8006166:	f000 ff1b 	bl	8006fa0 <SX1276Read>
 800616a:	0003      	movs	r3, r0
 800616c:	001a      	movs	r2, r3
 800616e:	2380      	movs	r3, #128	; 0x80
 8006170:	425b      	negs	r3, r3
 8006172:	4313      	orrs	r3, r2
 8006174:	b2db      	uxtb	r3, r3
 8006176:	0019      	movs	r1, r3
 8006178:	2044      	movs	r0, #68	; 0x44
 800617a:	f000 fefd 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800617e:	4b41      	ldr	r3, [pc, #260]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8006180:	2254      	movs	r2, #84	; 0x54
 8006182:	5c9b      	ldrb	r3, [r3, r2]
 8006184:	0019      	movs	r1, r3
 8006186:	2024      	movs	r0, #36	; 0x24
 8006188:	f000 fef6 	bl	8006f78 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800618c:	201d      	movs	r0, #29
 800618e:	f000 ff07 	bl	8006fa0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	b2da      	uxtb	r2, r3
 800619a:	2324      	movs	r3, #36	; 0x24
 800619c:	2108      	movs	r1, #8
 800619e:	468c      	mov	ip, r1
 80061a0:	44bc      	add	ip, r7
 80061a2:	4463      	add	r3, ip
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	18db      	adds	r3, r3, r3
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80061ae:	232c      	movs	r3, #44	; 0x2c
 80061b0:	2108      	movs	r1, #8
 80061b2:	468c      	mov	ip, r1
 80061b4:	44bc      	add	ip, r7
 80061b6:	4463      	add	r3, ip
 80061b8:	781b      	ldrb	r3, [r3, #0]
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80061ba:	4313      	orrs	r3, r2
 80061bc:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80061be:	0019      	movs	r1, r3
 80061c0:	201d      	movs	r0, #29
 80061c2:	f000 fed9 	bl	8006f78 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80061c6:	201e      	movs	r0, #30
 80061c8:	f000 feea 	bl	8006fa0 <SX1276Read>
 80061cc:	0003      	movs	r3, r0
 80061ce:	001a      	movs	r2, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80061d0:	230b      	movs	r3, #11
 80061d2:	4013      	ands	r3, r2
 80061d4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80061de:	4313      	orrs	r3, r2
 80061e0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80061e2:	2330      	movs	r3, #48	; 0x30
 80061e4:	2108      	movs	r1, #8
 80061e6:	468c      	mov	ip, r1
 80061e8:	44bc      	add	ip, r7
 80061ea:	4463      	add	r3, ip
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80061f2:	4313      	orrs	r3, r2
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	0019      	movs	r1, r3
 80061f8:	201e      	movs	r0, #30
 80061fa:	f000 febd 	bl	8006f78 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80061fe:	2026      	movs	r0, #38	; 0x26
 8006200:	f000 fece 	bl	8006fa0 <SX1276Read>
 8006204:	0003      	movs	r3, r0
 8006206:	b25b      	sxtb	r3, r3
 8006208:	2208      	movs	r2, #8
 800620a:	4393      	bics	r3, r2
 800620c:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <SX1276SetTxConfig+0x3c0>)
 8006210:	214c      	movs	r1, #76	; 0x4c
 8006212:	5c5b      	ldrb	r3, [r3, r1]
 8006214:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8006216:	b25b      	sxtb	r3, r3
 8006218:	4313      	orrs	r3, r2
 800621a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800621c:	b2db      	uxtb	r3, r3
 800621e:	0019      	movs	r1, r3
 8006220:	2026      	movs	r0, #38	; 0x26
 8006222:	f000 fea9 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8006226:	2428      	movs	r4, #40	; 0x28
 8006228:	2508      	movs	r5, #8
 800622a:	197b      	adds	r3, r7, r5
 800622c:	191b      	adds	r3, r3, r4
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	0a1b      	lsrs	r3, r3, #8
 8006232:	b29b      	uxth	r3, r3
 8006234:	b2db      	uxtb	r3, r3
 8006236:	0019      	movs	r1, r3
 8006238:	2020      	movs	r0, #32
 800623a:	f000 fe9d 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800623e:	197b      	adds	r3, r7, r5
 8006240:	191b      	adds	r3, r3, r4
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	0019      	movs	r1, r3
 8006248:	2021      	movs	r0, #33	; 0x21
 800624a:	f000 fe95 	bl	8006f78 <SX1276Write>
            if( datarate == 6 )
 800624e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006250:	2b06      	cmp	r3, #6
 8006252:	d11d      	bne.n	8006290 <SX1276SetTxConfig+0x3cc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006254:	2031      	movs	r0, #49	; 0x31
 8006256:	f000 fea3 	bl	8006fa0 <SX1276Read>
 800625a:	0003      	movs	r3, r0
 800625c:	b25b      	sxtb	r3, r3
 800625e:	2207      	movs	r2, #7
 8006260:	4393      	bics	r3, r2
 8006262:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8006264:	2205      	movs	r2, #5
 8006266:	4313      	orrs	r3, r2
 8006268:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800626a:	b2db      	uxtb	r3, r3
 800626c:	0019      	movs	r1, r3
 800626e:	2031      	movs	r0, #49	; 0x31
 8006270:	f000 fe82 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8006274:	210c      	movs	r1, #12
 8006276:	2037      	movs	r0, #55	; 0x37
 8006278:	f000 fe7e 	bl	8006f78 <SX1276Write>
        break;
 800627c:	e01c      	b.n	80062b8 <SX1276SetTxConfig+0x3f4>
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	20000524 	.word	0x20000524
 8006284:	200015c0 	.word	0x200015c0
 8006288:	404e8480 	.word	0x404e8480
 800628c:	417e8480 	.word	0x417e8480
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8006290:	2031      	movs	r0, #49	; 0x31
 8006292:	f000 fe85 	bl	8006fa0 <SX1276Read>
 8006296:	0003      	movs	r3, r0
 8006298:	b25b      	sxtb	r3, r3
 800629a:	2207      	movs	r2, #7
 800629c:	4393      	bics	r3, r2
 800629e:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80062a0:	2203      	movs	r2, #3
 80062a2:	4313      	orrs	r3, r2
 80062a4:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	0019      	movs	r1, r3
 80062aa:	2031      	movs	r0, #49	; 0x31
 80062ac:	f000 fe64 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80062b0:	210a      	movs	r1, #10
 80062b2:	2037      	movs	r0, #55	; 0x37
 80062b4:	f000 fe60 	bl	8006f78 <SX1276Write>
        break;
 80062b8:	46c0      	nop			; (mov r8, r8)
}
 80062ba:	46c0      	nop			; (mov r8, r8)
 80062bc:	46bd      	mov	sp, r7
 80062be:	b005      	add	sp, #20
 80062c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c2:	46c0      	nop			; (mov r8, r8)

080062c4 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 80062c4:	b5b0      	push	{r4, r5, r7, lr}
 80062c6:	b094      	sub	sp, #80	; 0x50
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	0002      	movs	r2, r0
 80062cc:	1dfb      	adds	r3, r7, #7
 80062ce:	701a      	strb	r2, [r3, #0]
 80062d0:	1dbb      	adds	r3, r7, #6
 80062d2:	1c0a      	adds	r2, r1, #0
 80062d4:	701a      	strb	r2, [r3, #0]
    uint32_t airTime = 0;
 80062d6:	2300      	movs	r3, #0
 80062d8:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 80062da:	1dfb      	adds	r3, r7, #7
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <SX1276GetTimeOnAir+0x26>
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d100      	bne.n	80062e8 <SX1276GetTimeOnAir+0x24>
 80062e6:	e086      	b.n	80063f6 <SX1276GetTimeOnAir+0x132>
 80062e8:	e164      	b.n	80065b4 <SX1276GetTimeOnAir+0x2f0>
    {
    case MODEM_FSK:
        {
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80062ea:	4bb5      	ldr	r3, [pc, #724]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 80062ec:	8c1b      	ldrh	r3, [r3, #32]
 80062ee:	001c      	movs	r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 80062f0:	2027      	movs	r0, #39	; 0x27
 80062f2:	f000 fe55 	bl	8006fa0 <SX1276Read>
 80062f6:	0003      	movs	r3, r0
 80062f8:	001a      	movs	r2, r3
 80062fa:	23f8      	movs	r3, #248	; 0xf8
 80062fc:	439a      	bics	r2, r3
 80062fe:	0013      	movs	r3, r2
 8006300:	3301      	adds	r3, #1
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 8006302:	18e3      	adds	r3, r4, r3
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8006304:	0018      	movs	r0, r3
 8006306:	f7fc fc49 	bl	8002b9c <__aeabi_i2d>
 800630a:	0004      	movs	r4, r0
 800630c:	000d      	movs	r5, r1
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800630e:	4bac      	ldr	r3, [pc, #688]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 8006310:	2222      	movs	r2, #34	; 0x22
 8006312:	5c9b      	ldrb	r3, [r3, r2]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <SX1276GetTimeOnAir+0x5a>
 8006318:	2000      	movs	r0, #0
 800631a:	2100      	movs	r1, #0
 800631c:	e001      	b.n	8006322 <SX1276GetTimeOnAir+0x5e>
 800631e:	2000      	movs	r0, #0
 8006320:	49a8      	ldr	r1, [pc, #672]	; (80065c4 <SX1276GetTimeOnAir+0x300>)
                                     ( ( SX1276Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8006322:	0022      	movs	r2, r4
 8006324:	002b      	movs	r3, r5
 8006326:	f7fa ff23 	bl	8001170 <__aeabi_dadd>
 800632a:	0003      	movs	r3, r0
 800632c:	000c      	movs	r4, r1
 800632e:	0025      	movs	r5, r4
 8006330:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8006332:	2030      	movs	r0, #48	; 0x30
 8006334:	f000 fe34 	bl	8006fa0 <SX1276Read>
 8006338:	0003      	movs	r3, r0
 800633a:	001a      	movs	r2, r3
 800633c:	23f9      	movs	r3, #249	; 0xf9
 800633e:	439a      	bics	r2, r3
 8006340:	1e13      	subs	r3, r2, #0
 8006342:	d002      	beq.n	800634a <SX1276GetTimeOnAir+0x86>
 8006344:	2000      	movs	r0, #0
 8006346:	499f      	ldr	r1, [pc, #636]	; (80065c4 <SX1276GetTimeOnAir+0x300>)
 8006348:	e001      	b.n	800634e <SX1276GetTimeOnAir+0x8a>
 800634a:	2000      	movs	r0, #0
 800634c:	2100      	movs	r1, #0
                                     ( ( SX1276.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 800634e:	0022      	movs	r2, r4
 8006350:	002b      	movs	r3, r5
 8006352:	f7fa ff0d 	bl	8001170 <__aeabi_dadd>
 8006356:	0003      	movs	r3, r0
 8006358:	000c      	movs	r4, r1
 800635a:	0025      	movs	r5, r4
 800635c:	001c      	movs	r4, r3
                                     ( ( ( SX1276Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 800635e:	1dbb      	adds	r3, r7, #6
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	0018      	movs	r0, r3
 8006364:	f7fc fc1a 	bl	8002b9c <__aeabi_i2d>
 8006368:	0002      	movs	r2, r0
 800636a:	000b      	movs	r3, r1
 800636c:	0020      	movs	r0, r4
 800636e:	0029      	movs	r1, r5
 8006370:	f7fa fefe 	bl	8001170 <__aeabi_dadd>
 8006374:	0003      	movs	r3, r0
 8006376:	000c      	movs	r4, r1
 8006378:	0025      	movs	r5, r4
 800637a:	001c      	movs	r4, r3
                                     pktLen +
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 800637c:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 800637e:	2224      	movs	r2, #36	; 0x24
 8006380:	5c9b      	ldrb	r3, [r3, r2]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <SX1276GetTimeOnAir+0xca>
 8006386:	2000      	movs	r0, #0
 8006388:	2180      	movs	r1, #128	; 0x80
 800638a:	05c9      	lsls	r1, r1, #23
 800638c:	e001      	b.n	8006392 <SX1276GetTimeOnAir+0xce>
 800638e:	2000      	movs	r0, #0
 8006390:	2100      	movs	r1, #0
                                     pktLen +
 8006392:	0022      	movs	r2, r4
 8006394:	002b      	movs	r3, r5
 8006396:	f7fa feeb 	bl	8001170 <__aeabi_dadd>
 800639a:	0003      	movs	r3, r0
 800639c:	000c      	movs	r4, r1
 800639e:	0018      	movs	r0, r3
 80063a0:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80063a2:	2200      	movs	r2, #0
 80063a4:	4b88      	ldr	r3, [pc, #544]	; (80065c8 <SX1276GetTimeOnAir+0x304>)
 80063a6:	f7fb fe09 	bl	8001fbc <__aeabi_dmul>
 80063aa:	0003      	movs	r3, r0
 80063ac:	000c      	movs	r4, r1
 80063ae:	0025      	movs	r5, r4
 80063b0:	001c      	movs	r4, r3
                                     SX1276.Settings.Fsk.Datarate ) * 1000 );
 80063b2:	4b83      	ldr	r3, [pc, #524]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 80063b4:	69db      	ldr	r3, [r3, #28]
                                     ( ( SX1276.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 80063b6:	0018      	movs	r0, r3
 80063b8:	f7fc fc2a 	bl	8002c10 <__aeabi_ui2d>
 80063bc:	0002      	movs	r2, r0
 80063be:	000b      	movs	r3, r1
 80063c0:	0020      	movs	r0, r4
 80063c2:	0029      	movs	r1, r5
 80063c4:	f7fb f9f0 	bl	80017a8 <__aeabi_ddiv>
 80063c8:	0003      	movs	r3, r0
 80063ca:	000c      	movs	r4, r1
 80063cc:	0018      	movs	r0, r3
 80063ce:	0021      	movs	r1, r4
            airTime = (uint32_t) round( ( 8 * ( SX1276.Settings.Fsk.PreambleLen +
 80063d0:	2200      	movs	r2, #0
 80063d2:	4b7e      	ldr	r3, [pc, #504]	; (80065cc <SX1276GetTimeOnAir+0x308>)
 80063d4:	f7fb fdf2 	bl	8001fbc <__aeabi_dmul>
 80063d8:	0003      	movs	r3, r0
 80063da:	000c      	movs	r4, r1
 80063dc:	0018      	movs	r0, r3
 80063de:	0021      	movs	r1, r4
 80063e0:	f014 f806 	bl	801a3f0 <round>
 80063e4:	0003      	movs	r3, r0
 80063e6:	000c      	movs	r4, r1
 80063e8:	0018      	movs	r0, r3
 80063ea:	0021      	movs	r1, r4
 80063ec:	f7fa f8b2 	bl	8000554 <__aeabi_d2uiz>
 80063f0:	0003      	movs	r3, r0
 80063f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80063f4:	e0de      	b.n	80065b4 <SX1276GetTimeOnAir+0x2f0>
    case MODEM_LORA:
        {
            double bw = 0.0;
 80063f6:	2300      	movs	r3, #0
 80063f8:	2400      	movs	r4, #0
 80063fa:	643b      	str	r3, [r7, #64]	; 0x40
 80063fc:	647c      	str	r4, [r7, #68]	; 0x44
            // REMARK: When using LoRa modem only bandwidths 125, 250 and 500 kHz are supported
            switch( SX1276.Settings.LoRa.Bandwidth )
 80063fe:	4b70      	ldr	r3, [pc, #448]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 8006400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006402:	2b08      	cmp	r3, #8
 8006404:	d008      	beq.n	8006418 <SX1276GetTimeOnAir+0x154>
 8006406:	2b09      	cmp	r3, #9
 8006408:	d00b      	beq.n	8006422 <SX1276GetTimeOnAir+0x15e>
 800640a:	2b07      	cmp	r3, #7
 800640c:	d10e      	bne.n	800642c <SX1276GetTimeOnAir+0x168>
            //    break;
            //case 6: // 62.5 kHz
            //    bw = 62500;
            //    break;
            case 7: // 125 kHz
                bw = 125000;
 800640e:	2300      	movs	r3, #0
 8006410:	4c6f      	ldr	r4, [pc, #444]	; (80065d0 <SX1276GetTimeOnAir+0x30c>)
 8006412:	643b      	str	r3, [r7, #64]	; 0x40
 8006414:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8006416:	e009      	b.n	800642c <SX1276GetTimeOnAir+0x168>
            case 8: // 250 kHz
                bw = 250000;
 8006418:	2300      	movs	r3, #0
 800641a:	4c6e      	ldr	r4, [pc, #440]	; (80065d4 <SX1276GetTimeOnAir+0x310>)
 800641c:	643b      	str	r3, [r7, #64]	; 0x40
 800641e:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 8006420:	e004      	b.n	800642c <SX1276GetTimeOnAir+0x168>
            case 9: // 500 kHz
                bw = 500000;
 8006422:	2300      	movs	r3, #0
 8006424:	4c6c      	ldr	r4, [pc, #432]	; (80065d8 <SX1276GetTimeOnAir+0x314>)
 8006426:	643b      	str	r3, [r7, #64]	; 0x40
 8006428:	647c      	str	r4, [r7, #68]	; 0x44
                break;
 800642a:	46c0      	nop			; (mov r8, r8)
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1276.Settings.LoRa.Datarate );
 800642c:	4b64      	ldr	r3, [pc, #400]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 800642e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006430:	2201      	movs	r2, #1
 8006432:	409a      	lsls	r2, r3
 8006434:	0013      	movs	r3, r2
 8006436:	0018      	movs	r0, r3
 8006438:	f7fc fbb0 	bl	8002b9c <__aeabi_i2d>
 800643c:	0003      	movs	r3, r0
 800643e:	000c      	movs	r4, r1
 8006440:	001a      	movs	r2, r3
 8006442:	0023      	movs	r3, r4
 8006444:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006446:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006448:	f7fb f9ae 	bl	80017a8 <__aeabi_ddiv>
 800644c:	0003      	movs	r3, r0
 800644e:	000c      	movs	r4, r1
 8006450:	63bb      	str	r3, [r7, #56]	; 0x38
 8006452:	63fc      	str	r4, [r7, #60]	; 0x3c
            double ts = 1 / rs;
 8006454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006458:	2000      	movs	r0, #0
 800645a:	495a      	ldr	r1, [pc, #360]	; (80065c4 <SX1276GetTimeOnAir+0x300>)
 800645c:	f7fb f9a4 	bl	80017a8 <__aeabi_ddiv>
 8006460:	0003      	movs	r3, r0
 8006462:	000c      	movs	r4, r1
 8006464:	633b      	str	r3, [r7, #48]	; 0x30
 8006466:	637c      	str	r4, [r7, #52]	; 0x34
            // time of preamble
            double tPreamble = ( SX1276.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8006468:	4b55      	ldr	r3, [pc, #340]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 800646a:	224e      	movs	r2, #78	; 0x4e
 800646c:	5a9b      	ldrh	r3, [r3, r2]
 800646e:	0018      	movs	r0, r3
 8006470:	f7fc fb94 	bl	8002b9c <__aeabi_i2d>
 8006474:	2200      	movs	r2, #0
 8006476:	4b59      	ldr	r3, [pc, #356]	; (80065dc <SX1276GetTimeOnAir+0x318>)
 8006478:	f7fa fe7a 	bl	8001170 <__aeabi_dadd>
 800647c:	0003      	movs	r3, r0
 800647e:	000c      	movs	r4, r1
 8006480:	001a      	movs	r2, r3
 8006482:	0023      	movs	r3, r4
 8006484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006486:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006488:	f7fb fd98 	bl	8001fbc <__aeabi_dmul>
 800648c:	0003      	movs	r3, r0
 800648e:	000c      	movs	r4, r1
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
 8006492:	62fc      	str	r4, [r7, #44]	; 0x2c
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8006494:	1dbb      	adds	r3, r7, #6
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	001a      	movs	r2, r3
 800649c:	4b48      	ldr	r3, [pc, #288]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 800649e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80064a4:	4a46      	ldr	r2, [pc, #280]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 80064a6:	2152      	movs	r1, #82	; 0x52
 80064a8:	5c52      	ldrb	r2, [r2, r1]
 80064aa:	0112      	lsls	r2, r2, #4
 80064ac:	189a      	adds	r2, r3, r2
                                 ( SX1276.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 80064ae:	4b44      	ldr	r3, [pc, #272]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 80064b0:	2150      	movs	r1, #80	; 0x50
 80064b2:	5c5b      	ldrb	r3, [r3, r1]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <SX1276GetTimeOnAir+0x1f8>
 80064b8:	2314      	movs	r3, #20
 80064ba:	e000      	b.n	80064be <SX1276GetTimeOnAir+0x1fa>
 80064bc:	2300      	movs	r3, #0
                                 28 + 16 * SX1276.Settings.LoRa.CrcOn -
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80064c2:	0018      	movs	r0, r3
 80064c4:	f7fc fba4 	bl	8002c10 <__aeabi_ui2d>
 80064c8:	0004      	movs	r4, r0
 80064ca:	000d      	movs	r5, r1
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80064cc:	4b3c      	ldr	r3, [pc, #240]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 80064ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 80064d0:	4b3b      	ldr	r3, [pc, #236]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 80064d2:	214c      	movs	r1, #76	; 0x4c
 80064d4:	5c5b      	ldrb	r3, [r3, r1]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <SX1276GetTimeOnAir+0x21a>
 80064da:	2302      	movs	r3, #2
 80064dc:	e000      	b.n	80064e0 <SX1276GetTimeOnAir+0x21c>
 80064de:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1276.Settings.LoRa.Datarate -
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	0018      	movs	r0, r3
 80064e6:	f7fc fb93 	bl	8002c10 <__aeabi_ui2d>
 80064ea:	0002      	movs	r2, r0
 80064ec:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 80064ee:	0020      	movs	r0, r4
 80064f0:	0029      	movs	r1, r5
 80064f2:	f7fb f959 	bl	80017a8 <__aeabi_ddiv>
 80064f6:	0003      	movs	r3, r0
 80064f8:	000c      	movs	r4, r1
 80064fa:	0018      	movs	r0, r3
 80064fc:	0021      	movs	r1, r4
 80064fe:	f013 fe73 	bl	801a1e8 <ceil>
 8006502:	0004      	movs	r4, r0
 8006504:	000d      	movs	r5, r1
                                 ( SX1276.Settings.LoRa.Coderate + 4 );
 8006506:	4b2e      	ldr	r3, [pc, #184]	; (80065c0 <SX1276GetTimeOnAir+0x2fc>)
 8006508:	224d      	movs	r2, #77	; 0x4d
 800650a:	5c9b      	ldrb	r3, [r3, r2]
 800650c:	3304      	adds	r3, #4
                                 ( ( SX1276.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 800650e:	0018      	movs	r0, r3
 8006510:	f7fc fb44 	bl	8002b9c <__aeabi_i2d>
 8006514:	0002      	movs	r2, r0
 8006516:	000b      	movs	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1276.Settings.LoRa.Datarate +
 8006518:	0020      	movs	r0, r4
 800651a:	0029      	movs	r1, r5
 800651c:	f7fb fd4e 	bl	8001fbc <__aeabi_dmul>
 8006520:	0003      	movs	r3, r0
 8006522:	000c      	movs	r4, r1
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	627c      	str	r4, [r7, #36]	; 0x24
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8006528:	2200      	movs	r2, #0
 800652a:	2300      	movs	r3, #0
 800652c:	6a38      	ldr	r0, [r7, #32]
 800652e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006530:	f7f9 ff8a 	bl	8000448 <__aeabi_dcmpgt>
 8006534:	1e03      	subs	r3, r0, #0
 8006536:	d008      	beq.n	800654a <SX1276GetTimeOnAir+0x286>
 8006538:	2200      	movs	r2, #0
 800653a:	4b23      	ldr	r3, [pc, #140]	; (80065c8 <SX1276GetTimeOnAir+0x304>)
 800653c:	6a38      	ldr	r0, [r7, #32]
 800653e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006540:	f7fa fe16 	bl	8001170 <__aeabi_dadd>
 8006544:	0003      	movs	r3, r0
 8006546:	000c      	movs	r4, r1
 8006548:	e001      	b.n	800654e <SX1276GetTimeOnAir+0x28a>
 800654a:	2300      	movs	r3, #0
 800654c:	4c1e      	ldr	r4, [pc, #120]	; (80065c8 <SX1276GetTimeOnAir+0x304>)
 800654e:	61bb      	str	r3, [r7, #24]
 8006550:	61fc      	str	r4, [r7, #28]
            double tPayload = nPayload * ts;
 8006552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006556:	69b8      	ldr	r0, [r7, #24]
 8006558:	69f9      	ldr	r1, [r7, #28]
 800655a:	f7fb fd2f 	bl	8001fbc <__aeabi_dmul>
 800655e:	0003      	movs	r3, r0
 8006560:	000c      	movs	r4, r1
 8006562:	613b      	str	r3, [r7, #16]
 8006564:	617c      	str	r4, [r7, #20]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800656c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800656e:	f7fa fdff 	bl	8001170 <__aeabi_dadd>
 8006572:	0003      	movs	r3, r0
 8006574:	000c      	movs	r4, r1
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	60fc      	str	r4, [r7, #12]
            // return ms secs
            airTime = (uint32_t) floor( tOnAir * 1000 + 0.999 );
 800657a:	2200      	movs	r2, #0
 800657c:	4b13      	ldr	r3, [pc, #76]	; (80065cc <SX1276GetTimeOnAir+0x308>)
 800657e:	68b8      	ldr	r0, [r7, #8]
 8006580:	68f9      	ldr	r1, [r7, #12]
 8006582:	f7fb fd1b 	bl	8001fbc <__aeabi_dmul>
 8006586:	0003      	movs	r3, r0
 8006588:	000c      	movs	r4, r1
 800658a:	0018      	movs	r0, r3
 800658c:	0021      	movs	r1, r4
 800658e:	4a14      	ldr	r2, [pc, #80]	; (80065e0 <SX1276GetTimeOnAir+0x31c>)
 8006590:	4b14      	ldr	r3, [pc, #80]	; (80065e4 <SX1276GetTimeOnAir+0x320>)
 8006592:	f7fa fded 	bl	8001170 <__aeabi_dadd>
 8006596:	0003      	movs	r3, r0
 8006598:	000c      	movs	r4, r1
 800659a:	0018      	movs	r0, r3
 800659c:	0021      	movs	r1, r4
 800659e:	f013 fea5 	bl	801a2ec <floor>
 80065a2:	0003      	movs	r3, r0
 80065a4:	000c      	movs	r4, r1
 80065a6:	0018      	movs	r0, r3
 80065a8:	0021      	movs	r1, r4
 80065aa:	f7f9 ffd3 	bl	8000554 <__aeabi_d2uiz>
 80065ae:	0003      	movs	r3, r0
 80065b0:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 80065b2:	46c0      	nop			; (mov r8, r8)
    }
    return airTime;
 80065b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b014      	add	sp, #80	; 0x50
 80065bc:	bdb0      	pop	{r4, r5, r7, pc}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	200015c0 	.word	0x200015c0
 80065c4:	3ff00000 	.word	0x3ff00000
 80065c8:	40200000 	.word	0x40200000
 80065cc:	408f4000 	.word	0x408f4000
 80065d0:	40fe8480 	.word	0x40fe8480
 80065d4:	410e8480 	.word	0x410e8480
 80065d8:	411e8480 	.word	0x411e8480
 80065dc:	40110000 	.word	0x40110000
 80065e0:	d916872b 	.word	0xd916872b
 80065e4:	3feff7ce 	.word	0x3feff7ce

080065e8 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	000a      	movs	r2, r1
 80065f2:	1cfb      	adds	r3, r7, #3
 80065f4:	701a      	strb	r2, [r3, #0]
    uint32_t txTimeout = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80065fa:	4b59      	ldr	r3, [pc, #356]	; (8006760 <SX1276Send+0x178>)
 80065fc:	795b      	ldrb	r3, [r3, #5]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <SX1276Send+0x20>
 8006602:	2b01      	cmp	r3, #1
 8006604:	d04c      	beq.n	80066a0 <SX1276Send+0xb8>
 8006606:	e0a2      	b.n	800674e <SX1276Send+0x166>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8006608:	4b55      	ldr	r3, [pc, #340]	; (8006760 <SX1276Send+0x178>)
 800660a:	2200      	movs	r2, #0
 800660c:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800660e:	1cfb      	adds	r3, r7, #3
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	b29a      	uxth	r2, r3
 8006614:	4b52      	ldr	r3, [pc, #328]	; (8006760 <SX1276Send+0x178>)
 8006616:	875a      	strh	r2, [r3, #58]	; 0x3a

            if( SX1276.Settings.Fsk.FixLen == false )
 8006618:	4b51      	ldr	r3, [pc, #324]	; (8006760 <SX1276Send+0x178>)
 800661a:	2222      	movs	r2, #34	; 0x22
 800661c:	5c9b      	ldrb	r3, [r3, r2]
 800661e:	2201      	movs	r2, #1
 8006620:	4053      	eors	r3, r2
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d005      	beq.n	8006634 <SX1276Send+0x4c>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8006628:	1cfb      	adds	r3, r7, #3
 800662a:	2101      	movs	r1, #1
 800662c:	0018      	movs	r0, r3
 800662e:	f000 fd51 	bl	80070d4 <SX1276WriteFifo>
 8006632:	e005      	b.n	8006640 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8006634:	1cfb      	adds	r3, r7, #3
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	0019      	movs	r1, r3
 800663a:	2032      	movs	r0, #50	; 0x32
 800663c:	f000 fc9c 	bl	8006f78 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8006640:	1cfb      	adds	r3, r7, #3
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <SX1276Send+0x74>
 8006648:	1cfb      	adds	r3, r7, #3
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	d805      	bhi.n	800665c <SX1276Send+0x74>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8006650:	1cfb      	adds	r3, r7, #3
 8006652:	7819      	ldrb	r1, [r3, #0]
 8006654:	4b42      	ldr	r3, [pc, #264]	; (8006760 <SX1276Send+0x178>)
 8006656:	223f      	movs	r2, #63	; 0x3f
 8006658:	5499      	strb	r1, [r3, r2]
 800665a:	e00b      	b.n	8006674 <SX1276Send+0x8c>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800665c:	1cfb      	adds	r3, r7, #3
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	b29a      	uxth	r2, r3
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4b3f      	ldr	r3, [pc, #252]	; (8006764 <SX1276Send+0x17c>)
 8006666:	0018      	movs	r0, r3
 8006668:	f013 f8f2 	bl	8019850 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800666c:	4b3c      	ldr	r3, [pc, #240]	; (8006760 <SX1276Send+0x178>)
 800666e:	223f      	movs	r2, #63	; 0x3f
 8006670:	2120      	movs	r1, #32
 8006672:	5499      	strb	r1, [r3, r2]
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8006674:	4b3a      	ldr	r3, [pc, #232]	; (8006760 <SX1276Send+0x178>)
 8006676:	223f      	movs	r2, #63	; 0x3f
 8006678:	5c9a      	ldrb	r2, [r3, r2]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	0011      	movs	r1, r2
 800667e:	0018      	movs	r0, r3
 8006680:	f000 fd28 	bl	80070d4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8006684:	4b36      	ldr	r3, [pc, #216]	; (8006760 <SX1276Send+0x178>)
 8006686:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8006688:	4b35      	ldr	r3, [pc, #212]	; (8006760 <SX1276Send+0x178>)
 800668a:	213f      	movs	r1, #63	; 0x3f
 800668c:	5c5b      	ldrb	r3, [r3, r1]
 800668e:	b29b      	uxth	r3, r3
 8006690:	18d3      	adds	r3, r2, r3
 8006692:	b29a      	uxth	r2, r3
 8006694:	4b32      	ldr	r3, [pc, #200]	; (8006760 <SX1276Send+0x178>)
 8006696:	879a      	strh	r2, [r3, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8006698:	4b31      	ldr	r3, [pc, #196]	; (8006760 <SX1276Send+0x178>)
 800669a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800669c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800669e:	e056      	b.n	800674e <SX1276Send+0x166>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80066a0:	4b2f      	ldr	r3, [pc, #188]	; (8006760 <SX1276Send+0x178>)
 80066a2:	2255      	movs	r2, #85	; 0x55
 80066a4:	5c9b      	ldrb	r3, [r3, r2]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d011      	beq.n	80066ce <SX1276Send+0xe6>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80066aa:	2033      	movs	r0, #51	; 0x33
 80066ac:	f000 fc78 	bl	8006fa0 <SX1276Read>
 80066b0:	0003      	movs	r3, r0
 80066b2:	001a      	movs	r2, r3
 80066b4:	2341      	movs	r3, #65	; 0x41
 80066b6:	439a      	bics	r2, r3
 80066b8:	0013      	movs	r3, r2
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	0019      	movs	r1, r3
 80066be:	2033      	movs	r0, #51	; 0x33
 80066c0:	f000 fc5a 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80066c4:	2119      	movs	r1, #25
 80066c6:	203b      	movs	r0, #59	; 0x3b
 80066c8:	f000 fc56 	bl	8006f78 <SX1276Write>
 80066cc:	e013      	b.n	80066f6 <SX1276Send+0x10e>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80066ce:	2033      	movs	r0, #51	; 0x33
 80066d0:	f000 fc66 	bl	8006fa0 <SX1276Read>
 80066d4:	0003      	movs	r3, r0
 80066d6:	b25b      	sxtb	r3, r3
 80066d8:	2241      	movs	r2, #65	; 0x41
 80066da:	4393      	bics	r3, r2
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	2201      	movs	r2, #1
 80066e0:	4313      	orrs	r3, r2
 80066e2:	b25b      	sxtb	r3, r3
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	0019      	movs	r1, r3
 80066e8:	2033      	movs	r0, #51	; 0x33
 80066ea:	f000 fc45 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80066ee:	211d      	movs	r1, #29
 80066f0:	203b      	movs	r0, #59	; 0x3b
 80066f2:	f000 fc41 	bl	8006f78 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80066f6:	1cfb      	adds	r3, r7, #3
 80066f8:	7819      	ldrb	r1, [r3, #0]
 80066fa:	4b19      	ldr	r3, [pc, #100]	; (8006760 <SX1276Send+0x178>)
 80066fc:	2264      	movs	r2, #100	; 0x64
 80066fe:	5499      	strb	r1, [r3, r2]

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8006700:	1cfb      	adds	r3, r7, #3
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	0019      	movs	r1, r3
 8006706:	2022      	movs	r0, #34	; 0x22
 8006708:	f000 fc36 	bl	8006f78 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800670c:	2100      	movs	r1, #0
 800670e:	200e      	movs	r0, #14
 8006710:	f000 fc32 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006714:	2100      	movs	r1, #0
 8006716:	200d      	movs	r0, #13
 8006718:	f000 fc2e 	bl	8006f78 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800671c:	2001      	movs	r0, #1
 800671e:	f000 fc3f 	bl	8006fa0 <SX1276Read>
 8006722:	0003      	movs	r3, r0
 8006724:	001a      	movs	r2, r3
 8006726:	23f8      	movs	r3, #248	; 0xf8
 8006728:	439a      	bics	r2, r3
 800672a:	1e13      	subs	r3, r2, #0
 800672c:	d104      	bne.n	8006738 <SX1276Send+0x150>
            {
                SX1276SetStby( );
 800672e:	f000 f841 	bl	80067b4 <SX1276SetStby>
                DelayMs( 1 );
 8006732:	2001      	movs	r0, #1
 8006734:	f7fd fd80 	bl	8004238 <HAL_Delay>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8006738:	1cfb      	adds	r3, r7, #3
 800673a:	781a      	ldrb	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	0011      	movs	r1, r2
 8006740:	0018      	movs	r0, r3
 8006742:	f000 fcc7 	bl	80070d4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8006746:	4b06      	ldr	r3, [pc, #24]	; (8006760 <SX1276Send+0x178>)
 8006748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800674a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800674c:	46c0      	nop			; (mov r8, r8)
    }

    SX1276SetTx( txTimeout );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	0018      	movs	r0, r3
 8006752:	f000 f9dd 	bl	8006b10 <SX1276SetTx>
}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	46bd      	mov	sp, r7
 800675a:	b004      	add	sp, #16
 800675c:	bd80      	pop	{r7, pc}
 800675e:	46c0      	nop			; (mov r8, r8)
 8006760:	200015c0 	.word	0x200015c0
 8006764:	20000424 	.word	0x20000424

08006768 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 800676c:	4b0c      	ldr	r3, [pc, #48]	; (80067a0 <SX1276SetSleep+0x38>)
 800676e:	0018      	movs	r0, r3
 8006770:	f012 fdf6 	bl	8019360 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8006774:	4b0b      	ldr	r3, [pc, #44]	; (80067a4 <SX1276SetSleep+0x3c>)
 8006776:	0018      	movs	r0, r3
 8006778:	f012 fdf2 	bl	8019360 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800677c:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <SX1276SetSleep+0x40>)
 800677e:	0018      	movs	r0, r3
 8006780:	f012 fdee 	bl	8019360 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006784:	2000      	movs	r0, #0
 8006786:	f000 fb4d 	bl	8006e24 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    LoRaBoardCallbacks->SX1276BoardSetXO( RESET );
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <SX1276SetSleep+0x44>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2000      	movs	r0, #0
 8006792:	4798      	blx	r3

    SX1276.Settings.State = RF_IDLE;
 8006794:	4b06      	ldr	r3, [pc, #24]	; (80067b0 <SX1276SetSleep+0x48>)
 8006796:	2200      	movs	r2, #0
 8006798:	711a      	strb	r2, [r3, #4]
}
 800679a:	46c0      	nop			; (mov r8, r8)
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20001628 	.word	0x20001628
 80067a4:	20001590 	.word	0x20001590
 80067a8:	200015a8 	.word	0x200015a8
 80067ac:	20000524 	.word	0x20000524
 80067b0:	200015c0 	.word	0x200015c0

080067b4 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <SX1276SetStby+0x30>)
 80067ba:	0018      	movs	r0, r3
 80067bc:	f012 fdd0 	bl	8019360 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <SX1276SetStby+0x34>)
 80067c2:	0018      	movs	r0, r3
 80067c4:	f012 fdcc 	bl	8019360 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80067c8:	4b08      	ldr	r3, [pc, #32]	; (80067ec <SX1276SetStby+0x38>)
 80067ca:	0018      	movs	r0, r3
 80067cc:	f012 fdc8 	bl	8019360 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80067d0:	2001      	movs	r0, #1
 80067d2:	f000 fb27 	bl	8006e24 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <SX1276SetStby+0x3c>)
 80067d8:	2200      	movs	r2, #0
 80067da:	711a      	strb	r2, [r3, #4]
}
 80067dc:	46c0      	nop			; (mov r8, r8)
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	20001628 	.word	0x20001628
 80067e8:	20001590 	.word	0x20001590
 80067ec:	200015a8 	.word	0x200015a8
 80067f0:	200015c0 	.word	0x200015c0

080067f4 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80067fc:	230f      	movs	r3, #15
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	2200      	movs	r2, #0
 8006802:	701a      	strb	r2, [r3, #0]
    TimerStop( &TxTimeoutTimer );
 8006804:	4bb6      	ldr	r3, [pc, #728]	; (8006ae0 <SX1276SetRx+0x2ec>)
 8006806:	0018      	movs	r0, r3
 8006808:	f012 fdaa 	bl	8019360 <TimerStop>

    switch( SX1276.Settings.Modem )
 800680c:	4bb5      	ldr	r3, [pc, #724]	; (8006ae4 <SX1276SetRx+0x2f0>)
 800680e:	795b      	ldrb	r3, [r3, #5]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <SX1276SetRx+0x26>
 8006814:	2b01      	cmp	r3, #1
 8006816:	d041      	beq.n	800689c <SX1276SetRx+0xa8>
 8006818:	e128      	b.n	8006a6c <SX1276SetRx+0x278>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800681a:	230f      	movs	r3, #15
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	4ab1      	ldr	r2, [pc, #708]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006820:	2126      	movs	r1, #38	; 0x26
 8006822:	5c52      	ldrb	r2, [r2, r1]
 8006824:	701a      	strb	r2, [r3, #0]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006826:	2040      	movs	r0, #64	; 0x40
 8006828:	f000 fbba 	bl	8006fa0 <SX1276Read>
 800682c:	0003      	movs	r3, r0
 800682e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8006830:	2203      	movs	r2, #3
 8006832:	4013      	ands	r3, r2
 8006834:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8006836:	220c      	movs	r2, #12
 8006838:	4313      	orrs	r3, r2
 800683a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800683c:	b2db      	uxtb	r3, r3
 800683e:	0019      	movs	r1, r3
 8006840:	2040      	movs	r0, #64	; 0x40
 8006842:	f000 fb99 	bl	8006f78 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006846:	2041      	movs	r0, #65	; 0x41
 8006848:	f000 fbaa 	bl	8006fa0 <SX1276Read>
 800684c:	0003      	movs	r3, r0
 800684e:	001a      	movs	r2, r3
 8006850:	233f      	movs	r3, #63	; 0x3f
 8006852:	425b      	negs	r3, r3
 8006854:	4313      	orrs	r3, r2
 8006856:	b2db      	uxtb	r3, r3
 8006858:	0019      	movs	r1, r3
 800685a:	2041      	movs	r0, #65	; 0x41
 800685c:	f000 fb8c 	bl	8006f78 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006860:	2035      	movs	r0, #53	; 0x35
 8006862:	f000 fb9d 	bl	8006fa0 <SX1276Read>
 8006866:	0003      	movs	r3, r0
 8006868:	001a      	movs	r2, r3
 800686a:	233f      	movs	r3, #63	; 0x3f
 800686c:	4013      	ands	r3, r2
 800686e:	b2d9      	uxtb	r1, r3
 8006870:	4b9c      	ldr	r3, [pc, #624]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006872:	223e      	movs	r2, #62	; 0x3e
 8006874:	5499      	strb	r1, [r3, r2]

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8006876:	211e      	movs	r1, #30
 8006878:	200d      	movs	r0, #13
 800687a:	f000 fb7d 	bl	8006f78 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800687e:	4b99      	ldr	r3, [pc, #612]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006880:	2230      	movs	r2, #48	; 0x30
 8006882:	2100      	movs	r1, #0
 8006884:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8006886:	4b97      	ldr	r3, [pc, #604]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006888:	2231      	movs	r2, #49	; 0x31
 800688a:	2100      	movs	r1, #0
 800688c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800688e:	4b95      	ldr	r3, [pc, #596]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006890:	2200      	movs	r2, #0
 8006892:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8006894:	4b93      	ldr	r3, [pc, #588]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006896:	2200      	movs	r2, #0
 8006898:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
        break;
 800689a:	e0e7      	b.n	8006a6c <SX1276SetRx+0x278>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800689c:	4b91      	ldr	r3, [pc, #580]	; (8006ae4 <SX1276SetRx+0x2f0>)
 800689e:	2255      	movs	r2, #85	; 0x55
 80068a0:	5c9b      	ldrb	r3, [r3, r2]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d010      	beq.n	80068c8 <SX1276SetRx+0xd4>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80068a6:	2033      	movs	r0, #51	; 0x33
 80068a8:	f000 fb7a 	bl	8006fa0 <SX1276Read>
 80068ac:	0003      	movs	r3, r0
 80068ae:	001a      	movs	r2, r3
 80068b0:	2341      	movs	r3, #65	; 0x41
 80068b2:	4313      	orrs	r3, r2
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	0019      	movs	r1, r3
 80068b8:	2033      	movs	r0, #51	; 0x33
 80068ba:	f000 fb5d 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80068be:	2119      	movs	r1, #25
 80068c0:	203b      	movs	r0, #59	; 0x3b
 80068c2:	f000 fb59 	bl	8006f78 <SX1276Write>
 80068c6:	e013      	b.n	80068f0 <SX1276SetRx+0xfc>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80068c8:	2033      	movs	r0, #51	; 0x33
 80068ca:	f000 fb69 	bl	8006fa0 <SX1276Read>
 80068ce:	0003      	movs	r3, r0
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	2241      	movs	r2, #65	; 0x41
 80068d4:	4393      	bics	r3, r2
 80068d6:	b25b      	sxtb	r3, r3
 80068d8:	2201      	movs	r2, #1
 80068da:	4313      	orrs	r3, r2
 80068dc:	b25b      	sxtb	r3, r3
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	0019      	movs	r1, r3
 80068e2:	2033      	movs	r0, #51	; 0x33
 80068e4:	f000 fb48 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80068e8:	211d      	movs	r1, #29
 80068ea:	203b      	movs	r0, #59	; 0x3b
 80068ec:	f000 fb44 	bl	8006f78 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80068f0:	4b7c      	ldr	r3, [pc, #496]	; (8006ae4 <SX1276SetRx+0x2f0>)
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d900      	bls.n	80068fa <SX1276SetRx+0x106>
 80068f8:	e076      	b.n	80069e8 <SX1276SetRx+0x1f4>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80068fa:	2031      	movs	r0, #49	; 0x31
 80068fc:	f000 fb50 	bl	8006fa0 <SX1276Read>
 8006900:	0003      	movs	r3, r0
 8006902:	001a      	movs	r2, r3
 8006904:	237f      	movs	r3, #127	; 0x7f
 8006906:	4013      	ands	r3, r2
 8006908:	b2db      	uxtb	r3, r3
 800690a:	0019      	movs	r1, r3
 800690c:	2031      	movs	r0, #49	; 0x31
 800690e:	f000 fb33 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8006912:	2100      	movs	r1, #0
 8006914:	2030      	movs	r0, #48	; 0x30
 8006916:	f000 fb2f 	bl	8006f78 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800691a:	4b72      	ldr	r3, [pc, #456]	; (8006ae4 <SX1276SetRx+0x2f0>)
 800691c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800691e:	2b08      	cmp	r3, #8
 8006920:	d86f      	bhi.n	8006a02 <SX1276SetRx+0x20e>
 8006922:	009a      	lsls	r2, r3, #2
 8006924:	4b70      	ldr	r3, [pc, #448]	; (8006ae8 <SX1276SetRx+0x2f4>)
 8006926:	18d3      	adds	r3, r2, r3
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	469f      	mov	pc, r3
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800692c:	2148      	movs	r1, #72	; 0x48
 800692e:	202f      	movs	r0, #47	; 0x2f
 8006930:	f000 fb22 	bl	8006f78 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8006934:	4b6b      	ldr	r3, [pc, #428]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	4a6c      	ldr	r2, [pc, #432]	; (8006aec <SX1276SetRx+0x2f8>)
 800693a:	4694      	mov	ip, r2
 800693c:	4463      	add	r3, ip
 800693e:	0018      	movs	r0, r3
 8006940:	f7fe fe9a 	bl	8005678 <SX1276SetChannel>
                    break;
 8006944:	e05d      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006946:	2144      	movs	r1, #68	; 0x44
 8006948:	202f      	movs	r0, #47	; 0x2f
 800694a:	f000 fb15 	bl	8006f78 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800694e:	4b65      	ldr	r3, [pc, #404]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	4a67      	ldr	r2, [pc, #412]	; (8006af0 <SX1276SetRx+0x2fc>)
 8006954:	4694      	mov	ip, r2
 8006956:	4463      	add	r3, ip
 8006958:	0018      	movs	r0, r3
 800695a:	f7fe fe8d 	bl	8005678 <SX1276SetChannel>
                    break;
 800695e:	e050      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006960:	2144      	movs	r1, #68	; 0x44
 8006962:	202f      	movs	r0, #47	; 0x2f
 8006964:	f000 fb08 	bl	8006f78 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8006968:	4b5e      	ldr	r3, [pc, #376]	; (8006ae4 <SX1276SetRx+0x2f0>)
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	4a61      	ldr	r2, [pc, #388]	; (8006af4 <SX1276SetRx+0x300>)
 800696e:	4694      	mov	ip, r2
 8006970:	4463      	add	r3, ip
 8006972:	0018      	movs	r0, r3
 8006974:	f7fe fe80 	bl	8005678 <SX1276SetChannel>
                    break;
 8006978:	e043      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800697a:	2144      	movs	r1, #68	; 0x44
 800697c:	202f      	movs	r0, #47	; 0x2f
 800697e:	f000 fafb 	bl	8006f78 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8006982:	4b58      	ldr	r3, [pc, #352]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	4a5c      	ldr	r2, [pc, #368]	; (8006af8 <SX1276SetRx+0x304>)
 8006988:	4694      	mov	ip, r2
 800698a:	4463      	add	r3, ip
 800698c:	0018      	movs	r0, r3
 800698e:	f7fe fe73 	bl	8005678 <SX1276SetChannel>
                    break;
 8006992:	e036      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8006994:	2144      	movs	r1, #68	; 0x44
 8006996:	202f      	movs	r0, #47	; 0x2f
 8006998:	f000 faee 	bl	8006f78 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800699c:	4b51      	ldr	r3, [pc, #324]	; (8006ae4 <SX1276SetRx+0x2f0>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	4a56      	ldr	r2, [pc, #344]	; (8006afc <SX1276SetRx+0x308>)
 80069a2:	4694      	mov	ip, r2
 80069a4:	4463      	add	r3, ip
 80069a6:	0018      	movs	r0, r3
 80069a8:	f7fe fe66 	bl	8005678 <SX1276SetChannel>
                    break;
 80069ac:	e029      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80069ae:	2144      	movs	r1, #68	; 0x44
 80069b0:	202f      	movs	r0, #47	; 0x2f
 80069b2:	f000 fae1 	bl	8006f78 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80069b6:	4b4b      	ldr	r3, [pc, #300]	; (8006ae4 <SX1276SetRx+0x2f0>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	4a51      	ldr	r2, [pc, #324]	; (8006b00 <SX1276SetRx+0x30c>)
 80069bc:	4694      	mov	ip, r2
 80069be:	4463      	add	r3, ip
 80069c0:	0018      	movs	r0, r3
 80069c2:	f7fe fe59 	bl	8005678 <SX1276SetChannel>
                    break;
 80069c6:	e01c      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80069c8:	2140      	movs	r1, #64	; 0x40
 80069ca:	202f      	movs	r0, #47	; 0x2f
 80069cc:	f000 fad4 	bl	8006f78 <SX1276Write>
                    break;
 80069d0:	e017      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80069d2:	2140      	movs	r1, #64	; 0x40
 80069d4:	202f      	movs	r0, #47	; 0x2f
 80069d6:	f000 facf 	bl	8006f78 <SX1276Write>
                    break;
 80069da:	e012      	b.n	8006a02 <SX1276SetRx+0x20e>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80069dc:	2140      	movs	r1, #64	; 0x40
 80069de:	202f      	movs	r0, #47	; 0x2f
 80069e0:	f000 faca 	bl	8006f78 <SX1276Write>
                    break;
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	e00c      	b.n	8006a02 <SX1276SetRx+0x20e>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80069e8:	2031      	movs	r0, #49	; 0x31
 80069ea:	f000 fad9 	bl	8006fa0 <SX1276Read>
 80069ee:	0003      	movs	r3, r0
 80069f0:	001a      	movs	r2, r3
 80069f2:	2380      	movs	r3, #128	; 0x80
 80069f4:	425b      	negs	r3, r3
 80069f6:	4313      	orrs	r3, r2
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	0019      	movs	r1, r3
 80069fc:	2031      	movs	r0, #49	; 0x31
 80069fe:	f000 fabb 	bl	8006f78 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 8006a02:	230f      	movs	r3, #15
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	4a37      	ldr	r2, [pc, #220]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006a08:	2156      	movs	r1, #86	; 0x56
 8006a0a:	5c52      	ldrb	r2, [r2, r1]
 8006a0c:	701a      	strb	r2, [r3, #0]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006a0e:	4b35      	ldr	r3, [pc, #212]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006a10:	2253      	movs	r2, #83	; 0x53
 8006a12:	5c9b      	ldrb	r3, [r3, r2]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d010      	beq.n	8006a3a <SX1276SetRx+0x246>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006a18:	211d      	movs	r1, #29
 8006a1a:	2011      	movs	r0, #17
 8006a1c:	f000 faac 	bl	8006f78 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8006a20:	2040      	movs	r0, #64	; 0x40
 8006a22:	f000 fabd 	bl	8006fa0 <SX1276Read>
 8006a26:	0003      	movs	r3, r0
 8006a28:	001a      	movs	r2, r3
 8006a2a:	2333      	movs	r3, #51	; 0x33
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	0019      	movs	r1, r3
 8006a32:	2040      	movs	r0, #64	; 0x40
 8006a34:	f000 faa0 	bl	8006f78 <SX1276Write>
 8006a38:	e00f      	b.n	8006a5a <SX1276SetRx+0x266>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8006a3a:	211f      	movs	r1, #31
 8006a3c:	2011      	movs	r0, #17
 8006a3e:	f000 fa9b 	bl	8006f78 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8006a42:	2040      	movs	r0, #64	; 0x40
 8006a44:	f000 faac 	bl	8006fa0 <SX1276Read>
 8006a48:	0003      	movs	r3, r0
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	233f      	movs	r3, #63	; 0x3f
 8006a4e:	4013      	ands	r3, r2
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	0019      	movs	r1, r3
 8006a54:	2040      	movs	r0, #64	; 0x40
 8006a56:	f000 fa8f 	bl	8006f78 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	200f      	movs	r0, #15
 8006a5e:	f000 fa8b 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8006a62:	2100      	movs	r1, #0
 8006a64:	200d      	movs	r0, #13
 8006a66:	f000 fa87 	bl	8006f78 <SX1276Write>
        }
        break;
 8006a6a:	46c0      	nop			; (mov r8, r8)
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 8006a6c:	2380      	movs	r3, #128	; 0x80
 8006a6e:	005a      	lsls	r2, r3, #1
 8006a70:	4b24      	ldr	r3, [pc, #144]	; (8006b04 <SX1276SetRx+0x310>)
 8006a72:	2100      	movs	r1, #0
 8006a74:	0018      	movs	r0, r3
 8006a76:	f012 ff6f 	bl	8019958 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	711a      	strb	r2, [r3, #4]
    if( timeout != 0 )
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <SX1276SetRx+0x2a6>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	4b1f      	ldr	r3, [pc, #124]	; (8006b08 <SX1276SetRx+0x314>)
 8006a8a:	0011      	movs	r1, r2
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f012 fce1 	bl	8019454 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <SX1276SetRx+0x314>)
 8006a94:	0018      	movs	r0, r3
 8006a96:	f012 fb8b 	bl	80191b0 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8006a9a:	4b12      	ldr	r3, [pc, #72]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006a9c:	795b      	ldrb	r3, [r3, #5]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10e      	bne.n	8006ac0 <SX1276SetRx+0x2cc>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8006aa2:	2005      	movs	r0, #5
 8006aa4:	f000 f9be 	bl	8006e24 <SX1276SetOpMode>

        TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <SX1276SetRx+0x2f0>)
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	4b17      	ldr	r3, [pc, #92]	; (8006b0c <SX1276SetRx+0x318>)
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f012 fccf 	bl	8019454 <TimerSetValue>
        TimerStart( &RxTimeoutSyncWord );
 8006ab6:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <SX1276SetRx+0x318>)
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f012 fb79 	bl	80191b0 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8006abe:	e00b      	b.n	8006ad8 <SX1276SetRx+0x2e4>
        if( rxContinuous == true )
 8006ac0:	230f      	movs	r3, #15
 8006ac2:	18fb      	adds	r3, r7, r3
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <SX1276SetRx+0x2de>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8006aca:	2005      	movs	r0, #5
 8006acc:	f000 f9aa 	bl	8006e24 <SX1276SetOpMode>
}
 8006ad0:	e002      	b.n	8006ad8 <SX1276SetRx+0x2e4>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8006ad2:	2006      	movs	r0, #6
 8006ad4:	f000 f9a6 	bl	8006e24 <SX1276SetOpMode>
}
 8006ad8:	46c0      	nop			; (mov r8, r8)
 8006ada:	46bd      	mov	sp, r7
 8006adc:	b004      	add	sp, #16
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	20001590 	.word	0x20001590
 8006ae4:	200015c0 	.word	0x200015c0
 8006ae8:	0801ae40 	.word	0x0801ae40
 8006aec:	00001e82 	.word	0x00001e82
 8006af0:	000028b4 	.word	0x000028b4
 8006af4:	00003d04 	.word	0x00003d04
 8006af8:	0000515e 	.word	0x0000515e
 8006afc:	00007a12 	.word	0x00007a12
 8006b00:	0000a2c6 	.word	0x0000a2c6
 8006b04:	20000424 	.word	0x20000424
 8006b08:	20001628 	.word	0x20001628
 8006b0c:	200015a8 	.word	0x200015a8

08006b10 <SX1276SetTx>:

void SX1276SetTx( uint32_t timeout )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8006b18:	4b3a      	ldr	r3, [pc, #232]	; (8006c04 <SX1276SetTx+0xf4>)
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	f012 fc20 	bl	8019360 <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <SX1276SetTx+0xf8>)
 8006b24:	0011      	movs	r1, r2
 8006b26:	0018      	movs	r0, r3
 8006b28:	f012 fc94 	bl	8019454 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8006b2c:	4b37      	ldr	r3, [pc, #220]	; (8006c0c <SX1276SetTx+0xfc>)
 8006b2e:	795b      	ldrb	r3, [r3, #5]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d002      	beq.n	8006b3a <SX1276SetTx+0x2a>
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d028      	beq.n	8006b8a <SX1276SetTx+0x7a>
 8006b38:	e056      	b.n	8006be8 <SX1276SetTx+0xd8>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006b3a:	2040      	movs	r0, #64	; 0x40
 8006b3c:	f000 fa30 	bl	8006fa0 <SX1276Read>
 8006b40:	0003      	movs	r3, r0
 8006b42:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 8006b44:	2203      	movs	r2, #3
 8006b46:	4013      	ands	r3, r2
 8006b48:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8006b4a:	2210      	movs	r2, #16
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	0019      	movs	r1, r3
 8006b54:	2040      	movs	r0, #64	; 0x40
 8006b56:	f000 fa0f 	bl	8006f78 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8006b5a:	2041      	movs	r0, #65	; 0x41
 8006b5c:	f000 fa20 	bl	8006fa0 <SX1276Read>
 8006b60:	0003      	movs	r3, r0
 8006b62:	001a      	movs	r2, r3
 8006b64:	233e      	movs	r3, #62	; 0x3e
 8006b66:	4013      	ands	r3, r2
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	0019      	movs	r1, r3
 8006b6c:	2041      	movs	r0, #65	; 0x41
 8006b6e:	f000 fa03 	bl	8006f78 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8006b72:	2035      	movs	r0, #53	; 0x35
 8006b74:	f000 fa14 	bl	8006fa0 <SX1276Read>
 8006b78:	0003      	movs	r3, r0
 8006b7a:	001a      	movs	r2, r3
 8006b7c:	233f      	movs	r3, #63	; 0x3f
 8006b7e:	4013      	ands	r3, r2
 8006b80:	b2d9      	uxtb	r1, r3
 8006b82:	4b22      	ldr	r3, [pc, #136]	; (8006c0c <SX1276SetTx+0xfc>)
 8006b84:	223e      	movs	r2, #62	; 0x3e
 8006b86:	5499      	strb	r1, [r3, r2]
        }
        break;
 8006b88:	e02e      	b.n	8006be8 <SX1276SetTx+0xd8>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8006b8a:	4b20      	ldr	r3, [pc, #128]	; (8006c0c <SX1276SetTx+0xfc>)
 8006b8c:	2253      	movs	r2, #83	; 0x53
 8006b8e:	5c9b      	ldrb	r3, [r3, r2]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d014      	beq.n	8006bbe <SX1276SetTx+0xae>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006b94:	21f5      	movs	r1, #245	; 0xf5
 8006b96:	2011      	movs	r0, #17
 8006b98:	f000 f9ee 	bl	8006f78 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8006b9c:	2040      	movs	r0, #64	; 0x40
 8006b9e:	f000 f9ff 	bl	8006fa0 <SX1276Read>
 8006ba2:	0003      	movs	r3, r0
 8006ba4:	b25b      	sxtb	r3, r3
 8006ba6:	2233      	movs	r2, #51	; 0x33
 8006ba8:	4013      	ands	r3, r2
 8006baa:	b25b      	sxtb	r3, r3
 8006bac:	2240      	movs	r2, #64	; 0x40
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	b25b      	sxtb	r3, r3
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	0019      	movs	r1, r3
 8006bb6:	2040      	movs	r0, #64	; 0x40
 8006bb8:	f000 f9de 	bl	8006f78 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8006bbc:	e013      	b.n	8006be6 <SX1276SetTx+0xd6>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006bbe:	21f7      	movs	r1, #247	; 0xf7
 8006bc0:	2011      	movs	r0, #17
 8006bc2:	f000 f9d9 	bl	8006f78 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8006bc6:	2040      	movs	r0, #64	; 0x40
 8006bc8:	f000 f9ea 	bl	8006fa0 <SX1276Read>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	b25b      	sxtb	r3, r3
 8006bd0:	223f      	movs	r2, #63	; 0x3f
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	b25b      	sxtb	r3, r3
 8006bd6:	2240      	movs	r2, #64	; 0x40
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	b25b      	sxtb	r3, r3
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	0019      	movs	r1, r3
 8006be0:	2040      	movs	r0, #64	; 0x40
 8006be2:	f000 f9c9 	bl	8006f78 <SX1276Write>
        break;
 8006be6:	46c0      	nop			; (mov r8, r8)
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8006be8:	4b08      	ldr	r3, [pc, #32]	; (8006c0c <SX1276SetTx+0xfc>)
 8006bea:	2202      	movs	r2, #2
 8006bec:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <SX1276SetTx+0xf8>)
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f012 fadd 	bl	80191b0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006bf6:	2003      	movs	r0, #3
 8006bf8:	f000 f914 	bl	8006e24 <SX1276SetOpMode>
}
 8006bfc:	46c0      	nop			; (mov r8, r8)
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b002      	add	sp, #8
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20001628 	.word	0x20001628
 8006c08:	20001590 	.word	0x20001590
 8006c0c:	200015c0 	.word	0x200015c0

08006c10 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <SX1276StartCad+0x4c>)
 8006c16:	795b      	ldrb	r3, [r3, #5]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01a      	beq.n	8006c52 <SX1276StartCad+0x42>
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d000      	beq.n	8006c22 <SX1276StartCad+0x12>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8006c20:	e018      	b.n	8006c54 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8006c22:	21fa      	movs	r1, #250	; 0xfa
 8006c24:	2011      	movs	r0, #17
 8006c26:	f000 f9a7 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8006c2a:	2040      	movs	r0, #64	; 0x40
 8006c2c:	f000 f9b8 	bl	8006fa0 <SX1276Read>
 8006c30:	0003      	movs	r3, r0
 8006c32:	001a      	movs	r2, r3
 8006c34:	2303      	movs	r3, #3
 8006c36:	439a      	bics	r2, r3
 8006c38:	0013      	movs	r3, r2
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	0019      	movs	r1, r3
 8006c3e:	2040      	movs	r0, #64	; 0x40
 8006c40:	f000 f99a 	bl	8006f78 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8006c44:	4b05      	ldr	r3, [pc, #20]	; (8006c5c <SX1276StartCad+0x4c>)
 8006c46:	2203      	movs	r2, #3
 8006c48:	711a      	strb	r2, [r3, #4]
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8006c4a:	2007      	movs	r0, #7
 8006c4c:	f000 f8ea 	bl	8006e24 <SX1276SetOpMode>
        break;
 8006c50:	e000      	b.n	8006c54 <SX1276StartCad+0x44>
        break;
 8006c52:	46c0      	nop			; (mov r8, r8)
    }
}
 8006c54:	46c0      	nop			; (mov r8, r8)
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	200015c0 	.word	0x200015c0

08006c60 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08e      	sub	sp, #56	; 0x38
 8006c64:	af0a      	add	r7, sp, #40	; 0x28
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	0008      	movs	r0, r1
 8006c6a:	0011      	movs	r1, r2
 8006c6c:	1cfb      	adds	r3, r7, #3
 8006c6e:	1c02      	adds	r2, r0, #0
 8006c70:	701a      	strb	r2, [r3, #0]
 8006c72:	003b      	movs	r3, r7
 8006c74:	1c0a      	adds	r2, r1, #0
 8006c76:	801a      	strh	r2, [r3, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 8006c78:	003b      	movs	r3, r7
 8006c7a:	881a      	ldrh	r2, [r3, #0]
 8006c7c:	0013      	movs	r3, r2
 8006c7e:	015b      	lsls	r3, r3, #5
 8006c80:	1a9b      	subs	r3, r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	189b      	adds	r3, r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f7fe fcf3 	bl	8005678 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8006c92:	1cfb      	adds	r3, r7, #3
 8006c94:	2100      	movs	r1, #0
 8006c96:	5659      	ldrsb	r1, [r3, r1]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9306      	str	r3, [sp, #24]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9305      	str	r3, [sp, #20]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9304      	str	r3, [sp, #16]
 8006cac:	2300      	movs	r3, #0
 8006cae:	9303      	str	r3, [sp, #12]
 8006cb0:	2305      	movs	r3, #5
 8006cb2:	9302      	str	r3, [sp, #8]
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	9301      	str	r3, [sp, #4]
 8006cb8:	2396      	movs	r3, #150	; 0x96
 8006cba:	015b      	lsls	r3, r3, #5
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	f7ff f8fe 	bl	8005ec4 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8006cc8:	2031      	movs	r0, #49	; 0x31
 8006cca:	f000 f969 	bl	8006fa0 <SX1276Read>
 8006cce:	0003      	movs	r3, r0
 8006cd0:	001a      	movs	r2, r3
 8006cd2:	2340      	movs	r3, #64	; 0x40
 8006cd4:	439a      	bics	r2, r3
 8006cd6:	0013      	movs	r3, r2
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	0019      	movs	r1, r3
 8006cdc:	2031      	movs	r0, #49	; 0x31
 8006cde:	f000 f94b 	bl	8006f78 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8006ce2:	21f0      	movs	r1, #240	; 0xf0
 8006ce4:	2040      	movs	r0, #64	; 0x40
 8006ce6:	f000 f947 	bl	8006f78 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8006cea:	21a0      	movs	r1, #160	; 0xa0
 8006cec:	2041      	movs	r0, #65	; 0x41
 8006cee:	f000 f943 	bl	8006f78 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <SX1276SetTxContinuousWave+0xbc>)
 8006cf6:	0011      	movs	r1, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f012 fbab 	bl	8019454 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING;
 8006cfe:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <SX1276SetTxContinuousWave+0xc0>)
 8006d00:	2202      	movs	r2, #2
 8006d02:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <SX1276SetTxContinuousWave+0xbc>)
 8006d06:	0018      	movs	r0, r3
 8006d08:	f012 fa52 	bl	80191b0 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8006d0c:	2003      	movs	r0, #3
 8006d0e:	f000 f889 	bl	8006e24 <SX1276SetOpMode>
}
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	46bd      	mov	sp, r7
 8006d16:	b004      	add	sp, #16
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	20001590 	.word	0x20001590
 8006d20:	200015c0 	.word	0x200015c0

08006d24 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	0002      	movs	r2, r0
 8006d2c:	1dfb      	adds	r3, r7, #7
 8006d2e:	701a      	strb	r2, [r3, #0]
    int16_t rssi = 0;
 8006d30:	230e      	movs	r3, #14
 8006d32:	18fb      	adds	r3, r7, r3
 8006d34:	2200      	movs	r2, #0
 8006d36:	801a      	strh	r2, [r3, #0]

    switch( modem )
 8006d38:	1dfb      	adds	r3, r7, #7
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <SX1276ReadRssi+0x22>
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d00d      	beq.n	8006d60 <SX1276ReadRssi+0x3c>
 8006d44:	e027      	b.n	8006d96 <SX1276ReadRssi+0x72>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8006d46:	2011      	movs	r0, #17
 8006d48:	f000 f92a 	bl	8006fa0 <SX1276Read>
 8006d4c:	0003      	movs	r3, r0
 8006d4e:	085b      	lsrs	r3, r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	425b      	negs	r3, r3
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	230e      	movs	r3, #14
 8006d5a:	18fb      	adds	r3, r7, r3
 8006d5c:	801a      	strh	r2, [r3, #0]
        break;
 8006d5e:	e020      	b.n	8006da2 <SX1276ReadRssi+0x7e>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8006d60:	4b14      	ldr	r3, [pc, #80]	; (8006db4 <SX1276ReadRssi+0x90>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	4a14      	ldr	r2, [pc, #80]	; (8006db8 <SX1276ReadRssi+0x94>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d90a      	bls.n	8006d80 <SX1276ReadRssi+0x5c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8006d6a:	201b      	movs	r0, #27
 8006d6c:	f000 f918 	bl	8006fa0 <SX1276Read>
 8006d70:	0003      	movs	r3, r0
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b9d      	subs	r3, #157	; 0x9d
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	230e      	movs	r3, #14
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	801a      	strh	r2, [r3, #0]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8006d7e:	e010      	b.n	8006da2 <SX1276ReadRssi+0x7e>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8006d80:	201b      	movs	r0, #27
 8006d82:	f000 f90d 	bl	8006fa0 <SX1276Read>
 8006d86:	0003      	movs	r3, r0
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3ba4      	subs	r3, #164	; 0xa4
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	230e      	movs	r3, #14
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	801a      	strh	r2, [r3, #0]
        break;
 8006d94:	e005      	b.n	8006da2 <SX1276ReadRssi+0x7e>
    default:
        rssi = -1;
 8006d96:	230e      	movs	r3, #14
 8006d98:	18fb      	adds	r3, r7, r3
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4252      	negs	r2, r2
 8006d9e:	801a      	strh	r2, [r3, #0]
        break;
 8006da0:	46c0      	nop			; (mov r8, r8)
    }
    return rssi;
 8006da2:	230e      	movs	r3, #14
 8006da4:	18fb      	adds	r3, r7, r3
 8006da6:	2200      	movs	r2, #0
 8006da8:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b004      	add	sp, #16
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	200015c0 	.word	0x200015c0
 8006db8:	1f4add40 	.word	0x1f4add40

08006dbc <SX1276Reset>:

void SX1276Reset( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef initStruct = { 0 };
 8006dc2:	1d3b      	adds	r3, r7, #4
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	2314      	movs	r3, #20
 8006dc8:	001a      	movs	r2, r3
 8006dca:	2100      	movs	r1, #0
 8006dcc:	f012 fdc4 	bl	8019958 <memset>

    initStruct.Mode =GPIO_MODE_OUTPUT_PP;
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	605a      	str	r2, [r3, #4]
    initStruct.Pull = GPIO_NOPULL;
 8006dd6:	1d3b      	adds	r3, r7, #4
 8006dd8:	2200      	movs	r2, #0
 8006dda:	609a      	str	r2, [r3, #8]
    initStruct.Speed = GPIO_SPEED_HIGH;
 8006ddc:	1d3b      	adds	r3, r7, #4
 8006dde:	2203      	movs	r2, #3
 8006de0:	60da      	str	r2, [r3, #12]

    // Set RESET pin to 0
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8006de2:	1d3b      	adds	r3, r7, #4
 8006de4:	480e      	ldr	r0, [pc, #56]	; (8006e20 <SX1276Reset+0x64>)
 8006de6:	001a      	movs	r2, r3
 8006de8:	2101      	movs	r1, #1
 8006dea:	f7fc f829 	bl	8002e40 <HW_GPIO_Init>
    HW_GPIO_Write( RADIO_RESET_PORT, RADIO_RESET_PIN, 0 );
 8006dee:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <SX1276Reset+0x64>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	2101      	movs	r1, #1
 8006df4:	0018      	movs	r0, r3
 8006df6:	f7fc f8f5 	bl	8002fe4 <HW_GPIO_Write>

    // Wait 1 ms
    DelayMs( 1 );
 8006dfa:	2001      	movs	r0, #1
 8006dfc:	f7fd fa1c 	bl	8004238 <HAL_Delay>

    // Configure RESET as input
    initStruct.Mode = GPIO_NOPULL;
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	2200      	movs	r2, #0
 8006e04:	605a      	str	r2, [r3, #4]
    HW_GPIO_Init( RADIO_RESET_PORT, RADIO_RESET_PIN, &initStruct );
 8006e06:	1d3b      	adds	r3, r7, #4
 8006e08:	4805      	ldr	r0, [pc, #20]	; (8006e20 <SX1276Reset+0x64>)
 8006e0a:	001a      	movs	r2, r3
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	f7fc f817 	bl	8002e40 <HW_GPIO_Init>

    // Wait 6 ms
    DelayMs( 6 );
 8006e12:	2006      	movs	r0, #6
 8006e14:	f7fd fa10 	bl	8004238 <HAL_Delay>
}
 8006e18:	46c0      	nop			; (mov r8, r8)
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	b006      	add	sp, #24
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	50000800 	.word	0x50000800

08006e24 <SX1276SetOpMode>:

void SX1276SetOpMode( uint8_t opMode )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	0002      	movs	r2, r0
 8006e2c:	1dfb      	adds	r3, r7, #7
 8006e2e:	701a      	strb	r2, [r3, #0]
    if( opMode == RF_OPMODE_SLEEP )
 8006e30:	1dfb      	adds	r3, r7, #7
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11c      	bne.n	8006e72 <SX1276SetOpMode+0x4e>
    {
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006e38:	2001      	movs	r0, #1
 8006e3a:	f000 f8b1 	bl	8006fa0 <SX1276Read>
 8006e3e:	0003      	movs	r3, r0
 8006e40:	b25b      	sxtb	r3, r3
 8006e42:	2207      	movs	r2, #7
 8006e44:	4393      	bics	r3, r2
 8006e46:	b25a      	sxtb	r2, r3
 8006e48:	1dfb      	adds	r3, r7, #7
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	b25b      	sxtb	r3, r3
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	0019      	movs	r1, r3
 8006e56:	2001      	movs	r0, #1
 8006e58:	f000 f88e 	bl	8006f78 <SX1276Write>
      
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( true );
 8006e5c:	4b18      	ldr	r3, [pc, #96]	; (8006ec0 <SX1276SetOpMode+0x9c>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2001      	movs	r0, #1
 8006e64:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetXO( RESET ); 
 8006e66:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <SX1276SetOpMode+0x9c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4798      	blx	r3
      
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
      
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
    }
}
 8006e70:	e022      	b.n	8006eb8 <SX1276SetOpMode+0x94>
      LoRaBoardCallbacks->SX1276BoardSetXO( SET ); 
 8006e72:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <SX1276SetOpMode+0x9c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2001      	movs	r0, #1
 8006e7a:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSwLowPower( false );
 8006e7c:	4b10      	ldr	r3, [pc, #64]	; (8006ec0 <SX1276SetOpMode+0x9c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2000      	movs	r0, #0
 8006e84:	4798      	blx	r3
      LoRaBoardCallbacks->SX1276BoardSetAntSw( opMode );
 8006e86:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <SX1276SetOpMode+0x9c>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	1dfa      	adds	r2, r7, #7
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	0010      	movs	r0, r2
 8006e92:	4798      	blx	r3
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8006e94:	2001      	movs	r0, #1
 8006e96:	f000 f883 	bl	8006fa0 <SX1276Read>
 8006e9a:	0003      	movs	r3, r0
 8006e9c:	b25b      	sxtb	r3, r3
 8006e9e:	2207      	movs	r2, #7
 8006ea0:	4393      	bics	r3, r2
 8006ea2:	b25a      	sxtb	r2, r3
 8006ea4:	1dfb      	adds	r3, r7, #7
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	b25b      	sxtb	r3, r3
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	0019      	movs	r1, r3
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	f000 f860 	bl	8006f78 <SX1276Write>
}
 8006eb8:	46c0      	nop			; (mov r8, r8)
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b002      	add	sp, #8
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	20000524 	.word	0x20000524

08006ec4 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	0002      	movs	r2, r0
 8006ecc:	1dfb      	adds	r3, r7, #7
 8006ece:	701a      	strb	r2, [r3, #0]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	f000 f865 	bl	8006fa0 <SX1276Read>
 8006ed6:	0003      	movs	r3, r0
 8006ed8:	b25b      	sxtb	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	da03      	bge.n	8006ee6 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8006ede:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <SX1276SetModem+0xb0>)
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	715a      	strb	r2, [r3, #5]
 8006ee4:	e002      	b.n	8006eec <SX1276SetModem+0x28>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8006ee6:	4b23      	ldr	r3, [pc, #140]	; (8006f74 <SX1276SetModem+0xb0>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	715a      	strb	r2, [r3, #5]
    }

    if( SX1276.Settings.Modem == modem )
 8006eec:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <SX1276SetModem+0xb0>)
 8006eee:	795b      	ldrb	r3, [r3, #5]
 8006ef0:	1dfa      	adds	r2, r7, #7
 8006ef2:	7812      	ldrb	r2, [r2, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d039      	beq.n	8006f6c <SX1276SetModem+0xa8>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8006ef8:	4b1e      	ldr	r3, [pc, #120]	; (8006f74 <SX1276SetModem+0xb0>)
 8006efa:	1dfa      	adds	r2, r7, #7
 8006efc:	7812      	ldrb	r2, [r2, #0]
 8006efe:	715a      	strb	r2, [r3, #5]
    switch( SX1276.Settings.Modem )
 8006f00:	4b1c      	ldr	r3, [pc, #112]	; (8006f74 <SX1276SetModem+0xb0>)
 8006f02:	795b      	ldrb	r3, [r3, #5]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d017      	beq.n	8006f38 <SX1276SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006f08:	2000      	movs	r0, #0
 8006f0a:	f7ff ff8b 	bl	8006e24 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8006f0e:	2001      	movs	r0, #1
 8006f10:	f000 f846 	bl	8006fa0 <SX1276Read>
 8006f14:	0003      	movs	r3, r0
 8006f16:	001a      	movs	r2, r3
 8006f18:	237f      	movs	r3, #127	; 0x7f
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	0019      	movs	r1, r3
 8006f20:	2001      	movs	r0, #1
 8006f22:	f000 f829 	bl	8006f78 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006f26:	2100      	movs	r1, #0
 8006f28:	2040      	movs	r0, #64	; 0x40
 8006f2a:	f000 f825 	bl	8006f78 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8006f2e:	2130      	movs	r1, #48	; 0x30
 8006f30:	2041      	movs	r0, #65	; 0x41
 8006f32:	f000 f821 	bl	8006f78 <SX1276Write>
        break;
 8006f36:	e01a      	b.n	8006f6e <SX1276SetModem+0xaa>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8006f38:	2000      	movs	r0, #0
 8006f3a:	f7ff ff73 	bl	8006e24 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8006f3e:	2001      	movs	r0, #1
 8006f40:	f000 f82e 	bl	8006fa0 <SX1276Read>
 8006f44:	0003      	movs	r3, r0
 8006f46:	001a      	movs	r2, r3
 8006f48:	2380      	movs	r3, #128	; 0x80
 8006f4a:	425b      	negs	r3, r3
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	0019      	movs	r1, r3
 8006f52:	2001      	movs	r0, #1
 8006f54:	f000 f810 	bl	8006f78 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8006f58:	2100      	movs	r1, #0
 8006f5a:	2040      	movs	r0, #64	; 0x40
 8006f5c:	f000 f80c 	bl	8006f78 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8006f60:	2100      	movs	r1, #0
 8006f62:	2041      	movs	r0, #65	; 0x41
 8006f64:	f000 f808 	bl	8006f78 <SX1276Write>
        break;
 8006f68:	46c0      	nop			; (mov r8, r8)
 8006f6a:	e000      	b.n	8006f6e <SX1276SetModem+0xaa>
        return;
 8006f6c:	46c0      	nop			; (mov r8, r8)
    }
}
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b002      	add	sp, #8
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	200015c0 	.word	0x200015c0

08006f78 <SX1276Write>:

void SX1276Write( uint16_t addr, uint8_t data )
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	0002      	movs	r2, r0
 8006f80:	1dbb      	adds	r3, r7, #6
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	1d7b      	adds	r3, r7, #5
 8006f86:	1c0a      	adds	r2, r1, #0
 8006f88:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( addr, &data, 1 );
 8006f8a:	1d79      	adds	r1, r7, #5
 8006f8c:	1dbb      	adds	r3, r7, #6
 8006f8e:	881b      	ldrh	r3, [r3, #0]
 8006f90:	2201      	movs	r2, #1
 8006f92:	0018      	movs	r0, r3
 8006f94:	f000 f818 	bl	8006fc8 <SX1276WriteBuffer>
}
 8006f98:	46c0      	nop			; (mov r8, r8)
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b002      	add	sp, #8
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <SX1276Read>:

uint8_t SX1276Read( uint16_t addr )
{
 8006fa0:	b590      	push	{r4, r7, lr}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	1dbb      	adds	r3, r7, #6
 8006faa:	801a      	strh	r2, [r3, #0]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8006fac:	240f      	movs	r4, #15
 8006fae:	1939      	adds	r1, r7, r4
 8006fb0:	1dbb      	adds	r3, r7, #6
 8006fb2:	881b      	ldrh	r3, [r3, #0]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f000 f848 	bl	800704c <SX1276ReadBuffer>
    return data;
 8006fbc:	193b      	adds	r3, r7, r4
 8006fbe:	781b      	ldrb	r3, [r3, #0]
}
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	b005      	add	sp, #20
 8006fc6:	bd90      	pop	{r4, r7, pc}

08006fc8 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8006fc8:	b590      	push	{r4, r7, lr}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6039      	str	r1, [r7, #0]
 8006fd0:	0011      	movs	r1, r2
 8006fd2:	1dbb      	adds	r3, r7, #6
 8006fd4:	1c02      	adds	r2, r0, #0
 8006fd6:	801a      	strh	r2, [r3, #0]
 8006fd8:	1d7b      	adds	r3, r7, #5
 8006fda:	1c0a      	adds	r2, r1, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8006fde:	2380      	movs	r3, #128	; 0x80
 8006fe0:	0219      	lsls	r1, r3, #8
 8006fe2:	23a0      	movs	r3, #160	; 0xa0
 8006fe4:	05db      	lsls	r3, r3, #23
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7fb fffb 	bl	8002fe4 <HW_GPIO_Write>

    HW_SPI_InOut( addr | 0x80 );
 8006fee:	1dbb      	adds	r3, r7, #6
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	2280      	movs	r2, #128	; 0x80
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f7fc fda9 	bl	8003b50 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 8006ffe:	230f      	movs	r3, #15
 8007000:	18fb      	adds	r3, r7, r3
 8007002:	2200      	movs	r2, #0
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e00e      	b.n	8007026 <SX1276WriteBuffer+0x5e>
    {
        HW_SPI_InOut( buffer[i] );
 8007008:	240f      	movs	r4, #15
 800700a:	193b      	adds	r3, r7, r4
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	18d3      	adds	r3, r2, r3
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	b29b      	uxth	r3, r3
 8007016:	0018      	movs	r0, r3
 8007018:	f7fc fd9a 	bl	8003b50 <HW_SPI_InOut>
    for( i = 0; i < size; i++ )
 800701c:	193b      	adds	r3, r7, r4
 800701e:	781a      	ldrb	r2, [r3, #0]
 8007020:	193b      	adds	r3, r7, r4
 8007022:	3201      	adds	r2, #1
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	230f      	movs	r3, #15
 8007028:	18fa      	adds	r2, r7, r3
 800702a:	1d7b      	adds	r3, r7, #5
 800702c:	7812      	ldrb	r2, [r2, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d3e9      	bcc.n	8007008 <SX1276WriteBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 8007034:	2380      	movs	r3, #128	; 0x80
 8007036:	0219      	lsls	r1, r3, #8
 8007038:	23a0      	movs	r3, #160	; 0xa0
 800703a:	05db      	lsls	r3, r3, #23
 800703c:	2201      	movs	r2, #1
 800703e:	0018      	movs	r0, r3
 8007040:	f7fb ffd0 	bl	8002fe4 <HW_GPIO_Write>
}
 8007044:	46c0      	nop			; (mov r8, r8)
 8007046:	46bd      	mov	sp, r7
 8007048:	b005      	add	sp, #20
 800704a:	bd90      	pop	{r4, r7, pc}

0800704c <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af00      	add	r7, sp, #0
 8007052:	6039      	str	r1, [r7, #0]
 8007054:	0011      	movs	r1, r2
 8007056:	1dbb      	adds	r3, r7, #6
 8007058:	1c02      	adds	r2, r0, #0
 800705a:	801a      	strh	r2, [r3, #0]
 800705c:	1d7b      	adds	r3, r7, #5
 800705e:	1c0a      	adds	r2, r1, #0
 8007060:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    //NSS = 0;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 0 );
 8007062:	2380      	movs	r3, #128	; 0x80
 8007064:	0219      	lsls	r1, r3, #8
 8007066:	23a0      	movs	r3, #160	; 0xa0
 8007068:	05db      	lsls	r3, r3, #23
 800706a:	2200      	movs	r2, #0
 800706c:	0018      	movs	r0, r3
 800706e:	f7fb ffb9 	bl	8002fe4 <HW_GPIO_Write>

    HW_SPI_InOut( addr & 0x7F );
 8007072:	1dbb      	adds	r3, r7, #6
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	227f      	movs	r2, #127	; 0x7f
 8007078:	4013      	ands	r3, r2
 800707a:	b29b      	uxth	r3, r3
 800707c:	0018      	movs	r0, r3
 800707e:	f7fc fd67 	bl	8003b50 <HW_SPI_InOut>

    for( i = 0; i < size; i++ )
 8007082:	230f      	movs	r3, #15
 8007084:	18fb      	adds	r3, r7, r3
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
 800708a:	e010      	b.n	80070ae <SX1276ReadBuffer+0x62>
    {
        buffer[i] = HW_SPI_InOut( 0 );
 800708c:	2000      	movs	r0, #0
 800708e:	f7fc fd5f 	bl	8003b50 <HW_SPI_InOut>
 8007092:	0003      	movs	r3, r0
 8007094:	0019      	movs	r1, r3
 8007096:	200f      	movs	r0, #15
 8007098:	183b      	adds	r3, r7, r0
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	683a      	ldr	r2, [r7, #0]
 800709e:	18d3      	adds	r3, r2, r3
 80070a0:	b2ca      	uxtb	r2, r1
 80070a2:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80070a4:	183b      	adds	r3, r7, r0
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	183b      	adds	r3, r7, r0
 80070aa:	3201      	adds	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	230f      	movs	r3, #15
 80070b0:	18fa      	adds	r2, r7, r3
 80070b2:	1d7b      	adds	r3, r7, #5
 80070b4:	7812      	ldrb	r2, [r2, #0]
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d3e7      	bcc.n	800708c <SX1276ReadBuffer+0x40>
    }

    //NSS = 1;
    HW_GPIO_Write( RADIO_NSS_PORT, RADIO_NSS_PIN, 1 );
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	0219      	lsls	r1, r3, #8
 80070c0:	23a0      	movs	r3, #160	; 0xa0
 80070c2:	05db      	lsls	r3, r3, #23
 80070c4:	2201      	movs	r2, #1
 80070c6:	0018      	movs	r0, r3
 80070c8:	f7fb ff8c 	bl	8002fe4 <HW_GPIO_Write>
}
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	46bd      	mov	sp, r7
 80070d0:	b004      	add	sp, #16
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <SX1276WriteFifo>:

void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	000a      	movs	r2, r1
 80070de:	1cfb      	adds	r3, r7, #3
 80070e0:	701a      	strb	r2, [r3, #0]
    SX1276WriteBuffer( 0, buffer, size );
 80070e2:	1cfb      	adds	r3, r7, #3
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	0019      	movs	r1, r3
 80070ea:	2000      	movs	r0, #0
 80070ec:	f7ff ff6c 	bl	8006fc8 <SX1276WriteBuffer>
}
 80070f0:	46c0      	nop			; (mov r8, r8)
 80070f2:	46bd      	mov	sp, r7
 80070f4:	b002      	add	sp, #8
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <SX1276ReadFifo>:

void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	000a      	movs	r2, r1
 8007102:	1cfb      	adds	r3, r7, #3
 8007104:	701a      	strb	r2, [r3, #0]
    SX1276ReadBuffer( 0, buffer, size );
 8007106:	1cfb      	adds	r3, r7, #3
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0019      	movs	r1, r3
 800710e:	2000      	movs	r0, #0
 8007110:	f7ff ff9c 	bl	800704c <SX1276ReadBuffer>
}
 8007114:	46c0      	nop			; (mov r8, r8)
 8007116:	46bd      	mov	sp, r7
 8007118:	b002      	add	sp, #8
 800711a:	bd80      	pop	{r7, pc}

0800711c <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	0002      	movs	r2, r0
 8007124:	1dfb      	adds	r3, r7, #7
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	1dbb      	adds	r3, r7, #6
 800712a:	1c0a      	adds	r2, r1, #0
 800712c:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( modem );
 800712e:	1dfb      	adds	r3, r7, #7
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	0018      	movs	r0, r3
 8007134:	f7ff fec6 	bl	8006ec4 <SX1276SetModem>

    switch( modem )
 8007138:	1dfb      	adds	r3, r7, #7
 800713a:	781b      	ldrb	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <SX1276SetMaxPayloadLength+0x2a>
 8007140:	2b01      	cmp	r3, #1
 8007142:	d00f      	beq.n	8007164 <SX1276SetMaxPayloadLength+0x48>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8007144:	e016      	b.n	8007174 <SX1276SetMaxPayloadLength+0x58>
        if( SX1276.Settings.Fsk.FixLen == false )
 8007146:	4b0d      	ldr	r3, [pc, #52]	; (800717c <SX1276SetMaxPayloadLength+0x60>)
 8007148:	2222      	movs	r2, #34	; 0x22
 800714a:	5c9b      	ldrb	r3, [r3, r2]
 800714c:	2201      	movs	r2, #1
 800714e:	4053      	eors	r3, r2
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00d      	beq.n	8007172 <SX1276SetMaxPayloadLength+0x56>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8007156:	1dbb      	adds	r3, r7, #6
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	0019      	movs	r1, r3
 800715c:	2032      	movs	r0, #50	; 0x32
 800715e:	f7ff ff0b 	bl	8006f78 <SX1276Write>
        break;
 8007162:	e006      	b.n	8007172 <SX1276SetMaxPayloadLength+0x56>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8007164:	1dbb      	adds	r3, r7, #6
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	0019      	movs	r1, r3
 800716a:	2023      	movs	r0, #35	; 0x23
 800716c:	f7ff ff04 	bl	8006f78 <SX1276Write>
        break;
 8007170:	e000      	b.n	8007174 <SX1276SetMaxPayloadLength+0x58>
        break;
 8007172:	46c0      	nop			; (mov r8, r8)
}
 8007174:	46c0      	nop			; (mov r8, r8)
 8007176:	46bd      	mov	sp, r7
 8007178:	b002      	add	sp, #8
 800717a:	bd80      	pop	{r7, pc}
 800717c:	200015c0 	.word	0x200015c0

08007180 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	0002      	movs	r2, r0
 8007188:	1dfb      	adds	r3, r7, #7
 800718a:	701a      	strb	r2, [r3, #0]
    SX1276SetModem( MODEM_LORA );
 800718c:	2001      	movs	r0, #1
 800718e:	f7ff fe99 	bl	8006ec4 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8007192:	4b0b      	ldr	r3, [pc, #44]	; (80071c0 <SX1276SetPublicNetwork+0x40>)
 8007194:	1dfa      	adds	r2, r7, #7
 8007196:	215c      	movs	r1, #92	; 0x5c
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	545a      	strb	r2, [r3, r1]
    if( enable == true )
 800719c:	1dfb      	adds	r3, r7, #7
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d004      	beq.n	80071ae <SX1276SetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 80071a4:	2134      	movs	r1, #52	; 0x34
 80071a6:	2039      	movs	r0, #57	; 0x39
 80071a8:	f7ff fee6 	bl	8006f78 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 80071ac:	e003      	b.n	80071b6 <SX1276SetPublicNetwork+0x36>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 80071ae:	2112      	movs	r1, #18
 80071b0:	2039      	movs	r0, #57	; 0x39
 80071b2:	f7ff fee1 	bl	8006f78 <SX1276Write>
}
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	46bd      	mov	sp, r7
 80071ba:	b002      	add	sp, #8
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	200015c0 	.word	0x200015c0

080071c4 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
    return ( uint32_t )LoRaBoardCallbacks->SX1276BoardGetWakeTime( ) + RADIO_WAKEUP_TIME;// BOARD_WAKEUP_TIME;
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <SX1276GetWakeupTime+0x18>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	4798      	blx	r3
 80071d0:	0003      	movs	r3, r0
 80071d2:	3302      	adds	r3, #2
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	46c0      	nop			; (mov r8, r8)
 80071dc:	20000524 	.word	0x20000524

080071e0 <SX1276OnTimeoutIrq>:

void SX1276OnTimeoutIrq( void* context )
{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80071e8:	4b51      	ldr	r3, [pc, #324]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 80071ea:	791b      	ldrb	r3, [r3, #4]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d002      	beq.n	80071f6 <SX1276OnTimeoutIrq+0x16>
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d045      	beq.n	8007280 <SX1276OnTimeoutIrq+0xa0>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 80071f4:	e098      	b.n	8007328 <SX1276OnTimeoutIrq+0x148>
        if( SX1276.Settings.Modem == MODEM_FSK )
 80071f6:	4b4e      	ldr	r3, [pc, #312]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 80071f8:	795b      	ldrb	r3, [r3, #5]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d132      	bne.n	8007264 <SX1276OnTimeoutIrq+0x84>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80071fe:	4b4c      	ldr	r3, [pc, #304]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 8007200:	2230      	movs	r2, #48	; 0x30
 8007202:	2100      	movs	r1, #0
 8007204:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007206:	4b4a      	ldr	r3, [pc, #296]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 8007208:	2231      	movs	r2, #49	; 0x31
 800720a:	2100      	movs	r1, #0
 800720c:	5499      	strb	r1, [r3, r2]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800720e:	4b48      	ldr	r3, [pc, #288]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 8007210:	2200      	movs	r2, #0
 8007212:	879a      	strh	r2, [r3, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8007214:	4b46      	ldr	r3, [pc, #280]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 8007216:	2200      	movs	r2, #0
 8007218:	875a      	strh	r2, [r3, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800721a:	210b      	movs	r1, #11
 800721c:	203e      	movs	r0, #62	; 0x3e
 800721e:	f7ff feab 	bl	8006f78 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8007222:	2110      	movs	r1, #16
 8007224:	203f      	movs	r0, #63	; 0x3f
 8007226:	f7ff fea7 	bl	8006f78 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800722a:	4b41      	ldr	r3, [pc, #260]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 800722c:	2226      	movs	r2, #38	; 0x26
 800722e:	5c9b      	ldrb	r3, [r3, r2]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d010      	beq.n	8007256 <SX1276OnTimeoutIrq+0x76>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8007234:	200d      	movs	r0, #13
 8007236:	f7ff feb3 	bl	8006fa0 <SX1276Read>
 800723a:	0003      	movs	r3, r0
 800723c:	001a      	movs	r2, r3
 800723e:	2340      	movs	r3, #64	; 0x40
 8007240:	4313      	orrs	r3, r2
 8007242:	b2db      	uxtb	r3, r3
 8007244:	0019      	movs	r1, r3
 8007246:	200d      	movs	r0, #13
 8007248:	f7ff fe96 	bl	8006f78 <SX1276Write>
                TimerStart( &RxTimeoutSyncWord );
 800724c:	4b39      	ldr	r3, [pc, #228]	; (8007334 <SX1276OnTimeoutIrq+0x154>)
 800724e:	0018      	movs	r0, r3
 8007250:	f011 ffae 	bl	80191b0 <TimerStart>
 8007254:	e006      	b.n	8007264 <SX1276OnTimeoutIrq+0x84>
                SX1276.Settings.State = RF_IDLE;
 8007256:	4b36      	ldr	r3, [pc, #216]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 8007258:	2200      	movs	r2, #0
 800725a:	711a      	strb	r2, [r3, #4]
                TimerStop( &RxTimeoutSyncWord );
 800725c:	4b35      	ldr	r3, [pc, #212]	; (8007334 <SX1276OnTimeoutIrq+0x154>)
 800725e:	0018      	movs	r0, r3
 8007260:	f012 f87e 	bl	8019360 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007264:	4b34      	ldr	r3, [pc, #208]	; (8007338 <SX1276OnTimeoutIrq+0x158>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d05a      	beq.n	8007322 <SX1276OnTimeoutIrq+0x142>
 800726c:	4b32      	ldr	r3, [pc, #200]	; (8007338 <SX1276OnTimeoutIrq+0x158>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d055      	beq.n	8007322 <SX1276OnTimeoutIrq+0x142>
            RadioEvents->RxTimeout( );
 8007276:	4b30      	ldr	r3, [pc, #192]	; (8007338 <SX1276OnTimeoutIrq+0x158>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	4798      	blx	r3
        break;
 800727e:	e050      	b.n	8007322 <SX1276OnTimeoutIrq+0x142>
        SX1276Reset( );
 8007280:	f7ff fd9c 	bl	8006dbc <SX1276Reset>
        RxChainCalibration( );
 8007284:	f7fe face 	bl	8005824 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8007288:	2000      	movs	r0, #0
 800728a:	f7ff fdcb 	bl	8006e24 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800728e:	230f      	movs	r3, #15
 8007290:	18fb      	adds	r3, r7, r3
 8007292:	2200      	movs	r2, #0
 8007294:	701a      	strb	r2, [r3, #0]
 8007296:	e025      	b.n	80072e4 <SX1276OnTimeoutIrq+0x104>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8007298:	240f      	movs	r4, #15
 800729a:	193b      	adds	r3, r7, r4
 800729c:	781a      	ldrb	r2, [r3, #0]
 800729e:	4927      	ldr	r1, [pc, #156]	; (800733c <SX1276OnTimeoutIrq+0x15c>)
 80072a0:	0013      	movs	r3, r2
 80072a2:	005b      	lsls	r3, r3, #1
 80072a4:	189b      	adds	r3, r3, r2
 80072a6:	5c5b      	ldrb	r3, [r3, r1]
 80072a8:	0018      	movs	r0, r3
 80072aa:	f7ff fe0b 	bl	8006ec4 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80072ae:	193b      	adds	r3, r7, r4
 80072b0:	781a      	ldrb	r2, [r3, #0]
 80072b2:	4922      	ldr	r1, [pc, #136]	; (800733c <SX1276OnTimeoutIrq+0x15c>)
 80072b4:	0013      	movs	r3, r2
 80072b6:	005b      	lsls	r3, r3, #1
 80072b8:	189b      	adds	r3, r3, r2
 80072ba:	18cb      	adds	r3, r1, r3
 80072bc:	3301      	adds	r3, #1
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b298      	uxth	r0, r3
 80072c2:	193b      	adds	r3, r7, r4
 80072c4:	781a      	ldrb	r2, [r3, #0]
 80072c6:	491d      	ldr	r1, [pc, #116]	; (800733c <SX1276OnTimeoutIrq+0x15c>)
 80072c8:	0013      	movs	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	189b      	adds	r3, r3, r2
 80072ce:	18cb      	adds	r3, r1, r3
 80072d0:	3302      	adds	r3, #2
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	0019      	movs	r1, r3
 80072d6:	f7ff fe4f 	bl	8006f78 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80072da:	193b      	adds	r3, r7, r4
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	193b      	adds	r3, r7, r4
 80072e0:	3201      	adds	r2, #1
 80072e2:	701a      	strb	r2, [r3, #0]
 80072e4:	230f      	movs	r3, #15
 80072e6:	18fb      	adds	r3, r7, r3
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	2b0f      	cmp	r3, #15
 80072ec:	d9d4      	bls.n	8007298 <SX1276OnTimeoutIrq+0xb8>
        SX1276SetModem( MODEM_FSK );
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7ff fde8 	bl	8006ec4 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80072f4:	4b0e      	ldr	r3, [pc, #56]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 80072f6:	225c      	movs	r2, #92	; 0x5c
 80072f8:	5c9b      	ldrb	r3, [r3, r2]
 80072fa:	0018      	movs	r0, r3
 80072fc:	f7ff ff40 	bl	8007180 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <SX1276OnTimeoutIrq+0x150>)
 8007302:	2200      	movs	r2, #0
 8007304:	711a      	strb	r2, [r3, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007306:	4b0c      	ldr	r3, [pc, #48]	; (8007338 <SX1276OnTimeoutIrq+0x158>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00b      	beq.n	8007326 <SX1276OnTimeoutIrq+0x146>
 800730e:	4b0a      	ldr	r3, [pc, #40]	; (8007338 <SX1276OnTimeoutIrq+0x158>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <SX1276OnTimeoutIrq+0x146>
            RadioEvents->TxTimeout( );
 8007318:	4b07      	ldr	r3, [pc, #28]	; (8007338 <SX1276OnTimeoutIrq+0x158>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	4798      	blx	r3
        break;
 8007320:	e001      	b.n	8007326 <SX1276OnTimeoutIrq+0x146>
        break;
 8007322:	46c0      	nop			; (mov r8, r8)
 8007324:	e000      	b.n	8007328 <SX1276OnTimeoutIrq+0x148>
        break;
 8007326:	46c0      	nop			; (mov r8, r8)
    }
}
 8007328:	46c0      	nop			; (mov r8, r8)
 800732a:	46bd      	mov	sp, r7
 800732c:	b005      	add	sp, #20
 800732e:	bd90      	pop	{r4, r7, pc}
 8007330:	200015c0 	.word	0x200015c0
 8007334:	200015a8 	.word	0x200015a8
 8007338:	20000420 	.word	0x20000420
 800733c:	0801ad60 	.word	0x0801ad60

08007340 <SX1276OnDio0Irq>:

void SX1276OnDio0Irq( void* context )
{
 8007340:	b5b0      	push	{r4, r5, r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8007348:	230d      	movs	r3, #13
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]

    switch( SX1276.Settings.State )
 8007350:	4bca      	ldr	r3, [pc, #808]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007352:	791b      	ldrb	r3, [r3, #4]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d003      	beq.n	8007360 <SX1276OnDio0Irq+0x20>
 8007358:	2b02      	cmp	r3, #2
 800735a:	d100      	bne.n	800735e <SX1276OnDio0Irq+0x1e>
 800735c:	e1f2      	b.n	8007744 <SX1276OnDio0Irq+0x404>
                }
                break;
            }
            break;
        default:
            break;
 800735e:	e20f      	b.n	8007780 <SX1276OnDio0Irq+0x440>
            switch( SX1276.Settings.Modem )
 8007360:	4bc6      	ldr	r3, [pc, #792]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007362:	795b      	ldrb	r3, [r3, #5]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d003      	beq.n	8007370 <SX1276OnDio0Irq+0x30>
 8007368:	2b01      	cmp	r3, #1
 800736a:	d100      	bne.n	800736e <SX1276OnDio0Irq+0x2e>
 800736c:	e0eb      	b.n	8007546 <SX1276OnDio0Irq+0x206>
                break;
 800736e:	e1e8      	b.n	8007742 <SX1276OnDio0Irq+0x402>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8007370:	4bc2      	ldr	r3, [pc, #776]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007372:	2224      	movs	r2, #36	; 0x24
 8007374:	5c9b      	ldrb	r3, [r3, r2]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d057      	beq.n	800742a <SX1276OnDio0Irq+0xea>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800737a:	203f      	movs	r0, #63	; 0x3f
 800737c:	f7ff fe10 	bl	8006fa0 <SX1276Read>
 8007380:	0003      	movs	r3, r0
 8007382:	001a      	movs	r2, r3
 8007384:	210d      	movs	r1, #13
 8007386:	187b      	adds	r3, r7, r1
 8007388:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800738a:	187b      	adds	r3, r7, r1
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	001a      	movs	r2, r3
 8007392:	2302      	movs	r3, #2
 8007394:	4013      	ands	r3, r2
 8007396:	2b02      	cmp	r3, #2
 8007398:	d047      	beq.n	800742a <SX1276OnDio0Irq+0xea>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800739a:	210b      	movs	r1, #11
 800739c:	203e      	movs	r0, #62	; 0x3e
 800739e:	f7ff fdeb 	bl	8006f78 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80073a2:	2110      	movs	r1, #16
 80073a4:	203f      	movs	r0, #63	; 0x3f
 80073a6:	f7ff fde7 	bl	8006f78 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80073aa:	4bb5      	ldr	r3, [pc, #724]	; (8007680 <SX1276OnDio0Irq+0x340>)
 80073ac:	0018      	movs	r0, r3
 80073ae:	f011 ffd7 	bl	8019360 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80073b2:	4bb2      	ldr	r3, [pc, #712]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80073b4:	2226      	movs	r2, #38	; 0x26
 80073b6:	5c9b      	ldrb	r3, [r3, r2]
 80073b8:	2201      	movs	r2, #1
 80073ba:	4053      	eors	r3, r2
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d007      	beq.n	80073d2 <SX1276OnDio0Irq+0x92>
                            TimerStop( &RxTimeoutSyncWord );
 80073c2:	4bb0      	ldr	r3, [pc, #704]	; (8007684 <SX1276OnDio0Irq+0x344>)
 80073c4:	0018      	movs	r0, r3
 80073c6:	f011 ffcb 	bl	8019360 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80073ca:	4bac      	ldr	r3, [pc, #688]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	711a      	strb	r2, [r3, #4]
 80073d0:	e00f      	b.n	80073f2 <SX1276OnDio0Irq+0xb2>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80073d2:	200d      	movs	r0, #13
 80073d4:	f7ff fde4 	bl	8006fa0 <SX1276Read>
 80073d8:	0003      	movs	r3, r0
 80073da:	001a      	movs	r2, r3
 80073dc:	2340      	movs	r3, #64	; 0x40
 80073de:	4313      	orrs	r3, r2
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	0019      	movs	r1, r3
 80073e4:	200d      	movs	r0, #13
 80073e6:	f7ff fdc7 	bl	8006f78 <SX1276Write>
                            TimerStart( &RxTimeoutSyncWord );
 80073ea:	4ba6      	ldr	r3, [pc, #664]	; (8007684 <SX1276OnDio0Irq+0x344>)
 80073ec:	0018      	movs	r0, r3
 80073ee:	f011 fedf 	bl	80191b0 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80073f2:	4ba5      	ldr	r3, [pc, #660]	; (8007688 <SX1276OnDio0Irq+0x348>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <SX1276OnDio0Irq+0xcc>
 80073fa:	4ba3      	ldr	r3, [pc, #652]	; (8007688 <SX1276OnDio0Irq+0x348>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <SX1276OnDio0Irq+0xcc>
                            RadioEvents->RxError( );
 8007404:	4ba0      	ldr	r3, [pc, #640]	; (8007688 <SX1276OnDio0Irq+0x348>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800740c:	4b9b      	ldr	r3, [pc, #620]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800740e:	2230      	movs	r2, #48	; 0x30
 8007410:	2100      	movs	r1, #0
 8007412:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007414:	4b99      	ldr	r3, [pc, #612]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007416:	2231      	movs	r2, #49	; 0x31
 8007418:	2100      	movs	r1, #0
 800741a:	5499      	strb	r1, [r3, r2]
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800741c:	4b97      	ldr	r3, [pc, #604]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800741e:	2200      	movs	r2, #0
 8007420:	879a      	strh	r2, [r3, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8007422:	4b96      	ldr	r3, [pc, #600]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007424:	2200      	movs	r2, #0
 8007426:	875a      	strh	r2, [r3, #58]	; 0x3a
                        break;
 8007428:	e18b      	b.n	8007742 <SX1276OnDio0Irq+0x402>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800742a:	4b94      	ldr	r3, [pc, #592]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800742c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800742e:	2b00      	cmp	r3, #0
 8007430:	d12d      	bne.n	800748e <SX1276OnDio0Irq+0x14e>
 8007432:	4b92      	ldr	r3, [pc, #584]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007434:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007436:	2b00      	cmp	r3, #0
 8007438:	d129      	bne.n	800748e <SX1276OnDio0Irq+0x14e>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800743a:	4b90      	ldr	r3, [pc, #576]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800743c:	2222      	movs	r2, #34	; 0x22
 800743e:	5c9b      	ldrb	r3, [r3, r2]
 8007440:	2201      	movs	r2, #1
 8007442:	4053      	eors	r3, r2
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d005      	beq.n	8007456 <SX1276OnDio0Irq+0x116>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800744a:	4b90      	ldr	r3, [pc, #576]	; (800768c <SX1276OnDio0Irq+0x34c>)
 800744c:	2101      	movs	r1, #1
 800744e:	0018      	movs	r0, r3
 8007450:	f7ff fe52 	bl	80070f8 <SX1276ReadFifo>
 8007454:	e006      	b.n	8007464 <SX1276OnDio0Irq+0x124>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8007456:	2032      	movs	r0, #50	; 0x32
 8007458:	f7ff fda2 	bl	8006fa0 <SX1276Read>
 800745c:	0003      	movs	r3, r0
 800745e:	b29a      	uxth	r2, r3
 8007460:	4b86      	ldr	r3, [pc, #536]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007462:	875a      	strh	r2, [r3, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007464:	4b85      	ldr	r3, [pc, #532]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007466:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007468:	001a      	movs	r2, r3
 800746a:	4b89      	ldr	r3, [pc, #548]	; (8007690 <SX1276OnDio0Irq+0x350>)
 800746c:	18d0      	adds	r0, r2, r3
 800746e:	4b83      	ldr	r3, [pc, #524]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007470:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007472:	b2da      	uxtb	r2, r3
 8007474:	4b81      	ldr	r3, [pc, #516]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007476:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007478:	b2db      	uxtb	r3, r3
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	b2db      	uxtb	r3, r3
 800747e:	0019      	movs	r1, r3
 8007480:	f7ff fe3a 	bl	80070f8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8007484:	4b7d      	ldr	r3, [pc, #500]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007486:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8007488:	4b7c      	ldr	r3, [pc, #496]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800748a:	879a      	strh	r2, [r3, #60]	; 0x3c
 800748c:	e013      	b.n	80074b6 <SX1276OnDio0Irq+0x176>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800748e:	4b7b      	ldr	r3, [pc, #492]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007490:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007492:	001a      	movs	r2, r3
 8007494:	4b7e      	ldr	r3, [pc, #504]	; (8007690 <SX1276OnDio0Irq+0x350>)
 8007496:	18d0      	adds	r0, r2, r3
 8007498:	4b78      	ldr	r3, [pc, #480]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800749a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800749c:	b2da      	uxtb	r2, r3
 800749e:	4b77      	ldr	r3, [pc, #476]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80074a0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	0019      	movs	r1, r3
 80074aa:	f7ff fe25 	bl	80070f8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80074ae:	4b73      	ldr	r3, [pc, #460]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80074b0:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 80074b2:	4b72      	ldr	r3, [pc, #456]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80074b4:	879a      	strh	r2, [r3, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 80074b6:	4b72      	ldr	r3, [pc, #456]	; (8007680 <SX1276OnDio0Irq+0x340>)
 80074b8:	0018      	movs	r0, r3
 80074ba:	f011 ff51 	bl	8019360 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80074be:	4b6f      	ldr	r3, [pc, #444]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80074c0:	2226      	movs	r2, #38	; 0x26
 80074c2:	5c9b      	ldrb	r3, [r3, r2]
 80074c4:	2201      	movs	r2, #1
 80074c6:	4053      	eors	r3, r2
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d007      	beq.n	80074de <SX1276OnDio0Irq+0x19e>
                    SX1276.Settings.State = RF_IDLE;
 80074ce:	4b6b      	ldr	r3, [pc, #428]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutSyncWord );
 80074d4:	4b6b      	ldr	r3, [pc, #428]	; (8007684 <SX1276OnDio0Irq+0x344>)
 80074d6:	0018      	movs	r0, r3
 80074d8:	f011 ff42 	bl	8019360 <TimerStop>
 80074dc:	e00f      	b.n	80074fe <SX1276OnDio0Irq+0x1be>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80074de:	200d      	movs	r0, #13
 80074e0:	f7ff fd5e 	bl	8006fa0 <SX1276Read>
 80074e4:	0003      	movs	r3, r0
 80074e6:	001a      	movs	r2, r3
 80074e8:	2340      	movs	r3, #64	; 0x40
 80074ea:	4313      	orrs	r3, r2
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	0019      	movs	r1, r3
 80074f0:	200d      	movs	r0, #13
 80074f2:	f7ff fd41 	bl	8006f78 <SX1276Write>
                    TimerStart( &RxTimeoutSyncWord );
 80074f6:	4b63      	ldr	r3, [pc, #396]	; (8007684 <SX1276OnDio0Irq+0x344>)
 80074f8:	0018      	movs	r0, r3
 80074fa:	f011 fe59 	bl	80191b0 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80074fe:	4b62      	ldr	r3, [pc, #392]	; (8007688 <SX1276OnDio0Irq+0x348>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d010      	beq.n	8007528 <SX1276OnDio0Irq+0x1e8>
 8007506:	4b60      	ldr	r3, [pc, #384]	; (8007688 <SX1276OnDio0Irq+0x348>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00b      	beq.n	8007528 <SX1276OnDio0Irq+0x1e8>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8007510:	4b5d      	ldr	r3, [pc, #372]	; (8007688 <SX1276OnDio0Irq+0x348>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689c      	ldr	r4, [r3, #8]
 8007516:	4b59      	ldr	r3, [pc, #356]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007518:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800751a:	4b58      	ldr	r3, [pc, #352]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800751c:	2232      	movs	r2, #50	; 0x32
 800751e:	569b      	ldrsb	r3, [r3, r2]
 8007520:	b21a      	sxth	r2, r3
 8007522:	485b      	ldr	r0, [pc, #364]	; (8007690 <SX1276OnDio0Irq+0x350>)
 8007524:	2300      	movs	r3, #0
 8007526:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8007528:	4b54      	ldr	r3, [pc, #336]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800752a:	2230      	movs	r2, #48	; 0x30
 800752c:	2100      	movs	r1, #0
 800752e:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8007530:	4b52      	ldr	r3, [pc, #328]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007532:	2231      	movs	r2, #49	; 0x31
 8007534:	2100      	movs	r1, #0
 8007536:	5499      	strb	r1, [r3, r2]
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8007538:	4b50      	ldr	r3, [pc, #320]	; (800767c <SX1276OnDio0Irq+0x33c>)
 800753a:	2200      	movs	r2, #0
 800753c:	879a      	strh	r2, [r3, #60]	; 0x3c
                SX1276.Settings.FskPacketHandler.Size = 0;
 800753e:	4b4f      	ldr	r3, [pc, #316]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007540:	2200      	movs	r2, #0
 8007542:	875a      	strh	r2, [r3, #58]	; 0x3a
                break;
 8007544:	e0fd      	b.n	8007742 <SX1276OnDio0Irq+0x402>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8007546:	2140      	movs	r1, #64	; 0x40
 8007548:	2012      	movs	r0, #18
 800754a:	f7ff fd15 	bl	8006f78 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800754e:	2012      	movs	r0, #18
 8007550:	f7ff fd26 	bl	8006fa0 <SX1276Read>
 8007554:	0003      	movs	r3, r0
 8007556:	001a      	movs	r2, r3
 8007558:	210d      	movs	r1, #13
 800755a:	187b      	adds	r3, r7, r1
 800755c:	701a      	strb	r2, [r3, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800755e:	187b      	adds	r3, r7, r1
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	b2db      	uxtb	r3, r3
 8007564:	001a      	movs	r2, r3
 8007566:	2320      	movs	r3, #32
 8007568:	4013      	ands	r3, r2
 800756a:	2b20      	cmp	r3, #32
 800756c:	d122      	bne.n	80075b4 <SX1276OnDio0Irq+0x274>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800756e:	2120      	movs	r1, #32
 8007570:	2012      	movs	r0, #18
 8007572:	f7ff fd01 	bl	8006f78 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8007576:	4b41      	ldr	r3, [pc, #260]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007578:	2256      	movs	r2, #86	; 0x56
 800757a:	5c9b      	ldrb	r3, [r3, r2]
 800757c:	2201      	movs	r2, #1
 800757e:	4053      	eors	r3, r2
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <SX1276OnDio0Irq+0x24c>
                            SX1276.Settings.State = RF_IDLE;
 8007586:	4b3d      	ldr	r3, [pc, #244]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007588:	2200      	movs	r2, #0
 800758a:	711a      	strb	r2, [r3, #4]
                        TimerStop( &RxTimeoutTimer );
 800758c:	4b3c      	ldr	r3, [pc, #240]	; (8007680 <SX1276OnDio0Irq+0x340>)
 800758e:	0018      	movs	r0, r3
 8007590:	f011 fee6 	bl	8019360 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8007594:	4b3c      	ldr	r3, [pc, #240]	; (8007688 <SX1276OnDio0Irq+0x348>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d100      	bne.n	800759e <SX1276OnDio0Irq+0x25e>
 800759c:	e0ce      	b.n	800773c <SX1276OnDio0Irq+0x3fc>
 800759e:	4b3a      	ldr	r3, [pc, #232]	; (8007688 <SX1276OnDio0Irq+0x348>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d100      	bne.n	80075aa <SX1276OnDio0Irq+0x26a>
 80075a8:	e0c8      	b.n	800773c <SX1276OnDio0Irq+0x3fc>
                            RadioEvents->RxError( );
 80075aa:	4b37      	ldr	r3, [pc, #220]	; (8007688 <SX1276OnDio0Irq+0x348>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	4798      	blx	r3
                        break;
 80075b2:	e0c3      	b.n	800773c <SX1276OnDio0Irq+0x3fc>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80075b4:	2019      	movs	r0, #25
 80075b6:	f7ff fcf3 	bl	8006fa0 <SX1276Read>
 80075ba:	0003      	movs	r3, r0
 80075bc:	b25b      	sxtb	r3, r3
 80075be:	3302      	adds	r3, #2
 80075c0:	109b      	asrs	r3, r3, #2
 80075c2:	b259      	sxtb	r1, r3
 80075c4:	4b2d      	ldr	r3, [pc, #180]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80075c6:	2260      	movs	r2, #96	; 0x60
 80075c8:	5499      	strb	r1, [r3, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80075ca:	201a      	movs	r0, #26
 80075cc:	f7ff fce8 	bl	8006fa0 <SX1276Read>
 80075d0:	0003      	movs	r3, r0
 80075d2:	001a      	movs	r2, r3
 80075d4:	230e      	movs	r3, #14
 80075d6:	18fb      	adds	r3, r7, r3
 80075d8:	801a      	strh	r2, [r3, #0]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80075da:	4b28      	ldr	r3, [pc, #160]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80075dc:	2260      	movs	r2, #96	; 0x60
 80075de:	569b      	ldrsb	r3, [r3, r2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	da34      	bge.n	800764e <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80075e4:	4b25      	ldr	r3, [pc, #148]	; (800767c <SX1276OnDio0Irq+0x33c>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <SX1276OnDio0Irq+0x354>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d917      	bls.n	800761e <SX1276OnDio0Irq+0x2de>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80075ee:	210e      	movs	r1, #14
 80075f0:	187b      	adds	r3, r7, r1
 80075f2:	2200      	movs	r2, #0
 80075f4:	5e9b      	ldrsh	r3, [r3, r2]
 80075f6:	111b      	asrs	r3, r3, #4
 80075f8:	b21b      	sxth	r3, r3
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	187b      	adds	r3, r7, r1
 80075fe:	881b      	ldrh	r3, [r3, #0]
 8007600:	18d3      	adds	r3, r2, r3
 8007602:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8007604:	4b1d      	ldr	r3, [pc, #116]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007606:	2160      	movs	r1, #96	; 0x60
 8007608:	565b      	ldrsb	r3, [r3, r1]
 800760a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800760c:	18d3      	adds	r3, r2, r3
 800760e:	b29b      	uxth	r3, r3
 8007610:	3b9d      	subs	r3, #157	; 0x9d
 8007612:	b29b      	uxth	r3, r3
 8007614:	b219      	sxth	r1, r3
 8007616:	4b19      	ldr	r3, [pc, #100]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007618:	2262      	movs	r2, #98	; 0x62
 800761a:	5299      	strh	r1, [r3, r2]
 800761c:	e04d      	b.n	80076ba <SX1276OnDio0Irq+0x37a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800761e:	210e      	movs	r1, #14
 8007620:	187b      	adds	r3, r7, r1
 8007622:	2200      	movs	r2, #0
 8007624:	5e9b      	ldrsh	r3, [r3, r2]
 8007626:	111b      	asrs	r3, r3, #4
 8007628:	b21b      	sxth	r3, r3
 800762a:	b29a      	uxth	r2, r3
 800762c:	187b      	adds	r3, r7, r1
 800762e:	881b      	ldrh	r3, [r3, #0]
 8007630:	18d3      	adds	r3, r2, r3
 8007632:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8007634:	4b11      	ldr	r3, [pc, #68]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007636:	2160      	movs	r1, #96	; 0x60
 8007638:	565b      	ldrsb	r3, [r3, r1]
 800763a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800763c:	18d3      	adds	r3, r2, r3
 800763e:	b29b      	uxth	r3, r3
 8007640:	3ba4      	subs	r3, #164	; 0xa4
 8007642:	b29b      	uxth	r3, r3
 8007644:	b219      	sxth	r1, r3
 8007646:	4b0d      	ldr	r3, [pc, #52]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007648:	2262      	movs	r2, #98	; 0x62
 800764a:	5299      	strh	r1, [r3, r2]
 800764c:	e035      	b.n	80076ba <SX1276OnDio0Irq+0x37a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800764e:	4b0b      	ldr	r3, [pc, #44]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	4a10      	ldr	r2, [pc, #64]	; (8007694 <SX1276OnDio0Irq+0x354>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d91f      	bls.n	8007698 <SX1276OnDio0Irq+0x358>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8007658:	210e      	movs	r1, #14
 800765a:	187b      	adds	r3, r7, r1
 800765c:	2200      	movs	r2, #0
 800765e:	5e9b      	ldrsh	r3, [r3, r2]
 8007660:	111b      	asrs	r3, r3, #4
 8007662:	b21b      	sxth	r3, r3
 8007664:	b29a      	uxth	r2, r3
 8007666:	187b      	adds	r3, r7, r1
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	18d3      	adds	r3, r2, r3
 800766c:	b29b      	uxth	r3, r3
 800766e:	3b9d      	subs	r3, #157	; 0x9d
 8007670:	b29b      	uxth	r3, r3
 8007672:	b219      	sxth	r1, r3
 8007674:	4b01      	ldr	r3, [pc, #4]	; (800767c <SX1276OnDio0Irq+0x33c>)
 8007676:	2262      	movs	r2, #98	; 0x62
 8007678:	5299      	strh	r1, [r3, r2]
 800767a:	e01e      	b.n	80076ba <SX1276OnDio0Irq+0x37a>
 800767c:	200015c0 	.word	0x200015c0
 8007680:	20001628 	.word	0x20001628
 8007684:	200015a8 	.word	0x200015a8
 8007688:	20000420 	.word	0x20000420
 800768c:	200015fa 	.word	0x200015fa
 8007690:	20000424 	.word	0x20000424
 8007694:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8007698:	210e      	movs	r1, #14
 800769a:	187b      	adds	r3, r7, r1
 800769c:	2200      	movs	r2, #0
 800769e:	5e9b      	ldrsh	r3, [r3, r2]
 80076a0:	111b      	asrs	r3, r3, #4
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	187b      	adds	r3, r7, r1
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	18d3      	adds	r3, r2, r3
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3ba4      	subs	r3, #164	; 0xa4
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	b219      	sxth	r1, r3
 80076b4:	4b34      	ldr	r3, [pc, #208]	; (8007788 <SX1276OnDio0Irq+0x448>)
 80076b6:	2262      	movs	r2, #98	; 0x62
 80076b8:	5299      	strh	r1, [r3, r2]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80076ba:	2013      	movs	r0, #19
 80076bc:	f7ff fc70 	bl	8006fa0 <SX1276Read>
 80076c0:	0003      	movs	r3, r0
 80076c2:	0019      	movs	r1, r3
 80076c4:	4b30      	ldr	r3, [pc, #192]	; (8007788 <SX1276OnDio0Irq+0x448>)
 80076c6:	2264      	movs	r2, #100	; 0x64
 80076c8:	5499      	strb	r1, [r3, r2]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80076ca:	2010      	movs	r0, #16
 80076cc:	f7ff fc68 	bl	8006fa0 <SX1276Read>
 80076d0:	0003      	movs	r3, r0
 80076d2:	0019      	movs	r1, r3
 80076d4:	200d      	movs	r0, #13
 80076d6:	f7ff fc4f 	bl	8006f78 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80076da:	4b2b      	ldr	r3, [pc, #172]	; (8007788 <SX1276OnDio0Irq+0x448>)
 80076dc:	2264      	movs	r2, #100	; 0x64
 80076de:	5c9a      	ldrb	r2, [r3, r2]
 80076e0:	4b2a      	ldr	r3, [pc, #168]	; (800778c <SX1276OnDio0Irq+0x44c>)
 80076e2:	0011      	movs	r1, r2
 80076e4:	0018      	movs	r0, r3
 80076e6:	f7ff fd07 	bl	80070f8 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <SX1276OnDio0Irq+0x448>)
 80076ec:	2256      	movs	r2, #86	; 0x56
 80076ee:	5c9b      	ldrb	r3, [r3, r2]
 80076f0:	2201      	movs	r2, #1
 80076f2:	4053      	eors	r3, r2
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <SX1276OnDio0Irq+0x3c0>
                        SX1276.Settings.State = RF_IDLE;
 80076fa:	4b23      	ldr	r3, [pc, #140]	; (8007788 <SX1276OnDio0Irq+0x448>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	711a      	strb	r2, [r3, #4]
                    TimerStop( &RxTimeoutTimer );
 8007700:	4b23      	ldr	r3, [pc, #140]	; (8007790 <SX1276OnDio0Irq+0x450>)
 8007702:	0018      	movs	r0, r3
 8007704:	f011 fe2c 	bl	8019360 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8007708:	4b22      	ldr	r3, [pc, #136]	; (8007794 <SX1276OnDio0Irq+0x454>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d017      	beq.n	8007740 <SX1276OnDio0Irq+0x400>
 8007710:	4b20      	ldr	r3, [pc, #128]	; (8007794 <SX1276OnDio0Irq+0x454>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d012      	beq.n	8007740 <SX1276OnDio0Irq+0x400>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800771a:	4b1e      	ldr	r3, [pc, #120]	; (8007794 <SX1276OnDio0Irq+0x454>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689c      	ldr	r4, [r3, #8]
 8007720:	4b19      	ldr	r3, [pc, #100]	; (8007788 <SX1276OnDio0Irq+0x448>)
 8007722:	2264      	movs	r2, #100	; 0x64
 8007724:	5c9b      	ldrb	r3, [r3, r2]
 8007726:	b299      	uxth	r1, r3
 8007728:	4b17      	ldr	r3, [pc, #92]	; (8007788 <SX1276OnDio0Irq+0x448>)
 800772a:	2262      	movs	r2, #98	; 0x62
 800772c:	5e9d      	ldrsh	r5, [r3, r2]
 800772e:	4b16      	ldr	r3, [pc, #88]	; (8007788 <SX1276OnDio0Irq+0x448>)
 8007730:	2260      	movs	r2, #96	; 0x60
 8007732:	569b      	ldrsb	r3, [r3, r2]
 8007734:	4815      	ldr	r0, [pc, #84]	; (800778c <SX1276OnDio0Irq+0x44c>)
 8007736:	002a      	movs	r2, r5
 8007738:	47a0      	blx	r4
                break;
 800773a:	e001      	b.n	8007740 <SX1276OnDio0Irq+0x400>
                        break;
 800773c:	46c0      	nop			; (mov r8, r8)
 800773e:	e01f      	b.n	8007780 <SX1276OnDio0Irq+0x440>
                break;
 8007740:	46c0      	nop			; (mov r8, r8)
            break;
 8007742:	e01d      	b.n	8007780 <SX1276OnDio0Irq+0x440>
            TimerStop( &TxTimeoutTimer );
 8007744:	4b14      	ldr	r3, [pc, #80]	; (8007798 <SX1276OnDio0Irq+0x458>)
 8007746:	0018      	movs	r0, r3
 8007748:	f011 fe0a 	bl	8019360 <TimerStop>
            switch( SX1276.Settings.Modem )
 800774c:	4b0e      	ldr	r3, [pc, #56]	; (8007788 <SX1276OnDio0Irq+0x448>)
 800774e:	795b      	ldrb	r3, [r3, #5]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d103      	bne.n	800775c <SX1276OnDio0Irq+0x41c>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8007754:	2108      	movs	r1, #8
 8007756:	2012      	movs	r0, #18
 8007758:	f7ff fc0e 	bl	8006f78 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800775c:	4b0a      	ldr	r3, [pc, #40]	; (8007788 <SX1276OnDio0Irq+0x448>)
 800775e:	2200      	movs	r2, #0
 8007760:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8007762:	4b0c      	ldr	r3, [pc, #48]	; (8007794 <SX1276OnDio0Irq+0x454>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d008      	beq.n	800777c <SX1276OnDio0Irq+0x43c>
 800776a:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <SX1276OnDio0Irq+0x454>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <SX1276OnDio0Irq+0x43c>
                    RadioEvents->TxDone( );
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <SX1276OnDio0Irq+0x454>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4798      	blx	r3
                break;
 800777c:	46c0      	nop			; (mov r8, r8)
            break;
 800777e:	46c0      	nop			; (mov r8, r8)
    }
}
 8007780:	46c0      	nop			; (mov r8, r8)
 8007782:	46bd      	mov	sp, r7
 8007784:	b004      	add	sp, #16
 8007786:	bdb0      	pop	{r4, r5, r7, pc}
 8007788:	200015c0 	.word	0x200015c0
 800778c:	20000424 	.word	0x20000424
 8007790:	20001628 	.word	0x20001628
 8007794:	20000420 	.word	0x20000420
 8007798:	20001590 	.word	0x20001590

0800779c <SX1276OnDio1Irq>:

void SX1276OnDio1Irq( void* context )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80077a4:	4b63      	ldr	r3, [pc, #396]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80077a6:	791b      	ldrb	r3, [r3, #4]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d003      	beq.n	80077b4 <SX1276OnDio1Irq+0x18>
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d100      	bne.n	80077b2 <SX1276OnDio1Irq+0x16>
 80077b0:	e07c      	b.n	80078ac <SX1276OnDio1Irq+0x110>
            default:
                break;
            }
            break;
        default:
            break;
 80077b2:	e0ba      	b.n	800792a <SX1276OnDio1Irq+0x18e>
            switch( SX1276.Settings.Modem )
 80077b4:	4b5f      	ldr	r3, [pc, #380]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80077b6:	795b      	ldrb	r3, [r3, #5]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <SX1276OnDio1Irq+0x26>
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d05b      	beq.n	8007878 <SX1276OnDio1Irq+0xdc>
                break;
 80077c0:	e073      	b.n	80078aa <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutSyncWord );
 80077c2:	4b5d      	ldr	r3, [pc, #372]	; (8007938 <SX1276OnDio1Irq+0x19c>)
 80077c4:	0018      	movs	r0, r3
 80077c6:	f011 fdcb 	bl	8019360 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80077ca:	4b5a      	ldr	r3, [pc, #360]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80077cc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d118      	bne.n	8007804 <SX1276OnDio1Irq+0x68>
 80077d2:	4b58      	ldr	r3, [pc, #352]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80077d4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d114      	bne.n	8007804 <SX1276OnDio1Irq+0x68>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80077da:	4b56      	ldr	r3, [pc, #344]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80077dc:	2222      	movs	r2, #34	; 0x22
 80077de:	5c9b      	ldrb	r3, [r3, r2]
 80077e0:	2201      	movs	r2, #1
 80077e2:	4053      	eors	r3, r2
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <SX1276OnDio1Irq+0x5a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80077ea:	4b54      	ldr	r3, [pc, #336]	; (800793c <SX1276OnDio1Irq+0x1a0>)
 80077ec:	2101      	movs	r1, #1
 80077ee:	0018      	movs	r0, r3
 80077f0:	f7ff fc82 	bl	80070f8 <SX1276ReadFifo>
 80077f4:	e006      	b.n	8007804 <SX1276OnDio1Irq+0x68>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80077f6:	2032      	movs	r0, #50	; 0x32
 80077f8:	f7ff fbd2 	bl	8006fa0 <SX1276Read>
 80077fc:	0003      	movs	r3, r0
 80077fe:	b29a      	uxth	r2, r3
 8007800:	4b4c      	ldr	r3, [pc, #304]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007802:	875a      	strh	r2, [r3, #58]	; 0x3a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8007804:	4b4b      	ldr	r3, [pc, #300]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007806:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007808:	001a      	movs	r2, r3
 800780a:	4b4a      	ldr	r3, [pc, #296]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800780c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	4a48      	ldr	r2, [pc, #288]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007812:	213e      	movs	r1, #62	; 0x3e
 8007814:	5c52      	ldrb	r2, [r2, r1]
 8007816:	4293      	cmp	r3, r2
 8007818:	db19      	blt.n	800784e <SX1276OnDio1Irq+0xb2>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800781a:	4b46      	ldr	r3, [pc, #280]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800781c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800781e:	001a      	movs	r2, r3
 8007820:	4b47      	ldr	r3, [pc, #284]	; (8007940 <SX1276OnDio1Irq+0x1a4>)
 8007822:	18d0      	adds	r0, r2, r3
 8007824:	4b43      	ldr	r3, [pc, #268]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007826:	223e      	movs	r2, #62	; 0x3e
 8007828:	5c9b      	ldrb	r3, [r3, r2]
 800782a:	3b01      	subs	r3, #1
 800782c:	b2db      	uxtb	r3, r3
 800782e:	0019      	movs	r1, r3
 8007830:	f7ff fc62 	bl	80070f8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8007834:	4b3f      	ldr	r3, [pc, #252]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007836:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8007838:	4b3e      	ldr	r3, [pc, #248]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800783a:	213e      	movs	r1, #62	; 0x3e
 800783c:	5c5b      	ldrb	r3, [r3, r1]
 800783e:	b29b      	uxth	r3, r3
 8007840:	18d3      	adds	r3, r2, r3
 8007842:	b29b      	uxth	r3, r3
 8007844:	3b01      	subs	r3, #1
 8007846:	b29a      	uxth	r2, r3
 8007848:	4b3a      	ldr	r3, [pc, #232]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800784a:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 800784c:	e02d      	b.n	80078aa <SX1276OnDio1Irq+0x10e>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800784e:	4b39      	ldr	r3, [pc, #228]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007850:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007852:	001a      	movs	r2, r3
 8007854:	4b3a      	ldr	r3, [pc, #232]	; (8007940 <SX1276OnDio1Irq+0x1a4>)
 8007856:	18d0      	adds	r0, r2, r3
 8007858:	4b36      	ldr	r3, [pc, #216]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800785a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800785c:	b2da      	uxtb	r2, r3
 800785e:	4b35      	ldr	r3, [pc, #212]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007860:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007862:	b2db      	uxtb	r3, r3
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	b2db      	uxtb	r3, r3
 8007868:	0019      	movs	r1, r3
 800786a:	f7ff fc45 	bl	80070f8 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800786e:	4b31      	ldr	r3, [pc, #196]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007870:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8007872:	4b30      	ldr	r3, [pc, #192]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007874:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8007876:	e018      	b.n	80078aa <SX1276OnDio1Irq+0x10e>
                TimerStop( &RxTimeoutTimer );
 8007878:	4b32      	ldr	r3, [pc, #200]	; (8007944 <SX1276OnDio1Irq+0x1a8>)
 800787a:	0018      	movs	r0, r3
 800787c:	f011 fd70 	bl	8019360 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8007880:	2180      	movs	r1, #128	; 0x80
 8007882:	2012      	movs	r0, #18
 8007884:	f7ff fb78 	bl	8006f78 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8007888:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800788a:	2200      	movs	r2, #0
 800788c:	711a      	strb	r2, [r3, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800788e:	4b2e      	ldr	r3, [pc, #184]	; (8007948 <SX1276OnDio1Irq+0x1ac>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d008      	beq.n	80078a8 <SX1276OnDio1Irq+0x10c>
 8007896:	4b2c      	ldr	r3, [pc, #176]	; (8007948 <SX1276OnDio1Irq+0x1ac>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d003      	beq.n	80078a8 <SX1276OnDio1Irq+0x10c>
                    RadioEvents->RxTimeout( );
 80078a0:	4b29      	ldr	r3, [pc, #164]	; (8007948 <SX1276OnDio1Irq+0x1ac>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	4798      	blx	r3
                break;
 80078a8:	46c0      	nop			; (mov r8, r8)
            break;
 80078aa:	e03e      	b.n	800792a <SX1276OnDio1Irq+0x18e>
            switch( SX1276.Settings.Modem )
 80078ac:	4b21      	ldr	r3, [pc, #132]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078ae:	795b      	ldrb	r3, [r3, #5]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <SX1276OnDio1Irq+0x11e>
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d036      	beq.n	8007926 <SX1276OnDio1Irq+0x18a>
                break;
 80078b8:	e036      	b.n	8007928 <SX1276OnDio1Irq+0x18c>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80078ba:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078bc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80078be:	001a      	movs	r2, r3
 80078c0:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078c8:	213f      	movs	r1, #63	; 0x3f
 80078ca:	5c52      	ldrb	r2, [r2, r1]
 80078cc:	4293      	cmp	r3, r2
 80078ce:	dd15      	ble.n	80078fc <SX1276OnDio1Irq+0x160>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80078d0:	4b18      	ldr	r3, [pc, #96]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078d2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80078d4:	001a      	movs	r2, r3
 80078d6:	4b1a      	ldr	r3, [pc, #104]	; (8007940 <SX1276OnDio1Irq+0x1a4>)
 80078d8:	18d0      	adds	r0, r2, r3
 80078da:	4b16      	ldr	r3, [pc, #88]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078dc:	223f      	movs	r2, #63	; 0x3f
 80078de:	5c9b      	ldrb	r3, [r3, r2]
 80078e0:	0019      	movs	r1, r3
 80078e2:	f7ff fbf7 	bl	80070d4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80078e6:	4b13      	ldr	r3, [pc, #76]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078e8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80078ea:	4b12      	ldr	r3, [pc, #72]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078ec:	213f      	movs	r1, #63	; 0x3f
 80078ee:	5c5b      	ldrb	r3, [r3, r1]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	18d3      	adds	r3, r2, r3
 80078f4:	b29a      	uxth	r2, r3
 80078f6:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078f8:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 80078fa:	e015      	b.n	8007928 <SX1276OnDio1Irq+0x18c>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80078fc:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <SX1276OnDio1Irq+0x198>)
 80078fe:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007900:	001a      	movs	r2, r3
 8007902:	4b0f      	ldr	r3, [pc, #60]	; (8007940 <SX1276OnDio1Irq+0x1a4>)
 8007904:	18d0      	adds	r0, r2, r3
 8007906:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007908:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800790a:	b2da      	uxtb	r2, r3
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800790e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007910:	b2db      	uxtb	r3, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	b2db      	uxtb	r3, r3
 8007916:	0019      	movs	r1, r3
 8007918:	f7ff fbdc 	bl	80070d4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <SX1276OnDio1Irq+0x198>)
 800791e:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <SX1276OnDio1Irq+0x198>)
 8007922:	879a      	strh	r2, [r3, #60]	; 0x3c
                break;
 8007924:	e000      	b.n	8007928 <SX1276OnDio1Irq+0x18c>
                break;
 8007926:	46c0      	nop			; (mov r8, r8)
            break;
 8007928:	46c0      	nop			; (mov r8, r8)
    }
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	46bd      	mov	sp, r7
 800792e:	b002      	add	sp, #8
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	200015c0 	.word	0x200015c0
 8007938:	200015a8 	.word	0x200015a8
 800793c:	200015fa 	.word	0x200015fa
 8007940:	20000424 	.word	0x20000424
 8007944:	20001628 	.word	0x20001628
 8007948:	20000420 	.word	0x20000420

0800794c <SX1276OnDio2Irq>:

void SX1276OnDio2Irq( void* context )
{
 800794c:	b590      	push	{r4, r7, lr}
 800794e:	b087      	sub	sp, #28
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
    uint32_t afcChannel = 0;
 8007954:	2300      	movs	r3, #0
 8007956:	617b      	str	r3, [r7, #20]

    switch( SX1276.Settings.State )
 8007958:	4b5c      	ldr	r3, [pc, #368]	; (8007acc <SX1276OnDio2Irq+0x180>)
 800795a:	791b      	ldrb	r3, [r3, #4]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d003      	beq.n	8007968 <SX1276OnDio2Irq+0x1c>
 8007960:	2b02      	cmp	r3, #2
 8007962:	d100      	bne.n	8007966 <SX1276OnDio2Irq+0x1a>
 8007964:	e083      	b.n	8007a6e <SX1276OnDio2Irq+0x122>
            default:
                break;
            }
            break;
        default:
            break;
 8007966:	e0ad      	b.n	8007ac4 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8007968:	4b58      	ldr	r3, [pc, #352]	; (8007acc <SX1276OnDio2Irq+0x180>)
 800796a:	795b      	ldrb	r3, [r3, #5]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <SX1276OnDio2Irq+0x2a>
 8007970:	2b01      	cmp	r3, #1
 8007972:	d058      	beq.n	8007a26 <SX1276OnDio2Irq+0xda>
                break;
 8007974:	e07a      	b.n	8007a6c <SX1276OnDio2Irq+0x120>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8007976:	4b55      	ldr	r3, [pc, #340]	; (8007acc <SX1276OnDio2Irq+0x180>)
 8007978:	2230      	movs	r2, #48	; 0x30
 800797a:	2101      	movs	r1, #1
 800797c:	5499      	strb	r1, [r3, r2]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == false ) )
 800797e:	4b53      	ldr	r3, [pc, #332]	; (8007acc <SX1276OnDio2Irq+0x180>)
 8007980:	2230      	movs	r2, #48	; 0x30
 8007982:	5c9b      	ldrb	r3, [r3, r2]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d16e      	bne.n	8007a66 <SX1276OnDio2Irq+0x11a>
 8007988:	4b50      	ldr	r3, [pc, #320]	; (8007acc <SX1276OnDio2Irq+0x180>)
 800798a:	2231      	movs	r2, #49	; 0x31
 800798c:	5c9b      	ldrb	r3, [r3, r2]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d169      	bne.n	8007a66 <SX1276OnDio2Irq+0x11a>
                    TimerStop( &RxTimeoutSyncWord );
 8007992:	4b4f      	ldr	r3, [pc, #316]	; (8007ad0 <SX1276OnDio2Irq+0x184>)
 8007994:	0018      	movs	r0, r3
 8007996:	f011 fce3 	bl	8019360 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800799a:	4b4c      	ldr	r3, [pc, #304]	; (8007acc <SX1276OnDio2Irq+0x180>)
 800799c:	2231      	movs	r2, #49	; 0x31
 800799e:	2101      	movs	r1, #1
 80079a0:	5499      	strb	r1, [r3, r2]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80079a2:	2011      	movs	r0, #17
 80079a4:	f7ff fafc 	bl	8006fa0 <SX1276Read>
 80079a8:	0003      	movs	r3, r0
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	425b      	negs	r3, r3
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	b259      	sxtb	r1, r3
 80079b4:	4b45      	ldr	r3, [pc, #276]	; (8007acc <SX1276OnDio2Irq+0x180>)
 80079b6:	2232      	movs	r2, #50	; 0x32
 80079b8:	5499      	strb	r1, [r3, r2]
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80079ba:	201b      	movs	r0, #27
 80079bc:	f7ff faf0 	bl	8006fa0 <SX1276Read>
 80079c0:	0003      	movs	r3, r0
 80079c2:	021c      	lsls	r4, r3, #8
                                     ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80079c4:	201c      	movs	r0, #28
 80079c6:	f7ff faeb 	bl	8006fa0 <SX1276Read>
 80079ca:	0003      	movs	r3, r0
                    afcChannel = ( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80079cc:	4323      	orrs	r3, r4
 80079ce:	617b      	str	r3, [r7, #20]
                    SX_CHANNEL_TO_FREQ( afcChannel, SX1276.Settings.FskPacketHandler.AfcValue );
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	0a1b      	lsrs	r3, r3, #8
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	697a      	ldr	r2, [r7, #20]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	6939      	ldr	r1, [r7, #16]
 80079e2:	000b      	movs	r3, r1
 80079e4:	015b      	lsls	r3, r3, #5
 80079e6:	1a5b      	subs	r3, r3, r1
 80079e8:	019a      	lsls	r2, r3, #6
 80079ea:	1ad2      	subs	r2, r2, r3
 80079ec:	00d2      	lsls	r2, r2, #3
 80079ee:	1850      	adds	r0, r2, r1
 80079f0:	68f9      	ldr	r1, [r7, #12]
 80079f2:	000b      	movs	r3, r1
 80079f4:	015b      	lsls	r3, r3, #5
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	019a      	lsls	r2, r3, #6
 80079fa:	1ad2      	subs	r2, r2, r3
 80079fc:	00d2      	lsls	r2, r2, #3
 80079fe:	1853      	adds	r3, r2, r1
 8007a00:	3380      	adds	r3, #128	; 0x80
 8007a02:	0a1b      	lsrs	r3, r3, #8
 8007a04:	18c3      	adds	r3, r0, r3
 8007a06:	001a      	movs	r2, r3
 8007a08:	4b30      	ldr	r3, [pc, #192]	; (8007acc <SX1276OnDio2Irq+0x180>)
 8007a0a:	635a      	str	r2, [r3, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8007a0c:	200c      	movs	r0, #12
 8007a0e:	f7ff fac7 	bl	8006fa0 <SX1276Read>
 8007a12:	0003      	movs	r3, r0
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2207      	movs	r2, #7
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	b2d9      	uxtb	r1, r3
 8007a1e:	4b2b      	ldr	r3, [pc, #172]	; (8007acc <SX1276OnDio2Irq+0x180>)
 8007a20:	2238      	movs	r2, #56	; 0x38
 8007a22:	5499      	strb	r1, [r3, r2]
                break;
 8007a24:	e01f      	b.n	8007a66 <SX1276OnDio2Irq+0x11a>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007a26:	4b29      	ldr	r3, [pc, #164]	; (8007acc <SX1276OnDio2Irq+0x180>)
 8007a28:	2253      	movs	r2, #83	; 0x53
 8007a2a:	5c9b      	ldrb	r3, [r3, r2]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01c      	beq.n	8007a6a <SX1276OnDio2Irq+0x11e>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007a30:	2102      	movs	r1, #2
 8007a32:	2012      	movs	r0, #18
 8007a34:	f7ff faa0 	bl	8006f78 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007a38:	4b26      	ldr	r3, [pc, #152]	; (8007ad4 <SX1276OnDio2Irq+0x188>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d014      	beq.n	8007a6a <SX1276OnDio2Irq+0x11e>
 8007a40:	4b24      	ldr	r3, [pc, #144]	; (8007ad4 <SX1276OnDio2Irq+0x188>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00f      	beq.n	8007a6a <SX1276OnDio2Irq+0x11e>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007a4a:	4b22      	ldr	r3, [pc, #136]	; (8007ad4 <SX1276OnDio2Irq+0x188>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	695c      	ldr	r4, [r3, #20]
 8007a50:	201c      	movs	r0, #28
 8007a52:	f7ff faa5 	bl	8006fa0 <SX1276Read>
 8007a56:	0003      	movs	r3, r0
 8007a58:	001a      	movs	r2, r3
 8007a5a:	233f      	movs	r3, #63	; 0x3f
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	0018      	movs	r0, r3
 8007a62:	47a0      	blx	r4
                break;
 8007a64:	e001      	b.n	8007a6a <SX1276OnDio2Irq+0x11e>
                break;
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	e02c      	b.n	8007ac4 <SX1276OnDio2Irq+0x178>
                break;
 8007a6a:	46c0      	nop			; (mov r8, r8)
            break;
 8007a6c:	e02a      	b.n	8007ac4 <SX1276OnDio2Irq+0x178>
            switch( SX1276.Settings.Modem )
 8007a6e:	4b17      	ldr	r3, [pc, #92]	; (8007acc <SX1276OnDio2Irq+0x180>)
 8007a70:	795b      	ldrb	r3, [r3, #5]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d022      	beq.n	8007abc <SX1276OnDio2Irq+0x170>
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d000      	beq.n	8007a7c <SX1276OnDio2Irq+0x130>
                break;
 8007a7a:	e022      	b.n	8007ac2 <SX1276OnDio2Irq+0x176>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8007a7c:	4b13      	ldr	r3, [pc, #76]	; (8007acc <SX1276OnDio2Irq+0x180>)
 8007a7e:	2253      	movs	r2, #83	; 0x53
 8007a80:	5c9b      	ldrb	r3, [r3, r2]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01c      	beq.n	8007ac0 <SX1276OnDio2Irq+0x174>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8007a86:	2102      	movs	r1, #2
 8007a88:	2012      	movs	r0, #18
 8007a8a:	f7ff fa75 	bl	8006f78 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8007a8e:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <SX1276OnDio2Irq+0x188>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d014      	beq.n	8007ac0 <SX1276OnDio2Irq+0x174>
 8007a96:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <SX1276OnDio2Irq+0x188>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00f      	beq.n	8007ac0 <SX1276OnDio2Irq+0x174>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	; (8007ad4 <SX1276OnDio2Irq+0x188>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695c      	ldr	r4, [r3, #20]
 8007aa6:	201c      	movs	r0, #28
 8007aa8:	f7ff fa7a 	bl	8006fa0 <SX1276Read>
 8007aac:	0003      	movs	r3, r0
 8007aae:	001a      	movs	r2, r3
 8007ab0:	233f      	movs	r3, #63	; 0x3f
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	47a0      	blx	r4
                break;
 8007aba:	e001      	b.n	8007ac0 <SX1276OnDio2Irq+0x174>
                break;
 8007abc:	46c0      	nop			; (mov r8, r8)
 8007abe:	e000      	b.n	8007ac2 <SX1276OnDio2Irq+0x176>
                break;
 8007ac0:	46c0      	nop			; (mov r8, r8)
            break;
 8007ac2:	46c0      	nop			; (mov r8, r8)
    }
}
 8007ac4:	46c0      	nop			; (mov r8, r8)
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b007      	add	sp, #28
 8007aca:	bd90      	pop	{r4, r7, pc}
 8007acc:	200015c0 	.word	0x200015c0
 8007ad0:	200015a8 	.word	0x200015a8
 8007ad4:	20000420 	.word	0x20000420

08007ad8 <SX1276OnDio3Irq>:

void SX1276OnDio3Irq( void* context )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b082      	sub	sp, #8
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007ae0:	4b1e      	ldr	r3, [pc, #120]	; (8007b5c <SX1276OnDio3Irq+0x84>)
 8007ae2:	795b      	ldrb	r3, [r3, #5]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d031      	beq.n	8007b4c <SX1276OnDio3Irq+0x74>
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d000      	beq.n	8007aee <SX1276OnDio3Irq+0x16>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8007aec:	e031      	b.n	8007b52 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8007aee:	2012      	movs	r0, #18
 8007af0:	f7ff fa56 	bl	8006fa0 <SX1276Read>
 8007af4:	0003      	movs	r3, r0
 8007af6:	001a      	movs	r2, r3
 8007af8:	2301      	movs	r3, #1
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	d112      	bne.n	8007b26 <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8007b00:	2105      	movs	r1, #5
 8007b02:	2012      	movs	r0, #18
 8007b04:	f7ff fa38 	bl	8006f78 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007b08:	4b15      	ldr	r3, [pc, #84]	; (8007b60 <SX1276OnDio3Irq+0x88>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d01f      	beq.n	8007b50 <SX1276OnDio3Irq+0x78>
 8007b10:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <SX1276OnDio3Irq+0x88>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01a      	beq.n	8007b50 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8007b1a:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <SX1276OnDio3Irq+0x88>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699b      	ldr	r3, [r3, #24]
 8007b20:	2001      	movs	r0, #1
 8007b22:	4798      	blx	r3
        break;
 8007b24:	e014      	b.n	8007b50 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8007b26:	2104      	movs	r1, #4
 8007b28:	2012      	movs	r0, #18
 8007b2a:	f7ff fa25 	bl	8006f78 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8007b2e:	4b0c      	ldr	r3, [pc, #48]	; (8007b60 <SX1276OnDio3Irq+0x88>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <SX1276OnDio3Irq+0x78>
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <SX1276OnDio3Irq+0x88>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8007b40:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <SX1276OnDio3Irq+0x88>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	2000      	movs	r0, #0
 8007b48:	4798      	blx	r3
        break;
 8007b4a:	e001      	b.n	8007b50 <SX1276OnDio3Irq+0x78>
        break;
 8007b4c:	46c0      	nop			; (mov r8, r8)
 8007b4e:	e000      	b.n	8007b52 <SX1276OnDio3Irq+0x7a>
        break;
 8007b50:	46c0      	nop			; (mov r8, r8)
    }
}
 8007b52:	46c0      	nop			; (mov r8, r8)
 8007b54:	46bd      	mov	sp, r7
 8007b56:	b002      	add	sp, #8
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	46c0      	nop			; (mov r8, r8)
 8007b5c:	200015c0 	.word	0x200015c0
 8007b60:	20000420 	.word	0x20000420

08007b64 <SX1276OnDio4Irq>:

void SX1276OnDio4Irq( void* context )
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <SX1276OnDio4Irq+0x38>)
 8007b6e:	795b      	ldrb	r3, [r3, #5]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <SX1276OnDio4Irq+0x16>
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d00a      	beq.n	8007b8e <SX1276OnDio4Irq+0x2a>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8007b78:	e00c      	b.n	8007b94 <SX1276OnDio4Irq+0x30>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8007b7a:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <SX1276OnDio4Irq+0x38>)
 8007b7c:	2230      	movs	r2, #48	; 0x30
 8007b7e:	5c9b      	ldrb	r3, [r3, r2]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d106      	bne.n	8007b92 <SX1276OnDio4Irq+0x2e>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8007b84:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <SX1276OnDio4Irq+0x38>)
 8007b86:	2230      	movs	r2, #48	; 0x30
 8007b88:	2101      	movs	r1, #1
 8007b8a:	5499      	strb	r1, [r3, r2]
        break;
 8007b8c:	e001      	b.n	8007b92 <SX1276OnDio4Irq+0x2e>
        break;
 8007b8e:	46c0      	nop			; (mov r8, r8)
 8007b90:	e000      	b.n	8007b94 <SX1276OnDio4Irq+0x30>
        break;
 8007b92:	46c0      	nop			; (mov r8, r8)
    }
}
 8007b94:	46c0      	nop			; (mov r8, r8)
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b002      	add	sp, #8
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	200015c0 	.word	0x200015c0

08007ba0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007ba6:	1dfb      	adds	r3, r7, #7
 8007ba8:	2200      	movs	r2, #0
 8007baa:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007bac:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <HAL_Init+0x3c>)
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <HAL_Init+0x3c>)
 8007bb2:	2102      	movs	r1, #2
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007bb8:	2003      	movs	r0, #3
 8007bba:	f7fc fb34 	bl	8004226 <HAL_InitTick>
 8007bbe:	1e03      	subs	r3, r0, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8007bc2:	1dfb      	adds	r3, r7, #7
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	e001      	b.n	8007bce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007bca:	f7fc fb41 	bl	8004250 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007bce:	1dfb      	adds	r3, r7, #7
 8007bd0:	781b      	ldrb	r3, [r3, #0]
}
 8007bd2:	0018      	movs	r0, r3
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	b002      	add	sp, #8
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	46c0      	nop			; (mov r8, r8)
 8007bdc:	40022000 	.word	0x40022000

08007be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
  uwTick++;
 8007be4:	4b03      	ldr	r3, [pc, #12]	; (8007bf4 <HAL_IncTick+0x14>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	1c5a      	adds	r2, r3, #1
 8007bea:	4b02      	ldr	r3, [pc, #8]	; (8007bf4 <HAL_IncTick+0x14>)
 8007bec:	601a      	str	r2, [r3, #0]
}
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	20001640 	.word	0x20001640

08007bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8007bfc:	4b02      	ldr	r3, [pc, #8]	; (8007c08 <HAL_GetTick+0x10>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	46c0      	nop			; (mov r8, r8)
 8007c08:	20001640 	.word	0x20001640

08007c0c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007c10:	4b04      	ldr	r3, [pc, #16]	; (8007c24 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8007c12:	685a      	ldr	r2, [r3, #4]
 8007c14:	4b03      	ldr	r3, [pc, #12]	; (8007c24 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8007c16:	2101      	movs	r1, #1
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	605a      	str	r2, [r3, #4]
}
 8007c1c:	46c0      	nop			; (mov r8, r8)
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}
 8007c22:	46c0      	nop			; (mov r8, r8)
 8007c24:	40015800 	.word	0x40015800

08007c28 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007c2c:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	4b03      	ldr	r3, [pc, #12]	; (8007c40 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8007c32:	2102      	movs	r1, #2
 8007c34:	430a      	orrs	r2, r1
 8007c36:	605a      	str	r2, [r3, #4]
}
 8007c38:	46c0      	nop			; (mov r8, r8)
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	bd80      	pop	{r7, pc}
 8007c3e:	46c0      	nop			; (mov r8, r8)
 8007c40:	40015800 	.word	0x40015800

08007c44 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8007c48:	4b04      	ldr	r3, [pc, #16]	; (8007c5c <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8007c4a:	685a      	ldr	r2, [r3, #4]
 8007c4c:	4b03      	ldr	r3, [pc, #12]	; (8007c5c <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8007c4e:	2104      	movs	r1, #4
 8007c50:	430a      	orrs	r2, r1
 8007c52:	605a      	str	r2, [r3, #4]
}
 8007c54:	46c0      	nop			; (mov r8, r8)
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	40015800 	.word	0x40015800

08007c60 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e159      	b.n	8007f26 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2250      	movs	r2, #80	; 0x50
 8007c84:	2100      	movs	r1, #0
 8007c86:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	f000 f95c 	bl	8007f48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c94:	2210      	movs	r2, #16
 8007c96:	4013      	ands	r3, r2
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d005      	beq.n	8007ca8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8007ca6:	d00b      	beq.n	8007cc0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cac:	2210      	movs	r2, #16
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2250      	movs	r2, #80	; 0x50
 8007cb8:	2100      	movs	r1, #0
 8007cba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e132      	b.n	8007f26 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc4:	4a9a      	ldr	r2, [pc, #616]	; (8007f30 <HAL_ADC_Init+0x2d0>)
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2202      	movs	r2, #2
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	4013      	ands	r3, r2
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d108      	bne.n	8007cf0 <HAL_ADC_Init+0x90>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d101      	bne.n	8007cf0 <HAL_ADC_Init+0x90>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <HAL_ADC_Init+0x92>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d149      	bne.n	8007d8a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	23c0      	movs	r3, #192	; 0xc0
 8007cfc:	061b      	lsls	r3, r3, #24
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d00b      	beq.n	8007d1a <HAL_ADC_Init+0xba>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	2380      	movs	r3, #128	; 0x80
 8007d08:	05db      	lsls	r3, r3, #23
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d005      	beq.n	8007d1a <HAL_ADC_Init+0xba>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	2380      	movs	r3, #128	; 0x80
 8007d14:	061b      	lsls	r3, r3, #24
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d111      	bne.n	8007d3e <HAL_ADC_Init+0xde>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691a      	ldr	r2, [r3, #16]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	0092      	lsls	r2, r2, #2
 8007d26:	0892      	lsrs	r2, r2, #2
 8007d28:	611a      	str	r2, [r3, #16]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6919      	ldr	r1, [r3, #16]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	611a      	str	r2, [r3, #16]
 8007d3c:	e014      	b.n	8007d68 <HAL_ADC_Init+0x108>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	691a      	ldr	r2, [r3, #16]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	0092      	lsls	r2, r2, #2
 8007d4a:	0892      	lsrs	r2, r2, #2
 8007d4c:	611a      	str	r2, [r3, #16]
 8007d4e:	4b79      	ldr	r3, [pc, #484]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b78      	ldr	r3, [pc, #480]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007d54:	4978      	ldr	r1, [pc, #480]	; (8007f38 <HAL_ADC_Init+0x2d8>)
 8007d56:	400a      	ands	r2, r1
 8007d58:	601a      	str	r2, [r3, #0]
 8007d5a:	4b76      	ldr	r3, [pc, #472]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	4b74      	ldr	r3, [pc, #464]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007d64:	430a      	orrs	r2, r1
 8007d66:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2118      	movs	r1, #24
 8007d74:	438a      	bics	r2, r1
 8007d76:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68d9      	ldr	r1, [r3, #12]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	430a      	orrs	r2, r1
 8007d88:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8007d8a:	4b6a      	ldr	r3, [pc, #424]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4b69      	ldr	r3, [pc, #420]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007d90:	496a      	ldr	r1, [pc, #424]	; (8007f3c <HAL_ADC_Init+0x2dc>)
 8007d92:	400a      	ands	r2, r1
 8007d94:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8007d96:	4b67      	ldr	r3, [pc, #412]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007d98:	6819      	ldr	r1, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d9e:	065a      	lsls	r2, r3, #25
 8007da0:	4b64      	ldr	r3, [pc, #400]	; (8007f34 <HAL_ADC_Init+0x2d4>)
 8007da2:	430a      	orrs	r2, r1
 8007da4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689a      	ldr	r2, [r3, #8]
 8007dac:	2380      	movs	r3, #128	; 0x80
 8007dae:	055b      	lsls	r3, r3, #21
 8007db0:	4013      	ands	r3, r2
 8007db2:	d108      	bne.n	8007dc6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2180      	movs	r1, #128	; 0x80
 8007dc0:	0549      	lsls	r1, r1, #21
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	495b      	ldr	r1, [pc, #364]	; (8007f40 <HAL_ADC_Init+0x2e0>)
 8007dd2:	400a      	ands	r2, r1
 8007dd4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68d9      	ldr	r1, [r3, #12]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d101      	bne.n	8007dec <HAL_ADC_Init+0x18c>
 8007de8:	2304      	movs	r3, #4
 8007dea:	e000      	b.n	8007dee <HAL_ADC_Init+0x18e>
 8007dec:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007dee:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2020      	movs	r0, #32
 8007df4:	5c1b      	ldrb	r3, [r3, r0]
 8007df6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8007df8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	202c      	movs	r0, #44	; 0x2c
 8007dfe:	5c1b      	ldrb	r3, [r3, r0]
 8007e00:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8007e02:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8007e08:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8007e10:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8007e18:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e26:	23c2      	movs	r3, #194	; 0xc2
 8007e28:	33ff      	adds	r3, #255	; 0xff
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d00b      	beq.n	8007e46 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68d9      	ldr	r1, [r3, #12]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8007e3c:	431a      	orrs	r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2221      	movs	r2, #33	; 0x21
 8007e4a:	5c9b      	ldrb	r3, [r3, r2]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d11a      	bne.n	8007e86 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2220      	movs	r2, #32
 8007e54:	5c9b      	ldrb	r3, [r3, r2]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d109      	bne.n	8007e6e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68da      	ldr	r2, [r3, #12]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2180      	movs	r1, #128	; 0x80
 8007e66:	0249      	lsls	r1, r1, #9
 8007e68:	430a      	orrs	r2, r1
 8007e6a:	60da      	str	r2, [r3, #12]
 8007e6c:	e00b      	b.n	8007e86 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e72:	2220      	movs	r2, #32
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e7e:	2201      	movs	r2, #1
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d11f      	bne.n	8007ece <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	492a      	ldr	r1, [pc, #168]	; (8007f44 <HAL_ADC_Init+0x2e4>)
 8007e9a:	400a      	ands	r2, r1
 8007e9c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6919      	ldr	r1, [r3, #16]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007eac:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8007eb2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691a      	ldr	r2, [r3, #16]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	611a      	str	r2, [r3, #16]
 8007ecc:	e00e      	b.n	8007eec <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	4013      	ands	r3, r2
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d107      	bne.n	8007eec <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	691a      	ldr	r2, [r3, #16]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	438a      	bics	r2, r1
 8007eea:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2107      	movs	r1, #7
 8007ef8:	438a      	bics	r2, r1
 8007efa:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6959      	ldr	r1, [r3, #20]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	2203      	movs	r2, #3
 8007f1a:	4393      	bics	r3, r2
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	431a      	orrs	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	0018      	movs	r0, r3
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	b002      	add	sp, #8
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	46c0      	nop			; (mov r8, r8)
 8007f30:	fffffefd 	.word	0xfffffefd
 8007f34:	40012708 	.word	0x40012708
 8007f38:	ffc3ffff 	.word	0xffc3ffff
 8007f3c:	fdffffff 	.word	0xfdffffff
 8007f40:	fffe0219 	.word	0xfffe0219
 8007f44:	fffffc03 	.word	0xfffffc03

08007f48 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8007f50:	46c0      	nop			; (mov r8, r8)
 8007f52:	46bd      	mov	sp, r7
 8007f54:	b002      	add	sp, #8
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007f58:	b590      	push	{r4, r7, lr}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f60:	230f      	movs	r3, #15
 8007f62:	18fb      	adds	r3, r7, r3
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	2204      	movs	r2, #4
 8007f70:	4013      	ands	r3, r2
 8007f72:	d138      	bne.n	8007fe6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2250      	movs	r2, #80	; 0x50
 8007f78:	5c9b      	ldrb	r3, [r3, r2]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d101      	bne.n	8007f82 <HAL_ADC_Start+0x2a>
 8007f7e:	2302      	movs	r3, #2
 8007f80:	e038      	b.n	8007ff4 <HAL_ADC_Start+0x9c>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2250      	movs	r2, #80	; 0x50
 8007f86:	2101      	movs	r1, #1
 8007f88:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	69db      	ldr	r3, [r3, #28]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d007      	beq.n	8007fa2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8007f92:	230f      	movs	r3, #15
 8007f94:	18fc      	adds	r4, r7, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f000 f959 	bl	8008250 <ADC_Enable>
 8007f9e:	0003      	movs	r3, r0
 8007fa0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007fa2:	230f      	movs	r3, #15
 8007fa4:	18fb      	adds	r3, r7, r3
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d120      	bne.n	8007fee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb0:	4a12      	ldr	r2, [pc, #72]	; (8007ffc <HAL_ADC_Start+0xa4>)
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	2280      	movs	r2, #128	; 0x80
 8007fb6:	0052      	lsls	r2, r2, #1
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2250      	movs	r2, #80	; 0x50
 8007fc8:	2100      	movs	r1, #0
 8007fca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	221c      	movs	r2, #28
 8007fd2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2104      	movs	r1, #4
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	609a      	str	r2, [r3, #8]
 8007fe4:	e003      	b.n	8007fee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007fe6:	230f      	movs	r3, #15
 8007fe8:	18fb      	adds	r3, r7, r3
 8007fea:	2202      	movs	r2, #2
 8007fec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8007fee:	230f      	movs	r3, #15
 8007ff0:	18fb      	adds	r3, r7, r3
 8007ff2:	781b      	ldrb	r3, [r3, #0]
}
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	b005      	add	sp, #20
 8007ffa:	bd90      	pop	{r4, r7, pc}
 8007ffc:	fffff0fe 	.word	0xfffff0fe

08008000 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800800a:	2300      	movs	r3, #0
 800800c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800800e:	2300      	movs	r3, #0
 8008010:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	695b      	ldr	r3, [r3, #20]
 8008016:	2b08      	cmp	r3, #8
 8008018:	d102      	bne.n	8008020 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800801a:	2308      	movs	r3, #8
 800801c:	60fb      	str	r3, [r7, #12]
 800801e:	e014      	b.n	800804a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	2201      	movs	r2, #1
 8008028:	4013      	ands	r3, r2
 800802a:	2b01      	cmp	r3, #1
 800802c:	d10b      	bne.n	8008046 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008032:	2220      	movs	r2, #32
 8008034:	431a      	orrs	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2250      	movs	r2, #80	; 0x50
 800803e:	2100      	movs	r1, #0
 8008040:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e06c      	b.n	8008120 <HAL_ADC_PollForConversion+0x120>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8008046:	230c      	movs	r3, #12
 8008048:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800804a:	f7ff fdd5 	bl	8007bf8 <HAL_GetTick>
 800804e:	0003      	movs	r3, r0
 8008050:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008052:	e019      	b.n	8008088 <HAL_ADC_PollForConversion+0x88>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	d016      	beq.n	8008088 <HAL_ADC_PollForConversion+0x88>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d007      	beq.n	8008070 <HAL_ADC_PollForConversion+0x70>
 8008060:	f7ff fdca 	bl	8007bf8 <HAL_GetTick>
 8008064:	0002      	movs	r2, r0
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d20b      	bcs.n	8008088 <HAL_ADC_PollForConversion+0x88>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008074:	2204      	movs	r2, #4
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2250      	movs	r2, #80	; 0x50
 8008080:	2100      	movs	r1, #0
 8008082:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e04b      	b.n	8008120 <HAL_ADC_PollForConversion+0x120>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4013      	ands	r3, r2
 8008092:	d0df      	beq.n	8008054 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008098:	2280      	movs	r2, #128	; 0x80
 800809a:	0092      	lsls	r2, r2, #2
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	23c0      	movs	r3, #192	; 0xc0
 80080aa:	011b      	lsls	r3, r3, #4
 80080ac:	4013      	ands	r3, r2
 80080ae:	d12e      	bne.n	800810e <HAL_ADC_PollForConversion+0x10e>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d129      	bne.n	800810e <HAL_ADC_PollForConversion+0x10e>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2208      	movs	r2, #8
 80080c2:	4013      	ands	r3, r2
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d122      	bne.n	800810e <HAL_ADC_PollForConversion+0x10e>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	2204      	movs	r2, #4
 80080d0:	4013      	ands	r3, r2
 80080d2:	d110      	bne.n	80080f6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	685a      	ldr	r2, [r3, #4]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	210c      	movs	r1, #12
 80080e0:	438a      	bics	r2, r1
 80080e2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e8:	4a0f      	ldr	r2, [pc, #60]	; (8008128 <HAL_ADC_PollForConversion+0x128>)
 80080ea:	4013      	ands	r3, r2
 80080ec:	2201      	movs	r2, #1
 80080ee:	431a      	orrs	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	655a      	str	r2, [r3, #84]	; 0x54
 80080f4:	e00b      	b.n	800810e <HAL_ADC_PollForConversion+0x10e>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fa:	2220      	movs	r2, #32
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008106:	2201      	movs	r2, #1
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d103      	bne.n	800811e <HAL_ADC_PollForConversion+0x11e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	220c      	movs	r2, #12
 800811c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	0018      	movs	r0, r3
 8008122:	46bd      	mov	sp, r7
 8008124:	b004      	add	sp, #16
 8008126:	bd80      	pop	{r7, pc}
 8008128:	fffffefe 	.word	0xfffffefe

0800812c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800813a:	0018      	movs	r0, r3
 800813c:	46bd      	mov	sp, r7
 800813e:	b002      	add	sp, #8
 8008140:	bd80      	pop	{r7, pc}
	...

08008144 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2250      	movs	r2, #80	; 0x50
 8008152:	5c9b      	ldrb	r3, [r3, r2]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d101      	bne.n	800815c <HAL_ADC_ConfigChannel+0x18>
 8008158:	2302      	movs	r3, #2
 800815a:	e06c      	b.n	8008236 <HAL_ADC_ConfigChannel+0xf2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2250      	movs	r2, #80	; 0x50
 8008160:	2101      	movs	r1, #1
 8008162:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2204      	movs	r2, #4
 800816c:	4013      	ands	r3, r2
 800816e:	d00b      	beq.n	8008188 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008174:	2220      	movs	r2, #32
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2250      	movs	r2, #80	; 0x50
 8008180:	2100      	movs	r1, #0
 8008182:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	e056      	b.n	8008236 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a2c      	ldr	r2, [pc, #176]	; (8008240 <HAL_ADC_ConfigChannel+0xfc>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d028      	beq.n	80081e4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	035b      	lsls	r3, r3, #13
 800819e:	0b5a      	lsrs	r2, r3, #13
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	2380      	movs	r3, #128	; 0x80
 80081ae:	02db      	lsls	r3, r3, #11
 80081b0:	4013      	ands	r3, r2
 80081b2:	d009      	beq.n	80081c8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80081b4:	4b23      	ldr	r3, [pc, #140]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	4b22      	ldr	r3, [pc, #136]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 80081ba:	2180      	movs	r1, #128	; 0x80
 80081bc:	0409      	lsls	r1, r1, #16
 80081be:	430a      	orrs	r2, r1
 80081c0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80081c2:	200a      	movs	r0, #10
 80081c4:	f000 f8a4 	bl	8008310 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	029b      	lsls	r3, r3, #10
 80081d0:	4013      	ands	r3, r2
 80081d2:	d02b      	beq.n	800822c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80081d4:	4b1b      	ldr	r3, [pc, #108]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	4b1a      	ldr	r3, [pc, #104]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 80081da:	2180      	movs	r1, #128	; 0x80
 80081dc:	03c9      	lsls	r1, r1, #15
 80081de:	430a      	orrs	r2, r1
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	e023      	b.n	800822c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	035b      	lsls	r3, r3, #13
 80081f0:	0b5b      	lsrs	r3, r3, #13
 80081f2:	43d9      	mvns	r1, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	400a      	ands	r2, r1
 80081fa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	2380      	movs	r3, #128	; 0x80
 8008202:	02db      	lsls	r3, r3, #11
 8008204:	4013      	ands	r3, r2
 8008206:	d005      	beq.n	8008214 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8008208:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	4b0d      	ldr	r3, [pc, #52]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 800820e:	490e      	ldr	r1, [pc, #56]	; (8008248 <HAL_ADC_ConfigChannel+0x104>)
 8008210:	400a      	ands	r2, r1
 8008212:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	2380      	movs	r3, #128	; 0x80
 800821a:	029b      	lsls	r3, r3, #10
 800821c:	4013      	ands	r3, r2
 800821e:	d005      	beq.n	800822c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8008220:	4b08      	ldr	r3, [pc, #32]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	4b07      	ldr	r3, [pc, #28]	; (8008244 <HAL_ADC_ConfigChannel+0x100>)
 8008226:	4909      	ldr	r1, [pc, #36]	; (800824c <HAL_ADC_ConfigChannel+0x108>)
 8008228:	400a      	ands	r2, r1
 800822a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2250      	movs	r2, #80	; 0x50
 8008230:	2100      	movs	r1, #0
 8008232:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	0018      	movs	r0, r3
 8008238:	46bd      	mov	sp, r7
 800823a:	b002      	add	sp, #8
 800823c:	bd80      	pop	{r7, pc}
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	00001001 	.word	0x00001001
 8008244:	40012708 	.word	0x40012708
 8008248:	ff7fffff 	.word	0xff7fffff
 800824c:	ffbfffff 	.word	0xffbfffff

08008250 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	2203      	movs	r2, #3
 8008264:	4013      	ands	r3, r2
 8008266:	2b01      	cmp	r3, #1
 8008268:	d108      	bne.n	800827c <ADC_Enable+0x2c>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2201      	movs	r2, #1
 8008272:	4013      	ands	r3, r2
 8008274:	2b01      	cmp	r3, #1
 8008276:	d101      	bne.n	800827c <ADC_Enable+0x2c>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <ADC_Enable+0x2e>
 800827c:	2300      	movs	r3, #0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d13f      	bne.n	8008302 <ADC_Enable+0xb2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	4a20      	ldr	r2, [pc, #128]	; (800830c <ADC_Enable+0xbc>)
 800828a:	4013      	ands	r3, r2
 800828c:	d00d      	beq.n	80082aa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008292:	2210      	movs	r2, #16
 8008294:	431a      	orrs	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800829e:	2201      	movs	r2, #1
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e02c      	b.n	8008304 <ADC_Enable+0xb4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689a      	ldr	r2, [r3, #8]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2101      	movs	r1, #1
 80082b6:	430a      	orrs	r2, r1
 80082b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80082ba:	2001      	movs	r0, #1
 80082bc:	f000 f828 	bl	8008310 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80082c0:	f7ff fc9a 	bl	8007bf8 <HAL_GetTick>
 80082c4:	0003      	movs	r3, r0
 80082c6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80082c8:	e014      	b.n	80082f4 <ADC_Enable+0xa4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80082ca:	f7ff fc95 	bl	8007bf8 <HAL_GetTick>
 80082ce:	0002      	movs	r2, r0
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b0a      	cmp	r3, #10
 80082d6:	d90d      	bls.n	80082f4 <ADC_Enable+0xa4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082dc:	2210      	movs	r2, #16
 80082de:	431a      	orrs	r2, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e8:	2201      	movs	r2, #1
 80082ea:	431a      	orrs	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e007      	b.n	8008304 <ADC_Enable+0xb4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2201      	movs	r2, #1
 80082fc:	4013      	ands	r3, r2
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d1e3      	bne.n	80082ca <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	0018      	movs	r0, r3
 8008306:	46bd      	mov	sp, r7
 8008308:	b004      	add	sp, #16
 800830a:	bd80      	pop	{r7, pc}
 800830c:	80000017 	.word	0x80000017

08008310 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8008318:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <ADC_DelayMicroSecond+0x34>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	490a      	ldr	r1, [pc, #40]	; (8008348 <ADC_DelayMicroSecond+0x38>)
 800831e:	0018      	movs	r0, r3
 8008320:	f7f7 fef2 	bl	8000108 <__udivsi3>
 8008324:	0003      	movs	r3, r0
 8008326:	001a      	movs	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4353      	muls	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800832e:	e002      	b.n	8008336 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3b01      	subs	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f9      	bne.n	8008330 <ADC_DelayMicroSecond+0x20>
  } 
}
 800833c:	46c0      	nop			; (mov r8, r8)
 800833e:	46bd      	mov	sp, r7
 8008340:	b004      	add	sp, #16
 8008342:	bd80      	pop	{r7, pc}
 8008344:	20000030 	.word	0x20000030
 8008348:	000f4240 	.word	0x000f4240

0800834c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008356:	2317      	movs	r3, #23
 8008358:	18fb      	adds	r3, r7, r3
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800835e:	2300      	movs	r3, #0
 8008360:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2250      	movs	r2, #80	; 0x50
 800836a:	5c9b      	ldrb	r3, [r3, r2]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d101      	bne.n	8008374 <HAL_ADCEx_Calibration_Start+0x28>
 8008370:	2302      	movs	r3, #2
 8008372:	e07a      	b.n	800846a <HAL_ADCEx_Calibration_Start+0x11e>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2250      	movs	r2, #80	; 0x50
 8008378:	2101      	movs	r1, #1
 800837a:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	2203      	movs	r2, #3
 8008384:	4013      	ands	r3, r2
 8008386:	2b01      	cmp	r3, #1
 8008388:	d108      	bne.n	800839c <HAL_ADCEx_Calibration_Start+0x50>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	2201      	movs	r2, #1
 8008392:	4013      	ands	r3, r2
 8008394:	2b01      	cmp	r3, #1
 8008396:	d101      	bne.n	800839c <HAL_ADCEx_Calibration_Start+0x50>
 8008398:	2301      	movs	r3, #1
 800839a:	e000      	b.n	800839e <HAL_ADCEx_Calibration_Start+0x52>
 800839c:	2300      	movs	r3, #0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d152      	bne.n	8008448 <HAL_ADCEx_Calibration_Start+0xfc>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	4a33      	ldr	r2, [pc, #204]	; (8008474 <HAL_ADCEx_Calibration_Start+0x128>)
 80083a8:	4013      	ands	r3, r2
 80083aa:	2202      	movs	r2, #2
 80083ac:	431a      	orrs	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	2203      	movs	r2, #3
 80083ba:	4013      	ands	r3, r2
 80083bc:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68da      	ldr	r2, [r3, #12]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2103      	movs	r1, #3
 80083ca:	438a      	bics	r2, r1
 80083cc:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2180      	movs	r1, #128	; 0x80
 80083da:	0609      	lsls	r1, r1, #24
 80083dc:	430a      	orrs	r2, r1
 80083de:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80083e0:	f7ff fc0a 	bl	8007bf8 <HAL_GetTick>
 80083e4:	0003      	movs	r3, r0
 80083e6:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80083e8:	e014      	b.n	8008414 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80083ea:	f7ff fc05 	bl	8007bf8 <HAL_GetTick>
 80083ee:	0002      	movs	r2, r0
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	2b0a      	cmp	r3, #10
 80083f6:	d90d      	bls.n	8008414 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fc:	2212      	movs	r2, #18
 80083fe:	4393      	bics	r3, r2
 8008400:	2210      	movs	r2, #16
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2250      	movs	r2, #80	; 0x50
 800840c:	2100      	movs	r1, #0
 800840e:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e02a      	b.n	800846a <HAL_ADCEx_Calibration_Start+0x11e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	0fdb      	lsrs	r3, r3, #31
 800841c:	07da      	lsls	r2, r3, #31
 800841e:	2380      	movs	r3, #128	; 0x80
 8008420:	061b      	lsls	r3, r3, #24
 8008422:	429a      	cmp	r2, r3
 8008424:	d0e1      	beq.n	80083ea <HAL_ADCEx_Calibration_Start+0x9e>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68d9      	ldr	r1, [r3, #12]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	430a      	orrs	r2, r1
 8008434:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	2203      	movs	r2, #3
 800843c:	4393      	bics	r3, r2
 800843e:	2201      	movs	r2, #1
 8008440:	431a      	orrs	r2, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	655a      	str	r2, [r3, #84]	; 0x54
 8008446:	e009      	b.n	800845c <HAL_ADCEx_Calibration_Start+0x110>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844c:	2220      	movs	r2, #32
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8008454:	2317      	movs	r3, #23
 8008456:	18fb      	adds	r3, r7, r3
 8008458:	2201      	movs	r2, #1
 800845a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2250      	movs	r2, #80	; 0x50
 8008460:	2100      	movs	r1, #0
 8008462:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8008464:	2317      	movs	r3, #23
 8008466:	18fb      	adds	r3, r7, r3
 8008468:	781b      	ldrb	r3, [r3, #0]
}
 800846a:	0018      	movs	r0, r3
 800846c:	46bd      	mov	sp, r7
 800846e:	b006      	add	sp, #24
 8008470:	bd80      	pop	{r7, pc}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	fffffefd 	.word	0xfffffefd

08008478 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	0002      	movs	r2, r0
 8008480:	1dfb      	adds	r3, r7, #7
 8008482:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8008484:	1dfb      	adds	r3, r7, #7
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	001a      	movs	r2, r3
 800848a:	231f      	movs	r3, #31
 800848c:	401a      	ands	r2, r3
 800848e:	4b04      	ldr	r3, [pc, #16]	; (80084a0 <NVIC_EnableIRQ+0x28>)
 8008490:	2101      	movs	r1, #1
 8008492:	4091      	lsls	r1, r2
 8008494:	000a      	movs	r2, r1
 8008496:	601a      	str	r2, [r3, #0]
}
 8008498:	46c0      	nop			; (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b002      	add	sp, #8
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	e000e100 	.word	0xe000e100

080084a4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80084a4:	b590      	push	{r4, r7, lr}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	0002      	movs	r2, r0
 80084ac:	6039      	str	r1, [r7, #0]
 80084ae:	1dfb      	adds	r3, r7, #7
 80084b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80084b2:	1dfb      	adds	r3, r7, #7
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b7f      	cmp	r3, #127	; 0x7f
 80084b8:	d932      	bls.n	8008520 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80084ba:	4a2f      	ldr	r2, [pc, #188]	; (8008578 <NVIC_SetPriority+0xd4>)
 80084bc:	1dfb      	adds	r3, r7, #7
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	0019      	movs	r1, r3
 80084c2:	230f      	movs	r3, #15
 80084c4:	400b      	ands	r3, r1
 80084c6:	3b08      	subs	r3, #8
 80084c8:	089b      	lsrs	r3, r3, #2
 80084ca:	3306      	adds	r3, #6
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	18d3      	adds	r3, r2, r3
 80084d0:	3304      	adds	r3, #4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	1dfa      	adds	r2, r7, #7
 80084d6:	7812      	ldrb	r2, [r2, #0]
 80084d8:	0011      	movs	r1, r2
 80084da:	2203      	movs	r2, #3
 80084dc:	400a      	ands	r2, r1
 80084de:	00d2      	lsls	r2, r2, #3
 80084e0:	21ff      	movs	r1, #255	; 0xff
 80084e2:	4091      	lsls	r1, r2
 80084e4:	000a      	movs	r2, r1
 80084e6:	43d2      	mvns	r2, r2
 80084e8:	401a      	ands	r2, r3
 80084ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	019b      	lsls	r3, r3, #6
 80084f0:	22ff      	movs	r2, #255	; 0xff
 80084f2:	401a      	ands	r2, r3
 80084f4:	1dfb      	adds	r3, r7, #7
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	0018      	movs	r0, r3
 80084fa:	2303      	movs	r3, #3
 80084fc:	4003      	ands	r3, r0
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008502:	481d      	ldr	r0, [pc, #116]	; (8008578 <NVIC_SetPriority+0xd4>)
 8008504:	1dfb      	adds	r3, r7, #7
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	001c      	movs	r4, r3
 800850a:	230f      	movs	r3, #15
 800850c:	4023      	ands	r3, r4
 800850e:	3b08      	subs	r3, #8
 8008510:	089b      	lsrs	r3, r3, #2
 8008512:	430a      	orrs	r2, r1
 8008514:	3306      	adds	r3, #6
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	18c3      	adds	r3, r0, r3
 800851a:	3304      	adds	r3, #4
 800851c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800851e:	e027      	b.n	8008570 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008520:	4a16      	ldr	r2, [pc, #88]	; (800857c <NVIC_SetPriority+0xd8>)
 8008522:	1dfb      	adds	r3, r7, #7
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	b25b      	sxtb	r3, r3
 8008528:	089b      	lsrs	r3, r3, #2
 800852a:	33c0      	adds	r3, #192	; 0xc0
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	589b      	ldr	r3, [r3, r2]
 8008530:	1dfa      	adds	r2, r7, #7
 8008532:	7812      	ldrb	r2, [r2, #0]
 8008534:	0011      	movs	r1, r2
 8008536:	2203      	movs	r2, #3
 8008538:	400a      	ands	r2, r1
 800853a:	00d2      	lsls	r2, r2, #3
 800853c:	21ff      	movs	r1, #255	; 0xff
 800853e:	4091      	lsls	r1, r2
 8008540:	000a      	movs	r2, r1
 8008542:	43d2      	mvns	r2, r2
 8008544:	401a      	ands	r2, r3
 8008546:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	019b      	lsls	r3, r3, #6
 800854c:	22ff      	movs	r2, #255	; 0xff
 800854e:	401a      	ands	r2, r3
 8008550:	1dfb      	adds	r3, r7, #7
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	0018      	movs	r0, r3
 8008556:	2303      	movs	r3, #3
 8008558:	4003      	ands	r3, r0
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800855e:	4807      	ldr	r0, [pc, #28]	; (800857c <NVIC_SetPriority+0xd8>)
 8008560:	1dfb      	adds	r3, r7, #7
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	b25b      	sxtb	r3, r3
 8008566:	089b      	lsrs	r3, r3, #2
 8008568:	430a      	orrs	r2, r1
 800856a:	33c0      	adds	r3, #192	; 0xc0
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	501a      	str	r2, [r3, r0]
}
 8008570:	46c0      	nop			; (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b003      	add	sp, #12
 8008576:	bd90      	pop	{r4, r7, pc}
 8008578:	e000ed00 	.word	0xe000ed00
 800857c:	e000e100 	.word	0xe000e100

08008580 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60b9      	str	r1, [r7, #8]
 8008588:	607a      	str	r2, [r7, #4]
 800858a:	210f      	movs	r1, #15
 800858c:	187b      	adds	r3, r7, r1
 800858e:	1c02      	adds	r2, r0, #0
 8008590:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	187b      	adds	r3, r7, r1
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b25b      	sxtb	r3, r3
 800859a:	0011      	movs	r1, r2
 800859c:	0018      	movs	r0, r3
 800859e:	f7ff ff81 	bl	80084a4 <NVIC_SetPriority>
}
 80085a2:	46c0      	nop			; (mov r8, r8)
 80085a4:	46bd      	mov	sp, r7
 80085a6:	b004      	add	sp, #16
 80085a8:	bd80      	pop	{r7, pc}

080085aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	0002      	movs	r2, r0
 80085b2:	1dfb      	adds	r3, r7, #7
 80085b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085b6:	1dfb      	adds	r3, r7, #7
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b25b      	sxtb	r3, r3
 80085bc:	0018      	movs	r0, r3
 80085be:	f7ff ff5b 	bl	8008478 <NVIC_EnableIRQ>
}
 80085c2:	46c0      	nop			; (mov r8, r8)
 80085c4:	46bd      	mov	sp, r7
 80085c6:	b002      	add	sp, #8
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e061      	b.n	80086a2 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a32      	ldr	r2, [pc, #200]	; (80086ac <HAL_DMA_Init+0xe0>)
 80085e4:	4694      	mov	ip, r2
 80085e6:	4463      	add	r3, ip
 80085e8:	2114      	movs	r1, #20
 80085ea:	0018      	movs	r0, r3
 80085ec:	f7f7 fd8c 	bl	8000108 <__udivsi3>
 80085f0:	0003      	movs	r3, r0
 80085f2:	009a      	lsls	r2, r3, #2
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	4a2d      	ldr	r2, [pc, #180]	; (80086b0 <HAL_DMA_Init+0xe4>)
 80085fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2225      	movs	r2, #37	; 0x25
 8008602:	2102      	movs	r1, #2
 8008604:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4a28      	ldr	r2, [pc, #160]	; (80086b4 <HAL_DMA_Init+0xe8>)
 8008612:	4013      	ands	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800861e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800862a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008636:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	4313      	orrs	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689a      	ldr	r2, [r3, #8]
 8008650:	2380      	movs	r3, #128	; 0x80
 8008652:	01db      	lsls	r3, r3, #7
 8008654:	429a      	cmp	r2, r3
 8008656:	d018      	beq.n	800868a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008658:	4b17      	ldr	r3, [pc, #92]	; (80086b8 <HAL_DMA_Init+0xec>)
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008660:	211c      	movs	r1, #28
 8008662:	400b      	ands	r3, r1
 8008664:	210f      	movs	r1, #15
 8008666:	4099      	lsls	r1, r3
 8008668:	000b      	movs	r3, r1
 800866a:	43d9      	mvns	r1, r3
 800866c:	4b12      	ldr	r3, [pc, #72]	; (80086b8 <HAL_DMA_Init+0xec>)
 800866e:	400a      	ands	r2, r1
 8008670:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8008672:	4b11      	ldr	r3, [pc, #68]	; (80086b8 <HAL_DMA_Init+0xec>)
 8008674:	6819      	ldr	r1, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867e:	201c      	movs	r0, #28
 8008680:	4003      	ands	r3, r0
 8008682:	409a      	lsls	r2, r3
 8008684:	4b0c      	ldr	r3, [pc, #48]	; (80086b8 <HAL_DMA_Init+0xec>)
 8008686:	430a      	orrs	r2, r1
 8008688:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2225      	movs	r2, #37	; 0x25
 8008694:	2101      	movs	r1, #1
 8008696:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2224      	movs	r2, #36	; 0x24
 800869c:	2100      	movs	r1, #0
 800869e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	0018      	movs	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	b004      	add	sp, #16
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	46c0      	nop			; (mov r8, r8)
 80086ac:	bffdfff8 	.word	0xbffdfff8
 80086b0:	40020000 	.word	0x40020000
 80086b4:	ffff800f 	.word	0xffff800f
 80086b8:	400200a8 	.word	0x400200a8

080086bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ca:	2317      	movs	r3, #23
 80086cc:	18fb      	adds	r3, r7, r3
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2224      	movs	r2, #36	; 0x24
 80086d6:	5c9b      	ldrb	r3, [r3, r2]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d101      	bne.n	80086e0 <HAL_DMA_Start_IT+0x24>
 80086dc:	2302      	movs	r3, #2
 80086de:	e04f      	b.n	8008780 <HAL_DMA_Start_IT+0xc4>
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2224      	movs	r2, #36	; 0x24
 80086e4:	2101      	movs	r1, #1
 80086e6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2225      	movs	r2, #37	; 0x25
 80086ec:	5c9b      	ldrb	r3, [r3, r2]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d13a      	bne.n	800876a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2225      	movs	r2, #37	; 0x25
 80086f8:	2102      	movs	r1, #2
 80086fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2101      	movs	r1, #1
 800870e:	438a      	bics	r2, r1
 8008710:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 f92b 	bl	8008974 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	210e      	movs	r1, #14
 8008732:	430a      	orrs	r2, r1
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	e00f      	b.n	8008758 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2104      	movs	r1, #4
 8008744:	438a      	bics	r2, r1
 8008746:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	210a      	movs	r1, #10
 8008754:	430a      	orrs	r2, r1
 8008756:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2101      	movs	r1, #1
 8008764:	430a      	orrs	r2, r1
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e007      	b.n	800877a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2224      	movs	r2, #36	; 0x24
 800876e:	2100      	movs	r1, #0
 8008770:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8008772:	2317      	movs	r3, #23
 8008774:	18fb      	adds	r3, r7, r3
 8008776:	2202      	movs	r2, #2
 8008778:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800877a:	2317      	movs	r3, #23
 800877c:	18fb      	adds	r3, r7, r3
 800877e:	781b      	ldrb	r3, [r3, #0]
}
 8008780:	0018      	movs	r0, r3
 8008782:	46bd      	mov	sp, r7
 8008784:	b006      	add	sp, #24
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b084      	sub	sp, #16
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008790:	230f      	movs	r3, #15
 8008792:	18fb      	adds	r3, r7, r3
 8008794:	2200      	movs	r2, #0
 8008796:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2225      	movs	r2, #37	; 0x25
 800879c:	5c9b      	ldrb	r3, [r3, r2]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d007      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2204      	movs	r2, #4
 80087a8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80087aa:	230f      	movs	r3, #15
 80087ac:	18fb      	adds	r3, r7, r3
 80087ae:	2201      	movs	r2, #1
 80087b0:	701a      	strb	r2, [r3, #0]
 80087b2:	e02a      	b.n	800880a <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	210e      	movs	r1, #14
 80087c0:	438a      	bics	r2, r1
 80087c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2101      	movs	r1, #1
 80087d0:	438a      	bics	r2, r1
 80087d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d8:	221c      	movs	r2, #28
 80087da:	401a      	ands	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	2101      	movs	r1, #1
 80087e2:	4091      	lsls	r1, r2
 80087e4:	000a      	movs	r2, r1
 80087e6:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2225      	movs	r2, #37	; 0x25
 80087ec:	2101      	movs	r1, #1
 80087ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2224      	movs	r2, #36	; 0x24
 80087f4:	2100      	movs	r1, #0
 80087f6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d004      	beq.n	800880a <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	0010      	movs	r0, r2
 8008808:	4798      	blx	r3
    }
  }
  return status;
 800880a:	230f      	movs	r3, #15
 800880c:	18fb      	adds	r3, r7, r3
 800880e:	781b      	ldrb	r3, [r3, #0]
}
 8008810:	0018      	movs	r0, r3
 8008812:	46bd      	mov	sp, r7
 8008814:	b004      	add	sp, #16
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008834:	221c      	movs	r2, #28
 8008836:	4013      	ands	r3, r2
 8008838:	2204      	movs	r2, #4
 800883a:	409a      	lsls	r2, r3
 800883c:	0013      	movs	r3, r2
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4013      	ands	r3, r2
 8008842:	d026      	beq.n	8008892 <HAL_DMA_IRQHandler+0x7a>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2204      	movs	r2, #4
 8008848:	4013      	ands	r3, r2
 800884a:	d022      	beq.n	8008892 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2220      	movs	r2, #32
 8008854:	4013      	ands	r3, r2
 8008856:	d107      	bne.n	8008868 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2104      	movs	r1, #4
 8008864:	438a      	bics	r2, r1
 8008866:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800886c:	221c      	movs	r2, #28
 800886e:	401a      	ands	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008874:	2104      	movs	r1, #4
 8008876:	4091      	lsls	r1, r2
 8008878:	000a      	movs	r2, r1
 800887a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	2b00      	cmp	r3, #0
 8008882:	d100      	bne.n	8008886 <HAL_DMA_IRQHandler+0x6e>
 8008884:	e071      	b.n	800896a <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	0010      	movs	r0, r2
 800888e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8008890:	e06b      	b.n	800896a <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	221c      	movs	r2, #28
 8008898:	4013      	ands	r3, r2
 800889a:	2202      	movs	r2, #2
 800889c:	409a      	lsls	r2, r3
 800889e:	0013      	movs	r3, r2
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	4013      	ands	r3, r2
 80088a4:	d02d      	beq.n	8008902 <HAL_DMA_IRQHandler+0xea>
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	2202      	movs	r2, #2
 80088aa:	4013      	ands	r3, r2
 80088ac:	d029      	beq.n	8008902 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2220      	movs	r2, #32
 80088b6:	4013      	ands	r3, r2
 80088b8:	d10b      	bne.n	80088d2 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681a      	ldr	r2, [r3, #0]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	210a      	movs	r1, #10
 80088c6:	438a      	bics	r2, r1
 80088c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2225      	movs	r2, #37	; 0x25
 80088ce:	2101      	movs	r1, #1
 80088d0:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d6:	221c      	movs	r2, #28
 80088d8:	401a      	ands	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	2102      	movs	r1, #2
 80088e0:	4091      	lsls	r1, r2
 80088e2:	000a      	movs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2224      	movs	r2, #36	; 0x24
 80088ea:	2100      	movs	r1, #0
 80088ec:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d039      	beq.n	800896a <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	0010      	movs	r0, r2
 80088fe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8008900:	e033      	b.n	800896a <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008906:	221c      	movs	r2, #28
 8008908:	4013      	ands	r3, r2
 800890a:	2208      	movs	r2, #8
 800890c:	409a      	lsls	r2, r3
 800890e:	0013      	movs	r3, r2
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4013      	ands	r3, r2
 8008914:	d02a      	beq.n	800896c <HAL_DMA_IRQHandler+0x154>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2208      	movs	r2, #8
 800891a:	4013      	ands	r3, r2
 800891c:	d026      	beq.n	800896c <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	210e      	movs	r1, #14
 800892a:	438a      	bics	r2, r1
 800892c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008932:	221c      	movs	r2, #28
 8008934:	401a      	ands	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	2101      	movs	r1, #1
 800893c:	4091      	lsls	r1, r2
 800893e:	000a      	movs	r2, r1
 8008940:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2225      	movs	r2, #37	; 0x25
 800894c:	2101      	movs	r1, #1
 800894e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2224      	movs	r2, #36	; 0x24
 8008954:	2100      	movs	r1, #0
 8008956:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895c:	2b00      	cmp	r3, #0
 800895e:	d005      	beq.n	800896c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	0010      	movs	r0, r2
 8008968:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800896a:	46c0      	nop			; (mov r8, r8)
 800896c:	46c0      	nop			; (mov r8, r8)
}
 800896e:	46bd      	mov	sp, r7
 8008970:	b004      	add	sp, #16
 8008972:	bd80      	pop	{r7, pc}

08008974 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008986:	221c      	movs	r2, #28
 8008988:	401a      	ands	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	2101      	movs	r1, #1
 8008990:	4091      	lsls	r1, r2
 8008992:	000a      	movs	r2, r1
 8008994:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2b10      	cmp	r3, #16
 80089a4:	d108      	bne.n	80089b8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80089b6:	e007      	b.n	80089c8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	60da      	str	r2, [r3, #12]
}
 80089c8:	46c0      	nop			; (mov r8, r8)
 80089ca:	46bd      	mov	sp, r7
 80089cc:	b004      	add	sp, #16
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80089de:	2300      	movs	r3, #0
 80089e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80089e6:	e155      	b.n	8008c94 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2101      	movs	r1, #1
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	4091      	lsls	r1, r2
 80089f2:	000a      	movs	r2, r1
 80089f4:	4013      	ands	r3, r2
 80089f6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d100      	bne.n	8008a00 <HAL_GPIO_Init+0x30>
 80089fe:	e146      	b.n	8008c8e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d003      	beq.n	8008a10 <HAL_GPIO_Init+0x40>
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b12      	cmp	r3, #18
 8008a0e:	d123      	bne.n	8008a58 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	08da      	lsrs	r2, r3, #3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3208      	adds	r2, #8
 8008a18:	0092      	lsls	r2, r2, #2
 8008a1a:	58d3      	ldr	r3, [r2, r3]
 8008a1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2207      	movs	r2, #7
 8008a22:	4013      	ands	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	220f      	movs	r2, #15
 8008a28:	409a      	lsls	r2, r3
 8008a2a:	0013      	movs	r3, r2
 8008a2c:	43da      	mvns	r2, r3
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	4013      	ands	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	2107      	movs	r1, #7
 8008a3c:	400b      	ands	r3, r1
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	409a      	lsls	r2, r3
 8008a42:	0013      	movs	r3, r2
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	08da      	lsrs	r2, r3, #3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3208      	adds	r2, #8
 8008a52:	0092      	lsls	r2, r2, #2
 8008a54:	6939      	ldr	r1, [r7, #16]
 8008a56:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d00b      	beq.n	8008a78 <HAL_GPIO_Init+0xa8>
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d007      	beq.n	8008a78 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a6c:	2b11      	cmp	r3, #17
 8008a6e:	d003      	beq.n	8008a78 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	2b12      	cmp	r3, #18
 8008a76:	d130      	bne.n	8008ada <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	2203      	movs	r2, #3
 8008a84:	409a      	lsls	r2, r3
 8008a86:	0013      	movs	r3, r2
 8008a88:	43da      	mvns	r2, r3
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	005b      	lsls	r3, r3, #1
 8008a98:	409a      	lsls	r2, r3
 8008a9a:	0013      	movs	r3, r2
 8008a9c:	693a      	ldr	r2, [r7, #16]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008aae:	2201      	movs	r2, #1
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	409a      	lsls	r2, r3
 8008ab4:	0013      	movs	r3, r2
 8008ab6:	43da      	mvns	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	4013      	ands	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	091b      	lsrs	r3, r3, #4
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	401a      	ands	r2, r3
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	409a      	lsls	r2, r3
 8008acc:	0013      	movs	r3, r2
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	409a      	lsls	r2, r3
 8008ae8:	0013      	movs	r3, r2
 8008aea:	43da      	mvns	r2, r3
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4013      	ands	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	2203      	movs	r2, #3
 8008af8:	401a      	ands	r2, r3
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	005b      	lsls	r3, r3, #1
 8008afe:	409a      	lsls	r2, r3
 8008b00:	0013      	movs	r3, r2
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	2203      	movs	r2, #3
 8008b1a:	409a      	lsls	r2, r3
 8008b1c:	0013      	movs	r3, r2
 8008b1e:	43da      	mvns	r2, r3
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	4013      	ands	r3, r2
 8008b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	409a      	lsls	r2, r3
 8008b30:	0013      	movs	r3, r2
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	2380      	movs	r3, #128	; 0x80
 8008b44:	055b      	lsls	r3, r3, #21
 8008b46:	4013      	ands	r3, r2
 8008b48:	d100      	bne.n	8008b4c <HAL_GPIO_Init+0x17c>
 8008b4a:	e0a0      	b.n	8008c8e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b4c:	4b57      	ldr	r3, [pc, #348]	; (8008cac <HAL_GPIO_Init+0x2dc>)
 8008b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b50:	4b56      	ldr	r3, [pc, #344]	; (8008cac <HAL_GPIO_Init+0x2dc>)
 8008b52:	2101      	movs	r1, #1
 8008b54:	430a      	orrs	r2, r1
 8008b56:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8008b58:	4a55      	ldr	r2, [pc, #340]	; (8008cb0 <HAL_GPIO_Init+0x2e0>)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	089b      	lsrs	r3, r3, #2
 8008b5e:	3302      	adds	r3, #2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	589b      	ldr	r3, [r3, r2]
 8008b64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2203      	movs	r2, #3
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	220f      	movs	r2, #15
 8008b70:	409a      	lsls	r2, r3
 8008b72:	0013      	movs	r3, r2
 8008b74:	43da      	mvns	r2, r3
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	4013      	ands	r3, r2
 8008b7a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	23a0      	movs	r3, #160	; 0xa0
 8008b80:	05db      	lsls	r3, r3, #23
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d01f      	beq.n	8008bc6 <HAL_GPIO_Init+0x1f6>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a4a      	ldr	r2, [pc, #296]	; (8008cb4 <HAL_GPIO_Init+0x2e4>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d019      	beq.n	8008bc2 <HAL_GPIO_Init+0x1f2>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a49      	ldr	r2, [pc, #292]	; (8008cb8 <HAL_GPIO_Init+0x2e8>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d013      	beq.n	8008bbe <HAL_GPIO_Init+0x1ee>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	4a48      	ldr	r2, [pc, #288]	; (8008cbc <HAL_GPIO_Init+0x2ec>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d00d      	beq.n	8008bba <HAL_GPIO_Init+0x1ea>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a47      	ldr	r2, [pc, #284]	; (8008cc0 <HAL_GPIO_Init+0x2f0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d007      	beq.n	8008bb6 <HAL_GPIO_Init+0x1e6>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a46      	ldr	r2, [pc, #280]	; (8008cc4 <HAL_GPIO_Init+0x2f4>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d101      	bne.n	8008bb2 <HAL_GPIO_Init+0x1e2>
 8008bae:	2305      	movs	r3, #5
 8008bb0:	e00a      	b.n	8008bc8 <HAL_GPIO_Init+0x1f8>
 8008bb2:	2306      	movs	r3, #6
 8008bb4:	e008      	b.n	8008bc8 <HAL_GPIO_Init+0x1f8>
 8008bb6:	2304      	movs	r3, #4
 8008bb8:	e006      	b.n	8008bc8 <HAL_GPIO_Init+0x1f8>
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e004      	b.n	8008bc8 <HAL_GPIO_Init+0x1f8>
 8008bbe:	2302      	movs	r3, #2
 8008bc0:	e002      	b.n	8008bc8 <HAL_GPIO_Init+0x1f8>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e000      	b.n	8008bc8 <HAL_GPIO_Init+0x1f8>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	2103      	movs	r1, #3
 8008bcc:	400a      	ands	r2, r1
 8008bce:	0092      	lsls	r2, r2, #2
 8008bd0:	4093      	lsls	r3, r2
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bd8:	4935      	ldr	r1, [pc, #212]	; (8008cb0 <HAL_GPIO_Init+0x2e0>)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	089b      	lsrs	r3, r3, #2
 8008bde:	3302      	adds	r3, #2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008be6:	4b38      	ldr	r3, [pc, #224]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	43da      	mvns	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	2380      	movs	r3, #128	; 0x80
 8008bfc:	025b      	lsls	r3, r3, #9
 8008bfe:	4013      	ands	r3, r2
 8008c00:	d003      	beq.n	8008c0a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008c0a:	4b2f      	ldr	r3, [pc, #188]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8008c10:	4b2d      	ldr	r3, [pc, #180]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	43da      	mvns	r2, r3
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	685a      	ldr	r2, [r3, #4]
 8008c24:	2380      	movs	r3, #128	; 0x80
 8008c26:	029b      	lsls	r3, r3, #10
 8008c28:	4013      	ands	r3, r2
 8008c2a:	d003      	beq.n	8008c34 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008c34:	4b24      	ldr	r3, [pc, #144]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c3a:	4b23      	ldr	r3, [pc, #140]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	43da      	mvns	r2, r3
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4013      	ands	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685a      	ldr	r2, [r3, #4]
 8008c4e:	2380      	movs	r3, #128	; 0x80
 8008c50:	035b      	lsls	r3, r3, #13
 8008c52:	4013      	ands	r3, r2
 8008c54:	d003      	beq.n	8008c5e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	43da      	mvns	r2, r3
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4013      	ands	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	685a      	ldr	r2, [r3, #4]
 8008c78:	2380      	movs	r3, #128	; 0x80
 8008c7a:	039b      	lsls	r3, r3, #14
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	d003      	beq.n	8008c88 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <HAL_GPIO_Init+0x2f8>)
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	3301      	adds	r3, #1
 8008c92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	40da      	lsrs	r2, r3
 8008c9c:	1e13      	subs	r3, r2, #0
 8008c9e:	d000      	beq.n	8008ca2 <HAL_GPIO_Init+0x2d2>
 8008ca0:	e6a2      	b.n	80089e8 <HAL_GPIO_Init+0x18>
  }
}
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	b006      	add	sp, #24
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	46c0      	nop			; (mov r8, r8)
 8008cac:	40021000 	.word	0x40021000
 8008cb0:	40010000 	.word	0x40010000
 8008cb4:	50000400 	.word	0x50000400
 8008cb8:	50000800 	.word	0x50000800
 8008cbc:	50000c00 	.word	0x50000c00
 8008cc0:	50001000 	.word	0x50001000
 8008cc4:	50001c00 	.word	0x50001c00
 8008cc8:	40010400 	.word	0x40010400

08008ccc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	0008      	movs	r0, r1
 8008cd6:	0011      	movs	r1, r2
 8008cd8:	1cbb      	adds	r3, r7, #2
 8008cda:	1c02      	adds	r2, r0, #0
 8008cdc:	801a      	strh	r2, [r3, #0]
 8008cde:	1c7b      	adds	r3, r7, #1
 8008ce0:	1c0a      	adds	r2, r1, #0
 8008ce2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8008ce4:	1c7b      	adds	r3, r7, #1
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d004      	beq.n	8008cf6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cec:	1cbb      	adds	r3, r7, #2
 8008cee:	881a      	ldrh	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008cf4:	e003      	b.n	8008cfe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8008cf6:	1cbb      	adds	r3, r7, #2
 8008cf8:	881a      	ldrh	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	46bd      	mov	sp, r7
 8008d02:	b002      	add	sp, #8
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	0002      	movs	r2, r0
 8008d10:	1dbb      	adds	r3, r7, #6
 8008d12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 8008d14:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	1dba      	adds	r2, r7, #6
 8008d1a:	8812      	ldrh	r2, [r2, #0]
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	d008      	beq.n	8008d32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d20:	4b06      	ldr	r3, [pc, #24]	; (8008d3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8008d22:	1dba      	adds	r2, r7, #6
 8008d24:	8812      	ldrh	r2, [r2, #0]
 8008d26:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d28:	1dbb      	adds	r3, r7, #6
 8008d2a:	881b      	ldrh	r3, [r3, #0]
 8008d2c:	0018      	movs	r0, r3
 8008d2e:	f7fb fb09 	bl	8004344 <HAL_GPIO_EXTI_Callback>
  }
}
 8008d32:	46c0      	nop			; (mov r8, r8)
 8008d34:	46bd      	mov	sp, r7
 8008d36:	b002      	add	sp, #8
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	46c0      	nop			; (mov r8, r8)
 8008d3c:	40010400 	.word	0x40010400

08008d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e082      	b.n	8008e58 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2241      	movs	r2, #65	; 0x41
 8008d56:	5c9b      	ldrb	r3, [r3, r2]
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d107      	bne.n	8008d6e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2240      	movs	r2, #64	; 0x40
 8008d62:	2100      	movs	r1, #0
 8008d64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	0018      	movs	r0, r3
 8008d6a:	f7fa f9d9 	bl	8003120 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2241      	movs	r2, #65	; 0x41
 8008d72:	2124      	movs	r1, #36	; 0x24
 8008d74:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2101      	movs	r1, #1
 8008d82:	438a      	bics	r2, r1
 8008d84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4934      	ldr	r1, [pc, #208]	; (8008e60 <HAL_I2C_Init+0x120>)
 8008d90:	400a      	ands	r2, r1
 8008d92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	689a      	ldr	r2, [r3, #8]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4931      	ldr	r1, [pc, #196]	; (8008e64 <HAL_I2C_Init+0x124>)
 8008da0:	400a      	ands	r2, r1
 8008da2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d108      	bne.n	8008dbe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2180      	movs	r1, #128	; 0x80
 8008db6:	0209      	lsls	r1, r1, #8
 8008db8:	430a      	orrs	r2, r1
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	e007      	b.n	8008dce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2184      	movs	r1, #132	; 0x84
 8008dc8:	0209      	lsls	r1, r1, #8
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d104      	bne.n	8008de0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2280      	movs	r2, #128	; 0x80
 8008ddc:	0112      	lsls	r2, r2, #4
 8008dde:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	491f      	ldr	r1, [pc, #124]	; (8008e68 <HAL_I2C_Init+0x128>)
 8008dec:	430a      	orrs	r2, r1
 8008dee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	491a      	ldr	r1, [pc, #104]	; (8008e64 <HAL_I2C_Init+0x124>)
 8008dfc:	400a      	ands	r2, r1
 8008dfe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	0011      	movs	r1, r2
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	021a      	lsls	r2, r3, #8
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69d9      	ldr	r1, [r3, #28]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1a      	ldr	r2, [r3, #32]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2101      	movs	r1, #1
 8008e36:	430a      	orrs	r2, r1
 8008e38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2241      	movs	r2, #65	; 0x41
 8008e44:	2120      	movs	r1, #32
 8008e46:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2242      	movs	r2, #66	; 0x42
 8008e52:	2100      	movs	r1, #0
 8008e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	0018      	movs	r0, r3
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b002      	add	sp, #8
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	f0ffffff 	.word	0xf0ffffff
 8008e64:	ffff7fff 	.word	0xffff7fff
 8008e68:	02008000 	.word	0x02008000

08008e6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
 8008e74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2241      	movs	r2, #65	; 0x41
 8008e7a:	5c9b      	ldrb	r3, [r3, r2]
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d138      	bne.n	8008ef4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2240      	movs	r2, #64	; 0x40
 8008e86:	5c9b      	ldrb	r3, [r3, r2]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d101      	bne.n	8008e90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	e032      	b.n	8008ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2240      	movs	r2, #64	; 0x40
 8008e94:	2101      	movs	r1, #1
 8008e96:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2241      	movs	r2, #65	; 0x41
 8008e9c:	2124      	movs	r1, #36	; 0x24
 8008e9e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2101      	movs	r1, #1
 8008eac:	438a      	bics	r2, r1
 8008eae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4911      	ldr	r1, [pc, #68]	; (8008f00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008ebc:	400a      	ands	r2, r1
 8008ebe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6819      	ldr	r1, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	430a      	orrs	r2, r1
 8008ece:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2101      	movs	r1, #1
 8008edc:	430a      	orrs	r2, r1
 8008ede:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2241      	movs	r2, #65	; 0x41
 8008ee4:	2120      	movs	r1, #32
 8008ee6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2240      	movs	r2, #64	; 0x40
 8008eec:	2100      	movs	r1, #0
 8008eee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e000      	b.n	8008ef6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ef4:	2302      	movs	r3, #2
  }
}
 8008ef6:	0018      	movs	r0, r3
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	b002      	add	sp, #8
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	ffffefff 	.word	0xffffefff

08008f04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2241      	movs	r2, #65	; 0x41
 8008f12:	5c9b      	ldrb	r3, [r3, r2]
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b20      	cmp	r3, #32
 8008f18:	d139      	bne.n	8008f8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2240      	movs	r2, #64	; 0x40
 8008f1e:	5c9b      	ldrb	r3, [r3, r2]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e033      	b.n	8008f90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2240      	movs	r2, #64	; 0x40
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2241      	movs	r2, #65	; 0x41
 8008f34:	2124      	movs	r1, #36	; 0x24
 8008f36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2101      	movs	r1, #1
 8008f44:	438a      	bics	r2, r1
 8008f46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a11      	ldr	r2, [pc, #68]	; (8008f98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	021b      	lsls	r3, r3, #8
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2101      	movs	r1, #1
 8008f76:	430a      	orrs	r2, r1
 8008f78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2241      	movs	r2, #65	; 0x41
 8008f7e:	2120      	movs	r1, #32
 8008f80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2240      	movs	r2, #64	; 0x40
 8008f86:	2100      	movs	r1, #0
 8008f88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e000      	b.n	8008f90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f8e:	2302      	movs	r3, #2
  }
}
 8008f90:	0018      	movs	r0, r3
 8008f92:	46bd      	mov	sp, r7
 8008f94:	b004      	add	sp, #16
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	fffff0ff 	.word	0xfffff0ff

08008f9c <HAL_PWR_DisablePVD>:
/**
  * @brief Disables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	af00      	add	r7, sp, #0
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <HAL_PWR_DisablePVD+0x18>)
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	4b03      	ldr	r3, [pc, #12]	; (8008fb4 <HAL_PWR_DisablePVD+0x18>)
 8008fa6:	2110      	movs	r1, #16
 8008fa8:	438a      	bics	r2, r1
 8008faa:	601a      	str	r2, [r3, #0]
}
 8008fac:	46c0      	nop			; (mov r8, r8)
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	40007000 	.word	0x40007000

08008fb8 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	4b03      	ldr	r3, [pc, #12]	; (8008fd0 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8008fc2:	2180      	movs	r1, #128	; 0x80
 8008fc4:	00c9      	lsls	r1, r1, #3
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	601a      	str	r2, [r3, #0]
}
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	40007000 	.word	0x40007000

08008fd4 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	4b03      	ldr	r3, [pc, #12]	; (8008fec <HAL_PWREx_EnableUltraLowPower+0x18>)
 8008fde:	2180      	movs	r1, #128	; 0x80
 8008fe0:	0089      	lsls	r1, r1, #2
 8008fe2:	430a      	orrs	r2, r1
 8008fe4:	601a      	str	r2, [r3, #0]
}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40007000 	.word	0x40007000

08008ff0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ff0:	b5b0      	push	{r4, r5, r7, lr}
 8008ff2:	b08a      	sub	sp, #40	; 0x28
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d102      	bne.n	8009004 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	f000 fbbc 	bl	800977c <HAL_RCC_OscConfig+0x78c>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009004:	4bc8      	ldr	r3, [pc, #800]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	220c      	movs	r2, #12
 800900a:	4013      	ands	r3, r2
 800900c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800900e:	4bc6      	ldr	r3, [pc, #792]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	2380      	movs	r3, #128	; 0x80
 8009014:	025b      	lsls	r3, r3, #9
 8009016:	4013      	ands	r3, r2
 8009018:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2201      	movs	r2, #1
 8009020:	4013      	ands	r3, r2
 8009022:	d100      	bne.n	8009026 <HAL_RCC_OscConfig+0x36>
 8009024:	e07e      	b.n	8009124 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	2b08      	cmp	r3, #8
 800902a:	d007      	beq.n	800903c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	2b0c      	cmp	r3, #12
 8009030:	d112      	bne.n	8009058 <HAL_RCC_OscConfig+0x68>
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	2380      	movs	r3, #128	; 0x80
 8009036:	025b      	lsls	r3, r3, #9
 8009038:	429a      	cmp	r2, r3
 800903a:	d10d      	bne.n	8009058 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800903c:	4bba      	ldr	r3, [pc, #744]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	2380      	movs	r3, #128	; 0x80
 8009042:	029b      	lsls	r3, r3, #10
 8009044:	4013      	ands	r3, r2
 8009046:	d100      	bne.n	800904a <HAL_RCC_OscConfig+0x5a>
 8009048:	e06b      	b.n	8009122 <HAL_RCC_OscConfig+0x132>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d167      	bne.n	8009122 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	f000 fb92 	bl	800977c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	2380      	movs	r3, #128	; 0x80
 800905e:	025b      	lsls	r3, r3, #9
 8009060:	429a      	cmp	r2, r3
 8009062:	d107      	bne.n	8009074 <HAL_RCC_OscConfig+0x84>
 8009064:	4bb0      	ldr	r3, [pc, #704]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009066:	681a      	ldr	r2, [r3, #0]
 8009068:	4baf      	ldr	r3, [pc, #700]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800906a:	2180      	movs	r1, #128	; 0x80
 800906c:	0249      	lsls	r1, r1, #9
 800906e:	430a      	orrs	r2, r1
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	e027      	b.n	80090c4 <HAL_RCC_OscConfig+0xd4>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	23a0      	movs	r3, #160	; 0xa0
 800907a:	02db      	lsls	r3, r3, #11
 800907c:	429a      	cmp	r2, r3
 800907e:	d10e      	bne.n	800909e <HAL_RCC_OscConfig+0xae>
 8009080:	4ba9      	ldr	r3, [pc, #676]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	4ba8      	ldr	r3, [pc, #672]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009086:	2180      	movs	r1, #128	; 0x80
 8009088:	02c9      	lsls	r1, r1, #11
 800908a:	430a      	orrs	r2, r1
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	4ba6      	ldr	r3, [pc, #664]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4ba5      	ldr	r3, [pc, #660]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009094:	2180      	movs	r1, #128	; 0x80
 8009096:	0249      	lsls	r1, r1, #9
 8009098:	430a      	orrs	r2, r1
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	e012      	b.n	80090c4 <HAL_RCC_OscConfig+0xd4>
 800909e:	4ba2      	ldr	r3, [pc, #648]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4ba1      	ldr	r3, [pc, #644]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80090a4:	49a1      	ldr	r1, [pc, #644]	; (800932c <HAL_RCC_OscConfig+0x33c>)
 80090a6:	400a      	ands	r2, r1
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	4b9f      	ldr	r3, [pc, #636]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	2380      	movs	r3, #128	; 0x80
 80090b0:	025b      	lsls	r3, r3, #9
 80090b2:	4013      	ands	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4b9b      	ldr	r3, [pc, #620]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	4b9a      	ldr	r3, [pc, #616]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80090be:	499c      	ldr	r1, [pc, #624]	; (8009330 <HAL_RCC_OscConfig+0x340>)
 80090c0:	400a      	ands	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d015      	beq.n	80090f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090cc:	f7fe fd94 	bl	8007bf8 <HAL_GetTick>
 80090d0:	0003      	movs	r3, r0
 80090d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090d4:	e009      	b.n	80090ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090d6:	f7fe fd8f 	bl	8007bf8 <HAL_GetTick>
 80090da:	0002      	movs	r2, r0
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	2b64      	cmp	r3, #100	; 0x64
 80090e2:	d902      	bls.n	80090ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090e4:	2303      	movs	r3, #3
 80090e6:	f000 fb49 	bl	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80090ea:	4b8f      	ldr	r3, [pc, #572]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	2380      	movs	r3, #128	; 0x80
 80090f0:	029b      	lsls	r3, r3, #10
 80090f2:	4013      	ands	r3, r2
 80090f4:	d0ef      	beq.n	80090d6 <HAL_RCC_OscConfig+0xe6>
 80090f6:	e015      	b.n	8009124 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090f8:	f7fe fd7e 	bl	8007bf8 <HAL_GetTick>
 80090fc:	0003      	movs	r3, r0
 80090fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009100:	e008      	b.n	8009114 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009102:	f7fe fd79 	bl	8007bf8 <HAL_GetTick>
 8009106:	0002      	movs	r2, r0
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	2b64      	cmp	r3, #100	; 0x64
 800910e:	d901      	bls.n	8009114 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8009110:	2303      	movs	r3, #3
 8009112:	e333      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009114:	4b84      	ldr	r3, [pc, #528]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	2380      	movs	r3, #128	; 0x80
 800911a:	029b      	lsls	r3, r3, #10
 800911c:	4013      	ands	r3, r2
 800911e:	d1f0      	bne.n	8009102 <HAL_RCC_OscConfig+0x112>
 8009120:	e000      	b.n	8009124 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009122:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2202      	movs	r2, #2
 800912a:	4013      	ands	r3, r2
 800912c:	d100      	bne.n	8009130 <HAL_RCC_OscConfig+0x140>
 800912e:	e098      	b.n	8009262 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8009136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009138:	2220      	movs	r2, #32
 800913a:	4013      	ands	r3, r2
 800913c:	d009      	beq.n	8009152 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800913e:	4b7a      	ldr	r3, [pc, #488]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4b79      	ldr	r3, [pc, #484]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009144:	2120      	movs	r1, #32
 8009146:	430a      	orrs	r2, r1
 8009148:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	2220      	movs	r2, #32
 800914e:	4393      	bics	r3, r2
 8009150:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	2b04      	cmp	r3, #4
 8009156:	d005      	beq.n	8009164 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	2b0c      	cmp	r3, #12
 800915c:	d13d      	bne.n	80091da <HAL_RCC_OscConfig+0x1ea>
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d13a      	bne.n	80091da <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8009164:	4b70      	ldr	r3, [pc, #448]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2204      	movs	r2, #4
 800916a:	4013      	ands	r3, r2
 800916c:	d004      	beq.n	8009178 <HAL_RCC_OscConfig+0x188>
 800916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009170:	2b00      	cmp	r3, #0
 8009172:	d101      	bne.n	8009178 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e301      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009178:	4b6b      	ldr	r3, [pc, #428]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	4a6d      	ldr	r2, [pc, #436]	; (8009334 <HAL_RCC_OscConfig+0x344>)
 800917e:	4013      	ands	r3, r2
 8009180:	0019      	movs	r1, r3
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	021a      	lsls	r2, r3, #8
 8009188:	4b67      	ldr	r3, [pc, #412]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800918e:	4b66      	ldr	r3, [pc, #408]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2209      	movs	r2, #9
 8009194:	4393      	bics	r3, r2
 8009196:	0019      	movs	r1, r3
 8009198:	4b63      	ldr	r3, [pc, #396]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800919a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800919c:	430a      	orrs	r2, r1
 800919e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091a0:	f000 fc20 	bl	80099e4 <HAL_RCC_GetSysClockFreq>
 80091a4:	0001      	movs	r1, r0
 80091a6:	4b60      	ldr	r3, [pc, #384]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	091b      	lsrs	r3, r3, #4
 80091ac:	220f      	movs	r2, #15
 80091ae:	4013      	ands	r3, r2
 80091b0:	4a61      	ldr	r2, [pc, #388]	; (8009338 <HAL_RCC_OscConfig+0x348>)
 80091b2:	5cd3      	ldrb	r3, [r2, r3]
 80091b4:	000a      	movs	r2, r1
 80091b6:	40da      	lsrs	r2, r3
 80091b8:	4b60      	ldr	r3, [pc, #384]	; (800933c <HAL_RCC_OscConfig+0x34c>)
 80091ba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80091bc:	2513      	movs	r5, #19
 80091be:	197c      	adds	r4, r7, r5
 80091c0:	2003      	movs	r0, #3
 80091c2:	f7fb f830 	bl	8004226 <HAL_InitTick>
 80091c6:	0003      	movs	r3, r0
 80091c8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80091ca:	197b      	adds	r3, r7, r5
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d047      	beq.n	8009262 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80091d2:	2313      	movs	r3, #19
 80091d4:	18fb      	adds	r3, r7, r3
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	e2d0      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80091da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d027      	beq.n	8009230 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80091e0:	4b51      	ldr	r3, [pc, #324]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2209      	movs	r2, #9
 80091e6:	4393      	bics	r3, r2
 80091e8:	0019      	movs	r1, r3
 80091ea:	4b4f      	ldr	r3, [pc, #316]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80091ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ee:	430a      	orrs	r2, r1
 80091f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091f2:	f7fe fd01 	bl	8007bf8 <HAL_GetTick>
 80091f6:	0003      	movs	r3, r0
 80091f8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80091fa:	e008      	b.n	800920e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091fc:	f7fe fcfc 	bl	8007bf8 <HAL_GetTick>
 8009200:	0002      	movs	r2, r0
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	2b02      	cmp	r3, #2
 8009208:	d901      	bls.n	800920e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800920a:	2303      	movs	r3, #3
 800920c:	e2b6      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800920e:	4b46      	ldr	r3, [pc, #280]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2204      	movs	r2, #4
 8009214:	4013      	ands	r3, r2
 8009216:	d0f1      	beq.n	80091fc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009218:	4b43      	ldr	r3, [pc, #268]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	4a45      	ldr	r2, [pc, #276]	; (8009334 <HAL_RCC_OscConfig+0x344>)
 800921e:	4013      	ands	r3, r2
 8009220:	0019      	movs	r1, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	021a      	lsls	r2, r3, #8
 8009228:	4b3f      	ldr	r3, [pc, #252]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800922a:	430a      	orrs	r2, r1
 800922c:	605a      	str	r2, [r3, #4]
 800922e:	e018      	b.n	8009262 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009230:	4b3d      	ldr	r3, [pc, #244]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	4b3c      	ldr	r3, [pc, #240]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009236:	2101      	movs	r1, #1
 8009238:	438a      	bics	r2, r1
 800923a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800923c:	f7fe fcdc 	bl	8007bf8 <HAL_GetTick>
 8009240:	0003      	movs	r3, r0
 8009242:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009244:	e008      	b.n	8009258 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009246:	f7fe fcd7 	bl	8007bf8 <HAL_GetTick>
 800924a:	0002      	movs	r2, r0
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d901      	bls.n	8009258 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e291      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009258:	4b33      	ldr	r3, [pc, #204]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2204      	movs	r2, #4
 800925e:	4013      	ands	r3, r2
 8009260:	d1f1      	bne.n	8009246 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2210      	movs	r2, #16
 8009268:	4013      	ands	r3, r2
 800926a:	d100      	bne.n	800926e <HAL_RCC_OscConfig+0x27e>
 800926c:	e09f      	b.n	80093ae <HAL_RCC_OscConfig+0x3be>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d13f      	bne.n	80092f4 <HAL_RCC_OscConfig+0x304>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009274:	4b2c      	ldr	r3, [pc, #176]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	2380      	movs	r3, #128	; 0x80
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4013      	ands	r3, r2
 800927e:	d005      	beq.n	800928c <HAL_RCC_OscConfig+0x29c>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	69db      	ldr	r3, [r3, #28]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	e277      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800928c:	4b26      	ldr	r3, [pc, #152]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	4a2b      	ldr	r2, [pc, #172]	; (8009340 <HAL_RCC_OscConfig+0x350>)
 8009292:	4013      	ands	r3, r2
 8009294:	0019      	movs	r1, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800929a:	4b23      	ldr	r3, [pc, #140]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 800929c:	430a      	orrs	r2, r1
 800929e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80092a0:	4b21      	ldr	r3, [pc, #132]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	0a19      	lsrs	r1, r3, #8
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6a1b      	ldr	r3, [r3, #32]
 80092ac:	061a      	lsls	r2, r3, #24
 80092ae:	4b1e      	ldr	r3, [pc, #120]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80092b0:	430a      	orrs	r2, r1
 80092b2:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	0b5b      	lsrs	r3, r3, #13
 80092ba:	3301      	adds	r3, #1
 80092bc:	2280      	movs	r2, #128	; 0x80
 80092be:	0212      	lsls	r2, r2, #8
 80092c0:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80092c2:	4b19      	ldr	r3, [pc, #100]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	091b      	lsrs	r3, r3, #4
 80092c8:	210f      	movs	r1, #15
 80092ca:	400b      	ands	r3, r1
 80092cc:	491a      	ldr	r1, [pc, #104]	; (8009338 <HAL_RCC_OscConfig+0x348>)
 80092ce:	5ccb      	ldrb	r3, [r1, r3]
 80092d0:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80092d2:	4b1a      	ldr	r3, [pc, #104]	; (800933c <HAL_RCC_OscConfig+0x34c>)
 80092d4:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80092d6:	2513      	movs	r5, #19
 80092d8:	197c      	adds	r4, r7, r5
 80092da:	2003      	movs	r0, #3
 80092dc:	f7fa ffa3 	bl	8004226 <HAL_InitTick>
 80092e0:	0003      	movs	r3, r0
 80092e2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80092e4:	197b      	adds	r3, r7, r5
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d060      	beq.n	80093ae <HAL_RCC_OscConfig+0x3be>
        {
          return status;
 80092ec:	2313      	movs	r3, #19
 80092ee:	18fb      	adds	r3, r7, r3
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	e243      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d03e      	beq.n	800937a <HAL_RCC_OscConfig+0x38a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80092fc:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	4b09      	ldr	r3, [pc, #36]	; (8009328 <HAL_RCC_OscConfig+0x338>)
 8009302:	2180      	movs	r1, #128	; 0x80
 8009304:	0049      	lsls	r1, r1, #1
 8009306:	430a      	orrs	r2, r1
 8009308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800930a:	f7fe fc75 	bl	8007bf8 <HAL_GetTick>
 800930e:	0003      	movs	r3, r0
 8009310:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009312:	e017      	b.n	8009344 <HAL_RCC_OscConfig+0x354>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009314:	f7fe fc70 	bl	8007bf8 <HAL_GetTick>
 8009318:	0002      	movs	r2, r0
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b02      	cmp	r3, #2
 8009320:	d910      	bls.n	8009344 <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	e22a      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	40021000 	.word	0x40021000
 800932c:	fffeffff 	.word	0xfffeffff
 8009330:	fffbffff 	.word	0xfffbffff
 8009334:	ffffe0ff 	.word	0xffffe0ff
 8009338:	0801acc0 	.word	0x0801acc0
 800933c:	20000030 	.word	0x20000030
 8009340:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009344:	4bc6      	ldr	r3, [pc, #792]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	2380      	movs	r3, #128	; 0x80
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	4013      	ands	r3, r2
 800934e:	d0e1      	beq.n	8009314 <HAL_RCC_OscConfig+0x324>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009350:	4bc3      	ldr	r3, [pc, #780]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	4ac3      	ldr	r2, [pc, #780]	; (8009664 <HAL_RCC_OscConfig+0x674>)
 8009356:	4013      	ands	r3, r2
 8009358:	0019      	movs	r1, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800935e:	4bc0      	ldr	r3, [pc, #768]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009360:	430a      	orrs	r2, r1
 8009362:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009364:	4bbe      	ldr	r3, [pc, #760]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	0a19      	lsrs	r1, r3, #8
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	061a      	lsls	r2, r3, #24
 8009372:	4bbb      	ldr	r3, [pc, #748]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009374:	430a      	orrs	r2, r1
 8009376:	605a      	str	r2, [r3, #4]
 8009378:	e019      	b.n	80093ae <HAL_RCC_OscConfig+0x3be>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800937a:	4bb9      	ldr	r3, [pc, #740]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4bb8      	ldr	r3, [pc, #736]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009380:	49b9      	ldr	r1, [pc, #740]	; (8009668 <HAL_RCC_OscConfig+0x678>)
 8009382:	400a      	ands	r2, r1
 8009384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009386:	f7fe fc37 	bl	8007bf8 <HAL_GetTick>
 800938a:	0003      	movs	r3, r0
 800938c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_OscConfig+0x3b2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009390:	f7fe fc32 	bl	8007bf8 <HAL_GetTick>
 8009394:	0002      	movs	r2, r0
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e1ec      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80093a2:	4baf      	ldr	r3, [pc, #700]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	2380      	movs	r3, #128	; 0x80
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4013      	ands	r3, r2
 80093ac:	d1f0      	bne.n	8009390 <HAL_RCC_OscConfig+0x3a0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2208      	movs	r2, #8
 80093b4:	4013      	ands	r3, r2
 80093b6:	d036      	beq.n	8009426 <HAL_RCC_OscConfig+0x436>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	695b      	ldr	r3, [r3, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d019      	beq.n	80093f4 <HAL_RCC_OscConfig+0x404>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093c0:	4ba7      	ldr	r3, [pc, #668]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80093c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093c4:	4ba6      	ldr	r3, [pc, #664]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80093c6:	2101      	movs	r1, #1
 80093c8:	430a      	orrs	r2, r1
 80093ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093cc:	f7fe fc14 	bl	8007bf8 <HAL_GetTick>
 80093d0:	0003      	movs	r3, r0
 80093d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80093d4:	e008      	b.n	80093e8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093d6:	f7fe fc0f 	bl	8007bf8 <HAL_GetTick>
 80093da:	0002      	movs	r2, r0
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d901      	bls.n	80093e8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e1c9      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80093e8:	4b9d      	ldr	r3, [pc, #628]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80093ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ec:	2202      	movs	r2, #2
 80093ee:	4013      	ands	r3, r2
 80093f0:	d0f1      	beq.n	80093d6 <HAL_RCC_OscConfig+0x3e6>
 80093f2:	e018      	b.n	8009426 <HAL_RCC_OscConfig+0x436>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093f4:	4b9a      	ldr	r3, [pc, #616]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80093f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80093f8:	4b99      	ldr	r3, [pc, #612]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80093fa:	2101      	movs	r1, #1
 80093fc:	438a      	bics	r2, r1
 80093fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009400:	f7fe fbfa 	bl	8007bf8 <HAL_GetTick>
 8009404:	0003      	movs	r3, r0
 8009406:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009408:	e008      	b.n	800941c <HAL_RCC_OscConfig+0x42c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800940a:	f7fe fbf5 	bl	8007bf8 <HAL_GetTick>
 800940e:	0002      	movs	r2, r0
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b02      	cmp	r3, #2
 8009416:	d901      	bls.n	800941c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e1af      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800941c:	4b90      	ldr	r3, [pc, #576]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 800941e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009420:	2202      	movs	r2, #2
 8009422:	4013      	ands	r3, r2
 8009424:	d1f1      	bne.n	800940a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2204      	movs	r2, #4
 800942c:	4013      	ands	r3, r2
 800942e:	d100      	bne.n	8009432 <HAL_RCC_OscConfig+0x442>
 8009430:	e0af      	b.n	8009592 <HAL_RCC_OscConfig+0x5a2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009432:	2323      	movs	r3, #35	; 0x23
 8009434:	18fb      	adds	r3, r7, r3
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800943a:	4b89      	ldr	r3, [pc, #548]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 800943c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800943e:	2380      	movs	r3, #128	; 0x80
 8009440:	055b      	lsls	r3, r3, #21
 8009442:	4013      	ands	r3, r2
 8009444:	d10a      	bne.n	800945c <HAL_RCC_OscConfig+0x46c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009446:	4b86      	ldr	r3, [pc, #536]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800944a:	4b85      	ldr	r3, [pc, #532]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 800944c:	2180      	movs	r1, #128	; 0x80
 800944e:	0549      	lsls	r1, r1, #21
 8009450:	430a      	orrs	r2, r1
 8009452:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009454:	2323      	movs	r3, #35	; 0x23
 8009456:	18fb      	adds	r3, r7, r3
 8009458:	2201      	movs	r2, #1
 800945a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800945c:	4b83      	ldr	r3, [pc, #524]	; (800966c <HAL_RCC_OscConfig+0x67c>)
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	2380      	movs	r3, #128	; 0x80
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	4013      	ands	r3, r2
 8009466:	d11a      	bne.n	800949e <HAL_RCC_OscConfig+0x4ae>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009468:	4b80      	ldr	r3, [pc, #512]	; (800966c <HAL_RCC_OscConfig+0x67c>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	4b7f      	ldr	r3, [pc, #508]	; (800966c <HAL_RCC_OscConfig+0x67c>)
 800946e:	2180      	movs	r1, #128	; 0x80
 8009470:	0049      	lsls	r1, r1, #1
 8009472:	430a      	orrs	r2, r1
 8009474:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009476:	f7fe fbbf 	bl	8007bf8 <HAL_GetTick>
 800947a:	0003      	movs	r3, r0
 800947c:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800947e:	e008      	b.n	8009492 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009480:	f7fe fbba 	bl	8007bf8 <HAL_GetTick>
 8009484:	0002      	movs	r2, r0
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	2b64      	cmp	r3, #100	; 0x64
 800948c:	d901      	bls.n	8009492 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e174      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009492:	4b76      	ldr	r3, [pc, #472]	; (800966c <HAL_RCC_OscConfig+0x67c>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	2380      	movs	r3, #128	; 0x80
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	4013      	ands	r3, r2
 800949c:	d0f0      	beq.n	8009480 <HAL_RCC_OscConfig+0x490>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	2380      	movs	r3, #128	; 0x80
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d107      	bne.n	80094ba <HAL_RCC_OscConfig+0x4ca>
 80094aa:	4b6d      	ldr	r3, [pc, #436]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ae:	4b6c      	ldr	r3, [pc, #432]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094b0:	2180      	movs	r1, #128	; 0x80
 80094b2:	0049      	lsls	r1, r1, #1
 80094b4:	430a      	orrs	r2, r1
 80094b6:	651a      	str	r2, [r3, #80]	; 0x50
 80094b8:	e031      	b.n	800951e <HAL_RCC_OscConfig+0x52e>
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10c      	bne.n	80094dc <HAL_RCC_OscConfig+0x4ec>
 80094c2:	4b67      	ldr	r3, [pc, #412]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094c6:	4b66      	ldr	r3, [pc, #408]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094c8:	4967      	ldr	r1, [pc, #412]	; (8009668 <HAL_RCC_OscConfig+0x678>)
 80094ca:	400a      	ands	r2, r1
 80094cc:	651a      	str	r2, [r3, #80]	; 0x50
 80094ce:	4b64      	ldr	r3, [pc, #400]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094d2:	4b63      	ldr	r3, [pc, #396]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094d4:	4966      	ldr	r1, [pc, #408]	; (8009670 <HAL_RCC_OscConfig+0x680>)
 80094d6:	400a      	ands	r2, r1
 80094d8:	651a      	str	r2, [r3, #80]	; 0x50
 80094da:	e020      	b.n	800951e <HAL_RCC_OscConfig+0x52e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	23a0      	movs	r3, #160	; 0xa0
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d10e      	bne.n	8009506 <HAL_RCC_OscConfig+0x516>
 80094e8:	4b5d      	ldr	r3, [pc, #372]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094ec:	4b5c      	ldr	r3, [pc, #368]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094ee:	2180      	movs	r1, #128	; 0x80
 80094f0:	00c9      	lsls	r1, r1, #3
 80094f2:	430a      	orrs	r2, r1
 80094f4:	651a      	str	r2, [r3, #80]	; 0x50
 80094f6:	4b5a      	ldr	r3, [pc, #360]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80094fa:	4b59      	ldr	r3, [pc, #356]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80094fc:	2180      	movs	r1, #128	; 0x80
 80094fe:	0049      	lsls	r1, r1, #1
 8009500:	430a      	orrs	r2, r1
 8009502:	651a      	str	r2, [r3, #80]	; 0x50
 8009504:	e00b      	b.n	800951e <HAL_RCC_OscConfig+0x52e>
 8009506:	4b56      	ldr	r3, [pc, #344]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800950a:	4b55      	ldr	r3, [pc, #340]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 800950c:	4956      	ldr	r1, [pc, #344]	; (8009668 <HAL_RCC_OscConfig+0x678>)
 800950e:	400a      	ands	r2, r1
 8009510:	651a      	str	r2, [r3, #80]	; 0x50
 8009512:	4b53      	ldr	r3, [pc, #332]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009516:	4b52      	ldr	r3, [pc, #328]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009518:	4955      	ldr	r1, [pc, #340]	; (8009670 <HAL_RCC_OscConfig+0x680>)
 800951a:	400a      	ands	r2, r1
 800951c:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	689b      	ldr	r3, [r3, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d015      	beq.n	8009552 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009526:	f7fe fb67 	bl	8007bf8 <HAL_GetTick>
 800952a:	0003      	movs	r3, r0
 800952c:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800952e:	e009      	b.n	8009544 <HAL_RCC_OscConfig+0x554>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009530:	f7fe fb62 	bl	8007bf8 <HAL_GetTick>
 8009534:	0002      	movs	r2, r0
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	4a4e      	ldr	r2, [pc, #312]	; (8009674 <HAL_RCC_OscConfig+0x684>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d901      	bls.n	8009544 <HAL_RCC_OscConfig+0x554>
        {
          return HAL_TIMEOUT;
 8009540:	2303      	movs	r3, #3
 8009542:	e11b      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009544:	4b46      	ldr	r3, [pc, #280]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009546:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009548:	2380      	movs	r3, #128	; 0x80
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4013      	ands	r3, r2
 800954e:	d0ef      	beq.n	8009530 <HAL_RCC_OscConfig+0x540>
 8009550:	e014      	b.n	800957c <HAL_RCC_OscConfig+0x58c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009552:	f7fe fb51 	bl	8007bf8 <HAL_GetTick>
 8009556:	0003      	movs	r3, r0
 8009558:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800955a:	e009      	b.n	8009570 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800955c:	f7fe fb4c 	bl	8007bf8 <HAL_GetTick>
 8009560:	0002      	movs	r2, r0
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	4a43      	ldr	r2, [pc, #268]	; (8009674 <HAL_RCC_OscConfig+0x684>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d901      	bls.n	8009570 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800956c:	2303      	movs	r3, #3
 800956e:	e105      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009570:	4b3b      	ldr	r3, [pc, #236]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009572:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009574:	2380      	movs	r3, #128	; 0x80
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4013      	ands	r3, r2
 800957a:	d1ef      	bne.n	800955c <HAL_RCC_OscConfig+0x56c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800957c:	2323      	movs	r3, #35	; 0x23
 800957e:	18fb      	adds	r3, r7, r3
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d105      	bne.n	8009592 <HAL_RCC_OscConfig+0x5a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009586:	4b36      	ldr	r3, [pc, #216]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800958a:	4b35      	ldr	r3, [pc, #212]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 800958c:	493a      	ldr	r1, [pc, #232]	; (8009678 <HAL_RCC_OscConfig+0x688>)
 800958e:	400a      	ands	r2, r1
 8009590:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2220      	movs	r2, #32
 8009598:	4013      	ands	r3, r2
 800959a:	d049      	beq.n	8009630 <HAL_RCC_OscConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d026      	beq.n	80095f2 <HAL_RCC_OscConfig+0x602>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80095a4:	4b2e      	ldr	r3, [pc, #184]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	4b2d      	ldr	r3, [pc, #180]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80095aa:	2101      	movs	r1, #1
 80095ac:	430a      	orrs	r2, r1
 80095ae:	609a      	str	r2, [r3, #8]
 80095b0:	4b2b      	ldr	r3, [pc, #172]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80095b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b4:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80095b6:	2101      	movs	r1, #1
 80095b8:	430a      	orrs	r2, r1
 80095ba:	635a      	str	r2, [r3, #52]	; 0x34
 80095bc:	4b2f      	ldr	r3, [pc, #188]	; (800967c <HAL_RCC_OscConfig+0x68c>)
 80095be:	6a1a      	ldr	r2, [r3, #32]
 80095c0:	4b2e      	ldr	r3, [pc, #184]	; (800967c <HAL_RCC_OscConfig+0x68c>)
 80095c2:	2180      	movs	r1, #128	; 0x80
 80095c4:	0189      	lsls	r1, r1, #6
 80095c6:	430a      	orrs	r2, r1
 80095c8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095ca:	f7fe fb15 	bl	8007bf8 <HAL_GetTick>
 80095ce:	0003      	movs	r3, r0
 80095d0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095d2:	e008      	b.n	80095e6 <HAL_RCC_OscConfig+0x5f6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095d4:	f7fe fb10 	bl	8007bf8 <HAL_GetTick>
 80095d8:	0002      	movs	r2, r0
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	1ad3      	subs	r3, r2, r3
 80095de:	2b02      	cmp	r3, #2
 80095e0:	d901      	bls.n	80095e6 <HAL_RCC_OscConfig+0x5f6>
          {
            return HAL_TIMEOUT;
 80095e2:	2303      	movs	r3, #3
 80095e4:	e0ca      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095e6:	4b1e      	ldr	r3, [pc, #120]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	2202      	movs	r2, #2
 80095ec:	4013      	ands	r3, r2
 80095ee:	d0f1      	beq.n	80095d4 <HAL_RCC_OscConfig+0x5e4>
 80095f0:	e01e      	b.n	8009630 <HAL_RCC_OscConfig+0x640>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80095f2:	4b1b      	ldr	r3, [pc, #108]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80095f4:	689a      	ldr	r2, [r3, #8]
 80095f6:	4b1a      	ldr	r3, [pc, #104]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 80095f8:	2101      	movs	r1, #1
 80095fa:	438a      	bics	r2, r1
 80095fc:	609a      	str	r2, [r3, #8]
 80095fe:	4b1f      	ldr	r3, [pc, #124]	; (800967c <HAL_RCC_OscConfig+0x68c>)
 8009600:	6a1a      	ldr	r2, [r3, #32]
 8009602:	4b1e      	ldr	r3, [pc, #120]	; (800967c <HAL_RCC_OscConfig+0x68c>)
 8009604:	491e      	ldr	r1, [pc, #120]	; (8009680 <HAL_RCC_OscConfig+0x690>)
 8009606:	400a      	ands	r2, r1
 8009608:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800960a:	f7fe faf5 	bl	8007bf8 <HAL_GetTick>
 800960e:	0003      	movs	r3, r0
 8009610:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009612:	e008      	b.n	8009626 <HAL_RCC_OscConfig+0x636>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009614:	f7fe faf0 	bl	8007bf8 <HAL_GetTick>
 8009618:	0002      	movs	r2, r0
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	2b02      	cmp	r3, #2
 8009620:	d901      	bls.n	8009626 <HAL_RCC_OscConfig+0x636>
          {
            return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e0aa      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009626:	4b0e      	ldr	r3, [pc, #56]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	2202      	movs	r2, #2
 800962c:	4013      	ands	r3, r2
 800962e:	d1f1      	bne.n	8009614 <HAL_RCC_OscConfig+0x624>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	2b00      	cmp	r3, #0
 8009636:	d100      	bne.n	800963a <HAL_RCC_OscConfig+0x64a>
 8009638:	e09f      	b.n	800977a <HAL_RCC_OscConfig+0x78a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	2b0c      	cmp	r3, #12
 800963e:	d100      	bne.n	8009642 <HAL_RCC_OscConfig+0x652>
 8009640:	e078      	b.n	8009734 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	2b02      	cmp	r3, #2
 8009648:	d159      	bne.n	80096fe <HAL_RCC_OscConfig+0x70e>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b04      	ldr	r3, [pc, #16]	; (8009660 <HAL_RCC_OscConfig+0x670>)
 8009650:	490c      	ldr	r1, [pc, #48]	; (8009684 <HAL_RCC_OscConfig+0x694>)
 8009652:	400a      	ands	r2, r1
 8009654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009656:	f7fe facf 	bl	8007bf8 <HAL_GetTick>
 800965a:	0003      	movs	r3, r0
 800965c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800965e:	e01c      	b.n	800969a <HAL_RCC_OscConfig+0x6aa>
 8009660:	40021000 	.word	0x40021000
 8009664:	ffff1fff 	.word	0xffff1fff
 8009668:	fffffeff 	.word	0xfffffeff
 800966c:	40007000 	.word	0x40007000
 8009670:	fffffbff 	.word	0xfffffbff
 8009674:	00001388 	.word	0x00001388
 8009678:	efffffff 	.word	0xefffffff
 800967c:	40010000 	.word	0x40010000
 8009680:	ffffdfff 	.word	0xffffdfff
 8009684:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009688:	f7fe fab6 	bl	8007bf8 <HAL_GetTick>
 800968c:	0002      	movs	r2, r0
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	1ad3      	subs	r3, r2, r3
 8009692:	2b02      	cmp	r3, #2
 8009694:	d901      	bls.n	800969a <HAL_RCC_OscConfig+0x6aa>
          {
            return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e070      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800969a:	4b3a      	ldr	r3, [pc, #232]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	2380      	movs	r3, #128	; 0x80
 80096a0:	049b      	lsls	r3, r3, #18
 80096a2:	4013      	ands	r3, r2
 80096a4:	d1f0      	bne.n	8009688 <HAL_RCC_OscConfig+0x698>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80096a6:	4b37      	ldr	r3, [pc, #220]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	4a37      	ldr	r2, [pc, #220]	; (8009788 <HAL_RCC_OscConfig+0x798>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	0019      	movs	r1, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	431a      	orrs	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096be:	431a      	orrs	r2, r3
 80096c0:	4b30      	ldr	r3, [pc, #192]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 80096c2:	430a      	orrs	r2, r1
 80096c4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80096c6:	4b2f      	ldr	r3, [pc, #188]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	4b2e      	ldr	r3, [pc, #184]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 80096cc:	2180      	movs	r1, #128	; 0x80
 80096ce:	0449      	lsls	r1, r1, #17
 80096d0:	430a      	orrs	r2, r1
 80096d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80096d4:	f7fe fa90 	bl	8007bf8 <HAL_GetTick>
 80096d8:	0003      	movs	r3, r0
 80096da:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80096dc:	e008      	b.n	80096f0 <HAL_RCC_OscConfig+0x700>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80096de:	f7fe fa8b 	bl	8007bf8 <HAL_GetTick>
 80096e2:	0002      	movs	r2, r0
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	1ad3      	subs	r3, r2, r3
 80096e8:	2b02      	cmp	r3, #2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_OscConfig+0x700>
          {
            return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e045      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80096f0:	4b24      	ldr	r3, [pc, #144]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	2380      	movs	r3, #128	; 0x80
 80096f6:	049b      	lsls	r3, r3, #18
 80096f8:	4013      	ands	r3, r2
 80096fa:	d0f0      	beq.n	80096de <HAL_RCC_OscConfig+0x6ee>
 80096fc:	e03d      	b.n	800977a <HAL_RCC_OscConfig+0x78a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096fe:	4b21      	ldr	r3, [pc, #132]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	4b20      	ldr	r3, [pc, #128]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 8009704:	4921      	ldr	r1, [pc, #132]	; (800978c <HAL_RCC_OscConfig+0x79c>)
 8009706:	400a      	ands	r2, r1
 8009708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800970a:	f7fe fa75 	bl	8007bf8 <HAL_GetTick>
 800970e:	0003      	movs	r3, r0
 8009710:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009712:	e008      	b.n	8009726 <HAL_RCC_OscConfig+0x736>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009714:	f7fe fa70 	bl	8007bf8 <HAL_GetTick>
 8009718:	0002      	movs	r2, r0
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b02      	cmp	r3, #2
 8009720:	d901      	bls.n	8009726 <HAL_RCC_OscConfig+0x736>
          {
            return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e02a      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009726:	4b17      	ldr	r3, [pc, #92]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	2380      	movs	r3, #128	; 0x80
 800972c:	049b      	lsls	r3, r3, #18
 800972e:	4013      	ands	r3, r2
 8009730:	d1f0      	bne.n	8009714 <HAL_RCC_OscConfig+0x724>
 8009732:	e022      	b.n	800977a <HAL_RCC_OscConfig+0x78a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009738:	2b01      	cmp	r3, #1
 800973a:	d101      	bne.n	8009740 <HAL_RCC_OscConfig+0x750>
      {
        return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e01d      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009740:	4b10      	ldr	r3, [pc, #64]	; (8009784 <HAL_RCC_OscConfig+0x794>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009746:	69ba      	ldr	r2, [r7, #24]
 8009748:	2380      	movs	r3, #128	; 0x80
 800974a:	025b      	lsls	r3, r3, #9
 800974c:	401a      	ands	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009752:	429a      	cmp	r2, r3
 8009754:	d10f      	bne.n	8009776 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	23f0      	movs	r3, #240	; 0xf0
 800975a:	039b      	lsls	r3, r3, #14
 800975c:	401a      	ands	r2, r3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009762:	429a      	cmp	r2, r3
 8009764:	d107      	bne.n	8009776 <HAL_RCC_OscConfig+0x786>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	23c0      	movs	r3, #192	; 0xc0
 800976a:	041b      	lsls	r3, r3, #16
 800976c:	401a      	ands	r2, r3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009772:	429a      	cmp	r2, r3
 8009774:	d001      	beq.n	800977a <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	e000      	b.n	800977c <HAL_RCC_OscConfig+0x78c>
        }
      }
    }
  }

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	0018      	movs	r0, r3
 800977e:	46bd      	mov	sp, r7
 8009780:	b00a      	add	sp, #40	; 0x28
 8009782:	bdb0      	pop	{r4, r5, r7, pc}
 8009784:	40021000 	.word	0x40021000
 8009788:	ff02ffff 	.word	0xff02ffff
 800978c:	feffffff 	.word	0xfeffffff

08009790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009790:	b5b0      	push	{r4, r5, r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d101      	bne.n	80097a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80097a0:	2301      	movs	r3, #1
 80097a2:	e10d      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80097a4:	4b88      	ldr	r3, [pc, #544]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2201      	movs	r2, #1
 80097aa:	4013      	ands	r3, r2
 80097ac:	683a      	ldr	r2, [r7, #0]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d911      	bls.n	80097d6 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097b2:	4b85      	ldr	r3, [pc, #532]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2201      	movs	r2, #1
 80097b8:	4393      	bics	r3, r2
 80097ba:	0019      	movs	r1, r3
 80097bc:	4b82      	ldr	r3, [pc, #520]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	430a      	orrs	r2, r1
 80097c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097c4:	4b80      	ldr	r3, [pc, #512]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2201      	movs	r2, #1
 80097ca:	4013      	ands	r3, r2
 80097cc:	683a      	ldr	r2, [r7, #0]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d001      	beq.n	80097d6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e0f4      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2202      	movs	r2, #2
 80097dc:	4013      	ands	r3, r2
 80097de:	d009      	beq.n	80097f4 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097e0:	4b7a      	ldr	r3, [pc, #488]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	22f0      	movs	r2, #240	; 0xf0
 80097e6:	4393      	bics	r3, r2
 80097e8:	0019      	movs	r1, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689a      	ldr	r2, [r3, #8]
 80097ee:	4b77      	ldr	r3, [pc, #476]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 80097f0:	430a      	orrs	r2, r1
 80097f2:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2201      	movs	r2, #1
 80097fa:	4013      	ands	r3, r2
 80097fc:	d100      	bne.n	8009800 <HAL_RCC_ClockConfig+0x70>
 80097fe:	e089      	b.n	8009914 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	2b02      	cmp	r3, #2
 8009806:	d107      	bne.n	8009818 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009808:	4b70      	ldr	r3, [pc, #448]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	029b      	lsls	r3, r3, #10
 8009810:	4013      	ands	r3, r2
 8009812:	d120      	bne.n	8009856 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8009814:	2301      	movs	r3, #1
 8009816:	e0d3      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b03      	cmp	r3, #3
 800981e:	d107      	bne.n	8009830 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009820:	4b6a      	ldr	r3, [pc, #424]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009822:	681a      	ldr	r2, [r3, #0]
 8009824:	2380      	movs	r3, #128	; 0x80
 8009826:	049b      	lsls	r3, r3, #18
 8009828:	4013      	ands	r3, r2
 800982a:	d114      	bne.n	8009856 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e0c7      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2b01      	cmp	r3, #1
 8009836:	d106      	bne.n	8009846 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009838:	4b64      	ldr	r3, [pc, #400]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2204      	movs	r2, #4
 800983e:	4013      	ands	r3, r2
 8009840:	d109      	bne.n	8009856 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e0bc      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009846:	4b61      	ldr	r3, [pc, #388]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	2380      	movs	r3, #128	; 0x80
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4013      	ands	r3, r2
 8009850:	d101      	bne.n	8009856 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	e0b4      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009856:	4b5d      	ldr	r3, [pc, #372]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	2203      	movs	r2, #3
 800985c:	4393      	bics	r3, r2
 800985e:	0019      	movs	r1, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	685a      	ldr	r2, [r3, #4]
 8009864:	4b59      	ldr	r3, [pc, #356]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009866:	430a      	orrs	r2, r1
 8009868:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800986a:	f7fe f9c5 	bl	8007bf8 <HAL_GetTick>
 800986e:	0003      	movs	r3, r0
 8009870:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	2b02      	cmp	r3, #2
 8009878:	d111      	bne.n	800989e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800987a:	e009      	b.n	8009890 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800987c:	f7fe f9bc 	bl	8007bf8 <HAL_GetTick>
 8009880:	0002      	movs	r2, r0
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	1ad3      	subs	r3, r2, r3
 8009886:	4a52      	ldr	r2, [pc, #328]	; (80099d0 <HAL_RCC_ClockConfig+0x240>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e097      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009890:	4b4e      	ldr	r3, [pc, #312]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	220c      	movs	r2, #12
 8009896:	4013      	ands	r3, r2
 8009898:	2b08      	cmp	r3, #8
 800989a:	d1ef      	bne.n	800987c <HAL_RCC_ClockConfig+0xec>
 800989c:	e03a      	b.n	8009914 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	d111      	bne.n	80098ca <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80098a6:	e009      	b.n	80098bc <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098a8:	f7fe f9a6 	bl	8007bf8 <HAL_GetTick>
 80098ac:	0002      	movs	r2, r0
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a47      	ldr	r2, [pc, #284]	; (80099d0 <HAL_RCC_ClockConfig+0x240>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d901      	bls.n	80098bc <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e081      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80098bc:	4b43      	ldr	r3, [pc, #268]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	220c      	movs	r2, #12
 80098c2:	4013      	ands	r3, r2
 80098c4:	2b0c      	cmp	r3, #12
 80098c6:	d1ef      	bne.n	80098a8 <HAL_RCC_ClockConfig+0x118>
 80098c8:	e024      	b.n	8009914 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d11b      	bne.n	800990a <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80098d2:	e009      	b.n	80098e8 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098d4:	f7fe f990 	bl	8007bf8 <HAL_GetTick>
 80098d8:	0002      	movs	r2, r0
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	4a3c      	ldr	r2, [pc, #240]	; (80099d0 <HAL_RCC_ClockConfig+0x240>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d901      	bls.n	80098e8 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 80098e4:	2303      	movs	r3, #3
 80098e6:	e06b      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80098e8:	4b38      	ldr	r3, [pc, #224]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	220c      	movs	r2, #12
 80098ee:	4013      	ands	r3, r2
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d1ef      	bne.n	80098d4 <HAL_RCC_ClockConfig+0x144>
 80098f4:	e00e      	b.n	8009914 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098f6:	f7fe f97f 	bl	8007bf8 <HAL_GetTick>
 80098fa:	0002      	movs	r2, r0
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	4a33      	ldr	r2, [pc, #204]	; (80099d0 <HAL_RCC_ClockConfig+0x240>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d901      	bls.n	800990a <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e05a      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800990a:	4b30      	ldr	r3, [pc, #192]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	220c      	movs	r2, #12
 8009910:	4013      	ands	r3, r2
 8009912:	d1f0      	bne.n	80098f6 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009914:	4b2c      	ldr	r3, [pc, #176]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2201      	movs	r2, #1
 800991a:	4013      	ands	r3, r2
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	429a      	cmp	r2, r3
 8009920:	d211      	bcs.n	8009946 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009922:	4b29      	ldr	r3, [pc, #164]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2201      	movs	r2, #1
 8009928:	4393      	bics	r3, r2
 800992a:	0019      	movs	r1, r3
 800992c:	4b26      	ldr	r3, [pc, #152]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	430a      	orrs	r2, r1
 8009932:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009934:	4b24      	ldr	r3, [pc, #144]	; (80099c8 <HAL_RCC_ClockConfig+0x238>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2201      	movs	r2, #1
 800993a:	4013      	ands	r3, r2
 800993c:	683a      	ldr	r2, [r7, #0]
 800993e:	429a      	cmp	r2, r3
 8009940:	d001      	beq.n	8009946 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e03c      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2204      	movs	r2, #4
 800994c:	4013      	ands	r3, r2
 800994e:	d009      	beq.n	8009964 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009950:	4b1e      	ldr	r3, [pc, #120]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	4a1f      	ldr	r2, [pc, #124]	; (80099d4 <HAL_RCC_ClockConfig+0x244>)
 8009956:	4013      	ands	r3, r2
 8009958:	0019      	movs	r1, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	4b1b      	ldr	r3, [pc, #108]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009960:	430a      	orrs	r2, r1
 8009962:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2208      	movs	r2, #8
 800996a:	4013      	ands	r3, r2
 800996c:	d00a      	beq.n	8009984 <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800996e:	4b17      	ldr	r3, [pc, #92]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009970:	68db      	ldr	r3, [r3, #12]
 8009972:	4a19      	ldr	r2, [pc, #100]	; (80099d8 <HAL_RCC_ClockConfig+0x248>)
 8009974:	4013      	ands	r3, r2
 8009976:	0019      	movs	r1, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	00da      	lsls	r2, r3, #3
 800997e:	4b13      	ldr	r3, [pc, #76]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 8009980:	430a      	orrs	r2, r1
 8009982:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009984:	f000 f82e 	bl	80099e4 <HAL_RCC_GetSysClockFreq>
 8009988:	0001      	movs	r1, r0
 800998a:	4b10      	ldr	r3, [pc, #64]	; (80099cc <HAL_RCC_ClockConfig+0x23c>)
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	091b      	lsrs	r3, r3, #4
 8009990:	220f      	movs	r2, #15
 8009992:	4013      	ands	r3, r2
 8009994:	4a11      	ldr	r2, [pc, #68]	; (80099dc <HAL_RCC_ClockConfig+0x24c>)
 8009996:	5cd3      	ldrb	r3, [r2, r3]
 8009998:	000a      	movs	r2, r1
 800999a:	40da      	lsrs	r2, r3
 800999c:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <HAL_RCC_ClockConfig+0x250>)
 800999e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 80099a0:	250b      	movs	r5, #11
 80099a2:	197c      	adds	r4, r7, r5
 80099a4:	2003      	movs	r0, #3
 80099a6:	f7fa fc3e 	bl	8004226 <HAL_InitTick>
 80099aa:	0003      	movs	r3, r0
 80099ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80099ae:	197b      	adds	r3, r7, r5
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 80099b6:	230b      	movs	r3, #11
 80099b8:	18fb      	adds	r3, r7, r3
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	e000      	b.n	80099c0 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	0018      	movs	r0, r3
 80099c2:	46bd      	mov	sp, r7
 80099c4:	b004      	add	sp, #16
 80099c6:	bdb0      	pop	{r4, r5, r7, pc}
 80099c8:	40022000 	.word	0x40022000
 80099cc:	40021000 	.word	0x40021000
 80099d0:	00001388 	.word	0x00001388
 80099d4:	fffff8ff 	.word	0xfffff8ff
 80099d8:	ffffc7ff 	.word	0xffffc7ff
 80099dc:	0801acc0 	.word	0x0801acc0
 80099e0:	20000030 	.word	0x20000030

080099e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80099ea:	4b3b      	ldr	r3, [pc, #236]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0xf4>)
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	220c      	movs	r2, #12
 80099f4:	4013      	ands	r3, r2
 80099f6:	2b08      	cmp	r3, #8
 80099f8:	d00e      	beq.n	8009a18 <HAL_RCC_GetSysClockFreq+0x34>
 80099fa:	2b0c      	cmp	r3, #12
 80099fc:	d00f      	beq.n	8009a1e <HAL_RCC_GetSysClockFreq+0x3a>
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d157      	bne.n	8009ab2 <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009a02:	4b35      	ldr	r3, [pc, #212]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2210      	movs	r2, #16
 8009a08:	4013      	ands	r3, r2
 8009a0a:	d002      	beq.n	8009a12 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8009a0c:	4b33      	ldr	r3, [pc, #204]	; (8009adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8009a0e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8009a10:	e05d      	b.n	8009ace <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 8009a12:	4b33      	ldr	r3, [pc, #204]	; (8009ae0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009a14:	613b      	str	r3, [r7, #16]
      break;
 8009a16:	e05a      	b.n	8009ace <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009a18:	4b32      	ldr	r3, [pc, #200]	; (8009ae4 <HAL_RCC_GetSysClockFreq+0x100>)
 8009a1a:	613b      	str	r3, [r7, #16]
      break;
 8009a1c:	e057      	b.n	8009ace <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	0c9b      	lsrs	r3, r3, #18
 8009a22:	220f      	movs	r2, #15
 8009a24:	4013      	ands	r3, r2
 8009a26:	4a30      	ldr	r2, [pc, #192]	; (8009ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8009a28:	5cd3      	ldrb	r3, [r2, r3]
 8009a2a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	0d9b      	lsrs	r3, r3, #22
 8009a30:	2203      	movs	r2, #3
 8009a32:	4013      	ands	r3, r2
 8009a34:	3301      	adds	r3, #1
 8009a36:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009a38:	4b27      	ldr	r3, [pc, #156]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009a3a:	68da      	ldr	r2, [r3, #12]
 8009a3c:	2380      	movs	r3, #128	; 0x80
 8009a3e:	025b      	lsls	r3, r3, #9
 8009a40:	4013      	ands	r3, r2
 8009a42:	d00f      	beq.n	8009a64 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8009a44:	68b9      	ldr	r1, [r7, #8]
 8009a46:	000a      	movs	r2, r1
 8009a48:	0152      	lsls	r2, r2, #5
 8009a4a:	1a52      	subs	r2, r2, r1
 8009a4c:	0193      	lsls	r3, r2, #6
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	00db      	lsls	r3, r3, #3
 8009a52:	185b      	adds	r3, r3, r1
 8009a54:	025b      	lsls	r3, r3, #9
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	0018      	movs	r0, r3
 8009a5a:	f7f6 fb55 	bl	8000108 <__udivsi3>
 8009a5e:	0003      	movs	r3, r0
 8009a60:	617b      	str	r3, [r7, #20]
 8009a62:	e023      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8009a64:	4b1c      	ldr	r3, [pc, #112]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2210      	movs	r2, #16
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	d00f      	beq.n	8009a8e <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	000a      	movs	r2, r1
 8009a72:	0152      	lsls	r2, r2, #5
 8009a74:	1a52      	subs	r2, r2, r1
 8009a76:	0193      	lsls	r3, r2, #6
 8009a78:	1a9b      	subs	r3, r3, r2
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	185b      	adds	r3, r3, r1
 8009a7e:	021b      	lsls	r3, r3, #8
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	0018      	movs	r0, r3
 8009a84:	f7f6 fb40 	bl	8000108 <__udivsi3>
 8009a88:	0003      	movs	r3, r0
 8009a8a:	617b      	str	r3, [r7, #20]
 8009a8c:	e00e      	b.n	8009aac <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	000a      	movs	r2, r1
 8009a92:	0152      	lsls	r2, r2, #5
 8009a94:	1a52      	subs	r2, r2, r1
 8009a96:	0193      	lsls	r3, r2, #6
 8009a98:	1a9b      	subs	r3, r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	185b      	adds	r3, r3, r1
 8009a9e:	029b      	lsls	r3, r3, #10
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	0018      	movs	r0, r3
 8009aa4:	f7f6 fb30 	bl	8000108 <__udivsi3>
 8009aa8:	0003      	movs	r3, r0
 8009aaa:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	613b      	str	r3, [r7, #16]
      break;
 8009ab0:	e00d      	b.n	8009ace <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8009ab2:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	0b5b      	lsrs	r3, r3, #13
 8009ab8:	2207      	movs	r2, #7
 8009aba:	4013      	ands	r3, r2
 8009abc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	2280      	movs	r2, #128	; 0x80
 8009ac4:	0212      	lsls	r2, r2, #8
 8009ac6:	409a      	lsls	r2, r3
 8009ac8:	0013      	movs	r3, r2
 8009aca:	613b      	str	r3, [r7, #16]
      break;
 8009acc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8009ace:	693b      	ldr	r3, [r7, #16]
}
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	b006      	add	sp, #24
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	40021000 	.word	0x40021000
 8009adc:	003d0900 	.word	0x003d0900
 8009ae0:	00f42400 	.word	0x00f42400
 8009ae4:	007a1200 	.word	0x007a1200
 8009ae8:	0801acd8 	.word	0x0801acd8

08009aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009af0:	4b02      	ldr	r3, [pc, #8]	; (8009afc <HAL_RCC_GetHCLKFreq+0x10>)
 8009af2:	681b      	ldr	r3, [r3, #0]
}
 8009af4:	0018      	movs	r0, r3
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	46c0      	nop			; (mov r8, r8)
 8009afc:	20000030 	.word	0x20000030

08009b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009b04:	f7ff fff2 	bl	8009aec <HAL_RCC_GetHCLKFreq>
 8009b08:	0001      	movs	r1, r0
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009b0c:	68db      	ldr	r3, [r3, #12]
 8009b0e:	0a1b      	lsrs	r3, r3, #8
 8009b10:	2207      	movs	r2, #7
 8009b12:	4013      	ands	r3, r2
 8009b14:	4a04      	ldr	r2, [pc, #16]	; (8009b28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009b16:	5cd3      	ldrb	r3, [r2, r3]
 8009b18:	40d9      	lsrs	r1, r3
 8009b1a:	000b      	movs	r3, r1
}
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	46c0      	nop			; (mov r8, r8)
 8009b24:	40021000 	.word	0x40021000
 8009b28:	0801acd0 	.word	0x0801acd0

08009b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009b30:	f7ff ffdc 	bl	8009aec <HAL_RCC_GetHCLKFreq>
 8009b34:	0001      	movs	r1, r0
 8009b36:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b38:	68db      	ldr	r3, [r3, #12]
 8009b3a:	0adb      	lsrs	r3, r3, #11
 8009b3c:	2207      	movs	r2, #7
 8009b3e:	4013      	ands	r3, r2
 8009b40:	4a04      	ldr	r2, [pc, #16]	; (8009b54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b42:	5cd3      	ldrb	r3, [r2, r3]
 8009b44:	40d9      	lsrs	r1, r3
 8009b46:	000b      	movs	r3, r1
}
 8009b48:	0018      	movs	r0, r3
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	40021000 	.word	0x40021000
 8009b54:	0801acd0 	.word	0x0801acd0

08009b58 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2220      	movs	r2, #32
 8009b66:	4013      	ands	r3, r2
 8009b68:	d100      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x14>
 8009b6a:	e0c7      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8009b6c:	2317      	movs	r3, #23
 8009b6e:	18fb      	adds	r3, r7, r3
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b74:	4b99      	ldr	r3, [pc, #612]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b78:	2380      	movs	r3, #128	; 0x80
 8009b7a:	055b      	lsls	r3, r3, #21
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d10a      	bne.n	8009b96 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b80:	4b96      	ldr	r3, [pc, #600]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b84:	4b95      	ldr	r3, [pc, #596]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009b86:	2180      	movs	r1, #128	; 0x80
 8009b88:	0549      	lsls	r1, r1, #21
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8009b8e:	2317      	movs	r3, #23
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	2201      	movs	r2, #1
 8009b94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b96:	4b92      	ldr	r3, [pc, #584]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	2380      	movs	r3, #128	; 0x80
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	d11a      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ba2:	4b8f      	ldr	r3, [pc, #572]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4b8e      	ldr	r3, [pc, #568]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009ba8:	2180      	movs	r1, #128	; 0x80
 8009baa:	0049      	lsls	r1, r1, #1
 8009bac:	430a      	orrs	r2, r1
 8009bae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bb0:	f7fe f822 	bl	8007bf8 <HAL_GetTick>
 8009bb4:	0003      	movs	r3, r0
 8009bb6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bb8:	e008      	b.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bba:	f7fe f81d 	bl	8007bf8 <HAL_GetTick>
 8009bbe:	0002      	movs	r2, r0
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	2b64      	cmp	r3, #100	; 0x64
 8009bc6:	d901      	bls.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e102      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bcc:	4b84      	ldr	r3, [pc, #528]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	2380      	movs	r3, #128	; 0x80
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	d0f0      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8009bd8:	4b80      	ldr	r3, [pc, #512]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	23c0      	movs	r3, #192	; 0xc0
 8009bde:	039b      	lsls	r3, r3, #14
 8009be0:	4013      	ands	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	23c0      	movs	r3, #192	; 0xc0
 8009bea:	039b      	lsls	r3, r3, #14
 8009bec:	4013      	ands	r3, r2
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d013      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685a      	ldr	r2, [r3, #4]
 8009bf8:	23c0      	movs	r3, #192	; 0xc0
 8009bfa:	029b      	lsls	r3, r3, #10
 8009bfc:	401a      	ands	r2, r3
 8009bfe:	23c0      	movs	r3, #192	; 0xc0
 8009c00:	029b      	lsls	r3, r3, #10
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d10a      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009c06:	4b75      	ldr	r3, [pc, #468]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	2380      	movs	r3, #128	; 0x80
 8009c0c:	029b      	lsls	r3, r3, #10
 8009c0e:	401a      	ands	r2, r3
 8009c10:	2380      	movs	r3, #128	; 0x80
 8009c12:	029b      	lsls	r3, r3, #10
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d101      	bne.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e0da      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8009c1c:	4b6f      	ldr	r3, [pc, #444]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c20:	23c0      	movs	r3, #192	; 0xc0
 8009c22:	029b      	lsls	r3, r3, #10
 8009c24:	4013      	ands	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d03b      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685a      	ldr	r2, [r3, #4]
 8009c32:	23c0      	movs	r3, #192	; 0xc0
 8009c34:	029b      	lsls	r3, r3, #10
 8009c36:	4013      	ands	r3, r2
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d033      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2220      	movs	r2, #32
 8009c44:	4013      	ands	r3, r2
 8009c46:	d02e      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8009c48:	4b64      	ldr	r3, [pc, #400]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c4c:	4a65      	ldr	r2, [pc, #404]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8009c4e:	4013      	ands	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c52:	4b62      	ldr	r3, [pc, #392]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c56:	4b61      	ldr	r3, [pc, #388]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c58:	2180      	movs	r1, #128	; 0x80
 8009c5a:	0309      	lsls	r1, r1, #12
 8009c5c:	430a      	orrs	r2, r1
 8009c5e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c60:	4b5e      	ldr	r3, [pc, #376]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c64:	4b5d      	ldr	r3, [pc, #372]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c66:	4960      	ldr	r1, [pc, #384]	; (8009de8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8009c68:	400a      	ands	r2, r1
 8009c6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8009c6c:	4b5b      	ldr	r3, [pc, #364]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c6e:	68fa      	ldr	r2, [r7, #12]
 8009c70:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	2380      	movs	r3, #128	; 0x80
 8009c76:	005b      	lsls	r3, r3, #1
 8009c78:	4013      	ands	r3, r2
 8009c7a:	d014      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009c7c:	f7fd ffbc 	bl	8007bf8 <HAL_GetTick>
 8009c80:	0003      	movs	r3, r0
 8009c82:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c84:	e009      	b.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c86:	f7fd ffb7 	bl	8007bf8 <HAL_GetTick>
 8009c8a:	0002      	movs	r2, r0
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	4a56      	ldr	r2, [pc, #344]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d901      	bls.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 8009c96:	2303      	movs	r3, #3
 8009c98:	e09b      	b.n	8009dd2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c9a:	4b50      	ldr	r3, [pc, #320]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009c9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c9e:	2380      	movs	r3, #128	; 0x80
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	d0ef      	beq.n	8009c86 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	23c0      	movs	r3, #192	; 0xc0
 8009cac:	029b      	lsls	r3, r3, #10
 8009cae:	401a      	ands	r2, r3
 8009cb0:	23c0      	movs	r3, #192	; 0xc0
 8009cb2:	029b      	lsls	r3, r3, #10
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d10c      	bne.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009cb8:	4b48      	ldr	r3, [pc, #288]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a4c      	ldr	r2, [pc, #304]	; (8009df0 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	0019      	movs	r1, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	23c0      	movs	r3, #192	; 0xc0
 8009cc8:	039b      	lsls	r3, r3, #14
 8009cca:	401a      	ands	r2, r3
 8009ccc:	4b43      	ldr	r3, [pc, #268]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	4b42      	ldr	r3, [pc, #264]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009cd4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685a      	ldr	r2, [r3, #4]
 8009cda:	23c0      	movs	r3, #192	; 0xc0
 8009cdc:	029b      	lsls	r3, r3, #10
 8009cde:	401a      	ands	r2, r3
 8009ce0:	4b3e      	ldr	r3, [pc, #248]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009ce6:	2317      	movs	r3, #23
 8009ce8:	18fb      	adds	r3, r7, r3
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d105      	bne.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009cf0:	4b3a      	ldr	r3, [pc, #232]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009cf4:	4b39      	ldr	r3, [pc, #228]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009cf6:	493f      	ldr	r1, [pc, #252]	; (8009df4 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8009cf8:	400a      	ands	r2, r1
 8009cfa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2201      	movs	r2, #1
 8009d02:	4013      	ands	r3, r2
 8009d04:	d009      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009d06:	4b35      	ldr	r3, [pc, #212]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d0a:	2203      	movs	r2, #3
 8009d0c:	4393      	bics	r3, r2
 8009d0e:	0019      	movs	r1, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	4b31      	ldr	r3, [pc, #196]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d16:	430a      	orrs	r2, r1
 8009d18:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2202      	movs	r2, #2
 8009d20:	4013      	ands	r3, r2
 8009d22:	d009      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009d24:	4b2d      	ldr	r3, [pc, #180]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d28:	220c      	movs	r2, #12
 8009d2a:	4393      	bics	r3, r2
 8009d2c:	0019      	movs	r1, r3
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	4b2a      	ldr	r3, [pc, #168]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d34:	430a      	orrs	r2, r1
 8009d36:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2204      	movs	r2, #4
 8009d3e:	4013      	ands	r3, r2
 8009d40:	d009      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009d42:	4b26      	ldr	r3, [pc, #152]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d46:	4a2c      	ldr	r2, [pc, #176]	; (8009df8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8009d48:	4013      	ands	r3, r2
 8009d4a:	0019      	movs	r1, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	691a      	ldr	r2, [r3, #16]
 8009d50:	4b22      	ldr	r3, [pc, #136]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d52:	430a      	orrs	r2, r1
 8009d54:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	d009      	beq.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009d60:	4b1e      	ldr	r3, [pc, #120]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d64:	4a25      	ldr	r2, [pc, #148]	; (8009dfc <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8009d66:	4013      	ands	r3, r2
 8009d68:	0019      	movs	r1, r3
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	695a      	ldr	r2, [r3, #20]
 8009d6e:	4b1b      	ldr	r3, [pc, #108]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d70:	430a      	orrs	r2, r1
 8009d72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	2380      	movs	r3, #128	; 0x80
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	d009      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009d80:	4b16      	ldr	r3, [pc, #88]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d84:	4a17      	ldr	r2, [pc, #92]	; (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8009d86:	4013      	ands	r3, r2
 8009d88:	0019      	movs	r1, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699a      	ldr	r2, [r3, #24]
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009d90:	430a      	orrs	r2, r1
 8009d92:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2240      	movs	r2, #64	; 0x40
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	d009      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d9e:	4b0f      	ldr	r3, [pc, #60]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009da2:	4a17      	ldr	r2, [pc, #92]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8009da4:	4013      	ands	r3, r2
 8009da6:	0019      	movs	r1, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a1a      	ldr	r2, [r3, #32]
 8009dac:	4b0b      	ldr	r3, [pc, #44]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009dae:	430a      	orrs	r2, r1
 8009db0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2280      	movs	r2, #128	; 0x80
 8009db8:	4013      	ands	r3, r2
 8009dba:	d009      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8009dbc:	4b07      	ldr	r3, [pc, #28]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dc0:	4a10      	ldr	r2, [pc, #64]	; (8009e04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	0019      	movs	r1, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	69da      	ldr	r2, [r3, #28]
 8009dca:	4b04      	ldr	r3, [pc, #16]	; (8009ddc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	0018      	movs	r0, r3
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	b006      	add	sp, #24
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	46c0      	nop			; (mov r8, r8)
 8009ddc:	40021000 	.word	0x40021000
 8009de0:	40007000 	.word	0x40007000
 8009de4:	fffcffff 	.word	0xfffcffff
 8009de8:	fff7ffff 	.word	0xfff7ffff
 8009dec:	00001388 	.word	0x00001388
 8009df0:	ffcfffff 	.word	0xffcfffff
 8009df4:	efffffff 	.word	0xefffffff
 8009df8:	fffff3ff 	.word	0xfffff3ff
 8009dfc:	ffffcfff 	.word	0xffffcfff
 8009e00:	fbffffff 	.word	0xfbffffff
 8009e04:	fff3ffff 	.word	0xfff3ffff

08009e08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e08e      	b.n	8009f38 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2221      	movs	r2, #33	; 0x21
 8009e1e:	5c9b      	ldrb	r3, [r3, r2]
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d107      	bne.n	8009e36 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2220      	movs	r2, #32
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	0018      	movs	r0, r3
 8009e32:	f7fa fa31 	bl	8004298 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2221      	movs	r2, #33	; 0x21
 8009e3a:	2102      	movs	r1, #2
 8009e3c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	22ca      	movs	r2, #202	; 0xca
 8009e44:	625a      	str	r2, [r3, #36]	; 0x24
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	2253      	movs	r2, #83	; 0x53
 8009e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	0018      	movs	r0, r3
 8009e52:	f000 fca6 	bl	800a7a2 <RTC_EnterInitMode>
 8009e56:	1e03      	subs	r3, r0, #0
 8009e58:	d009      	beq.n	8009e6e <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	22ff      	movs	r2, #255	; 0xff
 8009e60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2221      	movs	r2, #33	; 0x21
 8009e66:	2104      	movs	r1, #4
 8009e68:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e064      	b.n	8009f38 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4931      	ldr	r1, [pc, #196]	; (8009f40 <HAL_RTC_Init+0x138>)
 8009e7a:	400a      	ands	r2, r1
 8009e7c:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6899      	ldr	r1, [r3, #8]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685a      	ldr	r2, [r3, #4]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	431a      	orrs	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	68d2      	ldr	r2, [r2, #12]
 8009ea4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	6919      	ldr	r1, [r3, #16]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	041a      	lsls	r2, r3, #16
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2180      	movs	r1, #128	; 0x80
 8009ec6:	438a      	bics	r2, r1
 8009ec8:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	2103      	movs	r1, #3
 8009ed6:	438a      	bics	r2, r1
 8009ed8:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	69da      	ldr	r2, [r3, #28]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	431a      	orrs	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	430a      	orrs	r2, r1
 8009ef0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	2220      	movs	r2, #32
 8009efa:	4013      	ands	r3, r2
 8009efc:	d113      	bne.n	8009f26 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	0018      	movs	r0, r3
 8009f02:	f000 fc27 	bl	800a754 <HAL_RTC_WaitForSynchro>
 8009f06:	1e03      	subs	r3, r0, #0
 8009f08:	d00d      	beq.n	8009f26 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	22ff      	movs	r2, #255	; 0xff
 8009f10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2221      	movs	r2, #33	; 0x21
 8009f16:	2104      	movs	r1, #4
 8009f18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	2100      	movs	r1, #0
 8009f20:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e008      	b.n	8009f38 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	22ff      	movs	r2, #255	; 0xff
 8009f2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2221      	movs	r2, #33	; 0x21
 8009f32:	2101      	movs	r1, #1
 8009f34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009f36:	2300      	movs	r3, #0
  }
}
 8009f38:	0018      	movs	r0, r3
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	b002      	add	sp, #8
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	ff8fffbf 	.word	0xff8fffbf

08009f44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2220      	movs	r2, #32
 8009f54:	5c9b      	ldrb	r3, [r3, r2]
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d101      	bne.n	8009f5e <HAL_RTC_SetTime+0x1a>
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	e0ad      	b.n	800a0ba <HAL_RTC_SetTime+0x176>
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2220      	movs	r2, #32
 8009f62:	2101      	movs	r1, #1
 8009f64:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2221      	movs	r2, #33	; 0x21
 8009f6a:	2102      	movs	r1, #2
 8009f6c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d125      	bne.n	8009fc0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2240      	movs	r2, #64	; 0x40
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	d102      	bne.n	8009f86 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2200      	movs	r2, #0
 8009f84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 fc33 	bl	800a7f6 <RTC_ByteToBcd2>
 8009f90:	0003      	movs	r3, r0
 8009f92:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	785b      	ldrb	r3, [r3, #1]
 8009f98:	0018      	movs	r0, r3
 8009f9a:	f000 fc2c 	bl	800a7f6 <RTC_ByteToBcd2>
 8009f9e:	0003      	movs	r3, r0
 8009fa0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009fa2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	789b      	ldrb	r3, [r3, #2]
 8009fa8:	0018      	movs	r0, r3
 8009faa:	f000 fc24 	bl	800a7f6 <RTC_ByteToBcd2>
 8009fae:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009fb0:	0022      	movs	r2, r4
 8009fb2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	78db      	ldrb	r3, [r3, #3]
 8009fb8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]
 8009fbe:	e017      	b.n	8009ff0 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	2240      	movs	r2, #64	; 0x40
 8009fc8:	4013      	ands	r3, r2
 8009fca:	d102      	bne.n	8009fd2 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	785b      	ldrb	r3, [r3, #1]
 8009fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009fde:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009fe4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	78db      	ldrb	r3, [r3, #3]
 8009fea:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009fec:	4313      	orrs	r3, r2
 8009fee:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	22ca      	movs	r2, #202	; 0xca
 8009ff6:	625a      	str	r2, [r3, #36]	; 0x24
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2253      	movs	r2, #83	; 0x53
 8009ffe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	0018      	movs	r0, r3
 800a004:	f000 fbcd 	bl	800a7a2 <RTC_EnterInitMode>
 800a008:	1e03      	subs	r3, r0, #0
 800a00a:	d00d      	beq.n	800a028 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	22ff      	movs	r2, #255	; 0xff
 800a012:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2221      	movs	r2, #33	; 0x21
 800a018:	2104      	movs	r1, #4
 800a01a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2220      	movs	r2, #32
 800a020:	2100      	movs	r1, #0
 800a022:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	e048      	b.n	800a0ba <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	4925      	ldr	r1, [pc, #148]	; (800a0c4 <HAL_RTC_SetTime+0x180>)
 800a030:	400a      	ands	r2, r1
 800a032:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	689a      	ldr	r2, [r3, #8]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4922      	ldr	r1, [pc, #136]	; (800a0c8 <HAL_RTC_SetTime+0x184>)
 800a040:	400a      	ands	r2, r1
 800a042:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6899      	ldr	r1, [r3, #8]
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	68da      	ldr	r2, [r3, #12]
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	691b      	ldr	r3, [r3, #16]
 800a052:	431a      	orrs	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	430a      	orrs	r2, r1
 800a05a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68da      	ldr	r2, [r3, #12]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	2180      	movs	r1, #128	; 0x80
 800a068:	438a      	bics	r2, r1
 800a06a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	2220      	movs	r2, #32
 800a074:	4013      	ands	r3, r2
 800a076:	d113      	bne.n	800a0a0 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	0018      	movs	r0, r3
 800a07c:	f000 fb6a 	bl	800a754 <HAL_RTC_WaitForSynchro>
 800a080:	1e03      	subs	r3, r0, #0
 800a082:	d00d      	beq.n	800a0a0 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	22ff      	movs	r2, #255	; 0xff
 800a08a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2221      	movs	r2, #33	; 0x21
 800a090:	2104      	movs	r1, #4
 800a092:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2220      	movs	r2, #32
 800a098:	2100      	movs	r1, #0
 800a09a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e00c      	b.n	800a0ba <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	22ff      	movs	r2, #255	; 0xff
 800a0a6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2221      	movs	r2, #33	; 0x21
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
  }
}
 800a0ba:	0018      	movs	r0, r3
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	b007      	add	sp, #28
 800a0c0:	bd90      	pop	{r4, r7, pc}
 800a0c2:	46c0      	nop			; (mov r8, r8)
 800a0c4:	007f7f7f 	.word	0x007f7f7f
 800a0c8:	fffbffff 	.word	0xfffbffff

0800a0cc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	045b      	lsls	r3, r3, #17
 800a0ea:	0c5a      	lsrs	r2, r3, #17
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a22      	ldr	r2, [pc, #136]	; (800a180 <HAL_RTC_GetTime+0xb4>)
 800a0f8:	4013      	ands	r3, r2
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	0c1b      	lsrs	r3, r3, #16
 800a100:	b2db      	uxtb	r3, r3
 800a102:	223f      	movs	r2, #63	; 0x3f
 800a104:	4013      	ands	r3, r2
 800a106:	b2da      	uxtb	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	0a1b      	lsrs	r3, r3, #8
 800a110:	b2db      	uxtb	r3, r3
 800a112:	227f      	movs	r2, #127	; 0x7f
 800a114:	4013      	ands	r3, r2
 800a116:	b2da      	uxtb	r2, r3
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	227f      	movs	r2, #127	; 0x7f
 800a122:	4013      	ands	r3, r2
 800a124:	b2da      	uxtb	r2, r3
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	0c1b      	lsrs	r3, r3, #16
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	2240      	movs	r2, #64	; 0x40
 800a132:	4013      	ands	r3, r2
 800a134:	b2da      	uxtb	r2, r3
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d11a      	bne.n	800a176 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	0018      	movs	r0, r3
 800a146:	f000 fb7f 	bl	800a848 <RTC_Bcd2ToByte>
 800a14a:	0003      	movs	r3, r0
 800a14c:	001a      	movs	r2, r3
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	785b      	ldrb	r3, [r3, #1]
 800a156:	0018      	movs	r0, r3
 800a158:	f000 fb76 	bl	800a848 <RTC_Bcd2ToByte>
 800a15c:	0003      	movs	r3, r0
 800a15e:	001a      	movs	r2, r3
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	789b      	ldrb	r3, [r3, #2]
 800a168:	0018      	movs	r0, r3
 800a16a:	f000 fb6d 	bl	800a848 <RTC_Bcd2ToByte>
 800a16e:	0003      	movs	r3, r0
 800a170:	001a      	movs	r2, r3
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	0018      	movs	r0, r3
 800a17a:	46bd      	mov	sp, r7
 800a17c:	b006      	add	sp, #24
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	007f7f7f 	.word	0x007f7f7f

0800a184 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a184:	b590      	push	{r4, r7, lr}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	2220      	movs	r2, #32
 800a194:	5c9b      	ldrb	r3, [r3, r2]
 800a196:	2b01      	cmp	r3, #1
 800a198:	d101      	bne.n	800a19e <HAL_RTC_SetDate+0x1a>
 800a19a:	2302      	movs	r3, #2
 800a19c:	e099      	b.n	800a2d2 <HAL_RTC_SetDate+0x14e>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2220      	movs	r2, #32
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2221      	movs	r2, #33	; 0x21
 800a1aa:	2102      	movs	r1, #2
 800a1ac:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d10e      	bne.n	800a1d2 <HAL_RTC_SetDate+0x4e>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	785b      	ldrb	r3, [r3, #1]
 800a1b8:	001a      	movs	r2, r3
 800a1ba:	2310      	movs	r3, #16
 800a1bc:	4013      	ands	r3, r2
 800a1be:	d008      	beq.n	800a1d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	785b      	ldrb	r3, [r3, #1]
 800a1c4:	2210      	movs	r2, #16
 800a1c6:	4393      	bics	r3, r2
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	330a      	adds	r3, #10
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d11c      	bne.n	800a212 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	78db      	ldrb	r3, [r3, #3]
 800a1dc:	0018      	movs	r0, r3
 800a1de:	f000 fb0a 	bl	800a7f6 <RTC_ByteToBcd2>
 800a1e2:	0003      	movs	r3, r0
 800a1e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	0018      	movs	r0, r3
 800a1ec:	f000 fb03 	bl	800a7f6 <RTC_ByteToBcd2>
 800a1f0:	0003      	movs	r3, r0
 800a1f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a1f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	789b      	ldrb	r3, [r3, #2]
 800a1fa:	0018      	movs	r0, r3
 800a1fc:	f000 fafb 	bl	800a7f6 <RTC_ByteToBcd2>
 800a200:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a202:	0022      	movs	r2, r4
 800a204:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a20c:	4313      	orrs	r3, r2
 800a20e:	617b      	str	r3, [r7, #20]
 800a210:	e00e      	b.n	800a230 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	78db      	ldrb	r3, [r3, #3]
 800a216:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a21e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a224:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a22c:	4313      	orrs	r3, r2
 800a22e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	22ca      	movs	r2, #202	; 0xca
 800a236:	625a      	str	r2, [r3, #36]	; 0x24
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2253      	movs	r2, #83	; 0x53
 800a23e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	0018      	movs	r0, r3
 800a244:	f000 faad 	bl	800a7a2 <RTC_EnterInitMode>
 800a248:	1e03      	subs	r3, r0, #0
 800a24a:	d00d      	beq.n	800a268 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	22ff      	movs	r2, #255	; 0xff
 800a252:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2221      	movs	r2, #33	; 0x21
 800a258:	2104      	movs	r1, #4
 800a25a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2220      	movs	r2, #32
 800a260:	2100      	movs	r1, #0
 800a262:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e034      	b.n	800a2d2 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	491b      	ldr	r1, [pc, #108]	; (800a2dc <HAL_RTC_SetDate+0x158>)
 800a270:	400a      	ands	r2, r1
 800a272:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	2180      	movs	r1, #128	; 0x80
 800a280:	438a      	bics	r2, r1
 800a282:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	2220      	movs	r2, #32
 800a28c:	4013      	ands	r3, r2
 800a28e:	d113      	bne.n	800a2b8 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	0018      	movs	r0, r3
 800a294:	f000 fa5e 	bl	800a754 <HAL_RTC_WaitForSynchro>
 800a298:	1e03      	subs	r3, r0, #0
 800a29a:	d00d      	beq.n	800a2b8 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	22ff      	movs	r2, #255	; 0xff
 800a2a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2221      	movs	r2, #33	; 0x21
 800a2a8:	2104      	movs	r1, #4
 800a2aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e00c      	b.n	800a2d2 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	22ff      	movs	r2, #255	; 0xff
 800a2be:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2221      	movs	r2, #33	; 0x21
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
  }
}
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	b007      	add	sp, #28
 800a2d8:	bd90      	pop	{r4, r7, pc}
 800a2da:	46c0      	nop			; (mov r8, r8)
 800a2dc:	00ffff3f 	.word	0x00ffff3f

0800a2e0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	4a21      	ldr	r2, [pc, #132]	; (800a378 <HAL_RTC_GetDate+0x98>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	0c1b      	lsrs	r3, r3, #16
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	0a1b      	lsrs	r3, r3, #8
 800a306:	b2db      	uxtb	r3, r3
 800a308:	221f      	movs	r2, #31
 800a30a:	4013      	ands	r3, r2
 800a30c:	b2da      	uxtb	r2, r3
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	b2db      	uxtb	r3, r3
 800a316:	223f      	movs	r2, #63	; 0x3f
 800a318:	4013      	ands	r3, r2
 800a31a:	b2da      	uxtb	r2, r3
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	0b5b      	lsrs	r3, r3, #13
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2207      	movs	r2, #7
 800a328:	4013      	ands	r3, r2
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d11a      	bne.n	800a36c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	78db      	ldrb	r3, [r3, #3]
 800a33a:	0018      	movs	r0, r3
 800a33c:	f000 fa84 	bl	800a848 <RTC_Bcd2ToByte>
 800a340:	0003      	movs	r3, r0
 800a342:	001a      	movs	r2, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	785b      	ldrb	r3, [r3, #1]
 800a34c:	0018      	movs	r0, r3
 800a34e:	f000 fa7b 	bl	800a848 <RTC_Bcd2ToByte>
 800a352:	0003      	movs	r3, r0
 800a354:	001a      	movs	r2, r3
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	789b      	ldrb	r3, [r3, #2]
 800a35e:	0018      	movs	r0, r3
 800a360:	f000 fa72 	bl	800a848 <RTC_Bcd2ToByte>
 800a364:	0003      	movs	r3, r0
 800a366:	001a      	movs	r2, r3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	0018      	movs	r0, r3
 800a370:	46bd      	mov	sp, r7
 800a372:	b006      	add	sp, #24
 800a374:	bd80      	pop	{r7, pc}
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	00ffff3f 	.word	0x00ffff3f

0800a37c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a37c:	b590      	push	{r4, r7, lr}
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2220      	movs	r2, #32
 800a38c:	5c9b      	ldrb	r3, [r3, r2]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <HAL_RTC_SetAlarm_IT+0x1a>
 800a392:	2302      	movs	r3, #2
 800a394:	e130      	b.n	800a5f8 <HAL_RTC_SetAlarm_IT+0x27c>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2220      	movs	r2, #32
 800a39a:	2101      	movs	r1, #1
 800a39c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2221      	movs	r2, #33	; 0x21
 800a3a2:	2102      	movs	r1, #2
 800a3a4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d136      	bne.n	800a41a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	689b      	ldr	r3, [r3, #8]
 800a3b2:	2240      	movs	r2, #64	; 0x40
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	d102      	bne.n	800a3be <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	f000 fa17 	bl	800a7f6 <RTC_ByteToBcd2>
 800a3c8:	0003      	movs	r3, r0
 800a3ca:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	785b      	ldrb	r3, [r3, #1]
 800a3d0:	0018      	movs	r0, r3
 800a3d2:	f000 fa10 	bl	800a7f6 <RTC_ByteToBcd2>
 800a3d6:	0003      	movs	r3, r0
 800a3d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a3da:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	789b      	ldrb	r3, [r3, #2]
 800a3e0:	0018      	movs	r0, r3
 800a3e2:	f000 fa08 	bl	800a7f6 <RTC_ByteToBcd2>
 800a3e6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a3e8:	0022      	movs	r2, r4
 800a3ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	78db      	ldrb	r3, [r3, #3]
 800a3f0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	5c9b      	ldrb	r3, [r3, r2]
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	f000 f9fa 	bl	800a7f6 <RTC_ByteToBcd2>
 800a402:	0003      	movs	r3, r0
 800a404:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a406:	0022      	movs	r2, r4
 800a408:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a40e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a414:	4313      	orrs	r3, r2
 800a416:	61fb      	str	r3, [r7, #28]
 800a418:	e022      	b.n	800a460 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	2240      	movs	r2, #64	; 0x40
 800a422:	4013      	ands	r3, r2
 800a424:	d102      	bne.n	800a42c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	785b      	ldrb	r3, [r3, #1]
 800a436:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a438:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a43e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	78db      	ldrb	r3, [r3, #3]
 800a444:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a446:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	2120      	movs	r1, #32
 800a44c:	5c5b      	ldrb	r3, [r3, r1]
 800a44e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a450:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a456:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a45c:	4313      	orrs	r3, r2
 800a45e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	4313      	orrs	r3, r2
 800a46a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	22ca      	movs	r2, #202	; 0xca
 800a472:	625a      	str	r2, [r3, #36]	; 0x24
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2253      	movs	r2, #83	; 0x53
 800a47a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm 	  HAL_I2C_Master_Transmit(&hi2c1,0register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a480:	2380      	movs	r3, #128	; 0x80
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	429a      	cmp	r2, r3
 800a486:	d14e      	bne.n	800a526 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	689a      	ldr	r2, [r3, #8]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	495b      	ldr	r1, [pc, #364]	; (800a600 <HAL_RTC_SetAlarm_IT+0x284>)
 800a494:	400a      	ands	r2, r1
 800a496:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	22ff      	movs	r2, #255	; 0xff
 800a4a0:	401a      	ands	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4957      	ldr	r1, [pc, #348]	; (800a604 <HAL_RTC_SetAlarm_IT+0x288>)
 800a4a8:	430a      	orrs	r2, r1
 800a4aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a4ac:	f7fd fba4 	bl	8007bf8 <HAL_GetTick>
 800a4b0:	0003      	movs	r3, r0
 800a4b2:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a4b4:	e016      	b.n	800a4e4 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a4b6:	f7fd fb9f 	bl	8007bf8 <HAL_GetTick>
 800a4ba:	0002      	movs	r2, r0
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	1ad2      	subs	r2, r2, r3
 800a4c0:	23fa      	movs	r3, #250	; 0xfa
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d90d      	bls.n	800a4e4 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	22ff      	movs	r2, #255	; 0xff
 800a4ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2221      	movs	r2, #33	; 0x21
 800a4d4:	2103      	movs	r1, #3
 800a4d6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2220      	movs	r2, #32
 800a4dc:	2100      	movs	r1, #0
 800a4de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	e089      	b.n	800a5f8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	4013      	ands	r3, r2
 800a4ee:	d0e2      	beq.n	800a4b6 <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	69fa      	ldr	r2, [r7, #28]
 800a4f6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2180      	movs	r1, #128	; 0x80
 800a50c:	0049      	lsls	r1, r1, #1
 800a50e:	430a      	orrs	r2, r1
 800a510:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689a      	ldr	r2, [r3, #8]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2180      	movs	r1, #128	; 0x80
 800a51e:	0149      	lsls	r1, r1, #5
 800a520:	430a      	orrs	r2, r1
 800a522:	609a      	str	r2, [r3, #8]
 800a524:	e04d      	b.n	800a5c2 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4935      	ldr	r1, [pc, #212]	; (800a608 <HAL_RTC_SetAlarm_IT+0x28c>)
 800a532:	400a      	ands	r2, r1
 800a534:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	22ff      	movs	r2, #255	; 0xff
 800a53e:	401a      	ands	r2, r3
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4931      	ldr	r1, [pc, #196]	; (800a60c <HAL_RTC_SetAlarm_IT+0x290>)
 800a546:	430a      	orrs	r2, r1
 800a548:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a54a:	f7fd fb55 	bl	8007bf8 <HAL_GetTick>
 800a54e:	0003      	movs	r3, r0
 800a550:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a552:	e016      	b.n	800a582 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a554:	f7fd fb50 	bl	8007bf8 <HAL_GetTick>
 800a558:	0002      	movs	r2, r0
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	1ad2      	subs	r2, r2, r3
 800a55e:	23fa      	movs	r3, #250	; 0xfa
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	429a      	cmp	r2, r3
 800a564:	d90d      	bls.n	800a582 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	22ff      	movs	r2, #255	; 0xff
 800a56c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2221      	movs	r2, #33	; 0x21
 800a572:	2103      	movs	r1, #3
 800a574:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2220      	movs	r2, #32
 800a57a:	2100      	movs	r1, #0
 800a57c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e03a      	b.n	800a5f8 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	2202      	movs	r2, #2
 800a58a:	4013      	ands	r3, r2
 800a58c:	d0e2      	beq.n	800a554 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	69fa      	ldr	r2, [r7, #28]
 800a594:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	689a      	ldr	r2, [r3, #8]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2180      	movs	r1, #128	; 0x80
 800a5aa:	0089      	lsls	r1, r1, #2
 800a5ac:	430a      	orrs	r2, r1
 800a5ae:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689a      	ldr	r2, [r3, #8]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2180      	movs	r1, #128	; 0x80
 800a5bc:	0189      	lsls	r1, r1, #6
 800a5be:	430a      	orrs	r2, r1
 800a5c0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a5c2:	4b13      	ldr	r3, [pc, #76]	; (800a610 <HAL_RTC_SetAlarm_IT+0x294>)
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	4b12      	ldr	r3, [pc, #72]	; (800a610 <HAL_RTC_SetAlarm_IT+0x294>)
 800a5c8:	2180      	movs	r1, #128	; 0x80
 800a5ca:	0289      	lsls	r1, r1, #10
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <HAL_RTC_SetAlarm_IT+0x294>)
 800a5d2:	689a      	ldr	r2, [r3, #8]
 800a5d4:	4b0e      	ldr	r3, [pc, #56]	; (800a610 <HAL_RTC_SetAlarm_IT+0x294>)
 800a5d6:	2180      	movs	r1, #128	; 0x80
 800a5d8:	0289      	lsls	r1, r1, #10
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	22ff      	movs	r2, #255	; 0xff
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	2221      	movs	r2, #33	; 0x21
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2220      	movs	r2, #32
 800a5f2:	2100      	movs	r1, #0
 800a5f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a5f6:	2300      	movs	r3, #0
}
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	b009      	add	sp, #36	; 0x24
 800a5fe:	bd90      	pop	{r4, r7, pc}
 800a600:	fffffeff 	.word	0xfffffeff
 800a604:	fffffe7f 	.word	0xfffffe7f
 800a608:	fffffdff 	.word	0xfffffdff
 800a60c:	fffffd7f 	.word	0xfffffd7f
 800a610:	40010400 	.word	0x40010400

0800a614 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	5c9b      	ldrb	r3, [r3, r2]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d101      	bne.n	800a62c <HAL_RTC_DeactivateAlarm+0x18>
 800a628:	2302      	movs	r3, #2
 800a62a:	e086      	b.n	800a73a <HAL_RTC_DeactivateAlarm+0x126>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2220      	movs	r2, #32
 800a630:	2101      	movs	r1, #1
 800a632:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2221      	movs	r2, #33	; 0x21
 800a638:	2102      	movs	r1, #2
 800a63a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	22ca      	movs	r2, #202	; 0xca
 800a642:	625a      	str	r2, [r3, #36]	; 0x24
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2253      	movs	r2, #83	; 0x53
 800a64a:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	2380      	movs	r3, #128	; 0x80
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	429a      	cmp	r2, r3
 800a654:	d132      	bne.n	800a6bc <HAL_RTC_DeactivateAlarm+0xa8>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4938      	ldr	r1, [pc, #224]	; (800a744 <HAL_RTC_DeactivateAlarm+0x130>)
 800a662:	400a      	ands	r2, r1
 800a664:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	689a      	ldr	r2, [r3, #8]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4935      	ldr	r1, [pc, #212]	; (800a748 <HAL_RTC_DeactivateAlarm+0x134>)
 800a672:	400a      	ands	r2, r1
 800a674:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a676:	f7fd fabf 	bl	8007bf8 <HAL_GetTick>
 800a67a:	0003      	movs	r3, r0
 800a67c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a67e:	e016      	b.n	800a6ae <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a680:	f7fd faba 	bl	8007bf8 <HAL_GetTick>
 800a684:	0002      	movs	r2, r0
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	1ad2      	subs	r2, r2, r3
 800a68a:	23fa      	movs	r3, #250	; 0xfa
 800a68c:	009b      	lsls	r3, r3, #2
 800a68e:	429a      	cmp	r2, r3
 800a690:	d90d      	bls.n	800a6ae <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	22ff      	movs	r2, #255	; 0xff
 800a698:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2221      	movs	r2, #33	; 0x21
 800a69e:	2103      	movs	r1, #3
 800a6a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e045      	b.n	800a73a <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68db      	ldr	r3, [r3, #12]
 800a6b4:	2201      	movs	r2, #1
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	d0e2      	beq.n	800a680 <HAL_RTC_DeactivateAlarm+0x6c>
 800a6ba:	e031      	b.n	800a720 <HAL_RTC_DeactivateAlarm+0x10c>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4921      	ldr	r1, [pc, #132]	; (800a74c <HAL_RTC_DeactivateAlarm+0x138>)
 800a6c8:	400a      	ands	r2, r1
 800a6ca:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	491e      	ldr	r1, [pc, #120]	; (800a750 <HAL_RTC_DeactivateAlarm+0x13c>)
 800a6d8:	400a      	ands	r2, r1
 800a6da:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800a6dc:	f7fd fa8c 	bl	8007bf8 <HAL_GetTick>
 800a6e0:	0003      	movs	r3, r0
 800a6e2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a6e4:	e016      	b.n	800a714 <HAL_RTC_DeactivateAlarm+0x100>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6e6:	f7fd fa87 	bl	8007bf8 <HAL_GetTick>
 800a6ea:	0002      	movs	r2, r0
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	1ad2      	subs	r2, r2, r3
 800a6f0:	23fa      	movs	r3, #250	; 0xfa
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d90d      	bls.n	800a714 <HAL_RTC_DeactivateAlarm+0x100>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	22ff      	movs	r2, #255	; 0xff
 800a6fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2221      	movs	r2, #33	; 0x21
 800a704:	2103      	movs	r1, #3
 800a706:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2220      	movs	r2, #32
 800a70c:	2100      	movs	r1, #0
 800a70e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e012      	b.n	800a73a <HAL_RTC_DeactivateAlarm+0x126>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	2202      	movs	r2, #2
 800a71c:	4013      	ands	r3, r2
 800a71e:	d0e2      	beq.n	800a6e6 <HAL_RTC_DeactivateAlarm+0xd2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	22ff      	movs	r2, #255	; 0xff
 800a726:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2221      	movs	r2, #33	; 0x21
 800a72c:	2101      	movs	r1, #1
 800a72e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2220      	movs	r2, #32
 800a734:	2100      	movs	r1, #0
 800a736:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	0018      	movs	r0, r3
 800a73c:	46bd      	mov	sp, r7
 800a73e:	b004      	add	sp, #16
 800a740:	bd80      	pop	{r7, pc}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	fffffeff 	.word	0xfffffeff
 800a748:	ffffefff 	.word	0xffffefff
 800a74c:	fffffdff 	.word	0xfffffdff
 800a750:	ffffdfff 	.word	0xffffdfff

0800a754 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68da      	ldr	r2, [r3, #12]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	21a0      	movs	r1, #160	; 0xa0
 800a768:	438a      	bics	r2, r1
 800a76a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a76c:	f7fd fa44 	bl	8007bf8 <HAL_GetTick>
 800a770:	0003      	movs	r3, r0
 800a772:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a774:	e00a      	b.n	800a78c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a776:	f7fd fa3f 	bl	8007bf8 <HAL_GetTick>
 800a77a:	0002      	movs	r2, r0
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	1ad2      	subs	r2, r2, r3
 800a780:	23fa      	movs	r3, #250	; 0xfa
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	429a      	cmp	r2, r3
 800a786:	d901      	bls.n	800a78c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a788:	2303      	movs	r3, #3
 800a78a:	e006      	b.n	800a79a <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	2220      	movs	r2, #32
 800a794:	4013      	ands	r3, r2
 800a796:	d0ee      	beq.n	800a776 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	0018      	movs	r0, r3
 800a79c:	46bd      	mov	sp, r7
 800a79e:	b004      	add	sp, #16
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2240      	movs	r2, #64	; 0x40
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	d11a      	bne.n	800a7ec <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	4252      	negs	r2, r2
 800a7be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a7c0:	f7fd fa1a 	bl	8007bf8 <HAL_GetTick>
 800a7c4:	0003      	movs	r3, r0
 800a7c6:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a7c8:	e00a      	b.n	800a7e0 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a7ca:	f7fd fa15 	bl	8007bf8 <HAL_GetTick>
 800a7ce:	0002      	movs	r2, r0
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	1ad2      	subs	r2, r2, r3
 800a7d4:	23fa      	movs	r3, #250	; 0xfa
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d901      	bls.n	800a7e0 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	e006      	b.n	800a7ee <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	2240      	movs	r2, #64	; 0x40
 800a7e8:	4013      	ands	r3, r2
 800a7ea:	d0ee      	beq.n	800a7ca <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b004      	add	sp, #16
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	0002      	movs	r2, r0
 800a7fe:	1dfb      	adds	r3, r7, #7
 800a800:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800a802:	2300      	movs	r3, #0
 800a804:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800a806:	230b      	movs	r3, #11
 800a808:	18fb      	adds	r3, r7, r3
 800a80a:	1dfa      	adds	r2, r7, #7
 800a80c:	7812      	ldrb	r2, [r2, #0]
 800a80e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800a810:	e008      	b.n	800a824 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	3301      	adds	r3, #1
 800a816:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800a818:	220b      	movs	r2, #11
 800a81a:	18bb      	adds	r3, r7, r2
 800a81c:	18ba      	adds	r2, r7, r2
 800a81e:	7812      	ldrb	r2, [r2, #0]
 800a820:	3a0a      	subs	r2, #10
 800a822:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800a824:	230b      	movs	r3, #11
 800a826:	18fb      	adds	r3, r7, r3
 800a828:	781b      	ldrb	r3, [r3, #0]
 800a82a:	2b09      	cmp	r3, #9
 800a82c:	d8f1      	bhi.n	800a812 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	b2db      	uxtb	r3, r3
 800a832:	011b      	lsls	r3, r3, #4
 800a834:	b2da      	uxtb	r2, r3
 800a836:	230b      	movs	r3, #11
 800a838:	18fb      	adds	r3, r7, r3
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	4313      	orrs	r3, r2
 800a83e:	b2db      	uxtb	r3, r3
}
 800a840:	0018      	movs	r0, r3
 800a842:	46bd      	mov	sp, r7
 800a844:	b004      	add	sp, #16
 800a846:	bd80      	pop	{r7, pc}

0800a848 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b084      	sub	sp, #16
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	0002      	movs	r2, r0
 800a850:	1dfb      	adds	r3, r7, #7
 800a852:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800a854:	1dfb      	adds	r3, r7, #7
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	091b      	lsrs	r3, r3, #4
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	001a      	movs	r2, r3
 800a85e:	0013      	movs	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	189b      	adds	r3, r3, r2
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	b2da      	uxtb	r2, r3
 800a86c:	1dfb      	adds	r3, r7, #7
 800a86e:	781b      	ldrb	r3, [r3, #0]
 800a870:	210f      	movs	r1, #15
 800a872:	400b      	ands	r3, r1
 800a874:	b2db      	uxtb	r3, r3
 800a876:	18d3      	adds	r3, r2, r3
 800a878:	b2db      	uxtb	r3, r3
}
 800a87a:	0018      	movs	r0, r3
 800a87c:	46bd      	mov	sp, r7
 800a87e:	b004      	add	sp, #16
 800a880:	bd80      	pop	{r7, pc}

0800a882 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b086      	sub	sp, #24
 800a886:	af00      	add	r7, sp, #0
 800a888:	60f8      	str	r0, [r7, #12]
 800a88a:	60b9      	str	r1, [r7, #8]
 800a88c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	3350      	adds	r3, #80	; 0x50
 800a894:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	18d3      	adds	r3, r2, r3
 800a89e:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	601a      	str	r2, [r3, #0]
}
 800a8a6:	46c0      	nop			; (mov r8, r8)
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	b006      	add	sp, #24
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b084      	sub	sp, #16
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	6039      	str	r1, [r7, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	3350      	adds	r3, #80	; 0x50
 800a8be:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	18d3      	adds	r3, r2, r3
 800a8c8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
}
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	b004      	add	sp, #16
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2220      	movs	r2, #32
 800a8e2:	5c9b      	ldrb	r3, [r3, r2]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_RTCEx_EnableBypassShadow+0x16>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e024      	b.n	800a936 <HAL_RTCEx_EnableBypassShadow+0x60>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	2101      	movs	r1, #1
 800a8f2:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2221      	movs	r2, #33	; 0x21
 800a8f8:	2102      	movs	r1, #2
 800a8fa:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	22ca      	movs	r2, #202	; 0xca
 800a902:	625a      	str	r2, [r3, #36]	; 0x24
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2253      	movs	r2, #83	; 0x53
 800a90a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689a      	ldr	r2, [r3, #8]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2120      	movs	r1, #32
 800a918:	430a      	orrs	r2, r1
 800a91a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	22ff      	movs	r2, #255	; 0xff
 800a922:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2221      	movs	r2, #33	; 0x21
 800a928:	2101      	movs	r1, #1
 800a92a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2220      	movs	r2, #32
 800a930:	2100      	movs	r1, #0
 800a932:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	0018      	movs	r0, r3
 800a938:	46bd      	mov	sp, r7
 800a93a:	b002      	add	sp, #8
 800a93c:	bd80      	pop	{r7, pc}
	...

0800a940 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e059      	b.n	800aa06 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2251      	movs	r2, #81	; 0x51
 800a95c:	5c9b      	ldrb	r3, [r3, r2]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d107      	bne.n	800a974 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2250      	movs	r2, #80	; 0x50
 800a968:	2100      	movs	r1, #0
 800a96a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	0018      	movs	r0, r3
 800a970:	f000 f850 	bl	800aa14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2251      	movs	r2, #81	; 0x51
 800a978:	2102      	movs	r1, #2
 800a97a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2140      	movs	r1, #64	; 0x40
 800a988:	438a      	bics	r2, r1
 800a98a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	431a      	orrs	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	431a      	orrs	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	695b      	ldr	r3, [r3, #20]
 800a9a6:	431a      	orrs	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6999      	ldr	r1, [r3, #24]
 800a9ac:	2380      	movs	r3, #128	; 0x80
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	400b      	ands	r3, r1
 800a9b2:	431a      	orrs	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	69db      	ldr	r3, [r3, #28]
 800a9b8:	431a      	orrs	r2, r3
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6a1b      	ldr	r3, [r3, #32]
 800a9be:	431a      	orrs	r2, r3
 800a9c0:	0011      	movs	r1, r2
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	0c1b      	lsrs	r3, r3, #16
 800a9d4:	2204      	movs	r2, #4
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	0019      	movs	r1, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	69da      	ldr	r2, [r3, #28]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4907      	ldr	r1, [pc, #28]	; (800aa10 <HAL_SPI_Init+0xd0>)
 800a9f2:	400a      	ands	r2, r1
 800a9f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2251      	movs	r2, #81	; 0x51
 800aa00:	2101      	movs	r1, #1
 800aa02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	0018      	movs	r0, r3
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	b002      	add	sp, #8
 800aa0c:	bd80      	pop	{r7, pc}
 800aa0e:	46c0      	nop			; (mov r8, r8)
 800aa10:	fffff7ff 	.word	0xfffff7ff

0800aa14 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800aa1c:	46c0      	nop			; (mov r8, r8)
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	b002      	add	sp, #8
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08c      	sub	sp, #48	; 0x30
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
 800aa30:	001a      	movs	r2, r3
 800aa32:	1cbb      	adds	r3, r7, #2
 800aa34:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aa36:	2301      	movs	r3, #1
 800aa38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aa3a:	232b      	movs	r3, #43	; 0x2b
 800aa3c:	18fb      	adds	r3, r7, r3
 800aa3e:	2200      	movs	r2, #0
 800aa40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2250      	movs	r2, #80	; 0x50
 800aa46:	5c9b      	ldrb	r3, [r3, r2]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_SPI_TransmitReceive+0x2c>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e1a1      	b.n	800ad94 <HAL_SPI_TransmitReceive+0x370>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2250      	movs	r2, #80	; 0x50
 800aa54:	2101      	movs	r1, #1
 800aa56:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa58:	f7fd f8ce 	bl	8007bf8 <HAL_GetTick>
 800aa5c:	0003      	movs	r3, r0
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa60:	2023      	movs	r0, #35	; 0x23
 800aa62:	183b      	adds	r3, r7, r0
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	2151      	movs	r1, #81	; 0x51
 800aa68:	5c52      	ldrb	r2, [r2, r1]
 800aa6a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800aa72:	231a      	movs	r3, #26
 800aa74:	18fb      	adds	r3, r7, r3
 800aa76:	1cba      	adds	r2, r7, #2
 800aa78:	8812      	ldrh	r2, [r2, #0]
 800aa7a:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa7c:	183b      	adds	r3, r7, r0
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d012      	beq.n	800aaaa <HAL_SPI_TransmitReceive+0x86>
 800aa84:	69fa      	ldr	r2, [r7, #28]
 800aa86:	2382      	movs	r3, #130	; 0x82
 800aa88:	005b      	lsls	r3, r3, #1
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d108      	bne.n	800aaa0 <HAL_SPI_TransmitReceive+0x7c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d104      	bne.n	800aaa0 <HAL_SPI_TransmitReceive+0x7c>
 800aa96:	2323      	movs	r3, #35	; 0x23
 800aa98:	18fb      	adds	r3, r7, r3
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b04      	cmp	r3, #4
 800aa9e:	d004      	beq.n	800aaaa <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800aaa0:	232b      	movs	r3, #43	; 0x2b
 800aaa2:	18fb      	adds	r3, r7, r3
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	701a      	strb	r2, [r3, #0]
    goto error;
 800aaa8:	e169      	b.n	800ad7e <HAL_SPI_TransmitReceive+0x35a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d006      	beq.n	800aabe <HAL_SPI_TransmitReceive+0x9a>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d003      	beq.n	800aabe <HAL_SPI_TransmitReceive+0x9a>
 800aab6:	1cbb      	adds	r3, r7, #2
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d104      	bne.n	800aac8 <HAL_SPI_TransmitReceive+0xa4>
  {
    errorcode = HAL_ERROR;
 800aabe:	232b      	movs	r3, #43	; 0x2b
 800aac0:	18fb      	adds	r3, r7, r3
 800aac2:	2201      	movs	r2, #1
 800aac4:	701a      	strb	r2, [r3, #0]
    goto error;
 800aac6:	e15a      	b.n	800ad7e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2251      	movs	r2, #81	; 0x51
 800aacc:	5c9b      	ldrb	r3, [r3, r2]
 800aace:	b2db      	uxtb	r3, r3
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	d003      	beq.n	800aadc <HAL_SPI_TransmitReceive+0xb8>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2251      	movs	r2, #81	; 0x51
 800aad8:	2105      	movs	r1, #5
 800aada:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	1cba      	adds	r2, r7, #2
 800aaec:	8812      	ldrh	r2, [r2, #0]
 800aaee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	1cba      	adds	r2, r7, #2
 800aaf4:	8812      	ldrh	r2, [r2, #0]
 800aaf6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	1cba      	adds	r2, r7, #2
 800ab02:	8812      	ldrh	r2, [r2, #0]
 800ab04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	1cba      	adds	r2, r7, #2
 800ab0a:	8812      	ldrh	r2, [r2, #0]
 800ab0c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2240      	movs	r2, #64	; 0x40
 800ab22:	4013      	ands	r3, r2
 800ab24:	2b40      	cmp	r3, #64	; 0x40
 800ab26:	d007      	beq.n	800ab38 <HAL_SPI_TransmitReceive+0x114>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2140      	movs	r1, #64	; 0x40
 800ab34:	430a      	orrs	r2, r1
 800ab36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	2380      	movs	r3, #128	; 0x80
 800ab3e:	011b      	lsls	r3, r3, #4
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d000      	beq.n	800ab46 <HAL_SPI_TransmitReceive+0x122>
 800ab44:	e07a      	b.n	800ac3c <HAL_SPI_TransmitReceive+0x218>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d004      	beq.n	800ab58 <HAL_SPI_TransmitReceive+0x134>
 800ab4e:	231a      	movs	r3, #26
 800ab50:	18fb      	adds	r3, r7, r3
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d166      	bne.n	800ac26 <HAL_SPI_TransmitReceive+0x202>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	881a      	ldrh	r2, [r3, #0]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab68:	1c9a      	adds	r2, r3, #2
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	3b01      	subs	r3, #1
 800ab76:	b29a      	uxth	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab7c:	e053      	b.n	800ac26 <HAL_SPI_TransmitReceive+0x202>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	689b      	ldr	r3, [r3, #8]
 800ab84:	2202      	movs	r2, #2
 800ab86:	4013      	ands	r3, r2
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d11b      	bne.n	800abc4 <HAL_SPI_TransmitReceive+0x1a0>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d016      	beq.n	800abc4 <HAL_SPI_TransmitReceive+0x1a0>
 800ab96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d113      	bne.n	800abc4 <HAL_SPI_TransmitReceive+0x1a0>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	881a      	ldrh	r2, [r3, #0]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abac:	1c9a      	adds	r2, r3, #2
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	b29a      	uxth	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	2201      	movs	r2, #1
 800abcc:	4013      	ands	r3, r2
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d119      	bne.n	800ac06 <HAL_SPI_TransmitReceive+0x1e2>
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d014      	beq.n	800ac06 <HAL_SPI_TransmitReceive+0x1e2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	b292      	uxth	r2, r2
 800abe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abee:	1c9a      	adds	r2, r3, #2
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	3b01      	subs	r3, #1
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac02:	2301      	movs	r3, #1
 800ac04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ac06:	f7fc fff7 	bl	8007bf8 <HAL_GetTick>
 800ac0a:	0002      	movs	r2, r0
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d807      	bhi.n	800ac26 <HAL_SPI_TransmitReceive+0x202>
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	3301      	adds	r3, #1
 800ac1a:	d004      	beq.n	800ac26 <HAL_SPI_TransmitReceive+0x202>
      {
        errorcode = HAL_TIMEOUT;
 800ac1c:	232b      	movs	r3, #43	; 0x2b
 800ac1e:	18fb      	adds	r3, r7, r3
 800ac20:	2203      	movs	r2, #3
 800ac22:	701a      	strb	r2, [r3, #0]
        goto error;
 800ac24:	e0ab      	b.n	800ad7e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1a6      	bne.n	800ab7e <HAL_SPI_TransmitReceive+0x15a>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1a1      	bne.n	800ab7e <HAL_SPI_TransmitReceive+0x15a>
 800ac3a:	e07f      	b.n	800ad3c <HAL_SPI_TransmitReceive+0x318>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d005      	beq.n	800ac50 <HAL_SPI_TransmitReceive+0x22c>
 800ac44:	231a      	movs	r3, #26
 800ac46:	18fb      	adds	r3, r7, r3
 800ac48:	881b      	ldrh	r3, [r3, #0]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d000      	beq.n	800ac50 <HAL_SPI_TransmitReceive+0x22c>
 800ac4e:	e06b      	b.n	800ad28 <HAL_SPI_TransmitReceive+0x304>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	330c      	adds	r3, #12
 800ac5a:	7812      	ldrb	r2, [r2, #0]
 800ac5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	3b01      	subs	r3, #1
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac76:	e057      	b.n	800ad28 <HAL_SPI_TransmitReceive+0x304>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	4013      	ands	r3, r2
 800ac82:	2b02      	cmp	r3, #2
 800ac84:	d11c      	bne.n	800acc0 <HAL_SPI_TransmitReceive+0x29c>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d017      	beq.n	800acc0 <HAL_SPI_TransmitReceive+0x29c>
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d114      	bne.n	800acc0 <HAL_SPI_TransmitReceive+0x29c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	330c      	adds	r3, #12
 800aca0:	7812      	ldrb	r2, [r2, #0]
 800aca2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	3b01      	subs	r3, #1
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800acbc:	2300      	movs	r3, #0
 800acbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	2201      	movs	r2, #1
 800acc8:	4013      	ands	r3, r2
 800acca:	2b01      	cmp	r3, #1
 800accc:	d119      	bne.n	800ad02 <HAL_SPI_TransmitReceive+0x2de>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d014      	beq.n	800ad02 <HAL_SPI_TransmitReceive+0x2de>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	68da      	ldr	r2, [r3, #12]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acea:	1c5a      	adds	r2, r3, #1
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	3b01      	subs	r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acfe:	2301      	movs	r3, #1
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ad02:	f7fc ff79 	bl	8007bf8 <HAL_GetTick>
 800ad06:	0002      	movs	r2, r0
 800ad08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d802      	bhi.n	800ad18 <HAL_SPI_TransmitReceive+0x2f4>
 800ad12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad14:	3301      	adds	r3, #1
 800ad16:	d102      	bne.n	800ad1e <HAL_SPI_TransmitReceive+0x2fa>
 800ad18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d104      	bne.n	800ad28 <HAL_SPI_TransmitReceive+0x304>
      {
        errorcode = HAL_TIMEOUT;
 800ad1e:	232b      	movs	r3, #43	; 0x2b
 800ad20:	18fb      	adds	r3, r7, r3
 800ad22:	2203      	movs	r2, #3
 800ad24:	701a      	strb	r2, [r3, #0]
        goto error;
 800ad26:	e02a      	b.n	800ad7e <HAL_SPI_TransmitReceive+0x35a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d1a2      	bne.n	800ac78 <HAL_SPI_TransmitReceive+0x254>
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d19d      	bne.n	800ac78 <HAL_SPI_TransmitReceive+0x254>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	0018      	movs	r0, r3
 800ad44:	f000 f89a 	bl	800ae7c <SPI_EndRxTxTransaction>
 800ad48:	1e03      	subs	r3, r0, #0
 800ad4a:	d007      	beq.n	800ad5c <HAL_SPI_TransmitReceive+0x338>
  {
    errorcode = HAL_ERROR;
 800ad4c:	232b      	movs	r3, #43	; 0x2b
 800ad4e:	18fb      	adds	r3, r7, r3
 800ad50:	2201      	movs	r2, #1
 800ad52:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2220      	movs	r2, #32
 800ad58:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ad5a:	e010      	b.n	800ad7e <HAL_SPI_TransmitReceive+0x35a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <HAL_SPI_TransmitReceive+0x358>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad64:	2300      	movs	r3, #0
 800ad66:	617b      	str	r3, [r7, #20]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	617b      	str	r3, [r7, #20]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	617b      	str	r3, [r7, #20]
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	e000      	b.n	800ad7e <HAL_SPI_TransmitReceive+0x35a>
  }

error :
 800ad7c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2251      	movs	r2, #81	; 0x51
 800ad82:	2101      	movs	r1, #1
 800ad84:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2250      	movs	r2, #80	; 0x50
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800ad8e:	232b      	movs	r3, #43	; 0x2b
 800ad90:	18fb      	adds	r3, r7, r3
 800ad92:	781b      	ldrb	r3, [r3, #0]
}
 800ad94:	0018      	movs	r0, r3
 800ad96:	46bd      	mov	sp, r7
 800ad98:	b00c      	add	sp, #48	; 0x30
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	603b      	str	r3, [r7, #0]
 800ada8:	1dfb      	adds	r3, r7, #7
 800adaa:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800adac:	e050      	b.n	800ae50 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	d04d      	beq.n	800ae50 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800adb4:	f7fc ff20 	bl	8007bf8 <HAL_GetTick>
 800adb8:	0002      	movs	r2, r0
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	1ad3      	subs	r3, r2, r3
 800adbe:	683a      	ldr	r2, [r7, #0]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d902      	bls.n	800adca <SPI_WaitFlagStateUntilTimeout+0x2e>
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d142      	bne.n	800ae50 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	685a      	ldr	r2, [r3, #4]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	21e0      	movs	r1, #224	; 0xe0
 800add6:	438a      	bics	r2, r1
 800add8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	2382      	movs	r3, #130	; 0x82
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d113      	bne.n	800ae0e <SPI_WaitFlagStateUntilTimeout+0x72>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	2380      	movs	r3, #128	; 0x80
 800adec:	021b      	lsls	r3, r3, #8
 800adee:	429a      	cmp	r2, r3
 800adf0:	d005      	beq.n	800adfe <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	689a      	ldr	r2, [r3, #8]
 800adf6:	2380      	movs	r3, #128	; 0x80
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d107      	bne.n	800ae0e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2140      	movs	r1, #64	; 0x40
 800ae0a:	438a      	bics	r2, r1
 800ae0c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae12:	2380      	movs	r3, #128	; 0x80
 800ae14:	019b      	lsls	r3, r3, #6
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d110      	bne.n	800ae3c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4914      	ldr	r1, [pc, #80]	; (800ae78 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 800ae26:	400a      	ands	r2, r1
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2180      	movs	r1, #128	; 0x80
 800ae36:	0189      	lsls	r1, r1, #6
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2251      	movs	r2, #81	; 0x51
 800ae40:	2101      	movs	r1, #1
 800ae42:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2250      	movs	r2, #80	; 0x50
 800ae48:	2100      	movs	r1, #0
 800ae4a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e00f      	b.n	800ae70 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	4013      	ands	r3, r2
 800ae5a:	68ba      	ldr	r2, [r7, #8]
 800ae5c:	1ad3      	subs	r3, r2, r3
 800ae5e:	425a      	negs	r2, r3
 800ae60:	4153      	adcs	r3, r2
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	001a      	movs	r2, r3
 800ae66:	1dfb      	adds	r3, r7, #7
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d19f      	bne.n	800adae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	0018      	movs	r0, r3
 800ae72:	46bd      	mov	sp, r7
 800ae74:	b004      	add	sp, #16
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	ffffdfff 	.word	0xffffdfff

0800ae7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	2382      	movs	r3, #130	; 0x82
 800ae8e:	005b      	lsls	r3, r3, #1
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d112      	bne.n	800aeba <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	9300      	str	r3, [sp, #0]
 800ae9c:	0013      	movs	r3, r2
 800ae9e:	2200      	movs	r2, #0
 800aea0:	2180      	movs	r1, #128	; 0x80
 800aea2:	f7ff ff7b 	bl	800ad9c <SPI_WaitFlagStateUntilTimeout>
 800aea6:	1e03      	subs	r3, r0, #0
 800aea8:	d020      	beq.n	800aeec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeae:	2220      	movs	r2, #32
 800aeb0:	431a      	orrs	r2, r3
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e019      	b.n	800aeee <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2251      	movs	r2, #81	; 0x51
 800aebe:	5c9b      	ldrb	r3, [r3, r2]
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	2b05      	cmp	r3, #5
 800aec4:	d112      	bne.n	800aeec <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	68f8      	ldr	r0, [r7, #12]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	0013      	movs	r3, r2
 800aed0:	2200      	movs	r2, #0
 800aed2:	2101      	movs	r1, #1
 800aed4:	f7ff ff62 	bl	800ad9c <SPI_WaitFlagStateUntilTimeout>
 800aed8:	1e03      	subs	r3, r0, #0
 800aeda:	d007      	beq.n	800aeec <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee0:	2220      	movs	r2, #32
 800aee2:	431a      	orrs	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800aee8:	2303      	movs	r3, #3
 800aeea:	e000      	b.n	800aeee <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	0018      	movs	r0, r3
 800aef0:	46bd      	mov	sp, r7
 800aef2:	b004      	add	sp, #16
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	e044      	b.n	800af94 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d107      	bne.n	800af22 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2270      	movs	r2, #112	; 0x70
 800af16:	2100      	movs	r1, #0
 800af18:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	0018      	movs	r0, r3
 800af1e:	f7f9 fe77 	bl	8004c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2224      	movs	r2, #36	; 0x24
 800af26:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2101      	movs	r1, #1
 800af34:	438a      	bics	r2, r1
 800af36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	0018      	movs	r0, r3
 800af3c:	f000 f9f6 	bl	800b32c <UART_SetConfig>
 800af40:	0003      	movs	r3, r0
 800af42:	2b01      	cmp	r3, #1
 800af44:	d101      	bne.n	800af4a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e024      	b.n	800af94 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d003      	beq.n	800af5a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	0018      	movs	r0, r3
 800af56:	f000 fd1d 	bl	800b994 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	490d      	ldr	r1, [pc, #52]	; (800af9c <HAL_UART_Init+0xa4>)
 800af66:	400a      	ands	r2, r1
 800af68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	689a      	ldr	r2, [r3, #8]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	212a      	movs	r1, #42	; 0x2a
 800af76:	438a      	bics	r2, r1
 800af78:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	2101      	movs	r1, #1
 800af86:	430a      	orrs	r2, r1
 800af88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	0018      	movs	r0, r3
 800af8e:	f000 fdb5 	bl	800bafc <UART_CheckIdleState>
 800af92:	0003      	movs	r3, r0
}
 800af94:	0018      	movs	r0, r3
 800af96:	46bd      	mov	sp, r7
 800af98:	b002      	add	sp, #8
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	ffffb7ff 	.word	0xffffb7ff

0800afa0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	1dbb      	adds	r3, r7, #6
 800afac:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afb2:	2b20      	cmp	r3, #32
 800afb4:	d000      	beq.n	800afb8 <HAL_UART_Transmit_DMA+0x18>
 800afb6:	e077      	b.n	800b0a8 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d003      	beq.n	800afc6 <HAL_UART_Transmit_DMA+0x26>
 800afbe:	1dbb      	adds	r3, r7, #6
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800afc6:	2301      	movs	r3, #1
 800afc8:	e06f      	b.n	800b0aa <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	2380      	movs	r3, #128	; 0x80
 800afd0:	015b      	lsls	r3, r3, #5
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d109      	bne.n	800afea <HAL_UART_Transmit_DMA+0x4a>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d105      	bne.n	800afea <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1) != 0)
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	2201      	movs	r2, #1
 800afe2:	4013      	ands	r3, r2
 800afe4:	d001      	beq.n	800afea <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e05f      	b.n	800b0aa <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2270      	movs	r2, #112	; 0x70
 800afee:	5c9b      	ldrb	r3, [r3, r2]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d101      	bne.n	800aff8 <HAL_UART_Transmit_DMA+0x58>
 800aff4:	2302      	movs	r3, #2
 800aff6:	e058      	b.n	800b0aa <HAL_UART_Transmit_DMA+0x10a>
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2270      	movs	r2, #112	; 0x70
 800affc:	2101      	movs	r1, #1
 800affe:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	1dba      	adds	r2, r7, #6
 800b00a:	2150      	movs	r1, #80	; 0x50
 800b00c:	8812      	ldrh	r2, [r2, #0]
 800b00e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	1dba      	adds	r2, r7, #6
 800b014:	2152      	movs	r1, #82	; 0x52
 800b016:	8812      	ldrh	r2, [r2, #0]
 800b018:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2221      	movs	r2, #33	; 0x21
 800b024:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d02a      	beq.n	800b084 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b032:	4a20      	ldr	r2, [pc, #128]	; (800b0b4 <HAL_UART_Transmit_DMA+0x114>)
 800b034:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b03a:	4a1f      	ldr	r2, [pc, #124]	; (800b0b8 <HAL_UART_Transmit_DMA+0x118>)
 800b03c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b042:	4a1e      	ldr	r2, [pc, #120]	; (800b0bc <HAL_UART_Transmit_DMA+0x11c>)
 800b044:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b04a:	2200      	movs	r2, #0
 800b04c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b056:	0019      	movs	r1, r3
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3328      	adds	r3, #40	; 0x28
 800b05e:	001a      	movs	r2, r3
 800b060:	1dbb      	adds	r3, r7, #6
 800b062:	881b      	ldrh	r3, [r3, #0]
 800b064:	f7fd fb2a 	bl	80086bc <HAL_DMA_Start_IT>
 800b068:	1e03      	subs	r3, r0, #0
 800b06a:	d00b      	beq.n	800b084 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2210      	movs	r2, #16
 800b070:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2270      	movs	r2, #112	; 0x70
 800b076:	2100      	movs	r1, #0
 800b078:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2220      	movs	r2, #32
 800b07e:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e012      	b.n	800b0aa <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2240      	movs	r2, #64	; 0x40
 800b08a:	621a      	str	r2, [r3, #32]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2270      	movs	r2, #112	; 0x70
 800b090:	2100      	movs	r1, #0
 800b092:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	689a      	ldr	r2, [r3, #8]
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	2180      	movs	r1, #128	; 0x80
 800b0a0:	430a      	orrs	r2, r1
 800b0a2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e000      	b.n	800b0aa <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b0a8:	2302      	movs	r3, #2
  }
}
 800b0aa:	0018      	movs	r0, r3
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	b004      	add	sp, #16
 800b0b0:	bd80      	pop	{r7, pc}
 800b0b2:	46c0      	nop			; (mov r8, r8)
 800b0b4:	0800bc85 	.word	0x0800bc85
 800b0b8:	0800bcd9 	.word	0x0800bcd9
 800b0bc:	0800bcf7 	.word	0x0800bcf7

0800b0c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	69db      	ldr	r3, [r3, #28]
 800b0ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	220f      	movs	r2, #15
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d112      	bne.n	800b114 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b0ee:	69fb      	ldr	r3, [r7, #28]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	4013      	ands	r3, r2
 800b0f4:	d00e      	beq.n	800b114 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	2220      	movs	r2, #32
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	d00a      	beq.n	800b114 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b102:	2b00      	cmp	r3, #0
 800b104:	d100      	bne.n	800b108 <HAL_UART_IRQHandler+0x48>
 800b106:	e0f6      	b.n	800b2f6 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	0010      	movs	r0, r2
 800b110:	4798      	blx	r3
      }
      return;
 800b112:	e0f0      	b.n	800b2f6 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d100      	bne.n	800b11c <HAL_UART_IRQHandler+0x5c>
 800b11a:	e0b8      	b.n	800b28e <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2201      	movs	r2, #1
 800b120:	4013      	ands	r3, r2
 800b122:	d105      	bne.n	800b130 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	2390      	movs	r3, #144	; 0x90
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	4013      	ands	r3, r2
 800b12c:	d100      	bne.n	800b130 <HAL_UART_IRQHandler+0x70>
 800b12e:	e0ae      	b.n	800b28e <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	2201      	movs	r2, #1
 800b134:	4013      	ands	r3, r2
 800b136:	d00e      	beq.n	800b156 <HAL_UART_IRQHandler+0x96>
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	2380      	movs	r3, #128	; 0x80
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	4013      	ands	r3, r2
 800b140:	d009      	beq.n	800b156 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2201      	movs	r2, #1
 800b148:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b14e:	2201      	movs	r2, #1
 800b150:	431a      	orrs	r2, r3
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b156:	69fb      	ldr	r3, [r7, #28]
 800b158:	2202      	movs	r2, #2
 800b15a:	4013      	ands	r3, r2
 800b15c:	d00d      	beq.n	800b17a <HAL_UART_IRQHandler+0xba>
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2201      	movs	r2, #1
 800b162:	4013      	ands	r3, r2
 800b164:	d009      	beq.n	800b17a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2202      	movs	r2, #2
 800b16c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b172:	2204      	movs	r2, #4
 800b174:	431a      	orrs	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	2204      	movs	r2, #4
 800b17e:	4013      	ands	r3, r2
 800b180:	d00d      	beq.n	800b19e <HAL_UART_IRQHandler+0xde>
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2201      	movs	r2, #1
 800b186:	4013      	ands	r3, r2
 800b188:	d009      	beq.n	800b19e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2204      	movs	r2, #4
 800b190:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b196:	2202      	movs	r2, #2
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	2208      	movs	r2, #8
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	d011      	beq.n	800b1ca <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	2220      	movs	r2, #32
 800b1aa:	4013      	ands	r3, r2
 800b1ac:	d103      	bne.n	800b1b6 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b1b4:	d009      	beq.n	800b1ca <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2208      	movs	r2, #8
 800b1bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1c2:	2208      	movs	r2, #8
 800b1c4:	431a      	orrs	r2, r3
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d100      	bne.n	800b1d4 <HAL_UART_IRQHandler+0x114>
 800b1d2:	e092      	b.n	800b2fa <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	2220      	movs	r2, #32
 800b1d8:	4013      	ands	r3, r2
 800b1da:	d00c      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	d008      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d004      	beq.n	800b1f6 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	0010      	movs	r0, r2
 800b1f4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1fa:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	2240      	movs	r2, #64	; 0x40
 800b204:	4013      	ands	r3, r2
 800b206:	2b40      	cmp	r3, #64	; 0x40
 800b208:	d003      	beq.n	800b212 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2208      	movs	r2, #8
 800b20e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b210:	d033      	beq.n	800b27a <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	0018      	movs	r0, r3
 800b216:	f000 fd15 	bl	800bc44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	2240      	movs	r2, #64	; 0x40
 800b222:	4013      	ands	r3, r2
 800b224:	2b40      	cmp	r3, #64	; 0x40
 800b226:	d123      	bne.n	800b270 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	2140      	movs	r1, #64	; 0x40
 800b234:	438a      	bics	r2, r1
 800b236:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d012      	beq.n	800b266 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b244:	4a30      	ldr	r2, [pc, #192]	; (800b308 <HAL_UART_IRQHandler+0x248>)
 800b246:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b24c:	0018      	movs	r0, r3
 800b24e:	f7fd fa9b 	bl	8008788 <HAL_DMA_Abort_IT>
 800b252:	1e03      	subs	r3, r0, #0
 800b254:	d019      	beq.n	800b28a <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b260:	0018      	movs	r0, r3
 800b262:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b264:	e011      	b.n	800b28a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	0018      	movs	r0, r3
 800b26a:	f000 f857 	bl	800b31c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b26e:	e00c      	b.n	800b28a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	0018      	movs	r0, r3
 800b274:	f000 f852 	bl	800b31c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b278:	e007      	b.n	800b28a <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	0018      	movs	r0, r3
 800b27e:	f000 f84d 	bl	800b31c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b288:	e037      	b.n	800b2fa <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b28a:	46c0      	nop			; (mov r8, r8)
    return;
 800b28c:	e035      	b.n	800b2fa <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	2380      	movs	r3, #128	; 0x80
 800b292:	035b      	lsls	r3, r3, #13
 800b294:	4013      	ands	r3, r2
 800b296:	d00e      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x1f6>
 800b298:	697a      	ldr	r2, [r7, #20]
 800b29a:	2380      	movs	r3, #128	; 0x80
 800b29c:	03db      	lsls	r3, r3, #15
 800b29e:	4013      	ands	r3, r2
 800b2a0:	d009      	beq.n	800b2b6 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2280      	movs	r2, #128	; 0x80
 800b2a8:	0352      	lsls	r2, r2, #13
 800b2aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	0018      	movs	r0, r3
 800b2b0:	f000 fd91 	bl	800bdd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2b4:	e024      	b.n	800b300 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	2280      	movs	r2, #128	; 0x80
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	d00d      	beq.n	800b2da <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	2280      	movs	r2, #128	; 0x80
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	d009      	beq.n	800b2da <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d017      	beq.n	800b2fe <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	0010      	movs	r0, r2
 800b2d6:	4798      	blx	r3
    }
    return;
 800b2d8:	e011      	b.n	800b2fe <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	2240      	movs	r2, #64	; 0x40
 800b2de:	4013      	ands	r3, r2
 800b2e0:	d00e      	beq.n	800b300 <HAL_UART_IRQHandler+0x240>
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	2240      	movs	r2, #64	; 0x40
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	d00a      	beq.n	800b300 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	0018      	movs	r0, r3
 800b2ee:	f000 fd58 	bl	800bda2 <UART_EndTransmit_IT>
    return;
 800b2f2:	46c0      	nop			; (mov r8, r8)
 800b2f4:	e004      	b.n	800b300 <HAL_UART_IRQHandler+0x240>
      return;
 800b2f6:	46c0      	nop			; (mov r8, r8)
 800b2f8:	e002      	b.n	800b300 <HAL_UART_IRQHandler+0x240>
    return;
 800b2fa:	46c0      	nop			; (mov r8, r8)
 800b2fc:	e000      	b.n	800b300 <HAL_UART_IRQHandler+0x240>
    return;
 800b2fe:	46c0      	nop			; (mov r8, r8)
  }

}
 800b300:	46bd      	mov	sp, r7
 800b302:	b008      	add	sp, #32
 800b304:	bd80      	pop	{r7, pc}
 800b306:	46c0      	nop			; (mov r8, r8)
 800b308:	0800bd75 	.word	0x0800bd75

0800b30c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b314:	46c0      	nop			; (mov r8, r8)
 800b316:	46bd      	mov	sp, r7
 800b318:	b002      	add	sp, #8
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b324:	46c0      	nop			; (mov r8, r8)
 800b326:	46bd      	mov	sp, r7
 800b328:	b002      	add	sp, #8
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b32c:	b5b0      	push	{r4, r5, r7, lr}
 800b32e:	b08e      	sub	sp, #56	; 0x38
 800b330:	af00      	add	r7, sp, #0
 800b332:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800b334:	231b      	movs	r3, #27
 800b336:	2218      	movs	r2, #24
 800b338:	4694      	mov	ip, r2
 800b33a:	44bc      	add	ip, r7
 800b33c:	4463      	add	r3, ip
 800b33e:	2210      	movs	r2, #16
 800b340:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 800b342:	2300      	movs	r3, #0
 800b344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 800b346:	2313      	movs	r3, #19
 800b348:	2218      	movs	r2, #24
 800b34a:	4694      	mov	ip, r2
 800b34c:	44bc      	add	ip, r7
 800b34e:	4463      	add	r3, ip
 800b350:	2200      	movs	r2, #0
 800b352:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800b354:	2300      	movs	r3, #0
 800b356:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b358:	69fb      	ldr	r3, [r7, #28]
 800b35a:	689a      	ldr	r2, [r3, #8]
 800b35c:	69fb      	ldr	r3, [r7, #28]
 800b35e:	691b      	ldr	r3, [r3, #16]
 800b360:	431a      	orrs	r2, r3
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	431a      	orrs	r2, r3
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4aca      	ldr	r2, [pc, #808]	; (800b6a0 <UART_SetConfig+0x374>)
 800b378:	4013      	ands	r3, r2
 800b37a:	0019      	movs	r1, r3
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b382:	430a      	orrs	r2, r1
 800b384:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	4ac5      	ldr	r2, [pc, #788]	; (800b6a4 <UART_SetConfig+0x378>)
 800b38e:	4013      	ands	r3, r2
 800b390:	0019      	movs	r1, r3
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	68da      	ldr	r2, [r3, #12]
 800b396:	69fb      	ldr	r3, [r7, #28]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	430a      	orrs	r2, r1
 800b39c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	699b      	ldr	r3, [r3, #24]
 800b3a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4abf      	ldr	r2, [pc, #764]	; (800b6a8 <UART_SetConfig+0x37c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d004      	beq.n	800b3b8 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	4abb      	ldr	r2, [pc, #748]	; (800b6ac <UART_SetConfig+0x380>)
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	0019      	movs	r1, r3
 800b3c4:	69fb      	ldr	r3, [r7, #28]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4ab7      	ldr	r2, [pc, #732]	; (800b6b0 <UART_SetConfig+0x384>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d134      	bne.n	800b442 <UART_SetConfig+0x116>
 800b3d8:	4bb6      	ldr	r3, [pc, #728]	; (800b6b4 <UART_SetConfig+0x388>)
 800b3da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3dc:	2203      	movs	r2, #3
 800b3de:	4013      	ands	r3, r2
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d015      	beq.n	800b410 <UART_SetConfig+0xe4>
 800b3e4:	d304      	bcc.n	800b3f0 <UART_SetConfig+0xc4>
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d00a      	beq.n	800b400 <UART_SetConfig+0xd4>
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d018      	beq.n	800b420 <UART_SetConfig+0xf4>
 800b3ee:	e01f      	b.n	800b430 <UART_SetConfig+0x104>
 800b3f0:	231b      	movs	r3, #27
 800b3f2:	2218      	movs	r2, #24
 800b3f4:	4694      	mov	ip, r2
 800b3f6:	44bc      	add	ip, r7
 800b3f8:	4463      	add	r3, ip
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	e0c5      	b.n	800b58c <UART_SetConfig+0x260>
 800b400:	231b      	movs	r3, #27
 800b402:	2218      	movs	r2, #24
 800b404:	4694      	mov	ip, r2
 800b406:	44bc      	add	ip, r7
 800b408:	4463      	add	r3, ip
 800b40a:	2202      	movs	r2, #2
 800b40c:	701a      	strb	r2, [r3, #0]
 800b40e:	e0bd      	b.n	800b58c <UART_SetConfig+0x260>
 800b410:	231b      	movs	r3, #27
 800b412:	2218      	movs	r2, #24
 800b414:	4694      	mov	ip, r2
 800b416:	44bc      	add	ip, r7
 800b418:	4463      	add	r3, ip
 800b41a:	2204      	movs	r2, #4
 800b41c:	701a      	strb	r2, [r3, #0]
 800b41e:	e0b5      	b.n	800b58c <UART_SetConfig+0x260>
 800b420:	231b      	movs	r3, #27
 800b422:	2218      	movs	r2, #24
 800b424:	4694      	mov	ip, r2
 800b426:	44bc      	add	ip, r7
 800b428:	4463      	add	r3, ip
 800b42a:	2208      	movs	r2, #8
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	e0ad      	b.n	800b58c <UART_SetConfig+0x260>
 800b430:	231b      	movs	r3, #27
 800b432:	2218      	movs	r2, #24
 800b434:	4694      	mov	ip, r2
 800b436:	44bc      	add	ip, r7
 800b438:	4463      	add	r3, ip
 800b43a:	2210      	movs	r2, #16
 800b43c:	701a      	strb	r2, [r3, #0]
 800b43e:	46c0      	nop			; (mov r8, r8)
 800b440:	e0a4      	b.n	800b58c <UART_SetConfig+0x260>
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4a9c      	ldr	r2, [pc, #624]	; (800b6b8 <UART_SetConfig+0x38c>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d137      	bne.n	800b4bc <UART_SetConfig+0x190>
 800b44c:	4b99      	ldr	r3, [pc, #612]	; (800b6b4 <UART_SetConfig+0x388>)
 800b44e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b450:	220c      	movs	r2, #12
 800b452:	4013      	ands	r3, r2
 800b454:	2b04      	cmp	r3, #4
 800b456:	d018      	beq.n	800b48a <UART_SetConfig+0x15e>
 800b458:	d802      	bhi.n	800b460 <UART_SetConfig+0x134>
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d005      	beq.n	800b46a <UART_SetConfig+0x13e>
 800b45e:	e024      	b.n	800b4aa <UART_SetConfig+0x17e>
 800b460:	2b08      	cmp	r3, #8
 800b462:	d00a      	beq.n	800b47a <UART_SetConfig+0x14e>
 800b464:	2b0c      	cmp	r3, #12
 800b466:	d018      	beq.n	800b49a <UART_SetConfig+0x16e>
 800b468:	e01f      	b.n	800b4aa <UART_SetConfig+0x17e>
 800b46a:	231b      	movs	r3, #27
 800b46c:	2218      	movs	r2, #24
 800b46e:	4694      	mov	ip, r2
 800b470:	44bc      	add	ip, r7
 800b472:	4463      	add	r3, ip
 800b474:	2200      	movs	r2, #0
 800b476:	701a      	strb	r2, [r3, #0]
 800b478:	e088      	b.n	800b58c <UART_SetConfig+0x260>
 800b47a:	231b      	movs	r3, #27
 800b47c:	2218      	movs	r2, #24
 800b47e:	4694      	mov	ip, r2
 800b480:	44bc      	add	ip, r7
 800b482:	4463      	add	r3, ip
 800b484:	2202      	movs	r2, #2
 800b486:	701a      	strb	r2, [r3, #0]
 800b488:	e080      	b.n	800b58c <UART_SetConfig+0x260>
 800b48a:	231b      	movs	r3, #27
 800b48c:	2218      	movs	r2, #24
 800b48e:	4694      	mov	ip, r2
 800b490:	44bc      	add	ip, r7
 800b492:	4463      	add	r3, ip
 800b494:	2204      	movs	r2, #4
 800b496:	701a      	strb	r2, [r3, #0]
 800b498:	e078      	b.n	800b58c <UART_SetConfig+0x260>
 800b49a:	231b      	movs	r3, #27
 800b49c:	2218      	movs	r2, #24
 800b49e:	4694      	mov	ip, r2
 800b4a0:	44bc      	add	ip, r7
 800b4a2:	4463      	add	r3, ip
 800b4a4:	2208      	movs	r2, #8
 800b4a6:	701a      	strb	r2, [r3, #0]
 800b4a8:	e070      	b.n	800b58c <UART_SetConfig+0x260>
 800b4aa:	231b      	movs	r3, #27
 800b4ac:	2218      	movs	r2, #24
 800b4ae:	4694      	mov	ip, r2
 800b4b0:	44bc      	add	ip, r7
 800b4b2:	4463      	add	r3, ip
 800b4b4:	2210      	movs	r2, #16
 800b4b6:	701a      	strb	r2, [r3, #0]
 800b4b8:	46c0      	nop			; (mov r8, r8)
 800b4ba:	e067      	b.n	800b58c <UART_SetConfig+0x260>
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a7e      	ldr	r2, [pc, #504]	; (800b6bc <UART_SetConfig+0x390>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d107      	bne.n	800b4d6 <UART_SetConfig+0x1aa>
 800b4c6:	231b      	movs	r3, #27
 800b4c8:	2218      	movs	r2, #24
 800b4ca:	4694      	mov	ip, r2
 800b4cc:	44bc      	add	ip, r7
 800b4ce:	4463      	add	r3, ip
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	701a      	strb	r2, [r3, #0]
 800b4d4:	e05a      	b.n	800b58c <UART_SetConfig+0x260>
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a79      	ldr	r2, [pc, #484]	; (800b6c0 <UART_SetConfig+0x394>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d107      	bne.n	800b4f0 <UART_SetConfig+0x1c4>
 800b4e0:	231b      	movs	r3, #27
 800b4e2:	2218      	movs	r2, #24
 800b4e4:	4694      	mov	ip, r2
 800b4e6:	44bc      	add	ip, r7
 800b4e8:	4463      	add	r3, ip
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	701a      	strb	r2, [r3, #0]
 800b4ee:	e04d      	b.n	800b58c <UART_SetConfig+0x260>
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a6c      	ldr	r2, [pc, #432]	; (800b6a8 <UART_SetConfig+0x37c>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d141      	bne.n	800b57e <UART_SetConfig+0x252>
 800b4fa:	4b6e      	ldr	r3, [pc, #440]	; (800b6b4 <UART_SetConfig+0x388>)
 800b4fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4fe:	23c0      	movs	r3, #192	; 0xc0
 800b500:	011b      	lsls	r3, r3, #4
 800b502:	4013      	ands	r3, r2
 800b504:	2280      	movs	r2, #128	; 0x80
 800b506:	00d2      	lsls	r2, r2, #3
 800b508:	4293      	cmp	r3, r2
 800b50a:	d01f      	beq.n	800b54c <UART_SetConfig+0x220>
 800b50c:	2280      	movs	r2, #128	; 0x80
 800b50e:	00d2      	lsls	r2, r2, #3
 800b510:	4293      	cmp	r3, r2
 800b512:	d802      	bhi.n	800b51a <UART_SetConfig+0x1ee>
 800b514:	2b00      	cmp	r3, #0
 800b516:	d009      	beq.n	800b52c <UART_SetConfig+0x200>
 800b518:	e028      	b.n	800b56c <UART_SetConfig+0x240>
 800b51a:	2280      	movs	r2, #128	; 0x80
 800b51c:	0112      	lsls	r2, r2, #4
 800b51e:	4293      	cmp	r3, r2
 800b520:	d00c      	beq.n	800b53c <UART_SetConfig+0x210>
 800b522:	22c0      	movs	r2, #192	; 0xc0
 800b524:	0112      	lsls	r2, r2, #4
 800b526:	4293      	cmp	r3, r2
 800b528:	d018      	beq.n	800b55c <UART_SetConfig+0x230>
 800b52a:	e01f      	b.n	800b56c <UART_SetConfig+0x240>
 800b52c:	231b      	movs	r3, #27
 800b52e:	2218      	movs	r2, #24
 800b530:	4694      	mov	ip, r2
 800b532:	44bc      	add	ip, r7
 800b534:	4463      	add	r3, ip
 800b536:	2200      	movs	r2, #0
 800b538:	701a      	strb	r2, [r3, #0]
 800b53a:	e027      	b.n	800b58c <UART_SetConfig+0x260>
 800b53c:	231b      	movs	r3, #27
 800b53e:	2218      	movs	r2, #24
 800b540:	4694      	mov	ip, r2
 800b542:	44bc      	add	ip, r7
 800b544:	4463      	add	r3, ip
 800b546:	2202      	movs	r2, #2
 800b548:	701a      	strb	r2, [r3, #0]
 800b54a:	e01f      	b.n	800b58c <UART_SetConfig+0x260>
 800b54c:	231b      	movs	r3, #27
 800b54e:	2218      	movs	r2, #24
 800b550:	4694      	mov	ip, r2
 800b552:	44bc      	add	ip, r7
 800b554:	4463      	add	r3, ip
 800b556:	2204      	movs	r2, #4
 800b558:	701a      	strb	r2, [r3, #0]
 800b55a:	e017      	b.n	800b58c <UART_SetConfig+0x260>
 800b55c:	231b      	movs	r3, #27
 800b55e:	2218      	movs	r2, #24
 800b560:	4694      	mov	ip, r2
 800b562:	44bc      	add	ip, r7
 800b564:	4463      	add	r3, ip
 800b566:	2208      	movs	r2, #8
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	e00f      	b.n	800b58c <UART_SetConfig+0x260>
 800b56c:	231b      	movs	r3, #27
 800b56e:	2218      	movs	r2, #24
 800b570:	4694      	mov	ip, r2
 800b572:	44bc      	add	ip, r7
 800b574:	4463      	add	r3, ip
 800b576:	2210      	movs	r2, #16
 800b578:	701a      	strb	r2, [r3, #0]
 800b57a:	46c0      	nop			; (mov r8, r8)
 800b57c:	e006      	b.n	800b58c <UART_SetConfig+0x260>
 800b57e:	231b      	movs	r3, #27
 800b580:	2218      	movs	r2, #24
 800b582:	4694      	mov	ip, r2
 800b584:	44bc      	add	ip, r7
 800b586:	4463      	add	r3, ip
 800b588:	2210      	movs	r2, #16
 800b58a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b58c:	69fb      	ldr	r3, [r7, #28]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a45      	ldr	r2, [pc, #276]	; (800b6a8 <UART_SetConfig+0x37c>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d000      	beq.n	800b598 <UART_SetConfig+0x26c>
 800b596:	e09d      	b.n	800b6d4 <UART_SetConfig+0x3a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b598:	231b      	movs	r3, #27
 800b59a:	2218      	movs	r2, #24
 800b59c:	4694      	mov	ip, r2
 800b59e:	44bc      	add	ip, r7
 800b5a0:	4463      	add	r3, ip
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d00d      	beq.n	800b5c4 <UART_SetConfig+0x298>
 800b5a8:	dc02      	bgt.n	800b5b0 <UART_SetConfig+0x284>
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d005      	beq.n	800b5ba <UART_SetConfig+0x28e>
 800b5ae:	e01d      	b.n	800b5ec <UART_SetConfig+0x2c0>
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d012      	beq.n	800b5da <UART_SetConfig+0x2ae>
 800b5b4:	2b08      	cmp	r3, #8
 800b5b6:	d015      	beq.n	800b5e4 <UART_SetConfig+0x2b8>
 800b5b8:	e018      	b.n	800b5ec <UART_SetConfig+0x2c0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800b5ba:	f7fe faa1 	bl	8009b00 <HAL_RCC_GetPCLK1Freq>
 800b5be:	0003      	movs	r3, r0
 800b5c0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b5c2:	e01b      	b.n	800b5fc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5c4:	4b3b      	ldr	r3, [pc, #236]	; (800b6b4 <UART_SetConfig+0x388>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2210      	movs	r2, #16
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	d002      	beq.n	800b5d4 <UART_SetConfig+0x2a8>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 800b5ce:	4b3d      	ldr	r3, [pc, #244]	; (800b6c4 <UART_SetConfig+0x398>)
 800b5d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 800b5d2:	e013      	b.n	800b5fc <UART_SetConfig+0x2d0>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800b5d4:	4b3c      	ldr	r3, [pc, #240]	; (800b6c8 <UART_SetConfig+0x39c>)
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b5d8:	e010      	b.n	800b5fc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800b5da:	f7fe fa03 	bl	80099e4 <HAL_RCC_GetSysClockFreq>
 800b5de:	0003      	movs	r3, r0
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b5e2:	e00b      	b.n	800b5fc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	021b      	lsls	r3, r3, #8
 800b5e8:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b5ea:	e007      	b.n	800b5fc <UART_SetConfig+0x2d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b5ec:	2313      	movs	r3, #19
 800b5ee:	2218      	movs	r2, #24
 800b5f0:	4694      	mov	ip, r2
 800b5f2:	44bc      	add	ip, r7
 800b5f4:	4463      	add	r3, ip
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	701a      	strb	r2, [r3, #0]
        break;
 800b5fa:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d100      	bne.n	800b604 <UART_SetConfig+0x2d8>
 800b602:	e1a6      	b.n	800b952 <UART_SetConfig+0x626>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b604:	69fb      	ldr	r3, [r7, #28]
 800b606:	685a      	ldr	r2, [r3, #4]
 800b608:	0013      	movs	r3, r2
 800b60a:	005b      	lsls	r3, r3, #1
 800b60c:	189b      	adds	r3, r3, r2
 800b60e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b610:	429a      	cmp	r2, r3
 800b612:	d305      	bcc.n	800b620 <UART_SetConfig+0x2f4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d907      	bls.n	800b630 <UART_SetConfig+0x304>
      {
        ret = HAL_ERROR;
 800b620:	2313      	movs	r3, #19
 800b622:	2218      	movs	r2, #24
 800b624:	4694      	mov	ip, r2
 800b626:	44bc      	add	ip, r7
 800b628:	4463      	add	r3, ip
 800b62a:	2201      	movs	r2, #1
 800b62c:	701a      	strb	r2, [r3, #0]
 800b62e:	e190      	b.n	800b952 <UART_SetConfig+0x626>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	613b      	str	r3, [r7, #16]
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]
 800b638:	6939      	ldr	r1, [r7, #16]
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	000b      	movs	r3, r1
 800b63e:	0e1b      	lsrs	r3, r3, #24
 800b640:	0010      	movs	r0, r2
 800b642:	0205      	lsls	r5, r0, #8
 800b644:	431d      	orrs	r5, r3
 800b646:	000b      	movs	r3, r1
 800b648:	021c      	lsls	r4, r3, #8
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	085b      	lsrs	r3, r3, #1
 800b650:	60bb      	str	r3, [r7, #8]
 800b652:	2300      	movs	r3, #0
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	68b8      	ldr	r0, [r7, #8]
 800b658:	68f9      	ldr	r1, [r7, #12]
 800b65a:	1900      	adds	r0, r0, r4
 800b65c:	4169      	adcs	r1, r5
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	603b      	str	r3, [r7, #0]
 800b664:	2300      	movs	r3, #0
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f7f4 ff3a 	bl	80004e4 <__aeabi_uldivmod>
 800b670:	0003      	movs	r3, r0
 800b672:	000c      	movs	r4, r1
 800b674:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	4a14      	ldr	r2, [pc, #80]	; (800b6cc <UART_SetConfig+0x3a0>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d908      	bls.n	800b690 <UART_SetConfig+0x364>
 800b67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b680:	4a13      	ldr	r2, [pc, #76]	; (800b6d0 <UART_SetConfig+0x3a4>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d804      	bhi.n	800b690 <UART_SetConfig+0x364>
        {
          huart->Instance->BRR = usartdiv;
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b68c:	60da      	str	r2, [r3, #12]
 800b68e:	e160      	b.n	800b952 <UART_SetConfig+0x626>
        }
        else
        {
          ret = HAL_ERROR;
 800b690:	2313      	movs	r3, #19
 800b692:	2218      	movs	r2, #24
 800b694:	4694      	mov	ip, r2
 800b696:	44bc      	add	ip, r7
 800b698:	4463      	add	r3, ip
 800b69a:	2201      	movs	r2, #1
 800b69c:	701a      	strb	r2, [r3, #0]
 800b69e:	e158      	b.n	800b952 <UART_SetConfig+0x626>
 800b6a0:	efff69f3 	.word	0xefff69f3
 800b6a4:	ffffcfff 	.word	0xffffcfff
 800b6a8:	40004800 	.word	0x40004800
 800b6ac:	fffff4ff 	.word	0xfffff4ff
 800b6b0:	40013800 	.word	0x40013800
 800b6b4:	40021000 	.word	0x40021000
 800b6b8:	40004400 	.word	0x40004400
 800b6bc:	40004c00 	.word	0x40004c00
 800b6c0:	40005000 	.word	0x40005000
 800b6c4:	003d0900 	.word	0x003d0900
 800b6c8:	00f42400 	.word	0x00f42400
 800b6cc:	000002ff 	.word	0x000002ff
 800b6d0:	000fffff 	.word	0x000fffff
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	69da      	ldr	r2, [r3, #28]
 800b6d8:	2380      	movs	r3, #128	; 0x80
 800b6da:	021b      	lsls	r3, r3, #8
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d000      	beq.n	800b6e2 <UART_SetConfig+0x3b6>
 800b6e0:	e0a9      	b.n	800b836 <UART_SetConfig+0x50a>
  {
    switch (clocksource)
 800b6e2:	231b      	movs	r3, #27
 800b6e4:	2218      	movs	r2, #24
 800b6e6:	4694      	mov	ip, r2
 800b6e8:	44bc      	add	ip, r7
 800b6ea:	4463      	add	r3, ip
 800b6ec:	781b      	ldrb	r3, [r3, #0]
 800b6ee:	2b08      	cmp	r3, #8
 800b6f0:	d86d      	bhi.n	800b7ce <UART_SetConfig+0x4a2>
 800b6f2:	009a      	lsls	r2, r3, #2
 800b6f4:	4b9f      	ldr	r3, [pc, #636]	; (800b974 <UART_SetConfig+0x648>)
 800b6f6:	18d3      	adds	r3, r2, r3
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b6fc:	f7fe fa00 	bl	8009b00 <HAL_RCC_GetPCLK1Freq>
 800b700:	0003      	movs	r3, r0
 800b702:	005a      	lsls	r2, r3, #1
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	085b      	lsrs	r3, r3, #1
 800b70a:	18d2      	adds	r2, r2, r3
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	0019      	movs	r1, r3
 800b712:	0010      	movs	r0, r2
 800b714:	f7f4 fcf8 	bl	8000108 <__udivsi3>
 800b718:	0003      	movs	r3, r0
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b71e:	e05e      	b.n	800b7de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b720:	f7fe fa04 	bl	8009b2c <HAL_RCC_GetPCLK2Freq>
 800b724:	0003      	movs	r3, r0
 800b726:	005a      	lsls	r2, r3, #1
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	085b      	lsrs	r3, r3, #1
 800b72e:	18d2      	adds	r2, r2, r3
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	0019      	movs	r1, r3
 800b736:	0010      	movs	r0, r2
 800b738:	f7f4 fce6 	bl	8000108 <__udivsi3>
 800b73c:	0003      	movs	r3, r0
 800b73e:	b29b      	uxth	r3, r3
 800b740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b742:	e04c      	b.n	800b7de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b744:	4b8c      	ldr	r3, [pc, #560]	; (800b978 <UART_SetConfig+0x64c>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2210      	movs	r2, #16
 800b74a:	4013      	ands	r3, r2
 800b74c:	d00e      	beq.n	800b76c <UART_SetConfig+0x440>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800b74e:	69fb      	ldr	r3, [r7, #28]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	085b      	lsrs	r3, r3, #1
 800b754:	4a89      	ldr	r2, [pc, #548]	; (800b97c <UART_SetConfig+0x650>)
 800b756:	189a      	adds	r2, r3, r2
 800b758:	69fb      	ldr	r3, [r7, #28]
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	0019      	movs	r1, r3
 800b75e:	0010      	movs	r0, r2
 800b760:	f7f4 fcd2 	bl	8000108 <__udivsi3>
 800b764:	0003      	movs	r3, r0
 800b766:	b29b      	uxth	r3, r3
 800b768:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800b76a:	e038      	b.n	800b7de <UART_SetConfig+0x4b2>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	085b      	lsrs	r3, r3, #1
 800b772:	4a83      	ldr	r2, [pc, #524]	; (800b980 <UART_SetConfig+0x654>)
 800b774:	189a      	adds	r2, r3, r2
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	0019      	movs	r1, r3
 800b77c:	0010      	movs	r0, r2
 800b77e:	f7f4 fcc3 	bl	8000108 <__udivsi3>
 800b782:	0003      	movs	r3, r0
 800b784:	b29b      	uxth	r3, r3
 800b786:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b788:	e029      	b.n	800b7de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b78a:	f7fe f92b 	bl	80099e4 <HAL_RCC_GetSysClockFreq>
 800b78e:	0003      	movs	r3, r0
 800b790:	005a      	lsls	r2, r3, #1
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	685b      	ldr	r3, [r3, #4]
 800b796:	085b      	lsrs	r3, r3, #1
 800b798:	18d2      	adds	r2, r2, r3
 800b79a:	69fb      	ldr	r3, [r7, #28]
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	0019      	movs	r1, r3
 800b7a0:	0010      	movs	r0, r2
 800b7a2:	f7f4 fcb1 	bl	8000108 <__udivsi3>
 800b7a6:	0003      	movs	r3, r0
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7ac:	e017      	b.n	800b7de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	085b      	lsrs	r3, r3, #1
 800b7b4:	2280      	movs	r2, #128	; 0x80
 800b7b6:	0252      	lsls	r2, r2, #9
 800b7b8:	189a      	adds	r2, r3, r2
 800b7ba:	69fb      	ldr	r3, [r7, #28]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	0019      	movs	r1, r3
 800b7c0:	0010      	movs	r0, r2
 800b7c2:	f7f4 fca1 	bl	8000108 <__udivsi3>
 800b7c6:	0003      	movs	r3, r0
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b7cc:	e007      	b.n	800b7de <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b7ce:	2313      	movs	r3, #19
 800b7d0:	2218      	movs	r2, #24
 800b7d2:	4694      	mov	ip, r2
 800b7d4:	44bc      	add	ip, r7
 800b7d6:	4463      	add	r3, ip
 800b7d8:	2201      	movs	r2, #1
 800b7da:	701a      	strb	r2, [r3, #0]
        break;
 800b7dc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e0:	2b0f      	cmp	r3, #15
 800b7e2:	d920      	bls.n	800b826 <UART_SetConfig+0x4fa>
 800b7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7e6:	4a67      	ldr	r2, [pc, #412]	; (800b984 <UART_SetConfig+0x658>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d81c      	bhi.n	800b826 <UART_SetConfig+0x4fa>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	200a      	movs	r0, #10
 800b7f2:	2418      	movs	r4, #24
 800b7f4:	193b      	adds	r3, r7, r4
 800b7f6:	181b      	adds	r3, r3, r0
 800b7f8:	210f      	movs	r1, #15
 800b7fa:	438a      	bics	r2, r1
 800b7fc:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b800:	085b      	lsrs	r3, r3, #1
 800b802:	b29b      	uxth	r3, r3
 800b804:	2207      	movs	r2, #7
 800b806:	4013      	ands	r3, r2
 800b808:	b299      	uxth	r1, r3
 800b80a:	193b      	adds	r3, r7, r4
 800b80c:	181b      	adds	r3, r3, r0
 800b80e:	193a      	adds	r2, r7, r4
 800b810:	1812      	adds	r2, r2, r0
 800b812:	8812      	ldrh	r2, [r2, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	193a      	adds	r2, r7, r4
 800b81e:	1812      	adds	r2, r2, r0
 800b820:	8812      	ldrh	r2, [r2, #0]
 800b822:	60da      	str	r2, [r3, #12]
 800b824:	e095      	b.n	800b952 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800b826:	2313      	movs	r3, #19
 800b828:	2218      	movs	r2, #24
 800b82a:	4694      	mov	ip, r2
 800b82c:	44bc      	add	ip, r7
 800b82e:	4463      	add	r3, ip
 800b830:	2201      	movs	r2, #1
 800b832:	701a      	strb	r2, [r3, #0]
 800b834:	e08d      	b.n	800b952 <UART_SetConfig+0x626>
    }
  }
  else
  {
    switch (clocksource)
 800b836:	231b      	movs	r3, #27
 800b838:	2218      	movs	r2, #24
 800b83a:	4694      	mov	ip, r2
 800b83c:	44bc      	add	ip, r7
 800b83e:	4463      	add	r3, ip
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	2b08      	cmp	r3, #8
 800b844:	d86a      	bhi.n	800b91c <UART_SetConfig+0x5f0>
 800b846:	009a      	lsls	r2, r3, #2
 800b848:	4b4f      	ldr	r3, [pc, #316]	; (800b988 <UART_SetConfig+0x65c>)
 800b84a:	18d3      	adds	r3, r2, r3
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800b850:	f7fe f956 	bl	8009b00 <HAL_RCC_GetPCLK1Freq>
 800b854:	0002      	movs	r2, r0
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	085b      	lsrs	r3, r3, #1
 800b85c:	18d2      	adds	r2, r2, r3
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	0019      	movs	r1, r3
 800b864:	0010      	movs	r0, r2
 800b866:	f7f4 fc4f 	bl	8000108 <__udivsi3>
 800b86a:	0003      	movs	r3, r0
 800b86c:	b29b      	uxth	r3, r3
 800b86e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b870:	e05c      	b.n	800b92c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800b872:	f7fe f95b 	bl	8009b2c <HAL_RCC_GetPCLK2Freq>
 800b876:	0002      	movs	r2, r0
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	085b      	lsrs	r3, r3, #1
 800b87e:	18d2      	adds	r2, r2, r3
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	0019      	movs	r1, r3
 800b886:	0010      	movs	r0, r2
 800b888:	f7f4 fc3e 	bl	8000108 <__udivsi3>
 800b88c:	0003      	movs	r3, r0
 800b88e:	b29b      	uxth	r3, r3
 800b890:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b892:	e04b      	b.n	800b92c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b894:	4b38      	ldr	r3, [pc, #224]	; (800b978 <UART_SetConfig+0x64c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2210      	movs	r2, #16
 800b89a:	4013      	ands	r3, r2
 800b89c:	d00e      	beq.n	800b8bc <UART_SetConfig+0x590>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	085b      	lsrs	r3, r3, #1
 800b8a4:	4a39      	ldr	r2, [pc, #228]	; (800b98c <UART_SetConfig+0x660>)
 800b8a6:	189a      	adds	r2, r3, r2
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	685b      	ldr	r3, [r3, #4]
 800b8ac:	0019      	movs	r1, r3
 800b8ae:	0010      	movs	r0, r2
 800b8b0:	f7f4 fc2a 	bl	8000108 <__udivsi3>
 800b8b4:	0003      	movs	r3, r0
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 800b8ba:	e037      	b.n	800b92c <UART_SetConfig+0x600>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	085b      	lsrs	r3, r3, #1
 800b8c2:	4a33      	ldr	r2, [pc, #204]	; (800b990 <UART_SetConfig+0x664>)
 800b8c4:	189a      	adds	r2, r3, r2
 800b8c6:	69fb      	ldr	r3, [r7, #28]
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	0019      	movs	r1, r3
 800b8cc:	0010      	movs	r0, r2
 800b8ce:	f7f4 fc1b 	bl	8000108 <__udivsi3>
 800b8d2:	0003      	movs	r3, r0
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8d8:	e028      	b.n	800b92c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800b8da:	f7fe f883 	bl	80099e4 <HAL_RCC_GetSysClockFreq>
 800b8de:	0002      	movs	r2, r0
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	685b      	ldr	r3, [r3, #4]
 800b8e4:	085b      	lsrs	r3, r3, #1
 800b8e6:	18d2      	adds	r2, r2, r3
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	685b      	ldr	r3, [r3, #4]
 800b8ec:	0019      	movs	r1, r3
 800b8ee:	0010      	movs	r0, r2
 800b8f0:	f7f4 fc0a 	bl	8000108 <__udivsi3>
 800b8f4:	0003      	movs	r3, r0
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b8fa:	e017      	b.n	800b92c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b8fc:	69fb      	ldr	r3, [r7, #28]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	085b      	lsrs	r3, r3, #1
 800b902:	2280      	movs	r2, #128	; 0x80
 800b904:	0212      	lsls	r2, r2, #8
 800b906:	189a      	adds	r2, r3, r2
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	0019      	movs	r1, r3
 800b90e:	0010      	movs	r0, r2
 800b910:	f7f4 fbfa 	bl	8000108 <__udivsi3>
 800b914:	0003      	movs	r3, r0
 800b916:	b29b      	uxth	r3, r3
 800b918:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b91a:	e007      	b.n	800b92c <UART_SetConfig+0x600>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800b91c:	2313      	movs	r3, #19
 800b91e:	2218      	movs	r2, #24
 800b920:	4694      	mov	ip, r2
 800b922:	44bc      	add	ip, r7
 800b924:	4463      	add	r3, ip
 800b926:	2201      	movs	r2, #1
 800b928:	701a      	strb	r2, [r3, #0]
        break;
 800b92a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b92e:	2b0f      	cmp	r3, #15
 800b930:	d908      	bls.n	800b944 <UART_SetConfig+0x618>
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	4a13      	ldr	r2, [pc, #76]	; (800b984 <UART_SetConfig+0x658>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d804      	bhi.n	800b944 <UART_SetConfig+0x618>
    {
      huart->Instance->BRR = usartdiv;
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b940:	60da      	str	r2, [r3, #12]
 800b942:	e006      	b.n	800b952 <UART_SetConfig+0x626>
    }
    else
    {
      ret = HAL_ERROR;
 800b944:	2313      	movs	r3, #19
 800b946:	2218      	movs	r2, #24
 800b948:	4694      	mov	ip, r2
 800b94a:	44bc      	add	ip, r7
 800b94c:	4463      	add	r3, ip
 800b94e:	2201      	movs	r2, #1
 800b950:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	2200      	movs	r2, #0
 800b956:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	2200      	movs	r2, #0
 800b95c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b95e:	2313      	movs	r3, #19
 800b960:	2218      	movs	r2, #24
 800b962:	4694      	mov	ip, r2
 800b964:	44bc      	add	ip, r7
 800b966:	4463      	add	r3, ip
 800b968:	781b      	ldrb	r3, [r3, #0]
}
 800b96a:	0018      	movs	r0, r3
 800b96c:	46bd      	mov	sp, r7
 800b96e:	b00e      	add	sp, #56	; 0x38
 800b970:	bdb0      	pop	{r4, r5, r7, pc}
 800b972:	46c0      	nop			; (mov r8, r8)
 800b974:	0801ae64 	.word	0x0801ae64
 800b978:	40021000 	.word	0x40021000
 800b97c:	007a1200 	.word	0x007a1200
 800b980:	01e84800 	.word	0x01e84800
 800b984:	0000ffff 	.word	0x0000ffff
 800b988:	0801ae88 	.word	0x0801ae88
 800b98c:	003d0900 	.word	0x003d0900
 800b990:	00f42400 	.word	0x00f42400

0800b994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	d00b      	beq.n	800b9be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	685b      	ldr	r3, [r3, #4]
 800b9ac:	4a4a      	ldr	r2, [pc, #296]	; (800bad8 <UART_AdvFeatureConfig+0x144>)
 800b9ae:	4013      	ands	r3, r2
 800b9b0:	0019      	movs	r1, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	430a      	orrs	r2, r1
 800b9bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	4013      	ands	r3, r2
 800b9c6:	d00b      	beq.n	800b9e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4a43      	ldr	r2, [pc, #268]	; (800badc <UART_AdvFeatureConfig+0x148>)
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	0019      	movs	r1, r3
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	430a      	orrs	r2, r1
 800b9de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	4013      	ands	r3, r2
 800b9e8:	d00b      	beq.n	800ba02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	4a3b      	ldr	r2, [pc, #236]	; (800bae0 <UART_AdvFeatureConfig+0x14c>)
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	0019      	movs	r1, r3
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	430a      	orrs	r2, r1
 800ba00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba06:	2208      	movs	r2, #8
 800ba08:	4013      	ands	r3, r2
 800ba0a:	d00b      	beq.n	800ba24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	4a34      	ldr	r2, [pc, #208]	; (800bae4 <UART_AdvFeatureConfig+0x150>)
 800ba14:	4013      	ands	r3, r2
 800ba16:	0019      	movs	r1, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	430a      	orrs	r2, r1
 800ba22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba28:	2210      	movs	r2, #16
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	d00b      	beq.n	800ba46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	4a2c      	ldr	r2, [pc, #176]	; (800bae8 <UART_AdvFeatureConfig+0x154>)
 800ba36:	4013      	ands	r3, r2
 800ba38:	0019      	movs	r1, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	430a      	orrs	r2, r1
 800ba44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4a:	2220      	movs	r2, #32
 800ba4c:	4013      	ands	r3, r2
 800ba4e:	d00b      	beq.n	800ba68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	4a25      	ldr	r2, [pc, #148]	; (800baec <UART_AdvFeatureConfig+0x158>)
 800ba58:	4013      	ands	r3, r2
 800ba5a:	0019      	movs	r1, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	430a      	orrs	r2, r1
 800ba66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba6c:	2240      	movs	r2, #64	; 0x40
 800ba6e:	4013      	ands	r3, r2
 800ba70:	d01d      	beq.n	800baae <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	4a1d      	ldr	r2, [pc, #116]	; (800baf0 <UART_AdvFeatureConfig+0x15c>)
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	0019      	movs	r1, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	430a      	orrs	r2, r1
 800ba88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba8e:	2380      	movs	r3, #128	; 0x80
 800ba90:	035b      	lsls	r3, r3, #13
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d10b      	bne.n	800baae <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	4a15      	ldr	r2, [pc, #84]	; (800baf4 <UART_AdvFeatureConfig+0x160>)
 800ba9e:	4013      	ands	r3, r2
 800baa0:	0019      	movs	r1, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bab2:	2280      	movs	r2, #128	; 0x80
 800bab4:	4013      	ands	r3, r2
 800bab6:	d00b      	beq.n	800bad0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	4a0e      	ldr	r2, [pc, #56]	; (800baf8 <UART_AdvFeatureConfig+0x164>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	0019      	movs	r1, r3
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	430a      	orrs	r2, r1
 800bace:	605a      	str	r2, [r3, #4]
  }
}
 800bad0:	46c0      	nop			; (mov r8, r8)
 800bad2:	46bd      	mov	sp, r7
 800bad4:	b002      	add	sp, #8
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	fffdffff 	.word	0xfffdffff
 800badc:	fffeffff 	.word	0xfffeffff
 800bae0:	fffbffff 	.word	0xfffbffff
 800bae4:	ffff7fff 	.word	0xffff7fff
 800bae8:	ffffefff 	.word	0xffffefff
 800baec:	ffffdfff 	.word	0xffffdfff
 800baf0:	ffefffff 	.word	0xffefffff
 800baf4:	ff9fffff 	.word	0xff9fffff
 800baf8:	fff7ffff 	.word	0xfff7ffff

0800bafc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af02      	add	r7, sp, #8
 800bb02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800bb0a:	f7fc f875 	bl	8007bf8 <HAL_GetTick>
 800bb0e:	0003      	movs	r3, r0
 800bb10:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2208      	movs	r2, #8
 800bb1a:	4013      	ands	r3, r2
 800bb1c:	2b08      	cmp	r3, #8
 800bb1e:	d10d      	bne.n	800bb3c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	2380      	movs	r3, #128	; 0x80
 800bb24:	0399      	lsls	r1, r3, #14
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	4b16      	ldr	r3, [pc, #88]	; (800bb84 <UART_CheckIdleState+0x88>)
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	0013      	movs	r3, r2
 800bb2e:	2200      	movs	r2, #0
 800bb30:	f000 f82a 	bl	800bb88 <UART_WaitOnFlagUntilTimeout>
 800bb34:	1e03      	subs	r3, r0, #0
 800bb36:	d001      	beq.n	800bb3c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e01f      	b.n	800bb7c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	2204      	movs	r2, #4
 800bb44:	4013      	ands	r3, r2
 800bb46:	2b04      	cmp	r3, #4
 800bb48:	d10d      	bne.n	800bb66 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb4a:	68fa      	ldr	r2, [r7, #12]
 800bb4c:	2380      	movs	r3, #128	; 0x80
 800bb4e:	03d9      	lsls	r1, r3, #15
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	4b0c      	ldr	r3, [pc, #48]	; (800bb84 <UART_CheckIdleState+0x88>)
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	0013      	movs	r3, r2
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f000 f815 	bl	800bb88 <UART_WaitOnFlagUntilTimeout>
 800bb5e:	1e03      	subs	r3, r0, #0
 800bb60:	d001      	beq.n	800bb66 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb62:	2303      	movs	r3, #3
 800bb64:	e00a      	b.n	800bb7c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2270      	movs	r2, #112	; 0x70
 800bb76:	2100      	movs	r1, #0
 800bb78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	0018      	movs	r0, r3
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	b004      	add	sp, #16
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	01ffffff 	.word	0x01ffffff

0800bb88 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	603b      	str	r3, [r7, #0]
 800bb94:	1dfb      	adds	r3, r7, #7
 800bb96:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb98:	e029      	b.n	800bbee <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb9a:	69bb      	ldr	r3, [r7, #24]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	d026      	beq.n	800bbee <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bba0:	f7fc f82a 	bl	8007bf8 <HAL_GetTick>
 800bba4:	0002      	movs	r2, r0
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	69ba      	ldr	r2, [r7, #24]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d302      	bcc.n	800bbb6 <UART_WaitOnFlagUntilTimeout+0x2e>
 800bbb0:	69bb      	ldr	r3, [r7, #24]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d11b      	bne.n	800bbee <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4915      	ldr	r1, [pc, #84]	; (800bc18 <UART_WaitOnFlagUntilTimeout+0x90>)
 800bbc2:	400a      	ands	r2, r1
 800bbc4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	438a      	bics	r2, r1
 800bbd4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2220      	movs	r2, #32
 800bbda:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2270      	movs	r2, #112	; 0x70
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e00f      	b.n	800bc0e <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	69db      	ldr	r3, [r3, #28]
 800bbf4:	68ba      	ldr	r2, [r7, #8]
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	425a      	negs	r2, r3
 800bbfe:	4153      	adcs	r3, r2
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	001a      	movs	r2, r3
 800bc04:	1dfb      	adds	r3, r7, #7
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d0c6      	beq.n	800bb9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bc0c:	2300      	movs	r3, #0
}
 800bc0e:	0018      	movs	r0, r3
 800bc10:	46bd      	mov	sp, r7
 800bc12:	b004      	add	sp, #16
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	46c0      	nop			; (mov r8, r8)
 800bc18:	fffffe5f 	.word	0xfffffe5f

0800bc1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	21c0      	movs	r1, #192	; 0xc0
 800bc30:	438a      	bics	r2, r1
 800bc32:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2220      	movs	r2, #32
 800bc38:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bc3a:	46c0      	nop			; (mov r8, r8)
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	b002      	add	sp, #8
 800bc40:	bd80      	pop	{r7, pc}
	...

0800bc44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b082      	sub	sp, #8
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	490a      	ldr	r1, [pc, #40]	; (800bc80 <UART_EndRxTransfer+0x3c>)
 800bc58:	400a      	ands	r2, r1
 800bc5a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	689a      	ldr	r2, [r3, #8]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2101      	movs	r1, #1
 800bc68:	438a      	bics	r2, r1
 800bc6a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2220      	movs	r2, #32
 800bc70:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	661a      	str	r2, [r3, #96]	; 0x60
}
 800bc78:	46c0      	nop			; (mov r8, r8)
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	b002      	add	sp, #8
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	fffffedf 	.word	0xfffffedf

0800bc84 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2220      	movs	r2, #32
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	d114      	bne.n	800bcc8 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	2252      	movs	r2, #82	; 0x52
 800bca2:	2100      	movs	r1, #0
 800bca4:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2180      	movs	r1, #128	; 0x80
 800bcb2:	438a      	bics	r2, r1
 800bcb4:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2140      	movs	r1, #64	; 0x40
 800bcc2:	430a      	orrs	r2, r1
 800bcc4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcc6:	e003      	b.n	800bcd0 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	0018      	movs	r0, r3
 800bccc:	f7f8 ff7a 	bl	8004bc4 <HAL_UART_TxCpltCallback>
}
 800bcd0:	46c0      	nop			; (mov r8, r8)
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	b004      	add	sp, #16
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	0018      	movs	r0, r3
 800bcea:	f7ff fb0f 	bl	800b30c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcee:	46c0      	nop			; (mov r8, r8)
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	b004      	add	sp, #16
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b086      	sub	sp, #24
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd02:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd08:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	2280      	movs	r2, #128	; 0x80
 800bd18:	4013      	ands	r3, r2
 800bd1a:	2b80      	cmp	r3, #128	; 0x80
 800bd1c:	d10a      	bne.n	800bd34 <UART_DMAError+0x3e>
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b21      	cmp	r3, #33	; 0x21
 800bd22:	d107      	bne.n	800bd34 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	2252      	movs	r2, #82	; 0x52
 800bd28:	2100      	movs	r1, #0
 800bd2a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	0018      	movs	r0, r3
 800bd30:	f7ff ff74 	bl	800bc1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	2240      	movs	r2, #64	; 0x40
 800bd3c:	4013      	ands	r3, r2
 800bd3e:	2b40      	cmp	r3, #64	; 0x40
 800bd40:	d10a      	bne.n	800bd58 <UART_DMAError+0x62>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2b22      	cmp	r3, #34	; 0x22
 800bd46:	d107      	bne.n	800bd58 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd48:	697b      	ldr	r3, [r7, #20]
 800bd4a:	225a      	movs	r2, #90	; 0x5a
 800bd4c:	2100      	movs	r1, #0
 800bd4e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	0018      	movs	r0, r3
 800bd54:	f7ff ff76 	bl	800bc44 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd5c:	2210      	movs	r2, #16
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	0018      	movs	r0, r3
 800bd68:	f7ff fad8 	bl	800b31c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd6c:	46c0      	nop			; (mov r8, r8)
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	b006      	add	sp, #24
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	225a      	movs	r2, #90	; 0x5a
 800bd86:	2100      	movs	r1, #0
 800bd88:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2252      	movs	r2, #82	; 0x52
 800bd8e:	2100      	movs	r1, #0
 800bd90:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	0018      	movs	r0, r3
 800bd96:	f7ff fac1 	bl	800b31c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd9a:	46c0      	nop			; (mov r8, r8)
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	b004      	add	sp, #16
 800bda0:	bd80      	pop	{r7, pc}

0800bda2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bda2:	b580      	push	{r7, lr}
 800bda4:	b082      	sub	sp, #8
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2140      	movs	r1, #64	; 0x40
 800bdb6:	438a      	bics	r2, r1
 800bdb8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2220      	movs	r2, #32
 800bdbe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	0018      	movs	r0, r3
 800bdca:	f7f8 fefb 	bl	8004bc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdce:	46c0      	nop			; (mov r8, r8)
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	b002      	add	sp, #8
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b082      	sub	sp, #8
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bdde:	46c0      	nop			; (mov r8, r8)
 800bde0:	46bd      	mov	sp, r7
 800bde2:	b002      	add	sp, #8
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b082      	sub	sp, #8
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
 800bdee:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	781a      	ldrb	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	7852      	ldrb	r2, [r2, #1]
 800be00:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	3302      	adds	r3, #2
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	7892      	ldrb	r2, [r2, #2]
 800be0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	3303      	adds	r3, #3
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	78d2      	ldrb	r2, [r2, #3]
 800be14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	3304      	adds	r3, #4
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	7912      	ldrb	r2, [r2, #4]
 800be1e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	3305      	adds	r3, #5
 800be24:	683a      	ldr	r2, [r7, #0]
 800be26:	7952      	ldrb	r2, [r2, #5]
 800be28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	3306      	adds	r3, #6
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	7992      	ldrb	r2, [r2, #6]
 800be32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	3307      	adds	r3, #7
 800be38:	683a      	ldr	r2, [r7, #0]
 800be3a:	79d2      	ldrb	r2, [r2, #7]
 800be3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	3308      	adds	r3, #8
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	7a12      	ldrb	r2, [r2, #8]
 800be46:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	3309      	adds	r3, #9
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	7a52      	ldrb	r2, [r2, #9]
 800be50:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	330a      	adds	r3, #10
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	7a92      	ldrb	r2, [r2, #10]
 800be5a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	330b      	adds	r3, #11
 800be60:	683a      	ldr	r2, [r7, #0]
 800be62:	7ad2      	ldrb	r2, [r2, #11]
 800be64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	330c      	adds	r3, #12
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	7b12      	ldrb	r2, [r2, #12]
 800be6e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	330d      	adds	r3, #13
 800be74:	683a      	ldr	r2, [r7, #0]
 800be76:	7b52      	ldrb	r2, [r2, #13]
 800be78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	330e      	adds	r3, #14
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	7b92      	ldrb	r2, [r2, #14]
 800be82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	330f      	adds	r3, #15
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	7bd2      	ldrb	r2, [r2, #15]
 800be8c:	701a      	strb	r2, [r3, #0]
#endif
}
 800be8e:	46c0      	nop			; (mov r8, r8)
 800be90:	46bd      	mov	sp, r7
 800be92:	b002      	add	sp, #8
 800be94:	bd80      	pop	{r7, pc}

0800be96 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800be96:	b580      	push	{r7, lr}
 800be98:	b084      	sub	sp, #16
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	60f8      	str	r0, [r7, #12]
 800be9e:	60b9      	str	r1, [r7, #8]
 800bea0:	1dfb      	adds	r3, r7, #7
 800bea2:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800bea4:	e007      	b.n	800beb6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	1c53      	adds	r3, r2, #1
 800beaa:	60bb      	str	r3, [r7, #8]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	1c59      	adds	r1, r3, #1
 800beb0:	60f9      	str	r1, [r7, #12]
 800beb2:	7812      	ldrb	r2, [r2, #0]
 800beb4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800beb6:	1dfb      	adds	r3, r7, #7
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	1dfa      	adds	r2, r7, #7
 800bebc:	1e59      	subs	r1, r3, #1
 800bebe:	7011      	strb	r1, [r2, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d1f0      	bne.n	800bea6 <copy_block_nn+0x10>
}
 800bec4:	46c0      	nop			; (mov r8, r8)
 800bec6:	46bd      	mov	sp, r7
 800bec8:	b004      	add	sp, #16
 800beca:	bd80      	pop	{r7, pc}

0800becc <xor_block>:

static void xor_block( void *d, const void *s )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	781a      	ldrb	r2, [r3, #0]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	781b      	ldrb	r3, [r3, #0]
 800bede:	4053      	eors	r3, r2
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	3301      	adds	r3, #1
 800beea:	7819      	ldrb	r1, [r3, #0]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	3301      	adds	r3, #1
 800bef0:	781a      	ldrb	r2, [r3, #0]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	3301      	adds	r3, #1
 800bef6:	404a      	eors	r2, r1
 800bef8:	b2d2      	uxtb	r2, r2
 800befa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	3302      	adds	r3, #2
 800bf00:	7819      	ldrb	r1, [r3, #0]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	3302      	adds	r3, #2
 800bf06:	781a      	ldrb	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	3302      	adds	r3, #2
 800bf0c:	404a      	eors	r2, r1
 800bf0e:	b2d2      	uxtb	r2, r2
 800bf10:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3303      	adds	r3, #3
 800bf16:	7819      	ldrb	r1, [r3, #0]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	3303      	adds	r3, #3
 800bf1c:	781a      	ldrb	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	3303      	adds	r3, #3
 800bf22:	404a      	eors	r2, r1
 800bf24:	b2d2      	uxtb	r2, r2
 800bf26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	7819      	ldrb	r1, [r3, #0]
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	3304      	adds	r3, #4
 800bf32:	781a      	ldrb	r2, [r3, #0]
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	3304      	adds	r3, #4
 800bf38:	404a      	eors	r2, r1
 800bf3a:	b2d2      	uxtb	r2, r2
 800bf3c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	3305      	adds	r3, #5
 800bf42:	7819      	ldrb	r1, [r3, #0]
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	3305      	adds	r3, #5
 800bf48:	781a      	ldrb	r2, [r3, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3305      	adds	r3, #5
 800bf4e:	404a      	eors	r2, r1
 800bf50:	b2d2      	uxtb	r2, r2
 800bf52:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3306      	adds	r3, #6
 800bf58:	7819      	ldrb	r1, [r3, #0]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	3306      	adds	r3, #6
 800bf5e:	781a      	ldrb	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3306      	adds	r3, #6
 800bf64:	404a      	eors	r2, r1
 800bf66:	b2d2      	uxtb	r2, r2
 800bf68:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3307      	adds	r3, #7
 800bf6e:	7819      	ldrb	r1, [r3, #0]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	3307      	adds	r3, #7
 800bf74:	781a      	ldrb	r2, [r3, #0]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	3307      	adds	r3, #7
 800bf7a:	404a      	eors	r2, r1
 800bf7c:	b2d2      	uxtb	r2, r2
 800bf7e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3308      	adds	r3, #8
 800bf84:	7819      	ldrb	r1, [r3, #0]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	3308      	adds	r3, #8
 800bf8a:	781a      	ldrb	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	3308      	adds	r3, #8
 800bf90:	404a      	eors	r2, r1
 800bf92:	b2d2      	uxtb	r2, r2
 800bf94:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	3309      	adds	r3, #9
 800bf9a:	7819      	ldrb	r1, [r3, #0]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	3309      	adds	r3, #9
 800bfa0:	781a      	ldrb	r2, [r3, #0]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	3309      	adds	r3, #9
 800bfa6:	404a      	eors	r2, r1
 800bfa8:	b2d2      	uxtb	r2, r2
 800bfaa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	330a      	adds	r3, #10
 800bfb0:	7819      	ldrb	r1, [r3, #0]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	330a      	adds	r3, #10
 800bfb6:	781a      	ldrb	r2, [r3, #0]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	330a      	adds	r3, #10
 800bfbc:	404a      	eors	r2, r1
 800bfbe:	b2d2      	uxtb	r2, r2
 800bfc0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	330b      	adds	r3, #11
 800bfc6:	7819      	ldrb	r1, [r3, #0]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	330b      	adds	r3, #11
 800bfcc:	781a      	ldrb	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	330b      	adds	r3, #11
 800bfd2:	404a      	eors	r2, r1
 800bfd4:	b2d2      	uxtb	r2, r2
 800bfd6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	330c      	adds	r3, #12
 800bfdc:	7819      	ldrb	r1, [r3, #0]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	330c      	adds	r3, #12
 800bfe2:	781a      	ldrb	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	330c      	adds	r3, #12
 800bfe8:	404a      	eors	r2, r1
 800bfea:	b2d2      	uxtb	r2, r2
 800bfec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	330d      	adds	r3, #13
 800bff2:	7819      	ldrb	r1, [r3, #0]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	330d      	adds	r3, #13
 800bff8:	781a      	ldrb	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	330d      	adds	r3, #13
 800bffe:	404a      	eors	r2, r1
 800c000:	b2d2      	uxtb	r2, r2
 800c002:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	330e      	adds	r3, #14
 800c008:	7819      	ldrb	r1, [r3, #0]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	330e      	adds	r3, #14
 800c00e:	781a      	ldrb	r2, [r3, #0]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	330e      	adds	r3, #14
 800c014:	404a      	eors	r2, r1
 800c016:	b2d2      	uxtb	r2, r2
 800c018:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	330f      	adds	r3, #15
 800c01e:	7819      	ldrb	r1, [r3, #0]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	330f      	adds	r3, #15
 800c024:	781a      	ldrb	r2, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	330f      	adds	r3, #15
 800c02a:	404a      	eors	r2, r1
 800c02c:	b2d2      	uxtb	r2, r2
 800c02e:	701a      	strb	r2, [r3, #0]
#endif
}
 800c030:	46c0      	nop			; (mov r8, r8)
 800c032:	46bd      	mov	sp, r7
 800c034:	b002      	add	sp, #8
 800c036:	bd80      	pop	{r7, pc}

0800c038 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	781a      	ldrb	r2, [r3, #0]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	4053      	eors	r3, r2
 800c04e:	b2da      	uxtb	r2, r3
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	3301      	adds	r3, #1
 800c058:	7819      	ldrb	r1, [r3, #0]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	3301      	adds	r3, #1
 800c05e:	781a      	ldrb	r2, [r3, #0]
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	3301      	adds	r3, #1
 800c064:	404a      	eors	r2, r1
 800c066:	b2d2      	uxtb	r2, r2
 800c068:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	3302      	adds	r3, #2
 800c06e:	7819      	ldrb	r1, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	3302      	adds	r3, #2
 800c074:	781a      	ldrb	r2, [r3, #0]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	3302      	adds	r3, #2
 800c07a:	404a      	eors	r2, r1
 800c07c:	b2d2      	uxtb	r2, r2
 800c07e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	3303      	adds	r3, #3
 800c084:	7819      	ldrb	r1, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	3303      	adds	r3, #3
 800c08a:	781a      	ldrb	r2, [r3, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	3303      	adds	r3, #3
 800c090:	404a      	eors	r2, r1
 800c092:	b2d2      	uxtb	r2, r2
 800c094:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	3304      	adds	r3, #4
 800c09a:	7819      	ldrb	r1, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	3304      	adds	r3, #4
 800c0a0:	781a      	ldrb	r2, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	3304      	adds	r3, #4
 800c0a6:	404a      	eors	r2, r1
 800c0a8:	b2d2      	uxtb	r2, r2
 800c0aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	3305      	adds	r3, #5
 800c0b0:	7819      	ldrb	r1, [r3, #0]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	3305      	adds	r3, #5
 800c0b6:	781a      	ldrb	r2, [r3, #0]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	3305      	adds	r3, #5
 800c0bc:	404a      	eors	r2, r1
 800c0be:	b2d2      	uxtb	r2, r2
 800c0c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	3306      	adds	r3, #6
 800c0c6:	7819      	ldrb	r1, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3306      	adds	r3, #6
 800c0cc:	781a      	ldrb	r2, [r3, #0]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3306      	adds	r3, #6
 800c0d2:	404a      	eors	r2, r1
 800c0d4:	b2d2      	uxtb	r2, r2
 800c0d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	3307      	adds	r3, #7
 800c0dc:	7819      	ldrb	r1, [r3, #0]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	3307      	adds	r3, #7
 800c0e2:	781a      	ldrb	r2, [r3, #0]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	3307      	adds	r3, #7
 800c0e8:	404a      	eors	r2, r1
 800c0ea:	b2d2      	uxtb	r2, r2
 800c0ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	7819      	ldrb	r1, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	781a      	ldrb	r2, [r3, #0]
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	404a      	eors	r2, r1
 800c100:	b2d2      	uxtb	r2, r2
 800c102:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	3309      	adds	r3, #9
 800c108:	7819      	ldrb	r1, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	3309      	adds	r3, #9
 800c10e:	781a      	ldrb	r2, [r3, #0]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	3309      	adds	r3, #9
 800c114:	404a      	eors	r2, r1
 800c116:	b2d2      	uxtb	r2, r2
 800c118:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	330a      	adds	r3, #10
 800c11e:	7819      	ldrb	r1, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	330a      	adds	r3, #10
 800c124:	781a      	ldrb	r2, [r3, #0]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	330a      	adds	r3, #10
 800c12a:	404a      	eors	r2, r1
 800c12c:	b2d2      	uxtb	r2, r2
 800c12e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	330b      	adds	r3, #11
 800c134:	7819      	ldrb	r1, [r3, #0]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	330b      	adds	r3, #11
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	330b      	adds	r3, #11
 800c140:	404a      	eors	r2, r1
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	330c      	adds	r3, #12
 800c14a:	7819      	ldrb	r1, [r3, #0]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	330c      	adds	r3, #12
 800c150:	781a      	ldrb	r2, [r3, #0]
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	330c      	adds	r3, #12
 800c156:	404a      	eors	r2, r1
 800c158:	b2d2      	uxtb	r2, r2
 800c15a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	330d      	adds	r3, #13
 800c160:	7819      	ldrb	r1, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	330d      	adds	r3, #13
 800c166:	781a      	ldrb	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	330d      	adds	r3, #13
 800c16c:	404a      	eors	r2, r1
 800c16e:	b2d2      	uxtb	r2, r2
 800c170:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	330e      	adds	r3, #14
 800c176:	7819      	ldrb	r1, [r3, #0]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	330e      	adds	r3, #14
 800c17c:	781a      	ldrb	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	330e      	adds	r3, #14
 800c182:	404a      	eors	r2, r1
 800c184:	b2d2      	uxtb	r2, r2
 800c186:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	330f      	adds	r3, #15
 800c18c:	7819      	ldrb	r1, [r3, #0]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	330f      	adds	r3, #15
 800c192:	781a      	ldrb	r2, [r3, #0]
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	330f      	adds	r3, #15
 800c198:	404a      	eors	r2, r1
 800c19a:	b2d2      	uxtb	r2, r2
 800c19c:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800c19e:	46c0      	nop			; (mov r8, r8)
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	b004      	add	sp, #16
 800c1a4:	bd80      	pop	{r7, pc}

0800c1a6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800c1a6:	b580      	push	{r7, lr}
 800c1a8:	b082      	sub	sp, #8
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]
 800c1ae:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800c1b0:	683a      	ldr	r2, [r7, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	0011      	movs	r1, r2
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	f7ff fe88 	bl	800becc <xor_block>
}
 800c1bc:	46c0      	nop			; (mov r8, r8)
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	b002      	add	sp, #8
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	001a      	movs	r2, r3
 800c1d2:	4b4c      	ldr	r3, [pc, #304]	; (800c304 <shift_sub_rows+0x140>)
 800c1d4:	5c9a      	ldrb	r2, [r3, r2]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	701a      	strb	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	0019      	movs	r1, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	4a47      	ldr	r2, [pc, #284]	; (800c304 <shift_sub_rows+0x140>)
 800c1e8:	5c52      	ldrb	r2, [r2, r1]
 800c1ea:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	3308      	adds	r3, #8
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	0019      	movs	r1, r3
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	3308      	adds	r3, #8
 800c1f8:	4a42      	ldr	r2, [pc, #264]	; (800c304 <shift_sub_rows+0x140>)
 800c1fa:	5c52      	ldrb	r2, [r2, r1]
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	330c      	adds	r3, #12
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	0019      	movs	r1, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	330c      	adds	r3, #12
 800c20a:	4a3e      	ldr	r2, [pc, #248]	; (800c304 <shift_sub_rows+0x140>)
 800c20c:	5c52      	ldrb	r2, [r2, r1]
 800c20e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800c210:	200f      	movs	r0, #15
 800c212:	183b      	adds	r3, r7, r0
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	7852      	ldrb	r2, [r2, #1]
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3305      	adds	r3, #5
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	0019      	movs	r1, r3
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	3301      	adds	r3, #1
 800c226:	4a37      	ldr	r2, [pc, #220]	; (800c304 <shift_sub_rows+0x140>)
 800c228:	5c52      	ldrb	r2, [r2, r1]
 800c22a:	701a      	strb	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3309      	adds	r3, #9
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	0019      	movs	r1, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	3305      	adds	r3, #5
 800c238:	4a32      	ldr	r2, [pc, #200]	; (800c304 <shift_sub_rows+0x140>)
 800c23a:	5c52      	ldrb	r2, [r2, r1]
 800c23c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	330d      	adds	r3, #13
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	0019      	movs	r1, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3309      	adds	r3, #9
 800c24a:	4a2e      	ldr	r2, [pc, #184]	; (800c304 <shift_sub_rows+0x140>)
 800c24c:	5c52      	ldrb	r2, [r2, r1]
 800c24e:	701a      	strb	r2, [r3, #0]
 800c250:	183b      	adds	r3, r7, r0
 800c252:	781a      	ldrb	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	330d      	adds	r3, #13
 800c258:	492a      	ldr	r1, [pc, #168]	; (800c304 <shift_sub_rows+0x140>)
 800c25a:	5c8a      	ldrb	r2, [r1, r2]
 800c25c:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800c25e:	183b      	adds	r3, r7, r0
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	7892      	ldrb	r2, [r2, #2]
 800c264:	701a      	strb	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	330a      	adds	r3, #10
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	0019      	movs	r1, r3
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	3302      	adds	r3, #2
 800c272:	4a24      	ldr	r2, [pc, #144]	; (800c304 <shift_sub_rows+0x140>)
 800c274:	5c52      	ldrb	r2, [r2, r1]
 800c276:	701a      	strb	r2, [r3, #0]
 800c278:	183b      	adds	r3, r7, r0
 800c27a:	781a      	ldrb	r2, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	330a      	adds	r3, #10
 800c280:	4920      	ldr	r1, [pc, #128]	; (800c304 <shift_sub_rows+0x140>)
 800c282:	5c8a      	ldrb	r2, [r1, r2]
 800c284:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800c286:	183b      	adds	r3, r7, r0
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	7992      	ldrb	r2, [r2, #6]
 800c28c:	701a      	strb	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	330e      	adds	r3, #14
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	0019      	movs	r1, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3306      	adds	r3, #6
 800c29a:	4a1a      	ldr	r2, [pc, #104]	; (800c304 <shift_sub_rows+0x140>)
 800c29c:	5c52      	ldrb	r2, [r2, r1]
 800c29e:	701a      	strb	r2, [r3, #0]
 800c2a0:	183b      	adds	r3, r7, r0
 800c2a2:	781a      	ldrb	r2, [r3, #0]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	330e      	adds	r3, #14
 800c2a8:	4916      	ldr	r1, [pc, #88]	; (800c304 <shift_sub_rows+0x140>)
 800c2aa:	5c8a      	ldrb	r2, [r1, r2]
 800c2ac:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800c2ae:	183b      	adds	r3, r7, r0
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	7bd2      	ldrb	r2, [r2, #15]
 800c2b4:	701a      	strb	r2, [r3, #0]
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	330b      	adds	r3, #11
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	0019      	movs	r1, r3
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	330f      	adds	r3, #15
 800c2c2:	4a10      	ldr	r2, [pc, #64]	; (800c304 <shift_sub_rows+0x140>)
 800c2c4:	5c52      	ldrb	r2, [r2, r1]
 800c2c6:	701a      	strb	r2, [r3, #0]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3307      	adds	r3, #7
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	0019      	movs	r1, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	330b      	adds	r3, #11
 800c2d4:	4a0b      	ldr	r2, [pc, #44]	; (800c304 <shift_sub_rows+0x140>)
 800c2d6:	5c52      	ldrb	r2, [r2, r1]
 800c2d8:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	3303      	adds	r3, #3
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	0019      	movs	r1, r3
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3307      	adds	r3, #7
 800c2e6:	4a07      	ldr	r2, [pc, #28]	; (800c304 <shift_sub_rows+0x140>)
 800c2e8:	5c52      	ldrb	r2, [r2, r1]
 800c2ea:	701a      	strb	r2, [r3, #0]
 800c2ec:	183b      	adds	r3, r7, r0
 800c2ee:	781a      	ldrb	r2, [r3, #0]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	3303      	adds	r3, #3
 800c2f4:	4903      	ldr	r1, [pc, #12]	; (800c304 <shift_sub_rows+0x140>)
 800c2f6:	5c8a      	ldrb	r2, [r1, r2]
 800c2f8:	701a      	strb	r2, [r3, #0]
}
 800c2fa:	46c0      	nop			; (mov r8, r8)
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	b004      	add	sp, #16
 800c300:	bd80      	pop	{r7, pc}
 800c302:	46c0      	nop			; (mov r8, r8)
 800c304:	0801aeac 	.word	0x0801aeac

0800c308 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800c308:	b590      	push	{r4, r7, lr}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	2008      	movs	r0, #8
 800c314:	0004      	movs	r4, r0
 800c316:	183b      	adds	r3, r7, r0
 800c318:	0011      	movs	r1, r2
 800c31a:	0018      	movs	r0, r3
 800c31c:	f7ff fd63 	bl	800bde6 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800c320:	0020      	movs	r0, r4
 800c322:	183b      	adds	r3, r7, r0
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	001a      	movs	r2, r3
 800c328:	4be7      	ldr	r3, [pc, #924]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c32a:	5c9a      	ldrb	r2, [r3, r2]
 800c32c:	183b      	adds	r3, r7, r0
 800c32e:	795b      	ldrb	r3, [r3, #5]
 800c330:	0019      	movs	r1, r3
 800c332:	4be6      	ldr	r3, [pc, #920]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c334:	5c5b      	ldrb	r3, [r3, r1]
 800c336:	4053      	eors	r3, r2
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	183b      	adds	r3, r7, r0
 800c33c:	7a9b      	ldrb	r3, [r3, #10]
 800c33e:	0019      	movs	r1, r3
 800c340:	4be3      	ldr	r3, [pc, #908]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c342:	5c5b      	ldrb	r3, [r3, r1]
 800c344:	4053      	eors	r3, r2
 800c346:	b2da      	uxtb	r2, r3
 800c348:	183b      	adds	r3, r7, r0
 800c34a:	7bdb      	ldrb	r3, [r3, #15]
 800c34c:	0019      	movs	r1, r3
 800c34e:	4be0      	ldr	r3, [pc, #896]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c350:	5c5b      	ldrb	r3, [r3, r1]
 800c352:	4053      	eors	r3, r2
 800c354:	b2da      	uxtb	r2, r3
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800c35a:	183b      	adds	r3, r7, r0
 800c35c:	781b      	ldrb	r3, [r3, #0]
 800c35e:	001a      	movs	r2, r3
 800c360:	4bdb      	ldr	r3, [pc, #876]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c362:	5c9a      	ldrb	r2, [r3, r2]
 800c364:	183b      	adds	r3, r7, r0
 800c366:	795b      	ldrb	r3, [r3, #5]
 800c368:	0019      	movs	r1, r3
 800c36a:	4bd7      	ldr	r3, [pc, #860]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c36c:	5c5b      	ldrb	r3, [r3, r1]
 800c36e:	4053      	eors	r3, r2
 800c370:	b2da      	uxtb	r2, r3
 800c372:	183b      	adds	r3, r7, r0
 800c374:	7a9b      	ldrb	r3, [r3, #10]
 800c376:	0019      	movs	r1, r3
 800c378:	4bd4      	ldr	r3, [pc, #848]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c37a:	5c5b      	ldrb	r3, [r3, r1]
 800c37c:	4053      	eors	r3, r2
 800c37e:	b2d9      	uxtb	r1, r3
 800c380:	183b      	adds	r3, r7, r0
 800c382:	7bdb      	ldrb	r3, [r3, #15]
 800c384:	001a      	movs	r2, r3
 800c386:	4bd2      	ldr	r3, [pc, #840]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c388:	5c9a      	ldrb	r2, [r3, r2]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	3301      	adds	r3, #1
 800c38e:	404a      	eors	r2, r1
 800c390:	b2d2      	uxtb	r2, r2
 800c392:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800c394:	183b      	adds	r3, r7, r0
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	001a      	movs	r2, r3
 800c39a:	4bcd      	ldr	r3, [pc, #820]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c39c:	5c9a      	ldrb	r2, [r3, r2]
 800c39e:	183b      	adds	r3, r7, r0
 800c3a0:	795b      	ldrb	r3, [r3, #5]
 800c3a2:	0019      	movs	r1, r3
 800c3a4:	4bca      	ldr	r3, [pc, #808]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c3a6:	5c5b      	ldrb	r3, [r3, r1]
 800c3a8:	4053      	eors	r3, r2
 800c3aa:	b2da      	uxtb	r2, r3
 800c3ac:	183b      	adds	r3, r7, r0
 800c3ae:	7a9b      	ldrb	r3, [r3, #10]
 800c3b0:	0019      	movs	r1, r3
 800c3b2:	4bc5      	ldr	r3, [pc, #788]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c3b4:	5c5b      	ldrb	r3, [r3, r1]
 800c3b6:	4053      	eors	r3, r2
 800c3b8:	b2d9      	uxtb	r1, r3
 800c3ba:	183b      	adds	r3, r7, r0
 800c3bc:	7bdb      	ldrb	r3, [r3, #15]
 800c3be:	001a      	movs	r2, r3
 800c3c0:	4bc2      	ldr	r3, [pc, #776]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c3c2:	5c9a      	ldrb	r2, [r3, r2]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3302      	adds	r3, #2
 800c3c8:	404a      	eors	r2, r1
 800c3ca:	b2d2      	uxtb	r2, r2
 800c3cc:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800c3ce:	183b      	adds	r3, r7, r0
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	001a      	movs	r2, r3
 800c3d4:	4bbd      	ldr	r3, [pc, #756]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c3d6:	5c9a      	ldrb	r2, [r3, r2]
 800c3d8:	183b      	adds	r3, r7, r0
 800c3da:	795b      	ldrb	r3, [r3, #5]
 800c3dc:	0019      	movs	r1, r3
 800c3de:	4bbc      	ldr	r3, [pc, #752]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c3e0:	5c5b      	ldrb	r3, [r3, r1]
 800c3e2:	4053      	eors	r3, r2
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	183b      	adds	r3, r7, r0
 800c3e8:	7a9b      	ldrb	r3, [r3, #10]
 800c3ea:	0019      	movs	r1, r3
 800c3ec:	4bb8      	ldr	r3, [pc, #736]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c3ee:	5c5b      	ldrb	r3, [r3, r1]
 800c3f0:	4053      	eors	r3, r2
 800c3f2:	b2d9      	uxtb	r1, r3
 800c3f4:	183b      	adds	r3, r7, r0
 800c3f6:	7bdb      	ldrb	r3, [r3, #15]
 800c3f8:	001a      	movs	r2, r3
 800c3fa:	4bb3      	ldr	r3, [pc, #716]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c3fc:	5c9a      	ldrb	r2, [r3, r2]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	3303      	adds	r3, #3
 800c402:	404a      	eors	r2, r1
 800c404:	b2d2      	uxtb	r2, r2
 800c406:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800c408:	183b      	adds	r3, r7, r0
 800c40a:	791b      	ldrb	r3, [r3, #4]
 800c40c:	001a      	movs	r2, r3
 800c40e:	4bae      	ldr	r3, [pc, #696]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c410:	5c9a      	ldrb	r2, [r3, r2]
 800c412:	183b      	adds	r3, r7, r0
 800c414:	7a5b      	ldrb	r3, [r3, #9]
 800c416:	0019      	movs	r1, r3
 800c418:	4bac      	ldr	r3, [pc, #688]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c41a:	5c5b      	ldrb	r3, [r3, r1]
 800c41c:	4053      	eors	r3, r2
 800c41e:	b2da      	uxtb	r2, r3
 800c420:	183b      	adds	r3, r7, r0
 800c422:	7b9b      	ldrb	r3, [r3, #14]
 800c424:	0019      	movs	r1, r3
 800c426:	4baa      	ldr	r3, [pc, #680]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c428:	5c5b      	ldrb	r3, [r3, r1]
 800c42a:	4053      	eors	r3, r2
 800c42c:	b2d9      	uxtb	r1, r3
 800c42e:	183b      	adds	r3, r7, r0
 800c430:	78db      	ldrb	r3, [r3, #3]
 800c432:	001a      	movs	r2, r3
 800c434:	4ba6      	ldr	r3, [pc, #664]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c436:	5c9a      	ldrb	r2, [r3, r2]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	3304      	adds	r3, #4
 800c43c:	404a      	eors	r2, r1
 800c43e:	b2d2      	uxtb	r2, r2
 800c440:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800c442:	183b      	adds	r3, r7, r0
 800c444:	791b      	ldrb	r3, [r3, #4]
 800c446:	001a      	movs	r2, r3
 800c448:	4ba1      	ldr	r3, [pc, #644]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c44a:	5c9a      	ldrb	r2, [r3, r2]
 800c44c:	183b      	adds	r3, r7, r0
 800c44e:	7a5b      	ldrb	r3, [r3, #9]
 800c450:	0019      	movs	r1, r3
 800c452:	4b9d      	ldr	r3, [pc, #628]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c454:	5c5b      	ldrb	r3, [r3, r1]
 800c456:	4053      	eors	r3, r2
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	183b      	adds	r3, r7, r0
 800c45c:	7b9b      	ldrb	r3, [r3, #14]
 800c45e:	0019      	movs	r1, r3
 800c460:	4b9a      	ldr	r3, [pc, #616]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c462:	5c5b      	ldrb	r3, [r3, r1]
 800c464:	4053      	eors	r3, r2
 800c466:	b2d9      	uxtb	r1, r3
 800c468:	183b      	adds	r3, r7, r0
 800c46a:	78db      	ldrb	r3, [r3, #3]
 800c46c:	001a      	movs	r2, r3
 800c46e:	4b98      	ldr	r3, [pc, #608]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c470:	5c9a      	ldrb	r2, [r3, r2]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	3305      	adds	r3, #5
 800c476:	404a      	eors	r2, r1
 800c478:	b2d2      	uxtb	r2, r2
 800c47a:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800c47c:	183b      	adds	r3, r7, r0
 800c47e:	791b      	ldrb	r3, [r3, #4]
 800c480:	001a      	movs	r2, r3
 800c482:	4b93      	ldr	r3, [pc, #588]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c484:	5c9a      	ldrb	r2, [r3, r2]
 800c486:	183b      	adds	r3, r7, r0
 800c488:	7a5b      	ldrb	r3, [r3, #9]
 800c48a:	0019      	movs	r1, r3
 800c48c:	4b90      	ldr	r3, [pc, #576]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c48e:	5c5b      	ldrb	r3, [r3, r1]
 800c490:	4053      	eors	r3, r2
 800c492:	b2da      	uxtb	r2, r3
 800c494:	183b      	adds	r3, r7, r0
 800c496:	7b9b      	ldrb	r3, [r3, #14]
 800c498:	0019      	movs	r1, r3
 800c49a:	4b8b      	ldr	r3, [pc, #556]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c49c:	5c5b      	ldrb	r3, [r3, r1]
 800c49e:	4053      	eors	r3, r2
 800c4a0:	b2d9      	uxtb	r1, r3
 800c4a2:	183b      	adds	r3, r7, r0
 800c4a4:	78db      	ldrb	r3, [r3, #3]
 800c4a6:	001a      	movs	r2, r3
 800c4a8:	4b88      	ldr	r3, [pc, #544]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c4aa:	5c9a      	ldrb	r2, [r3, r2]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	3306      	adds	r3, #6
 800c4b0:	404a      	eors	r2, r1
 800c4b2:	b2d2      	uxtb	r2, r2
 800c4b4:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800c4b6:	183b      	adds	r3, r7, r0
 800c4b8:	791b      	ldrb	r3, [r3, #4]
 800c4ba:	001a      	movs	r2, r3
 800c4bc:	4b83      	ldr	r3, [pc, #524]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c4be:	5c9a      	ldrb	r2, [r3, r2]
 800c4c0:	183b      	adds	r3, r7, r0
 800c4c2:	7a5b      	ldrb	r3, [r3, #9]
 800c4c4:	0019      	movs	r1, r3
 800c4c6:	4b82      	ldr	r3, [pc, #520]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c4c8:	5c5b      	ldrb	r3, [r3, r1]
 800c4ca:	4053      	eors	r3, r2
 800c4cc:	b2da      	uxtb	r2, r3
 800c4ce:	183b      	adds	r3, r7, r0
 800c4d0:	7b9b      	ldrb	r3, [r3, #14]
 800c4d2:	0019      	movs	r1, r3
 800c4d4:	4b7e      	ldr	r3, [pc, #504]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c4d6:	5c5b      	ldrb	r3, [r3, r1]
 800c4d8:	4053      	eors	r3, r2
 800c4da:	b2d9      	uxtb	r1, r3
 800c4dc:	183b      	adds	r3, r7, r0
 800c4de:	78db      	ldrb	r3, [r3, #3]
 800c4e0:	001a      	movs	r2, r3
 800c4e2:	4b79      	ldr	r3, [pc, #484]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c4e4:	5c9a      	ldrb	r2, [r3, r2]
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	3307      	adds	r3, #7
 800c4ea:	404a      	eors	r2, r1
 800c4ec:	b2d2      	uxtb	r2, r2
 800c4ee:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800c4f0:	183b      	adds	r3, r7, r0
 800c4f2:	7a1b      	ldrb	r3, [r3, #8]
 800c4f4:	001a      	movs	r2, r3
 800c4f6:	4b74      	ldr	r3, [pc, #464]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c4f8:	5c9a      	ldrb	r2, [r3, r2]
 800c4fa:	183b      	adds	r3, r7, r0
 800c4fc:	7b5b      	ldrb	r3, [r3, #13]
 800c4fe:	0019      	movs	r1, r3
 800c500:	4b72      	ldr	r3, [pc, #456]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c502:	5c5b      	ldrb	r3, [r3, r1]
 800c504:	4053      	eors	r3, r2
 800c506:	b2da      	uxtb	r2, r3
 800c508:	183b      	adds	r3, r7, r0
 800c50a:	789b      	ldrb	r3, [r3, #2]
 800c50c:	0019      	movs	r1, r3
 800c50e:	4b70      	ldr	r3, [pc, #448]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c510:	5c5b      	ldrb	r3, [r3, r1]
 800c512:	4053      	eors	r3, r2
 800c514:	b2d9      	uxtb	r1, r3
 800c516:	183b      	adds	r3, r7, r0
 800c518:	79db      	ldrb	r3, [r3, #7]
 800c51a:	001a      	movs	r2, r3
 800c51c:	4b6c      	ldr	r3, [pc, #432]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c51e:	5c9a      	ldrb	r2, [r3, r2]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	3308      	adds	r3, #8
 800c524:	404a      	eors	r2, r1
 800c526:	b2d2      	uxtb	r2, r2
 800c528:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800c52a:	183b      	adds	r3, r7, r0
 800c52c:	7a1b      	ldrb	r3, [r3, #8]
 800c52e:	001a      	movs	r2, r3
 800c530:	4b67      	ldr	r3, [pc, #412]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c532:	5c9a      	ldrb	r2, [r3, r2]
 800c534:	183b      	adds	r3, r7, r0
 800c536:	7b5b      	ldrb	r3, [r3, #13]
 800c538:	0019      	movs	r1, r3
 800c53a:	4b63      	ldr	r3, [pc, #396]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c53c:	5c5b      	ldrb	r3, [r3, r1]
 800c53e:	4053      	eors	r3, r2
 800c540:	b2da      	uxtb	r2, r3
 800c542:	183b      	adds	r3, r7, r0
 800c544:	789b      	ldrb	r3, [r3, #2]
 800c546:	0019      	movs	r1, r3
 800c548:	4b60      	ldr	r3, [pc, #384]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c54a:	5c5b      	ldrb	r3, [r3, r1]
 800c54c:	4053      	eors	r3, r2
 800c54e:	b2d9      	uxtb	r1, r3
 800c550:	183b      	adds	r3, r7, r0
 800c552:	79db      	ldrb	r3, [r3, #7]
 800c554:	001a      	movs	r2, r3
 800c556:	4b5e      	ldr	r3, [pc, #376]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c558:	5c9a      	ldrb	r2, [r3, r2]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3309      	adds	r3, #9
 800c55e:	404a      	eors	r2, r1
 800c560:	b2d2      	uxtb	r2, r2
 800c562:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800c564:	183b      	adds	r3, r7, r0
 800c566:	7a1b      	ldrb	r3, [r3, #8]
 800c568:	001a      	movs	r2, r3
 800c56a:	4b59      	ldr	r3, [pc, #356]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c56c:	5c9a      	ldrb	r2, [r3, r2]
 800c56e:	183b      	adds	r3, r7, r0
 800c570:	7b5b      	ldrb	r3, [r3, #13]
 800c572:	0019      	movs	r1, r3
 800c574:	4b56      	ldr	r3, [pc, #344]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c576:	5c5b      	ldrb	r3, [r3, r1]
 800c578:	4053      	eors	r3, r2
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	183b      	adds	r3, r7, r0
 800c57e:	789b      	ldrb	r3, [r3, #2]
 800c580:	0019      	movs	r1, r3
 800c582:	4b51      	ldr	r3, [pc, #324]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c584:	5c5b      	ldrb	r3, [r3, r1]
 800c586:	4053      	eors	r3, r2
 800c588:	b2d9      	uxtb	r1, r3
 800c58a:	183b      	adds	r3, r7, r0
 800c58c:	79db      	ldrb	r3, [r3, #7]
 800c58e:	001a      	movs	r2, r3
 800c590:	4b4e      	ldr	r3, [pc, #312]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c592:	5c9a      	ldrb	r2, [r3, r2]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	330a      	adds	r3, #10
 800c598:	404a      	eors	r2, r1
 800c59a:	b2d2      	uxtb	r2, r2
 800c59c:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800c59e:	183b      	adds	r3, r7, r0
 800c5a0:	7a1b      	ldrb	r3, [r3, #8]
 800c5a2:	001a      	movs	r2, r3
 800c5a4:	4b49      	ldr	r3, [pc, #292]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c5a6:	5c9a      	ldrb	r2, [r3, r2]
 800c5a8:	183b      	adds	r3, r7, r0
 800c5aa:	7b5b      	ldrb	r3, [r3, #13]
 800c5ac:	0019      	movs	r1, r3
 800c5ae:	4b48      	ldr	r3, [pc, #288]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c5b0:	5c5b      	ldrb	r3, [r3, r1]
 800c5b2:	4053      	eors	r3, r2
 800c5b4:	b2da      	uxtb	r2, r3
 800c5b6:	183b      	adds	r3, r7, r0
 800c5b8:	789b      	ldrb	r3, [r3, #2]
 800c5ba:	0019      	movs	r1, r3
 800c5bc:	4b44      	ldr	r3, [pc, #272]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c5be:	5c5b      	ldrb	r3, [r3, r1]
 800c5c0:	4053      	eors	r3, r2
 800c5c2:	b2d9      	uxtb	r1, r3
 800c5c4:	183b      	adds	r3, r7, r0
 800c5c6:	79db      	ldrb	r3, [r3, #7]
 800c5c8:	001a      	movs	r2, r3
 800c5ca:	4b3f      	ldr	r3, [pc, #252]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c5cc:	5c9a      	ldrb	r2, [r3, r2]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	330b      	adds	r3, #11
 800c5d2:	404a      	eors	r2, r1
 800c5d4:	b2d2      	uxtb	r2, r2
 800c5d6:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800c5d8:	183b      	adds	r3, r7, r0
 800c5da:	7b1b      	ldrb	r3, [r3, #12]
 800c5dc:	001a      	movs	r2, r3
 800c5de:	4b3a      	ldr	r3, [pc, #232]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c5e0:	5c9a      	ldrb	r2, [r3, r2]
 800c5e2:	183b      	adds	r3, r7, r0
 800c5e4:	785b      	ldrb	r3, [r3, #1]
 800c5e6:	0019      	movs	r1, r3
 800c5e8:	4b38      	ldr	r3, [pc, #224]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c5ea:	5c5b      	ldrb	r3, [r3, r1]
 800c5ec:	4053      	eors	r3, r2
 800c5ee:	b2da      	uxtb	r2, r3
 800c5f0:	183b      	adds	r3, r7, r0
 800c5f2:	799b      	ldrb	r3, [r3, #6]
 800c5f4:	0019      	movs	r1, r3
 800c5f6:	4b36      	ldr	r3, [pc, #216]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c5f8:	5c5b      	ldrb	r3, [r3, r1]
 800c5fa:	4053      	eors	r3, r2
 800c5fc:	b2d9      	uxtb	r1, r3
 800c5fe:	183b      	adds	r3, r7, r0
 800c600:	7adb      	ldrb	r3, [r3, #11]
 800c602:	001a      	movs	r2, r3
 800c604:	4b32      	ldr	r3, [pc, #200]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c606:	5c9a      	ldrb	r2, [r3, r2]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	330c      	adds	r3, #12
 800c60c:	404a      	eors	r2, r1
 800c60e:	b2d2      	uxtb	r2, r2
 800c610:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800c612:	183b      	adds	r3, r7, r0
 800c614:	7b1b      	ldrb	r3, [r3, #12]
 800c616:	001a      	movs	r2, r3
 800c618:	4b2d      	ldr	r3, [pc, #180]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c61a:	5c9a      	ldrb	r2, [r3, r2]
 800c61c:	183b      	adds	r3, r7, r0
 800c61e:	785b      	ldrb	r3, [r3, #1]
 800c620:	0019      	movs	r1, r3
 800c622:	4b29      	ldr	r3, [pc, #164]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c624:	5c5b      	ldrb	r3, [r3, r1]
 800c626:	4053      	eors	r3, r2
 800c628:	b2da      	uxtb	r2, r3
 800c62a:	183b      	adds	r3, r7, r0
 800c62c:	799b      	ldrb	r3, [r3, #6]
 800c62e:	0019      	movs	r1, r3
 800c630:	4b26      	ldr	r3, [pc, #152]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c632:	5c5b      	ldrb	r3, [r3, r1]
 800c634:	4053      	eors	r3, r2
 800c636:	b2d9      	uxtb	r1, r3
 800c638:	183b      	adds	r3, r7, r0
 800c63a:	7adb      	ldrb	r3, [r3, #11]
 800c63c:	001a      	movs	r2, r3
 800c63e:	4b24      	ldr	r3, [pc, #144]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c640:	5c9a      	ldrb	r2, [r3, r2]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	330d      	adds	r3, #13
 800c646:	404a      	eors	r2, r1
 800c648:	b2d2      	uxtb	r2, r2
 800c64a:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800c64c:	183b      	adds	r3, r7, r0
 800c64e:	7b1b      	ldrb	r3, [r3, #12]
 800c650:	001a      	movs	r2, r3
 800c652:	4b1f      	ldr	r3, [pc, #124]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c654:	5c9a      	ldrb	r2, [r3, r2]
 800c656:	183b      	adds	r3, r7, r0
 800c658:	785b      	ldrb	r3, [r3, #1]
 800c65a:	0019      	movs	r1, r3
 800c65c:	4b1c      	ldr	r3, [pc, #112]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c65e:	5c5b      	ldrb	r3, [r3, r1]
 800c660:	4053      	eors	r3, r2
 800c662:	b2da      	uxtb	r2, r3
 800c664:	183b      	adds	r3, r7, r0
 800c666:	799b      	ldrb	r3, [r3, #6]
 800c668:	0019      	movs	r1, r3
 800c66a:	4b17      	ldr	r3, [pc, #92]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c66c:	5c5b      	ldrb	r3, [r3, r1]
 800c66e:	4053      	eors	r3, r2
 800c670:	b2d9      	uxtb	r1, r3
 800c672:	183b      	adds	r3, r7, r0
 800c674:	7adb      	ldrb	r3, [r3, #11]
 800c676:	001a      	movs	r2, r3
 800c678:	4b14      	ldr	r3, [pc, #80]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c67a:	5c9a      	ldrb	r2, [r3, r2]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	330e      	adds	r3, #14
 800c680:	404a      	eors	r2, r1
 800c682:	b2d2      	uxtb	r2, r2
 800c684:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800c686:	183b      	adds	r3, r7, r0
 800c688:	7b1b      	ldrb	r3, [r3, #12]
 800c68a:	001a      	movs	r2, r3
 800c68c:	4b0f      	ldr	r3, [pc, #60]	; (800c6cc <mix_sub_columns+0x3c4>)
 800c68e:	5c9a      	ldrb	r2, [r3, r2]
 800c690:	183b      	adds	r3, r7, r0
 800c692:	785b      	ldrb	r3, [r3, #1]
 800c694:	0019      	movs	r1, r3
 800c696:	4b0e      	ldr	r3, [pc, #56]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c698:	5c5b      	ldrb	r3, [r3, r1]
 800c69a:	4053      	eors	r3, r2
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	183b      	adds	r3, r7, r0
 800c6a0:	799b      	ldrb	r3, [r3, #6]
 800c6a2:	0019      	movs	r1, r3
 800c6a4:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <mix_sub_columns+0x3c8>)
 800c6a6:	5c5b      	ldrb	r3, [r3, r1]
 800c6a8:	4053      	eors	r3, r2
 800c6aa:	b2d9      	uxtb	r1, r3
 800c6ac:	183b      	adds	r3, r7, r0
 800c6ae:	7adb      	ldrb	r3, [r3, #11]
 800c6b0:	001a      	movs	r2, r3
 800c6b2:	4b05      	ldr	r3, [pc, #20]	; (800c6c8 <mix_sub_columns+0x3c0>)
 800c6b4:	5c9a      	ldrb	r2, [r3, r2]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	330f      	adds	r3, #15
 800c6ba:	404a      	eors	r2, r1
 800c6bc:	b2d2      	uxtb	r2, r2
 800c6be:	701a      	strb	r2, [r3, #0]
  }
 800c6c0:	46c0      	nop			; (mov r8, r8)
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	b007      	add	sp, #28
 800c6c6:	bd90      	pop	{r4, r7, pc}
 800c6c8:	0801afac 	.word	0x0801afac
 800c6cc:	0801b0ac 	.word	0x0801b0ac
 800c6d0:	0801aeac 	.word	0x0801aeac

0800c6d4 <aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type aes_set_key( const uint8_t key[], length_type keylen, aes_context ctx[1] )
{
 800c6d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6d6:	b087      	sub	sp, #28
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	607a      	str	r2, [r7, #4]
 800c6de:	200b      	movs	r0, #11
 800c6e0:	183b      	adds	r3, r7, r0
 800c6e2:	1c0a      	adds	r2, r1, #0
 800c6e4:	701a      	strb	r2, [r3, #0]
    uint8_t cc, rc, hi;

    switch( keylen )
 800c6e6:	183b      	adds	r3, r7, r0
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	2b18      	cmp	r3, #24
 800c6ec:	d009      	beq.n	800c702 <aes_set_key+0x2e>
 800c6ee:	2b20      	cmp	r3, #32
 800c6f0:	d007      	beq.n	800c702 <aes_set_key+0x2e>
 800c6f2:	2b10      	cmp	r3, #16
 800c6f4:	d005      	beq.n	800c702 <aes_set_key+0x2e>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	22f0      	movs	r2, #240	; 0xf0
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	5499      	strb	r1, [r3, r2]
        return ( uint8_t )-1;
 800c6fe:	23ff      	movs	r3, #255	; 0xff
 800c700:	e113      	b.n	800c92a <aes_set_key+0x256>
        break;
 800c702:	46c0      	nop			; (mov r8, r8)
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	240b      	movs	r4, #11
 800c708:	193b      	adds	r3, r7, r4
 800c70a:	781a      	ldrb	r2, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	0019      	movs	r1, r3
 800c710:	f7ff fbc1 	bl	800be96 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800c714:	0020      	movs	r0, r4
 800c716:	183b      	adds	r3, r7, r0
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	331c      	adds	r3, #28
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	2111      	movs	r1, #17
 800c720:	187b      	adds	r3, r7, r1
 800c722:	0092      	lsls	r2, r2, #2
 800c724:	701a      	strb	r2, [r3, #0]
    ctx->rnd = (hi >> 4) - 1;
 800c726:	187b      	adds	r3, r7, r1
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	091b      	lsrs	r3, r3, #4
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	3b01      	subs	r3, #1
 800c730:	b2d9      	uxtb	r1, r3
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	22f0      	movs	r2, #240	; 0xf0
 800c736:	5499      	strb	r1, [r3, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c738:	2317      	movs	r3, #23
 800c73a:	18fb      	adds	r3, r7, r3
 800c73c:	183a      	adds	r2, r7, r0
 800c73e:	7812      	ldrb	r2, [r2, #0]
 800c740:	701a      	strb	r2, [r3, #0]
 800c742:	2316      	movs	r3, #22
 800c744:	18fb      	adds	r3, r7, r3
 800c746:	2201      	movs	r2, #1
 800c748:	701a      	strb	r2, [r3, #0]
 800c74a:	e0e4      	b.n	800c916 <aes_set_key+0x242>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800c74c:	2017      	movs	r0, #23
 800c74e:	183b      	adds	r3, r7, r0
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	1f1a      	subs	r2, r3, #4
 800c754:	2315      	movs	r3, #21
 800c756:	18fb      	adds	r3, r7, r3
 800c758:	6879      	ldr	r1, [r7, #4]
 800c75a:	5c8a      	ldrb	r2, [r1, r2]
 800c75c:	701a      	strb	r2, [r3, #0]
        t1 = ctx->ksch[cc - 3];
 800c75e:	183b      	adds	r3, r7, r0
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	1eda      	subs	r2, r3, #3
 800c764:	2314      	movs	r3, #20
 800c766:	18fb      	adds	r3, r7, r3
 800c768:	6879      	ldr	r1, [r7, #4]
 800c76a:	5c8a      	ldrb	r2, [r1, r2]
 800c76c:	701a      	strb	r2, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 800c76e:	183b      	adds	r3, r7, r0
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	1e9a      	subs	r2, r3, #2
 800c774:	2313      	movs	r3, #19
 800c776:	18fb      	adds	r3, r7, r3
 800c778:	6879      	ldr	r1, [r7, #4]
 800c77a:	5c8a      	ldrb	r2, [r1, r2]
 800c77c:	701a      	strb	r2, [r3, #0]
        t3 = ctx->ksch[cc - 1];
 800c77e:	183b      	adds	r3, r7, r0
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	1e5a      	subs	r2, r3, #1
 800c784:	2312      	movs	r3, #18
 800c786:	18fb      	adds	r3, r7, r3
 800c788:	6879      	ldr	r1, [r7, #4]
 800c78a:	5c8a      	ldrb	r2, [r1, r2]
 800c78c:	701a      	strb	r2, [r3, #0]
        if( cc % keylen == 0 )
 800c78e:	183a      	adds	r2, r7, r0
 800c790:	230b      	movs	r3, #11
 800c792:	18fb      	adds	r3, r7, r3
 800c794:	7812      	ldrb	r2, [r2, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	0019      	movs	r1, r3
 800c79a:	0010      	movs	r0, r2
 800c79c:	f7f3 fd3a 	bl	8000214 <__aeabi_uidivmod>
 800c7a0:	000b      	movs	r3, r1
 800c7a2:	b2db      	uxtb	r3, r3
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d13e      	bne.n	800c826 <aes_set_key+0x152>
        {
            tt = t0;
 800c7a8:	2410      	movs	r4, #16
 800c7aa:	193b      	adds	r3, r7, r4
 800c7ac:	2015      	movs	r0, #21
 800c7ae:	183a      	adds	r2, r7, r0
 800c7b0:	7812      	ldrb	r2, [r2, #0]
 800c7b2:	701a      	strb	r2, [r3, #0]
            t0 = s_box(t1) ^ rc;
 800c7b4:	2514      	movs	r5, #20
 800c7b6:	197b      	adds	r3, r7, r5
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	4a5e      	ldr	r2, [pc, #376]	; (800c934 <aes_set_key+0x260>)
 800c7bc:	5cd1      	ldrb	r1, [r2, r3]
 800c7be:	183b      	adds	r3, r7, r0
 800c7c0:	2016      	movs	r0, #22
 800c7c2:	183a      	adds	r2, r7, r0
 800c7c4:	7812      	ldrb	r2, [r2, #0]
 800c7c6:	404a      	eors	r2, r1
 800c7c8:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t2);
 800c7ca:	2613      	movs	r6, #19
 800c7cc:	19bb      	adds	r3, r7, r6
 800c7ce:	781a      	ldrb	r2, [r3, #0]
 800c7d0:	197b      	adds	r3, r7, r5
 800c7d2:	4958      	ldr	r1, [pc, #352]	; (800c934 <aes_set_key+0x260>)
 800c7d4:	5c8a      	ldrb	r2, [r1, r2]
 800c7d6:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t3);
 800c7d8:	2512      	movs	r5, #18
 800c7da:	197b      	adds	r3, r7, r5
 800c7dc:	781a      	ldrb	r2, [r3, #0]
 800c7de:	19bb      	adds	r3, r7, r6
 800c7e0:	4954      	ldr	r1, [pc, #336]	; (800c934 <aes_set_key+0x260>)
 800c7e2:	5c8a      	ldrb	r2, [r1, r2]
 800c7e4:	701a      	strb	r2, [r3, #0]
            t3 = s_box(tt);
 800c7e6:	193b      	adds	r3, r7, r4
 800c7e8:	781a      	ldrb	r2, [r3, #0]
 800c7ea:	197b      	adds	r3, r7, r5
 800c7ec:	4951      	ldr	r1, [pc, #324]	; (800c934 <aes_set_key+0x260>)
 800c7ee:	5c8a      	ldrb	r2, [r1, r2]
 800c7f0:	701a      	strb	r2, [r3, #0]
            rc = f2(rc);
 800c7f2:	183b      	adds	r3, r7, r0
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	b25a      	sxtb	r2, r3
 800c7fa:	0004      	movs	r4, r0
 800c7fc:	183b      	adds	r3, r7, r0
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	09db      	lsrs	r3, r3, #7
 800c802:	b2db      	uxtb	r3, r3
 800c804:	1c19      	adds	r1, r3, #0
 800c806:	1c0b      	adds	r3, r1, #0
 800c808:	18db      	adds	r3, r3, r3
 800c80a:	185b      	adds	r3, r3, r1
 800c80c:	1c19      	adds	r1, r3, #0
 800c80e:	00c8      	lsls	r0, r1, #3
 800c810:	1c19      	adds	r1, r3, #0
 800c812:	1c03      	adds	r3, r0, #0
 800c814:	18cb      	adds	r3, r1, r3
 800c816:	b2db      	uxtb	r3, r3
 800c818:	b25b      	sxtb	r3, r3
 800c81a:	4053      	eors	r3, r2
 800c81c:	b25a      	sxtb	r2, r3
 800c81e:	0020      	movs	r0, r4
 800c820:	183b      	adds	r3, r7, r0
 800c822:	701a      	strb	r2, [r3, #0]
 800c824:	e02e      	b.n	800c884 <aes_set_key+0x1b0>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800c826:	230b      	movs	r3, #11
 800c828:	18fb      	adds	r3, r7, r3
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	2b18      	cmp	r3, #24
 800c82e:	d929      	bls.n	800c884 <aes_set_key+0x1b0>
 800c830:	2317      	movs	r3, #23
 800c832:	18fa      	adds	r2, r7, r3
 800c834:	230b      	movs	r3, #11
 800c836:	18fb      	adds	r3, r7, r3
 800c838:	7812      	ldrb	r2, [r2, #0]
 800c83a:	781b      	ldrb	r3, [r3, #0]
 800c83c:	0019      	movs	r1, r3
 800c83e:	0010      	movs	r0, r2
 800c840:	f7f3 fce8 	bl	8000214 <__aeabi_uidivmod>
 800c844:	000b      	movs	r3, r1
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b10      	cmp	r3, #16
 800c84a:	d11b      	bne.n	800c884 <aes_set_key+0x1b0>
        {
            t0 = s_box(t0);
 800c84c:	2115      	movs	r1, #21
 800c84e:	187b      	adds	r3, r7, r1
 800c850:	781a      	ldrb	r2, [r3, #0]
 800c852:	187b      	adds	r3, r7, r1
 800c854:	4937      	ldr	r1, [pc, #220]	; (800c934 <aes_set_key+0x260>)
 800c856:	5c8a      	ldrb	r2, [r1, r2]
 800c858:	701a      	strb	r2, [r3, #0]
            t1 = s_box(t1);
 800c85a:	2114      	movs	r1, #20
 800c85c:	187b      	adds	r3, r7, r1
 800c85e:	781a      	ldrb	r2, [r3, #0]
 800c860:	187b      	adds	r3, r7, r1
 800c862:	4934      	ldr	r1, [pc, #208]	; (800c934 <aes_set_key+0x260>)
 800c864:	5c8a      	ldrb	r2, [r1, r2]
 800c866:	701a      	strb	r2, [r3, #0]
            t2 = s_box(t2);
 800c868:	2113      	movs	r1, #19
 800c86a:	187b      	adds	r3, r7, r1
 800c86c:	781a      	ldrb	r2, [r3, #0]
 800c86e:	187b      	adds	r3, r7, r1
 800c870:	4930      	ldr	r1, [pc, #192]	; (800c934 <aes_set_key+0x260>)
 800c872:	5c8a      	ldrb	r2, [r1, r2]
 800c874:	701a      	strb	r2, [r3, #0]
            t3 = s_box(t3);
 800c876:	2112      	movs	r1, #18
 800c878:	187b      	adds	r3, r7, r1
 800c87a:	781a      	ldrb	r2, [r3, #0]
 800c87c:	187b      	adds	r3, r7, r1
 800c87e:	492d      	ldr	r1, [pc, #180]	; (800c934 <aes_set_key+0x260>)
 800c880:	5c8a      	ldrb	r2, [r1, r2]
 800c882:	701a      	strb	r2, [r3, #0]
        }
        tt = cc - keylen;
 800c884:	2410      	movs	r4, #16
 800c886:	193b      	adds	r3, r7, r4
 800c888:	2017      	movs	r0, #23
 800c88a:	1839      	adds	r1, r7, r0
 800c88c:	220b      	movs	r2, #11
 800c88e:	18ba      	adds	r2, r7, r2
 800c890:	7809      	ldrb	r1, [r1, #0]
 800c892:	7812      	ldrb	r2, [r2, #0]
 800c894:	1a8a      	subs	r2, r1, r2
 800c896:	701a      	strb	r2, [r3, #0]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800c898:	193b      	adds	r3, r7, r4
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	5cd1      	ldrb	r1, [r2, r3]
 800c8a0:	183b      	adds	r3, r7, r0
 800c8a2:	781b      	ldrb	r3, [r3, #0]
 800c8a4:	2215      	movs	r2, #21
 800c8a6:	18ba      	adds	r2, r7, r2
 800c8a8:	7812      	ldrb	r2, [r2, #0]
 800c8aa:	404a      	eors	r2, r1
 800c8ac:	b2d1      	uxtb	r1, r2
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800c8b2:	193b      	adds	r3, r7, r4
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	5cd1      	ldrb	r1, [r2, r3]
 800c8bc:	183b      	adds	r3, r7, r0
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	3301      	adds	r3, #1
 800c8c2:	2214      	movs	r2, #20
 800c8c4:	18ba      	adds	r2, r7, r2
 800c8c6:	7812      	ldrb	r2, [r2, #0]
 800c8c8:	404a      	eors	r2, r1
 800c8ca:	b2d1      	uxtb	r1, r2
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800c8d0:	193b      	adds	r3, r7, r4
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	5cd1      	ldrb	r1, [r2, r3]
 800c8da:	183b      	adds	r3, r7, r0
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	3302      	adds	r3, #2
 800c8e0:	2213      	movs	r2, #19
 800c8e2:	18ba      	adds	r2, r7, r2
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	404a      	eors	r2, r1
 800c8e8:	b2d1      	uxtb	r1, r2
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800c8ee:	193b      	adds	r3, r7, r4
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	3303      	adds	r3, #3
 800c8f4:	687a      	ldr	r2, [r7, #4]
 800c8f6:	5cd1      	ldrb	r1, [r2, r3]
 800c8f8:	183b      	adds	r3, r7, r0
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	3303      	adds	r3, #3
 800c8fe:	2212      	movs	r2, #18
 800c900:	18ba      	adds	r2, r7, r2
 800c902:	7812      	ldrb	r2, [r2, #0]
 800c904:	404a      	eors	r2, r1
 800c906:	b2d1      	uxtb	r1, r2
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800c90c:	183b      	adds	r3, r7, r0
 800c90e:	183a      	adds	r2, r7, r0
 800c910:	7812      	ldrb	r2, [r2, #0]
 800c912:	3204      	adds	r2, #4
 800c914:	701a      	strb	r2, [r3, #0]
 800c916:	2317      	movs	r3, #23
 800c918:	18fa      	adds	r2, r7, r3
 800c91a:	2311      	movs	r3, #17
 800c91c:	18fb      	adds	r3, r7, r3
 800c91e:	7812      	ldrb	r2, [r2, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	429a      	cmp	r2, r3
 800c924:	d200      	bcs.n	800c928 <aes_set_key+0x254>
 800c926:	e711      	b.n	800c74c <aes_set_key+0x78>
    }
    return 0;
 800c928:	2300      	movs	r3, #0
}
 800c92a:	0018      	movs	r0, r3
 800c92c:	46bd      	mov	sp, r7
 800c92e:	b007      	add	sp, #28
 800c930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c932:	46c0      	nop			; (mov r8, r8)
 800c934:	0801aeac 	.word	0x0801aeac

0800c938 <aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const aes_context ctx[1] )
{
 800c938:	b5b0      	push	{r4, r5, r7, lr}
 800c93a:	b08a      	sub	sp, #40	; 0x28
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	22f0      	movs	r2, #240	; 0xf0
 800c948:	5c9b      	ldrb	r3, [r3, r2]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d03a      	beq.n	800c9c4 <aes_encrypt+0x8c>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	68f9      	ldr	r1, [r7, #12]
 800c952:	2314      	movs	r3, #20
 800c954:	18fb      	adds	r3, r7, r3
 800c956:	0018      	movs	r0, r3
 800c958:	f7ff fb6e 	bl	800c038 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800c95c:	2327      	movs	r3, #39	; 0x27
 800c95e:	18fb      	adds	r3, r7, r3
 800c960:	2201      	movs	r2, #1
 800c962:	701a      	strb	r2, [r3, #0]
 800c964:	e014      	b.n	800c990 <aes_encrypt+0x58>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800c966:	2514      	movs	r5, #20
 800c968:	197b      	adds	r3, r7, r5
 800c96a:	0018      	movs	r0, r3
 800c96c:	f7ff fccc 	bl	800c308 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2427      	movs	r4, #39	; 0x27
 800c974:	193a      	adds	r2, r7, r4
 800c976:	7812      	ldrb	r2, [r2, #0]
 800c978:	0112      	lsls	r2, r2, #4
 800c97a:	189a      	adds	r2, r3, r2
 800c97c:	197b      	adds	r3, r7, r5
 800c97e:	0011      	movs	r1, r2
 800c980:	0018      	movs	r0, r3
 800c982:	f7ff fc10 	bl	800c1a6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800c986:	193b      	adds	r3, r7, r4
 800c988:	193a      	adds	r2, r7, r4
 800c98a:	7812      	ldrb	r2, [r2, #0]
 800c98c:	3201      	adds	r2, #1
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	22f0      	movs	r2, #240	; 0xf0
 800c994:	5c9b      	ldrb	r3, [r3, r2]
 800c996:	2227      	movs	r2, #39	; 0x27
 800c998:	18ba      	adds	r2, r7, r2
 800c99a:	7812      	ldrb	r2, [r2, #0]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d3e2      	bcc.n	800c966 <aes_encrypt+0x2e>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800c9a0:	2414      	movs	r4, #20
 800c9a2:	193b      	adds	r3, r7, r4
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f7ff fc0d 	bl	800c1c4 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2227      	movs	r2, #39	; 0x27
 800c9ae:	18ba      	adds	r2, r7, r2
 800c9b0:	7812      	ldrb	r2, [r2, #0]
 800c9b2:	0112      	lsls	r2, r2, #4
 800c9b4:	189a      	adds	r2, r3, r2
 800c9b6:	1939      	adds	r1, r7, r4
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	f7ff fb3c 	bl	800c038 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e000      	b.n	800c9c6 <aes_encrypt+0x8e>
        return ( uint8_t )-1;
 800c9c4:	23ff      	movs	r3, #255	; 0xff
}
 800c9c6:	0018      	movs	r0, r3
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	b00a      	add	sp, #40	; 0x28
 800c9cc:	bdb0      	pop	{r4, r5, r7, pc}

0800c9ce <AES_CMAC_Init>:
        }                          \
    } while (0) \


void AES_CMAC_Init(AES_CMAC_CTX *ctx)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
            memset1(ctx->X, 0, sizeof ctx->X);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	33f1      	adds	r3, #241	; 0xf1
 800c9da:	2210      	movs	r2, #16
 800c9dc:	2100      	movs	r1, #0
 800c9de:	0018      	movs	r0, r3
 800c9e0:	f00c ff72 	bl	80198c8 <memset1>
            ctx->M_n = 0;
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	238a      	movs	r3, #138	; 0x8a
 800c9e8:	005b      	lsls	r3, r3, #1
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	50d1      	str	r1, [r2, r3]
        memset1(ctx->rijndael.ksch, '\0', 240);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	22f0      	movs	r2, #240	; 0xf0
 800c9f2:	2100      	movs	r1, #0
 800c9f4:	0018      	movs	r0, r3
 800c9f6:	f00c ff67 	bl	80198c8 <memset1>
}
 800c9fa:	46c0      	nop			; (mov r8, r8)
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	b002      	add	sp, #8
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <AES_CMAC_SetKey>:
    
void AES_CMAC_SetKey(AES_CMAC_CTX *ctx, const uint8_t key[AES_CMAC_KEY_LENGTH])
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b082      	sub	sp, #8
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
           //rijndael_set_key_enc_only(&ctx->rijndael, key, 128);
       aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael);
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2110      	movs	r1, #16
 800ca12:	0018      	movs	r0, r3
 800ca14:	f7ff fe5e 	bl	800c6d4 <aes_set_key>
}
 800ca18:	46c0      	nop			; (mov r8, r8)
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	b002      	add	sp, #8
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <AES_CMAC_Update>:
    
void AES_CMAC_Update(AES_CMAC_CTX *ctx, const uint8_t *data, uint32_t len)
{
 800ca20:	b590      	push	{r4, r7, lr}
 800ca22:	b08d      	sub	sp, #52	; 0x34
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
            uint32_t mlen;
        uint8_t in[16];
    
            if (ctx->M_n > 0) {
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	238a      	movs	r3, #138	; 0x8a
 800ca30:	005b      	lsls	r3, r3, #1
 800ca32:	58d3      	ldr	r3, [r2, r3]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d100      	bne.n	800ca3a <AES_CMAC_Update+0x1a>
 800ca38:	e097      	b.n	800cb6a <AES_CMAC_Update+0x14a>
                  mlen = MIN(16 - ctx->M_n, len);
 800ca3a:	68fa      	ldr	r2, [r7, #12]
 800ca3c:	238a      	movs	r3, #138	; 0x8a
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	58d3      	ldr	r3, [r2, r3]
 800ca42:	2210      	movs	r2, #16
 800ca44:	1ad2      	subs	r2, r2, r3
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d900      	bls.n	800ca4e <AES_CMAC_Update+0x2e>
 800ca4c:	0013      	movs	r3, r2
 800ca4e:	627b      	str	r3, [r7, #36]	; 0x24
                    memcpy1(ctx->M_last + ctx->M_n, data, mlen);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	1c9a      	adds	r2, r3, #2
 800ca54:	32ff      	adds	r2, #255	; 0xff
 800ca56:	68f9      	ldr	r1, [r7, #12]
 800ca58:	238a      	movs	r3, #138	; 0x8a
 800ca5a:	005b      	lsls	r3, r3, #1
 800ca5c:	58cb      	ldr	r3, [r1, r3]
 800ca5e:	18d3      	adds	r3, r2, r3
 800ca60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca62:	b292      	uxth	r2, r2
 800ca64:	68b9      	ldr	r1, [r7, #8]
 800ca66:	0018      	movs	r0, r3
 800ca68:	f00c fef2 	bl	8019850 <memcpy1>
                    ctx->M_n += mlen;
 800ca6c:	68fa      	ldr	r2, [r7, #12]
 800ca6e:	238a      	movs	r3, #138	; 0x8a
 800ca70:	005b      	lsls	r3, r3, #1
 800ca72:	58d2      	ldr	r2, [r2, r3]
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	18d1      	adds	r1, r2, r3
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	238a      	movs	r3, #138	; 0x8a
 800ca7c:	005b      	lsls	r3, r3, #1
 800ca7e:	50d1      	str	r1, [r2, r3]
                    if (ctx->M_n < 16 || len == mlen)
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	238a      	movs	r3, #138	; 0x8a
 800ca84:	005b      	lsls	r3, r3, #1
 800ca86:	58d3      	ldr	r3, [r2, r3]
 800ca88:	2b0f      	cmp	r3, #15
 800ca8a:	d800      	bhi.n	800ca8e <AES_CMAC_Update+0x6e>
 800ca8c:	e07f      	b.n	800cb8e <AES_CMAC_Update+0x16e>
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca92:	429a      	cmp	r2, r3
 800ca94:	d100      	bne.n	800ca98 <AES_CMAC_Update+0x78>
 800ca96:	e07a      	b.n	800cb8e <AES_CMAC_Update+0x16e>
                            return;
                   XOR(ctx->M_last, ctx->X);
 800ca98:	2300      	movs	r3, #0
 800ca9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca9c:	e018      	b.n	800cad0 <AES_CMAC_Update+0xb0>
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	21f1      	movs	r1, #241	; 0xf1
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	18d3      	adds	r3, r2, r3
 800caa6:	185b      	adds	r3, r3, r1
 800caa8:	781a      	ldrb	r2, [r3, #0]
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	2302      	movs	r3, #2
 800caae:	33ff      	adds	r3, #255	; 0xff
 800cab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cab2:	1841      	adds	r1, r0, r1
 800cab4:	18cb      	adds	r3, r1, r3
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	4053      	eors	r3, r2
 800caba:	b2d8      	uxtb	r0, r3
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	21f1      	movs	r1, #241	; 0xf1
 800cac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac2:	18d3      	adds	r3, r2, r3
 800cac4:	185b      	adds	r3, r3, r1
 800cac6:	1c02      	adds	r2, r0, #0
 800cac8:	701a      	strb	r2, [r3, #0]
 800caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cacc:	3301      	adds	r3, #1
 800cace:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	2b0f      	cmp	r3, #15
 800cad4:	dde3      	ble.n	800ca9e <AES_CMAC_Update+0x7e>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);
            aes_encrypt( ctx->X, ctx->X, &ctx->rijndael);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	33f1      	adds	r3, #241	; 0xf1
 800cada:	0018      	movs	r0, r3
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	33f1      	adds	r3, #241	; 0xf1
 800cae0:	68fa      	ldr	r2, [r7, #12]
 800cae2:	0019      	movs	r1, r3
 800cae4:	f7ff ff28 	bl	800c938 <aes_encrypt>
                    data += mlen;
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	18d3      	adds	r3, r2, r3
 800caee:	60bb      	str	r3, [r7, #8]
                    len -= mlen;
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	607b      	str	r3, [r7, #4]
            }
            while (len > 16) {      /* not last block */
 800caf8:	e037      	b.n	800cb6a <AES_CMAC_Update+0x14a>

                    XOR(data, ctx->X);
 800cafa:	2300      	movs	r3, #0
 800cafc:	62bb      	str	r3, [r7, #40]	; 0x28
 800cafe:	e015      	b.n	800cb2c <AES_CMAC_Update+0x10c>
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	21f1      	movs	r1, #241	; 0xf1
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	18d3      	adds	r3, r2, r3
 800cb08:	185b      	adds	r3, r3, r1
 800cb0a:	781a      	ldrb	r2, [r3, #0]
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	68b9      	ldr	r1, [r7, #8]
 800cb10:	18cb      	adds	r3, r1, r3
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	4053      	eors	r3, r2
 800cb16:	b2d8      	uxtb	r0, r3
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	21f1      	movs	r1, #241	; 0xf1
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	18d3      	adds	r3, r2, r3
 800cb20:	185b      	adds	r3, r3, r1
 800cb22:	1c02      	adds	r2, r0, #0
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	3301      	adds	r3, #1
 800cb2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb2e:	2b0f      	cmp	r3, #15
 800cb30:	dde6      	ble.n	800cb00 <AES_CMAC_Update+0xe0>
                    //rijndael_encrypt(&ctx->rijndael, ctx->X, ctx->X);

                    memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	33f1      	adds	r3, #241	; 0xf1
 800cb36:	0019      	movs	r1, r3
 800cb38:	2414      	movs	r4, #20
 800cb3a:	193b      	adds	r3, r7, r4
 800cb3c:	2210      	movs	r2, #16
 800cb3e:	0018      	movs	r0, r3
 800cb40:	f00c fe86 	bl	8019850 <memcpy1>
            aes_encrypt( in, in, &ctx->rijndael);
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	1939      	adds	r1, r7, r4
 800cb48:	193b      	adds	r3, r7, r4
 800cb4a:	0018      	movs	r0, r3
 800cb4c:	f7ff fef4 	bl	800c938 <aes_encrypt>
                    memcpy1(&ctx->X[0], in, 16);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	33f1      	adds	r3, #241	; 0xf1
 800cb54:	1939      	adds	r1, r7, r4
 800cb56:	2210      	movs	r2, #16
 800cb58:	0018      	movs	r0, r3
 800cb5a:	f00c fe79 	bl	8019850 <memcpy1>

                    data += 16;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	3310      	adds	r3, #16
 800cb62:	60bb      	str	r3, [r7, #8]
                    len -= 16;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3b10      	subs	r3, #16
 800cb68:	607b      	str	r3, [r7, #4]
            while (len > 16) {      /* not last block */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b10      	cmp	r3, #16
 800cb6e:	d8c4      	bhi.n	800cafa <AES_CMAC_Update+0xda>
            }
            /* potential last block, save it */
            memcpy1(ctx->M_last, data, len);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3302      	adds	r3, #2
 800cb74:	33ff      	adds	r3, #255	; 0xff
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	b292      	uxth	r2, r2
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	0018      	movs	r0, r3
 800cb7e:	f00c fe67 	bl	8019850 <memcpy1>
            ctx->M_n = len;
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	238a      	movs	r3, #138	; 0x8a
 800cb86:	005b      	lsls	r3, r3, #1
 800cb88:	6879      	ldr	r1, [r7, #4]
 800cb8a:	50d1      	str	r1, [r2, r3]
 800cb8c:	e000      	b.n	800cb90 <AES_CMAC_Update+0x170>
                            return;
 800cb8e:	46c0      	nop			; (mov r8, r8)
}
 800cb90:	46bd      	mov	sp, r7
 800cb92:	b00d      	add	sp, #52	; 0x34
 800cb94:	bd90      	pop	{r4, r7, pc}

0800cb96 <AES_CMAC_Final>:
   
void AES_CMAC_Final(uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX *ctx)
{
 800cb96:	b590      	push	{r4, r7, lr}
 800cb98:	b093      	sub	sp, #76	; 0x4c
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
            uint8_t K[16];
        uint8_t in[16];
            /* generate subkey K1 */
            memset1(K, '\0', 16);
 800cba0:	241c      	movs	r4, #28
 800cba2:	193b      	adds	r3, r7, r4
 800cba4:	2210      	movs	r2, #16
 800cba6:	2100      	movs	r1, #0
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f00c fe8d 	bl	80198c8 <memset1>

            //rijndael_encrypt(&ctx->rijndael, K, K);

            aes_encrypt( K, K, &ctx->rijndael);
 800cbae:	683a      	ldr	r2, [r7, #0]
 800cbb0:	1939      	adds	r1, r7, r4
 800cbb2:	193b      	adds	r3, r7, r4
 800cbb4:	0018      	movs	r0, r3
 800cbb6:	f7ff febf 	bl	800c938 <aes_encrypt>

            if (K[0] & 0x80) {
 800cbba:	193b      	adds	r3, r7, r4
 800cbbc:	781b      	ldrb	r3, [r3, #0]
 800cbbe:	b25b      	sxtb	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	da2e      	bge.n	800cc22 <AES_CMAC_Final+0x8c>
                    LSHIFT(K, K);
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	647b      	str	r3, [r7, #68]	; 0x44
 800cbc8:	e018      	b.n	800cbfc <AES_CMAC_Final+0x66>
 800cbca:	201c      	movs	r0, #28
 800cbcc:	183a      	adds	r2, r7, r0
 800cbce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbd0:	18d3      	adds	r3, r2, r3
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	b25a      	sxtb	r2, r3
 800cbd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbda:	3301      	adds	r3, #1
 800cbdc:	1839      	adds	r1, r7, r0
 800cbde:	5ccb      	ldrb	r3, [r1, r3]
 800cbe0:	09db      	lsrs	r3, r3, #7
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	b25b      	sxtb	r3, r3
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	b25b      	sxtb	r3, r3
 800cbea:	b2d9      	uxtb	r1, r3
 800cbec:	183a      	adds	r2, r7, r0
 800cbee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf0:	18d3      	adds	r3, r2, r3
 800cbf2:	1c0a      	adds	r2, r1, #0
 800cbf4:	701a      	strb	r2, [r3, #0]
 800cbf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	647b      	str	r3, [r7, #68]	; 0x44
 800cbfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbfe:	2b0e      	cmp	r3, #14
 800cc00:	dde3      	ble.n	800cbca <AES_CMAC_Final+0x34>
 800cc02:	211c      	movs	r1, #28
 800cc04:	187b      	adds	r3, r7, r1
 800cc06:	7bdb      	ldrb	r3, [r3, #15]
 800cc08:	18db      	adds	r3, r3, r3
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	187b      	adds	r3, r7, r1
 800cc0e:	73da      	strb	r2, [r3, #15]
                   K[15] ^= 0x87;
 800cc10:	187b      	adds	r3, r7, r1
 800cc12:	7bdb      	ldrb	r3, [r3, #15]
 800cc14:	2279      	movs	r2, #121	; 0x79
 800cc16:	4252      	negs	r2, r2
 800cc18:	4053      	eors	r3, r2
 800cc1a:	b2da      	uxtb	r2, r3
 800cc1c:	187b      	adds	r3, r7, r1
 800cc1e:	73da      	strb	r2, [r3, #15]
 800cc20:	e025      	b.n	800cc6e <AES_CMAC_Final+0xd8>
            } else
                    LSHIFT(K, K);
 800cc22:	2300      	movs	r3, #0
 800cc24:	643b      	str	r3, [r7, #64]	; 0x40
 800cc26:	e018      	b.n	800cc5a <AES_CMAC_Final+0xc4>
 800cc28:	201c      	movs	r0, #28
 800cc2a:	183a      	adds	r2, r7, r0
 800cc2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2e:	18d3      	adds	r3, r2, r3
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	b25a      	sxtb	r2, r3
 800cc36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc38:	3301      	adds	r3, #1
 800cc3a:	1839      	adds	r1, r7, r0
 800cc3c:	5ccb      	ldrb	r3, [r1, r3]
 800cc3e:	09db      	lsrs	r3, r3, #7
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	b25b      	sxtb	r3, r3
 800cc44:	4313      	orrs	r3, r2
 800cc46:	b25b      	sxtb	r3, r3
 800cc48:	b2d9      	uxtb	r1, r3
 800cc4a:	183a      	adds	r2, r7, r0
 800cc4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc4e:	18d3      	adds	r3, r2, r3
 800cc50:	1c0a      	adds	r2, r1, #0
 800cc52:	701a      	strb	r2, [r3, #0]
 800cc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc56:	3301      	adds	r3, #1
 800cc58:	643b      	str	r3, [r7, #64]	; 0x40
 800cc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5c:	2b0e      	cmp	r3, #14
 800cc5e:	dde3      	ble.n	800cc28 <AES_CMAC_Final+0x92>
 800cc60:	211c      	movs	r1, #28
 800cc62:	187b      	adds	r3, r7, r1
 800cc64:	7bdb      	ldrb	r3, [r3, #15]
 800cc66:	18db      	adds	r3, r3, r3
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	187b      	adds	r3, r7, r1
 800cc6c:	73da      	strb	r2, [r3, #15]


            if (ctx->M_n == 16) {
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	238a      	movs	r3, #138	; 0x8a
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	58d3      	ldr	r3, [r2, r3]
 800cc76:	2b10      	cmp	r3, #16
 800cc78:	d11f      	bne.n	800ccba <AES_CMAC_Final+0x124>
                    /* last block was a complete block */
                    XOR(K, ctx->M_last);
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc7e:	e018      	b.n	800ccb2 <AES_CMAC_Final+0x11c>
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	2302      	movs	r3, #2
 800cc84:	33ff      	adds	r3, #255	; 0xff
 800cc86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc88:	188a      	adds	r2, r1, r2
 800cc8a:	18d3      	adds	r3, r2, r3
 800cc8c:	781a      	ldrb	r2, [r3, #0]
 800cc8e:	231c      	movs	r3, #28
 800cc90:	18f9      	adds	r1, r7, r3
 800cc92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc94:	18cb      	adds	r3, r1, r3
 800cc96:	781b      	ldrb	r3, [r3, #0]
 800cc98:	4053      	eors	r3, r2
 800cc9a:	b2d8      	uxtb	r0, r3
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	2302      	movs	r3, #2
 800cca0:	33ff      	adds	r3, #255	; 0xff
 800cca2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cca4:	188a      	adds	r2, r1, r2
 800cca6:	18d3      	adds	r3, r2, r3
 800cca8:	1c02      	adds	r2, r0, #0
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccae:	3301      	adds	r3, #1
 800ccb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb4:	2b0f      	cmp	r3, #15
 800ccb6:	dde3      	ble.n	800cc80 <AES_CMAC_Final+0xea>
 800ccb8:	e09f      	b.n	800cdfa <AES_CMAC_Final+0x264>

           } else {
                   /* generate subkey K2 */
                  if (K[0] & 0x80) {
 800ccba:	231c      	movs	r3, #28
 800ccbc:	18fb      	adds	r3, r7, r3
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	b25b      	sxtb	r3, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	da2e      	bge.n	800cd24 <AES_CMAC_Final+0x18e>
                          LSHIFT(K, K);
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccca:	e018      	b.n	800ccfe <AES_CMAC_Final+0x168>
 800cccc:	201c      	movs	r0, #28
 800ccce:	183a      	adds	r2, r7, r0
 800ccd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd2:	18d3      	adds	r3, r2, r3
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	005b      	lsls	r3, r3, #1
 800ccd8:	b25a      	sxtb	r2, r3
 800ccda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccdc:	3301      	adds	r3, #1
 800ccde:	1839      	adds	r1, r7, r0
 800cce0:	5ccb      	ldrb	r3, [r1, r3]
 800cce2:	09db      	lsrs	r3, r3, #7
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	b25b      	sxtb	r3, r3
 800cce8:	4313      	orrs	r3, r2
 800ccea:	b25b      	sxtb	r3, r3
 800ccec:	b2d9      	uxtb	r1, r3
 800ccee:	183a      	adds	r2, r7, r0
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	18d3      	adds	r3, r2, r3
 800ccf4:	1c0a      	adds	r2, r1, #0
 800ccf6:	701a      	strb	r2, [r3, #0]
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	63bb      	str	r3, [r7, #56]	; 0x38
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd00:	2b0e      	cmp	r3, #14
 800cd02:	dde3      	ble.n	800cccc <AES_CMAC_Final+0x136>
 800cd04:	211c      	movs	r1, #28
 800cd06:	187b      	adds	r3, r7, r1
 800cd08:	7bdb      	ldrb	r3, [r3, #15]
 800cd0a:	18db      	adds	r3, r3, r3
 800cd0c:	b2da      	uxtb	r2, r3
 800cd0e:	187b      	adds	r3, r7, r1
 800cd10:	73da      	strb	r2, [r3, #15]
                          K[15] ^= 0x87;
 800cd12:	187b      	adds	r3, r7, r1
 800cd14:	7bdb      	ldrb	r3, [r3, #15]
 800cd16:	2279      	movs	r2, #121	; 0x79
 800cd18:	4252      	negs	r2, r2
 800cd1a:	4053      	eors	r3, r2
 800cd1c:	b2da      	uxtb	r2, r3
 800cd1e:	187b      	adds	r3, r7, r1
 800cd20:	73da      	strb	r2, [r3, #15]
 800cd22:	e025      	b.n	800cd70 <AES_CMAC_Final+0x1da>
                  } else
                           LSHIFT(K, K);
 800cd24:	2300      	movs	r3, #0
 800cd26:	637b      	str	r3, [r7, #52]	; 0x34
 800cd28:	e018      	b.n	800cd5c <AES_CMAC_Final+0x1c6>
 800cd2a:	201c      	movs	r0, #28
 800cd2c:	183a      	adds	r2, r7, r0
 800cd2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd30:	18d3      	adds	r3, r2, r3
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	b25a      	sxtb	r2, r3
 800cd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd3a:	3301      	adds	r3, #1
 800cd3c:	1839      	adds	r1, r7, r0
 800cd3e:	5ccb      	ldrb	r3, [r1, r3]
 800cd40:	09db      	lsrs	r3, r3, #7
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	b25b      	sxtb	r3, r3
 800cd46:	4313      	orrs	r3, r2
 800cd48:	b25b      	sxtb	r3, r3
 800cd4a:	b2d9      	uxtb	r1, r3
 800cd4c:	183a      	adds	r2, r7, r0
 800cd4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd50:	18d3      	adds	r3, r2, r3
 800cd52:	1c0a      	adds	r2, r1, #0
 800cd54:	701a      	strb	r2, [r3, #0]
 800cd56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd58:	3301      	adds	r3, #1
 800cd5a:	637b      	str	r3, [r7, #52]	; 0x34
 800cd5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd5e:	2b0e      	cmp	r3, #14
 800cd60:	dde3      	ble.n	800cd2a <AES_CMAC_Final+0x194>
 800cd62:	211c      	movs	r1, #28
 800cd64:	187b      	adds	r3, r7, r1
 800cd66:	7bdb      	ldrb	r3, [r3, #15]
 800cd68:	18db      	adds	r3, r3, r3
 800cd6a:	b2da      	uxtb	r2, r3
 800cd6c:	187b      	adds	r3, r7, r1
 800cd6e:	73da      	strb	r2, [r3, #15]

                   /* padding(M_last) */
                   ctx->M_last[ctx->M_n] = 0x80;
 800cd70:	683a      	ldr	r2, [r7, #0]
 800cd72:	238a      	movs	r3, #138	; 0x8a
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	58d2      	ldr	r2, [r2, r3]
 800cd78:	6839      	ldr	r1, [r7, #0]
 800cd7a:	2302      	movs	r3, #2
 800cd7c:	33ff      	adds	r3, #255	; 0xff
 800cd7e:	188a      	adds	r2, r1, r2
 800cd80:	18d3      	adds	r3, r2, r3
 800cd82:	2280      	movs	r2, #128	; 0x80
 800cd84:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800cd86:	e00a      	b.n	800cd9e <AES_CMAC_Final+0x208>
                         ctx->M_last[ctx->M_n] = 0;
 800cd88:	683a      	ldr	r2, [r7, #0]
 800cd8a:	238a      	movs	r3, #138	; 0x8a
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	58d2      	ldr	r2, [r2, r3]
 800cd90:	6839      	ldr	r1, [r7, #0]
 800cd92:	2302      	movs	r3, #2
 800cd94:	33ff      	adds	r3, #255	; 0xff
 800cd96:	188a      	adds	r2, r1, r2
 800cd98:	18d3      	adds	r3, r2, r3
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	701a      	strb	r2, [r3, #0]
                   while (++ctx->M_n < 16)
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	238a      	movs	r3, #138	; 0x8a
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	58d3      	ldr	r3, [r2, r3]
 800cda6:	1c59      	adds	r1, r3, #1
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	238a      	movs	r3, #138	; 0x8a
 800cdac:	005b      	lsls	r3, r3, #1
 800cdae:	50d1      	str	r1, [r2, r3]
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	238a      	movs	r3, #138	; 0x8a
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	58d3      	ldr	r3, [r2, r3]
 800cdb8:	2b0f      	cmp	r3, #15
 800cdba:	d9e5      	bls.n	800cd88 <AES_CMAC_Final+0x1f2>
   
                  XOR(K, ctx->M_last);
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	633b      	str	r3, [r7, #48]	; 0x30
 800cdc0:	e018      	b.n	800cdf4 <AES_CMAC_Final+0x25e>
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	33ff      	adds	r3, #255	; 0xff
 800cdc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdca:	188a      	adds	r2, r1, r2
 800cdcc:	18d3      	adds	r3, r2, r3
 800cdce:	781a      	ldrb	r2, [r3, #0]
 800cdd0:	231c      	movs	r3, #28
 800cdd2:	18f9      	adds	r1, r7, r3
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	18cb      	adds	r3, r1, r3
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	4053      	eors	r3, r2
 800cddc:	b2d8      	uxtb	r0, r3
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	2302      	movs	r3, #2
 800cde2:	33ff      	adds	r3, #255	; 0xff
 800cde4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cde6:	188a      	adds	r2, r1, r2
 800cde8:	18d3      	adds	r3, r2, r3
 800cdea:	1c02      	adds	r2, r0, #0
 800cdec:	701a      	strb	r2, [r3, #0]
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	633b      	str	r3, [r7, #48]	; 0x30
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	2b0f      	cmp	r3, #15
 800cdf8:	dde3      	ble.n	800cdc2 <AES_CMAC_Final+0x22c>


           }
           XOR(ctx->M_last, ctx->X);
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cdfe:	e018      	b.n	800ce32 <AES_CMAC_Final+0x29c>
 800ce00:	683a      	ldr	r2, [r7, #0]
 800ce02:	21f1      	movs	r1, #241	; 0xf1
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	18d3      	adds	r3, r2, r3
 800ce08:	185b      	adds	r3, r3, r1
 800ce0a:	781a      	ldrb	r2, [r3, #0]
 800ce0c:	6838      	ldr	r0, [r7, #0]
 800ce0e:	2302      	movs	r3, #2
 800ce10:	33ff      	adds	r3, #255	; 0xff
 800ce12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce14:	1841      	adds	r1, r0, r1
 800ce16:	18cb      	adds	r3, r1, r3
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	4053      	eors	r3, r2
 800ce1c:	b2d8      	uxtb	r0, r3
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	21f1      	movs	r1, #241	; 0xf1
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	18d3      	adds	r3, r2, r3
 800ce26:	185b      	adds	r3, r3, r1
 800ce28:	1c02      	adds	r2, r0, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2e:	3301      	adds	r3, #1
 800ce30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce34:	2b0f      	cmp	r3, #15
 800ce36:	dde3      	ble.n	800ce00 <AES_CMAC_Final+0x26a>

           //rijndael_encrypt(&ctx->rijndael, ctx->X, digest);

       memcpy1(in, &ctx->X[0], 16); //Bestela ez du ondo iten
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	33f1      	adds	r3, #241	; 0xf1
 800ce3c:	0019      	movs	r1, r3
 800ce3e:	240c      	movs	r4, #12
 800ce40:	193b      	adds	r3, r7, r4
 800ce42:	2210      	movs	r2, #16
 800ce44:	0018      	movs	r0, r3
 800ce46:	f00c fd03 	bl	8019850 <memcpy1>
       aes_encrypt(in, digest, &ctx->rijndael);
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	6879      	ldr	r1, [r7, #4]
 800ce4e:	193b      	adds	r3, r7, r4
 800ce50:	0018      	movs	r0, r3
 800ce52:	f7ff fd71 	bl	800c938 <aes_encrypt>
           memset1(K, 0, sizeof K);
 800ce56:	231c      	movs	r3, #28
 800ce58:	18fb      	adds	r3, r7, r3
 800ce5a:	2210      	movs	r2, #16
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	0018      	movs	r0, r3
 800ce60:	f00c fd32 	bl	80198c8 <memset1>

}
 800ce64:	46c0      	nop			; (mov r8, r8)
 800ce66:	46bd      	mov	sp, r7
 800ce68:	b013      	add	sp, #76	; 0x4c
 800ce6a:	bd90      	pop	{r4, r7, pc}

0800ce6c <GetKeyByID>:
 * \param[IN]  keyID          - Key identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b084      	sub	sp, #16
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	0002      	movs	r2, r0
 800ce74:	6039      	str	r1, [r7, #0]
 800ce76:	1dfb      	adds	r3, r7, #7
 800ce78:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ce7a:	230f      	movs	r3, #15
 800ce7c:	18fb      	adds	r3, r7, r3
 800ce7e:	2200      	movs	r2, #0
 800ce80:	701a      	strb	r2, [r3, #0]
 800ce82:	e025      	b.n	800ced0 <GetKeyByID+0x64>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800ce84:	230f      	movs	r3, #15
 800ce86:	18fb      	adds	r3, r7, r3
 800ce88:	781a      	ldrb	r2, [r3, #0]
 800ce8a:	4816      	ldr	r0, [pc, #88]	; (800cee4 <GetKeyByID+0x78>)
 800ce8c:	238b      	movs	r3, #139	; 0x8b
 800ce8e:	0099      	lsls	r1, r3, #2
 800ce90:	0013      	movs	r3, r2
 800ce92:	011b      	lsls	r3, r3, #4
 800ce94:	189b      	adds	r3, r3, r2
 800ce96:	18c3      	adds	r3, r0, r3
 800ce98:	185b      	adds	r3, r3, r1
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	1dfa      	adds	r2, r7, #7
 800ce9e:	7812      	ldrb	r2, [r2, #0]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d10f      	bne.n	800cec4 <GetKeyByID+0x58>
        {
            *keyItem = &( SeNvmCtx.KeyList[i] );
 800cea4:	230f      	movs	r3, #15
 800cea6:	18fb      	adds	r3, r7, r3
 800cea8:	781a      	ldrb	r2, [r3, #0]
 800ceaa:	0013      	movs	r3, r2
 800ceac:	011b      	lsls	r3, r3, #4
 800ceae:	189b      	adds	r3, r3, r2
 800ceb0:	228a      	movs	r2, #138	; 0x8a
 800ceb2:	0092      	lsls	r2, r2, #2
 800ceb4:	189a      	adds	r2, r3, r2
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	; (800cee4 <GetKeyByID+0x78>)
 800ceb8:	18d3      	adds	r3, r2, r3
 800ceba:	1d1a      	adds	r2, r3, #4
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800cec0:	2300      	movs	r3, #0
 800cec2:	e00b      	b.n	800cedc <GetKeyByID+0x70>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800cec4:	210f      	movs	r1, #15
 800cec6:	187b      	adds	r3, r7, r1
 800cec8:	781a      	ldrb	r2, [r3, #0]
 800ceca:	187b      	adds	r3, r7, r1
 800cecc:	3201      	adds	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	230f      	movs	r3, #15
 800ced2:	18fb      	adds	r3, r7, r3
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	2b17      	cmp	r3, #23
 800ced8:	d9d4      	bls.n	800ce84 <GetKeyByID+0x18>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ceda:	2303      	movs	r3, #3
}
 800cedc:	0018      	movs	r0, r3
 800cede:	46bd      	mov	sp, r7
 800cee0:	b004      	add	sp, #16
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	20000528 	.word	0x20000528

0800cee8 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	af00      	add	r7, sp, #0
    return;
 800ceec:	46c0      	nop			; (mov r8, r8)
}
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
	...

0800cef4 <ComputeCmac>:
 * \param[IN]  keyID          - Key identifier to determine the AES key to be used
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800cef4:	b5b0      	push	{r4, r5, r7, lr}
 800cef6:	b08a      	sub	sp, #40	; 0x28
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	0019      	movs	r1, r3
 800cf00:	1dbb      	adds	r3, r7, #6
 800cf02:	801a      	strh	r2, [r3, #0]
 800cf04:	1d7b      	adds	r3, r7, #5
 800cf06:	1c0a      	adds	r2, r1, #0
 800cf08:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d002      	beq.n	800cf16 <ComputeCmac+0x22>
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <ComputeCmac+0x26>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800cf16:	2302      	movs	r3, #2
 800cf18:	e046      	b.n	800cfa8 <ComputeCmac+0xb4>
    }

    uint8_t Cmac[16];

    AES_CMAC_Init( SeNvmCtx.AesCmacCtx );
 800cf1a:	4b25      	ldr	r3, [pc, #148]	; (800cfb0 <ComputeCmac+0xbc>)
 800cf1c:	0018      	movs	r0, r3
 800cf1e:	f7ff fd56 	bl	800c9ce <AES_CMAC_Init>

    Key_t* keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800cf22:	2527      	movs	r5, #39	; 0x27
 800cf24:	197c      	adds	r4, r7, r5
 800cf26:	2310      	movs	r3, #16
 800cf28:	18fa      	adds	r2, r7, r3
 800cf2a:	1d7b      	adds	r3, r7, #5
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	0011      	movs	r1, r2
 800cf30:	0018      	movs	r0, r3
 800cf32:	f7ff ff9b 	bl	800ce6c <GetKeyByID>
 800cf36:	0003      	movs	r3, r0
 800cf38:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800cf3a:	197b      	adds	r3, r7, r5
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d12f      	bne.n	800cfa2 <ComputeCmac+0xae>
    {
        AES_CMAC_SetKey( SeNvmCtx.AesCmacCtx, keyItem->KeyValue );
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	1c5a      	adds	r2, r3, #1
 800cf46:	4b1a      	ldr	r3, [pc, #104]	; (800cfb0 <ComputeCmac+0xbc>)
 800cf48:	0011      	movs	r1, r2
 800cf4a:	0018      	movs	r0, r3
 800cf4c:	f7ff fd59 	bl	800ca02 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d005      	beq.n	800cf62 <ComputeCmac+0x6e>
        {
            AES_CMAC_Update( SeNvmCtx.AesCmacCtx, micBxBuffer, 16 );
 800cf56:	68f9      	ldr	r1, [r7, #12]
 800cf58:	4b15      	ldr	r3, [pc, #84]	; (800cfb0 <ComputeCmac+0xbc>)
 800cf5a:	2210      	movs	r2, #16
 800cf5c:	0018      	movs	r0, r3
 800cf5e:	f7ff fd5f 	bl	800ca20 <AES_CMAC_Update>
        }

        AES_CMAC_Update( SeNvmCtx.AesCmacCtx, buffer, size );
 800cf62:	1dbb      	adds	r3, r7, #6
 800cf64:	881a      	ldrh	r2, [r3, #0]
 800cf66:	68b9      	ldr	r1, [r7, #8]
 800cf68:	4b11      	ldr	r3, [pc, #68]	; (800cfb0 <ComputeCmac+0xbc>)
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	f7ff fd58 	bl	800ca20 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, SeNvmCtx.AesCmacCtx );
 800cf70:	4a0f      	ldr	r2, [pc, #60]	; (800cfb0 <ComputeCmac+0xbc>)
 800cf72:	2114      	movs	r1, #20
 800cf74:	000c      	movs	r4, r1
 800cf76:	187b      	adds	r3, r7, r1
 800cf78:	0011      	movs	r1, r2
 800cf7a:	0018      	movs	r0, r3
 800cf7c:	f7ff fe0b 	bl	800cb96 <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 | ( uint32_t ) Cmac[0] );
 800cf80:	0021      	movs	r1, r4
 800cf82:	187b      	adds	r3, r7, r1
 800cf84:	78db      	ldrb	r3, [r3, #3]
 800cf86:	061a      	lsls	r2, r3, #24
 800cf88:	187b      	adds	r3, r7, r1
 800cf8a:	789b      	ldrb	r3, [r3, #2]
 800cf8c:	041b      	lsls	r3, r3, #16
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	187b      	adds	r3, r7, r1
 800cf92:	785b      	ldrb	r3, [r3, #1]
 800cf94:	021b      	lsls	r3, r3, #8
 800cf96:	4313      	orrs	r3, r2
 800cf98:	187a      	adds	r2, r7, r1
 800cf9a:	7812      	ldrb	r2, [r2, #0]
 800cf9c:	431a      	orrs	r2, r3
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa0:	601a      	str	r2, [r3, #0]
    }

    return retval;
 800cfa2:	2327      	movs	r3, #39	; 0x27
 800cfa4:	18fb      	adds	r3, r7, r3
 800cfa6:	781b      	ldrb	r3, [r3, #0]
}
 800cfa8:	0018      	movs	r0, r3
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	b00a      	add	sp, #40	; 0x28
 800cfae:	bdb0      	pop	{r4, r5, r7, pc}
 800cfb0:	2000063c 	.word	0x2000063c

0800cfb4 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit( SecureElementNvmEvent seNvmCtxChanged )
{
 800cfb4:	b5b0      	push	{r4, r5, r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
    uint8_t itr = 0;
 800cfbc:	241f      	movs	r4, #31
 800cfbe:	193b      	adds	r3, r7, r4
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	701a      	strb	r2, [r3, #0]
    uint8_t zeroKey[16] = { 0 };
 800cfc4:	250c      	movs	r5, #12
 800cfc6:	197b      	adds	r3, r7, r5
 800cfc8:	0018      	movs	r0, r3
 800cfca:	2310      	movs	r3, #16
 800cfcc:	001a      	movs	r2, r3
 800cfce:	2100      	movs	r1, #0
 800cfd0:	f00c fcc2 	bl	8019958 <memset>

    // Initialize with defaults
    SeNvmCtx.KeyList[itr++].KeyID = APP_KEY;
 800cfd4:	193b      	adds	r3, r7, r4
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	193a      	adds	r2, r7, r4
 800cfda:	1c59      	adds	r1, r3, #1
 800cfdc:	7011      	strb	r1, [r2, #0]
 800cfde:	0018      	movs	r0, r3
 800cfe0:	49d0      	ldr	r1, [pc, #832]	; (800d324 <SecureElementInit+0x370>)
 800cfe2:	238b      	movs	r3, #139	; 0x8b
 800cfe4:	009a      	lsls	r2, r3, #2
 800cfe6:	0003      	movs	r3, r0
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	181b      	adds	r3, r3, r0
 800cfec:	18cb      	adds	r3, r1, r3
 800cfee:	189b      	adds	r3, r3, r2
 800cff0:	2200      	movs	r2, #0
 800cff2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = GEN_APP_KEY;
 800cff4:	193b      	adds	r3, r7, r4
 800cff6:	781b      	ldrb	r3, [r3, #0]
 800cff8:	193a      	adds	r2, r7, r4
 800cffa:	1c59      	adds	r1, r3, #1
 800cffc:	7011      	strb	r1, [r2, #0]
 800cffe:	0018      	movs	r0, r3
 800d000:	49c8      	ldr	r1, [pc, #800]	; (800d324 <SecureElementInit+0x370>)
 800d002:	238b      	movs	r3, #139	; 0x8b
 800d004:	009a      	lsls	r2, r3, #2
 800d006:	0003      	movs	r3, r0
 800d008:	011b      	lsls	r3, r3, #4
 800d00a:	181b      	adds	r3, r3, r0
 800d00c:	18cb      	adds	r3, r1, r3
 800d00e:	189b      	adds	r3, r3, r2
 800d010:	2201      	movs	r2, #1
 800d012:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_KEY;
 800d014:	193b      	adds	r3, r7, r4
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	193a      	adds	r2, r7, r4
 800d01a:	1c59      	adds	r1, r3, #1
 800d01c:	7011      	strb	r1, [r2, #0]
 800d01e:	0018      	movs	r0, r3
 800d020:	49c0      	ldr	r1, [pc, #768]	; (800d324 <SecureElementInit+0x370>)
 800d022:	238b      	movs	r3, #139	; 0x8b
 800d024:	009a      	lsls	r2, r3, #2
 800d026:	0003      	movs	r3, r0
 800d028:	011b      	lsls	r3, r3, #4
 800d02a:	181b      	adds	r3, r3, r0
 800d02c:	18cb      	adds	r3, r1, r3
 800d02e:	189b      	adds	r3, r3, r2
 800d030:	2202      	movs	r2, #2
 800d032:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_INT_KEY;
 800d034:	193b      	adds	r3, r7, r4
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	193a      	adds	r2, r7, r4
 800d03a:	1c59      	adds	r1, r3, #1
 800d03c:	7011      	strb	r1, [r2, #0]
 800d03e:	0018      	movs	r0, r3
 800d040:	49b8      	ldr	r1, [pc, #736]	; (800d324 <SecureElementInit+0x370>)
 800d042:	238b      	movs	r3, #139	; 0x8b
 800d044:	009a      	lsls	r2, r3, #2
 800d046:	0003      	movs	r3, r0
 800d048:	011b      	lsls	r3, r3, #4
 800d04a:	181b      	adds	r3, r3, r0
 800d04c:	18cb      	adds	r3, r1, r3
 800d04e:	189b      	adds	r3, r3, r2
 800d050:	2203      	movs	r2, #3
 800d052:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = J_S_ENC_KEY;
 800d054:	193b      	adds	r3, r7, r4
 800d056:	781b      	ldrb	r3, [r3, #0]
 800d058:	193a      	adds	r2, r7, r4
 800d05a:	1c59      	adds	r1, r3, #1
 800d05c:	7011      	strb	r1, [r2, #0]
 800d05e:	0018      	movs	r0, r3
 800d060:	49b0      	ldr	r1, [pc, #704]	; (800d324 <SecureElementInit+0x370>)
 800d062:	238b      	movs	r3, #139	; 0x8b
 800d064:	009a      	lsls	r2, r3, #2
 800d066:	0003      	movs	r3, r0
 800d068:	011b      	lsls	r3, r3, #4
 800d06a:	181b      	adds	r3, r3, r0
 800d06c:	18cb      	adds	r3, r1, r3
 800d06e:	189b      	adds	r3, r3, r2
 800d070:	2204      	movs	r2, #4
 800d072:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = F_NWK_S_INT_KEY;
 800d074:	193b      	adds	r3, r7, r4
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	193a      	adds	r2, r7, r4
 800d07a:	1c59      	adds	r1, r3, #1
 800d07c:	7011      	strb	r1, [r2, #0]
 800d07e:	0018      	movs	r0, r3
 800d080:	49a8      	ldr	r1, [pc, #672]	; (800d324 <SecureElementInit+0x370>)
 800d082:	238b      	movs	r3, #139	; 0x8b
 800d084:	009a      	lsls	r2, r3, #2
 800d086:	0003      	movs	r3, r0
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	181b      	adds	r3, r3, r0
 800d08c:	18cb      	adds	r3, r1, r3
 800d08e:	189b      	adds	r3, r3, r2
 800d090:	2205      	movs	r2, #5
 800d092:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = S_NWK_S_INT_KEY;
 800d094:	193b      	adds	r3, r7, r4
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	193a      	adds	r2, r7, r4
 800d09a:	1c59      	adds	r1, r3, #1
 800d09c:	7011      	strb	r1, [r2, #0]
 800d09e:	0018      	movs	r0, r3
 800d0a0:	49a0      	ldr	r1, [pc, #640]	; (800d324 <SecureElementInit+0x370>)
 800d0a2:	238b      	movs	r3, #139	; 0x8b
 800d0a4:	009a      	lsls	r2, r3, #2
 800d0a6:	0003      	movs	r3, r0
 800d0a8:	011b      	lsls	r3, r3, #4
 800d0aa:	181b      	adds	r3, r3, r0
 800d0ac:	18cb      	adds	r3, r1, r3
 800d0ae:	189b      	adds	r3, r3, r2
 800d0b0:	2206      	movs	r2, #6
 800d0b2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = NWK_S_ENC_KEY;
 800d0b4:	193b      	adds	r3, r7, r4
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	193a      	adds	r2, r7, r4
 800d0ba:	1c59      	adds	r1, r3, #1
 800d0bc:	7011      	strb	r1, [r2, #0]
 800d0be:	0018      	movs	r0, r3
 800d0c0:	4998      	ldr	r1, [pc, #608]	; (800d324 <SecureElementInit+0x370>)
 800d0c2:	238b      	movs	r3, #139	; 0x8b
 800d0c4:	009a      	lsls	r2, r3, #2
 800d0c6:	0003      	movs	r3, r0
 800d0c8:	011b      	lsls	r3, r3, #4
 800d0ca:	181b      	adds	r3, r3, r0
 800d0cc:	18cb      	adds	r3, r1, r3
 800d0ce:	189b      	adds	r3, r3, r2
 800d0d0:	2207      	movs	r2, #7
 800d0d2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = APP_S_KEY;
 800d0d4:	193b      	adds	r3, r7, r4
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	193a      	adds	r2, r7, r4
 800d0da:	1c59      	adds	r1, r3, #1
 800d0dc:	7011      	strb	r1, [r2, #0]
 800d0de:	0018      	movs	r0, r3
 800d0e0:	4990      	ldr	r1, [pc, #576]	; (800d324 <SecureElementInit+0x370>)
 800d0e2:	238b      	movs	r3, #139	; 0x8b
 800d0e4:	009a      	lsls	r2, r3, #2
 800d0e6:	0003      	movs	r3, r0
 800d0e8:	011b      	lsls	r3, r3, #4
 800d0ea:	181b      	adds	r3, r3, r0
 800d0ec:	18cb      	adds	r3, r1, r3
 800d0ee:	189b      	adds	r3, r3, r2
 800d0f0:	2208      	movs	r2, #8
 800d0f2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_ROOT_KEY;
 800d0f4:	193b      	adds	r3, r7, r4
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	193a      	adds	r2, r7, r4
 800d0fa:	1c59      	adds	r1, r3, #1
 800d0fc:	7011      	strb	r1, [r2, #0]
 800d0fe:	0018      	movs	r0, r3
 800d100:	4988      	ldr	r1, [pc, #544]	; (800d324 <SecureElementInit+0x370>)
 800d102:	238b      	movs	r3, #139	; 0x8b
 800d104:	009a      	lsls	r2, r3, #2
 800d106:	0003      	movs	r3, r0
 800d108:	011b      	lsls	r3, r3, #4
 800d10a:	181b      	adds	r3, r3, r0
 800d10c:	18cb      	adds	r3, r1, r3
 800d10e:	189b      	adds	r3, r3, r2
 800d110:	2209      	movs	r2, #9
 800d112:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KE_KEY;
 800d114:	193b      	adds	r3, r7, r4
 800d116:	781b      	ldrb	r3, [r3, #0]
 800d118:	193a      	adds	r2, r7, r4
 800d11a:	1c59      	adds	r1, r3, #1
 800d11c:	7011      	strb	r1, [r2, #0]
 800d11e:	0018      	movs	r0, r3
 800d120:	4980      	ldr	r1, [pc, #512]	; (800d324 <SecureElementInit+0x370>)
 800d122:	238b      	movs	r3, #139	; 0x8b
 800d124:	009a      	lsls	r2, r3, #2
 800d126:	0003      	movs	r3, r0
 800d128:	011b      	lsls	r3, r3, #4
 800d12a:	181b      	adds	r3, r3, r0
 800d12c:	18cb      	adds	r3, r1, r3
 800d12e:	189b      	adds	r3, r3, r2
 800d130:	227f      	movs	r2, #127	; 0x7f
 800d132:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_0;
 800d134:	193b      	adds	r3, r7, r4
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	193a      	adds	r2, r7, r4
 800d13a:	1c59      	adds	r1, r3, #1
 800d13c:	7011      	strb	r1, [r2, #0]
 800d13e:	0018      	movs	r0, r3
 800d140:	4978      	ldr	r1, [pc, #480]	; (800d324 <SecureElementInit+0x370>)
 800d142:	238b      	movs	r3, #139	; 0x8b
 800d144:	009a      	lsls	r2, r3, #2
 800d146:	0003      	movs	r3, r0
 800d148:	011b      	lsls	r3, r3, #4
 800d14a:	181b      	adds	r3, r3, r0
 800d14c:	18cb      	adds	r3, r1, r3
 800d14e:	189b      	adds	r3, r3, r2
 800d150:	2280      	movs	r2, #128	; 0x80
 800d152:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_0;
 800d154:	193b      	adds	r3, r7, r4
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	193a      	adds	r2, r7, r4
 800d15a:	1c59      	adds	r1, r3, #1
 800d15c:	7011      	strb	r1, [r2, #0]
 800d15e:	0018      	movs	r0, r3
 800d160:	4970      	ldr	r1, [pc, #448]	; (800d324 <SecureElementInit+0x370>)
 800d162:	238b      	movs	r3, #139	; 0x8b
 800d164:	009a      	lsls	r2, r3, #2
 800d166:	0003      	movs	r3, r0
 800d168:	011b      	lsls	r3, r3, #4
 800d16a:	181b      	adds	r3, r3, r0
 800d16c:	18cb      	adds	r3, r1, r3
 800d16e:	189b      	adds	r3, r3, r2
 800d170:	2281      	movs	r2, #129	; 0x81
 800d172:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_0;
 800d174:	193b      	adds	r3, r7, r4
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	193a      	adds	r2, r7, r4
 800d17a:	1c59      	adds	r1, r3, #1
 800d17c:	7011      	strb	r1, [r2, #0]
 800d17e:	0018      	movs	r0, r3
 800d180:	4968      	ldr	r1, [pc, #416]	; (800d324 <SecureElementInit+0x370>)
 800d182:	238b      	movs	r3, #139	; 0x8b
 800d184:	009a      	lsls	r2, r3, #2
 800d186:	0003      	movs	r3, r0
 800d188:	011b      	lsls	r3, r3, #4
 800d18a:	181b      	adds	r3, r3, r0
 800d18c:	18cb      	adds	r3, r1, r3
 800d18e:	189b      	adds	r3, r3, r2
 800d190:	2282      	movs	r2, #130	; 0x82
 800d192:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_1;
 800d194:	193b      	adds	r3, r7, r4
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	193a      	adds	r2, r7, r4
 800d19a:	1c59      	adds	r1, r3, #1
 800d19c:	7011      	strb	r1, [r2, #0]
 800d19e:	0018      	movs	r0, r3
 800d1a0:	4960      	ldr	r1, [pc, #384]	; (800d324 <SecureElementInit+0x370>)
 800d1a2:	238b      	movs	r3, #139	; 0x8b
 800d1a4:	009a      	lsls	r2, r3, #2
 800d1a6:	0003      	movs	r3, r0
 800d1a8:	011b      	lsls	r3, r3, #4
 800d1aa:	181b      	adds	r3, r3, r0
 800d1ac:	18cb      	adds	r3, r1, r3
 800d1ae:	189b      	adds	r3, r3, r2
 800d1b0:	2283      	movs	r2, #131	; 0x83
 800d1b2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_1;
 800d1b4:	193b      	adds	r3, r7, r4
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	193a      	adds	r2, r7, r4
 800d1ba:	1c59      	adds	r1, r3, #1
 800d1bc:	7011      	strb	r1, [r2, #0]
 800d1be:	0018      	movs	r0, r3
 800d1c0:	4958      	ldr	r1, [pc, #352]	; (800d324 <SecureElementInit+0x370>)
 800d1c2:	238b      	movs	r3, #139	; 0x8b
 800d1c4:	009a      	lsls	r2, r3, #2
 800d1c6:	0003      	movs	r3, r0
 800d1c8:	011b      	lsls	r3, r3, #4
 800d1ca:	181b      	adds	r3, r3, r0
 800d1cc:	18cb      	adds	r3, r1, r3
 800d1ce:	189b      	adds	r3, r3, r2
 800d1d0:	2284      	movs	r2, #132	; 0x84
 800d1d2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_1;
 800d1d4:	193b      	adds	r3, r7, r4
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	193a      	adds	r2, r7, r4
 800d1da:	1c59      	adds	r1, r3, #1
 800d1dc:	7011      	strb	r1, [r2, #0]
 800d1de:	0018      	movs	r0, r3
 800d1e0:	4950      	ldr	r1, [pc, #320]	; (800d324 <SecureElementInit+0x370>)
 800d1e2:	238b      	movs	r3, #139	; 0x8b
 800d1e4:	009a      	lsls	r2, r3, #2
 800d1e6:	0003      	movs	r3, r0
 800d1e8:	011b      	lsls	r3, r3, #4
 800d1ea:	181b      	adds	r3, r3, r0
 800d1ec:	18cb      	adds	r3, r1, r3
 800d1ee:	189b      	adds	r3, r3, r2
 800d1f0:	2285      	movs	r2, #133	; 0x85
 800d1f2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_2;
 800d1f4:	193b      	adds	r3, r7, r4
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	193a      	adds	r2, r7, r4
 800d1fa:	1c59      	adds	r1, r3, #1
 800d1fc:	7011      	strb	r1, [r2, #0]
 800d1fe:	0018      	movs	r0, r3
 800d200:	4948      	ldr	r1, [pc, #288]	; (800d324 <SecureElementInit+0x370>)
 800d202:	238b      	movs	r3, #139	; 0x8b
 800d204:	009a      	lsls	r2, r3, #2
 800d206:	0003      	movs	r3, r0
 800d208:	011b      	lsls	r3, r3, #4
 800d20a:	181b      	adds	r3, r3, r0
 800d20c:	18cb      	adds	r3, r1, r3
 800d20e:	189b      	adds	r3, r3, r2
 800d210:	2286      	movs	r2, #134	; 0x86
 800d212:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_2;
 800d214:	193b      	adds	r3, r7, r4
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	193a      	adds	r2, r7, r4
 800d21a:	1c59      	adds	r1, r3, #1
 800d21c:	7011      	strb	r1, [r2, #0]
 800d21e:	0018      	movs	r0, r3
 800d220:	4940      	ldr	r1, [pc, #256]	; (800d324 <SecureElementInit+0x370>)
 800d222:	238b      	movs	r3, #139	; 0x8b
 800d224:	009a      	lsls	r2, r3, #2
 800d226:	0003      	movs	r3, r0
 800d228:	011b      	lsls	r3, r3, #4
 800d22a:	181b      	adds	r3, r3, r0
 800d22c:	18cb      	adds	r3, r1, r3
 800d22e:	189b      	adds	r3, r3, r2
 800d230:	2287      	movs	r2, #135	; 0x87
 800d232:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_2;
 800d234:	193b      	adds	r3, r7, r4
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	193a      	adds	r2, r7, r4
 800d23a:	1c59      	adds	r1, r3, #1
 800d23c:	7011      	strb	r1, [r2, #0]
 800d23e:	0018      	movs	r0, r3
 800d240:	4938      	ldr	r1, [pc, #224]	; (800d324 <SecureElementInit+0x370>)
 800d242:	238b      	movs	r3, #139	; 0x8b
 800d244:	009a      	lsls	r2, r3, #2
 800d246:	0003      	movs	r3, r0
 800d248:	011b      	lsls	r3, r3, #4
 800d24a:	181b      	adds	r3, r3, r0
 800d24c:	18cb      	adds	r3, r1, r3
 800d24e:	189b      	adds	r3, r3, r2
 800d250:	2288      	movs	r2, #136	; 0x88
 800d252:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_KEY_3;
 800d254:	193b      	adds	r3, r7, r4
 800d256:	781b      	ldrb	r3, [r3, #0]
 800d258:	193a      	adds	r2, r7, r4
 800d25a:	1c59      	adds	r1, r3, #1
 800d25c:	7011      	strb	r1, [r2, #0]
 800d25e:	0018      	movs	r0, r3
 800d260:	4930      	ldr	r1, [pc, #192]	; (800d324 <SecureElementInit+0x370>)
 800d262:	238b      	movs	r3, #139	; 0x8b
 800d264:	009a      	lsls	r2, r3, #2
 800d266:	0003      	movs	r3, r0
 800d268:	011b      	lsls	r3, r3, #4
 800d26a:	181b      	adds	r3, r3, r0
 800d26c:	18cb      	adds	r3, r1, r3
 800d26e:	189b      	adds	r3, r3, r2
 800d270:	2289      	movs	r2, #137	; 0x89
 800d272:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_APP_S_KEY_3;
 800d274:	193b      	adds	r3, r7, r4
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	193a      	adds	r2, r7, r4
 800d27a:	1c59      	adds	r1, r3, #1
 800d27c:	7011      	strb	r1, [r2, #0]
 800d27e:	0018      	movs	r0, r3
 800d280:	4928      	ldr	r1, [pc, #160]	; (800d324 <SecureElementInit+0x370>)
 800d282:	238b      	movs	r3, #139	; 0x8b
 800d284:	009a      	lsls	r2, r3, #2
 800d286:	0003      	movs	r3, r0
 800d288:	011b      	lsls	r3, r3, #4
 800d28a:	181b      	adds	r3, r3, r0
 800d28c:	18cb      	adds	r3, r1, r3
 800d28e:	189b      	adds	r3, r3, r2
 800d290:	228a      	movs	r2, #138	; 0x8a
 800d292:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr++].KeyID = MC_NWK_S_KEY_3;
 800d294:	193b      	adds	r3, r7, r4
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	193a      	adds	r2, r7, r4
 800d29a:	1c59      	adds	r1, r3, #1
 800d29c:	7011      	strb	r1, [r2, #0]
 800d29e:	0018      	movs	r0, r3
 800d2a0:	4920      	ldr	r1, [pc, #128]	; (800d324 <SecureElementInit+0x370>)
 800d2a2:	238b      	movs	r3, #139	; 0x8b
 800d2a4:	009a      	lsls	r2, r3, #2
 800d2a6:	0003      	movs	r3, r0
 800d2a8:	011b      	lsls	r3, r3, #4
 800d2aa:	181b      	adds	r3, r3, r0
 800d2ac:	18cb      	adds	r3, r1, r3
 800d2ae:	189b      	adds	r3, r3, r2
 800d2b0:	228b      	movs	r2, #139	; 0x8b
 800d2b2:	701a      	strb	r2, [r3, #0]
    SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;
 800d2b4:	193b      	adds	r3, r7, r4
 800d2b6:	781a      	ldrb	r2, [r3, #0]
 800d2b8:	481a      	ldr	r0, [pc, #104]	; (800d324 <SecureElementInit+0x370>)
 800d2ba:	238b      	movs	r3, #139	; 0x8b
 800d2bc:	0099      	lsls	r1, r3, #2
 800d2be:	0013      	movs	r3, r2
 800d2c0:	011b      	lsls	r3, r3, #4
 800d2c2:	189b      	adds	r3, r3, r2
 800d2c4:	18c3      	adds	r3, r0, r3
 800d2c6:	185b      	adds	r3, r3, r1
 800d2c8:	228c      	movs	r2, #140	; 0x8c
 800d2ca:	701a      	strb	r2, [r3, #0]

    // Set standard keys
    memcpy1( SeNvmCtx.KeyList[itr].KeyValue, zeroKey, KEY_SIZE );
 800d2cc:	193b      	adds	r3, r7, r4
 800d2ce:	781a      	ldrb	r2, [r3, #0]
 800d2d0:	0013      	movs	r3, r2
 800d2d2:	011b      	lsls	r3, r3, #4
 800d2d4:	189b      	adds	r3, r3, r2
 800d2d6:	228a      	movs	r2, #138	; 0x8a
 800d2d8:	0092      	lsls	r2, r2, #2
 800d2da:	189a      	adds	r2, r3, r2
 800d2dc:	4b11      	ldr	r3, [pc, #68]	; (800d324 <SecureElementInit+0x370>)
 800d2de:	18d3      	adds	r3, r2, r3
 800d2e0:	3305      	adds	r3, #5
 800d2e2:	1979      	adds	r1, r7, r5
 800d2e4:	2210      	movs	r2, #16
 800d2e6:	0018      	movs	r0, r3
 800d2e8:	f00c fab2 	bl	8019850 <memcpy1>

    memset1( SeNvmCtx.DevEui, 0, SE_EUI_SIZE );
 800d2ec:	4b0d      	ldr	r3, [pc, #52]	; (800d324 <SecureElementInit+0x370>)
 800d2ee:	2210      	movs	r2, #16
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	0018      	movs	r0, r3
 800d2f4:	f00c fae8 	bl	80198c8 <memset1>
    memset1( SeNvmCtx.JoinEui, 0, SE_EUI_SIZE );
 800d2f8:	4b0b      	ldr	r3, [pc, #44]	; (800d328 <SecureElementInit+0x374>)
 800d2fa:	2210      	movs	r2, #16
 800d2fc:	2100      	movs	r1, #0
 800d2fe:	0018      	movs	r0, r3
 800d300:	f00c fae2 	bl	80198c8 <memset1>

    // Assign callback
    if( seNvmCtxChanged != 0 )
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d003      	beq.n	800d312 <SecureElementInit+0x35e>
    {
        SeNvmCtxChanged = seNvmCtxChanged;
 800d30a:	4b08      	ldr	r3, [pc, #32]	; (800d32c <SecureElementInit+0x378>)
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	601a      	str	r2, [r3, #0]
 800d310:	e002      	b.n	800d318 <SecureElementInit+0x364>
    }
    else
    {
        SeNvmCtxChanged = DummyCB;
 800d312:	4b06      	ldr	r3, [pc, #24]	; (800d32c <SecureElementInit+0x378>)
 800d314:	4a06      	ldr	r2, [pc, #24]	; (800d330 <SecureElementInit+0x37c>)
 800d316:	601a      	str	r2, [r3, #0]
    }

    return SECURE_ELEMENT_SUCCESS;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	0018      	movs	r0, r3
 800d31c:	46bd      	mov	sp, r7
 800d31e:	b008      	add	sp, #32
 800d320:	bdb0      	pop	{r4, r5, r7, pc}
 800d322:	46c0      	nop			; (mov r8, r8)
 800d324:	20000528 	.word	0x20000528
 800d328:	20000538 	.word	0x20000538
 800d32c:	200008ec 	.word	0x200008ec
 800d330:	0800cee9 	.word	0x0800cee9

0800d334 <SecureElementRestoreNvmCtx>:

SecureElementStatus_t SecureElementRestoreNvmCtx( void* seNvmCtx )
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    // Restore nvm context
    if( seNvmCtx != 0 )
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d008      	beq.n	800d354 <SecureElementRestoreNvmCtx+0x20>
    {
        memcpy1( ( uint8_t* ) &SeNvmCtx, ( uint8_t* ) seNvmCtx, sizeof( SeNvmCtx ) );
 800d342:	23f1      	movs	r3, #241	; 0xf1
 800d344:	009a      	lsls	r2, r3, #2
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	4b05      	ldr	r3, [pc, #20]	; (800d360 <SecureElementRestoreNvmCtx+0x2c>)
 800d34a:	0018      	movs	r0, r3
 800d34c:	f00c fa80 	bl	8019850 <memcpy1>
        return SECURE_ELEMENT_SUCCESS;
 800d350:	2300      	movs	r3, #0
 800d352:	e000      	b.n	800d356 <SecureElementRestoreNvmCtx+0x22>
    }
    else
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d354:	2302      	movs	r3, #2
    }
}
 800d356:	0018      	movs	r0, r3
 800d358:	46bd      	mov	sp, r7
 800d35a:	b002      	add	sp, #8
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	46c0      	nop			; (mov r8, r8)
 800d360:	20000528 	.word	0x20000528

0800d364 <SecureElementGetNvmCtx>:

void* SecureElementGetNvmCtx( size_t* seNvmCtxSize )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
    *seNvmCtxSize = sizeof( SeNvmCtx );
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	22f1      	movs	r2, #241	; 0xf1
 800d370:	0092      	lsls	r2, r2, #2
 800d372:	601a      	str	r2, [r3, #0]
    return &SeNvmCtx;
 800d374:	4b02      	ldr	r3, [pc, #8]	; (800d380 <SecureElementGetNvmCtx+0x1c>)
}
 800d376:	0018      	movs	r0, r3
 800d378:	46bd      	mov	sp, r7
 800d37a:	b002      	add	sp, #8
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	46c0      	nop			; (mov r8, r8)
 800d380:	20000528 	.word	0x20000528

0800d384 <SecureElementSetKey>:

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800d384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d386:	b089      	sub	sp, #36	; 0x24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	0002      	movs	r2, r0
 800d38c:	6039      	str	r1, [r7, #0]
 800d38e:	1dfb      	adds	r3, r7, #7
 800d390:	701a      	strb	r2, [r3, #0]
    if( key == NULL )
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d101      	bne.n	800d39c <SecureElementSetKey+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d398:	2302      	movs	r3, #2
 800d39a:	e072      	b.n	800d482 <SecureElementSetKey+0xfe>
    }

    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d39c:	231f      	movs	r3, #31
 800d39e:	18fb      	adds	r3, r7, r3
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]
 800d3a4:	e067      	b.n	800d476 <SecureElementSetKey+0xf2>
    {
        if( SeNvmCtx.KeyList[i].KeyID == keyID )
 800d3a6:	231f      	movs	r3, #31
 800d3a8:	18fb      	adds	r3, r7, r3
 800d3aa:	781a      	ldrb	r2, [r3, #0]
 800d3ac:	4837      	ldr	r0, [pc, #220]	; (800d48c <SecureElementSetKey+0x108>)
 800d3ae:	238b      	movs	r3, #139	; 0x8b
 800d3b0:	0099      	lsls	r1, r3, #2
 800d3b2:	0013      	movs	r3, r2
 800d3b4:	011b      	lsls	r3, r3, #4
 800d3b6:	189b      	adds	r3, r3, r2
 800d3b8:	18c3      	adds	r3, r0, r3
 800d3ba:	185b      	adds	r3, r3, r1
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	1dfa      	adds	r2, r7, #7
 800d3c0:	7812      	ldrb	r2, [r2, #0]
 800d3c2:	429a      	cmp	r2, r3
 800d3c4:	d151      	bne.n	800d46a <SecureElementSetKey+0xe6>
        {
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 800d3c6:	1dfb      	adds	r3, r7, #7
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	2b80      	cmp	r3, #128	; 0x80
 800d3cc:	d00b      	beq.n	800d3e6 <SecureElementSetKey+0x62>
 800d3ce:	1dfb      	adds	r3, r7, #7
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	2b83      	cmp	r3, #131	; 0x83
 800d3d4:	d007      	beq.n	800d3e6 <SecureElementSetKey+0x62>
 800d3d6:	1dfb      	adds	r3, r7, #7
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b86      	cmp	r3, #134	; 0x86
 800d3dc:	d003      	beq.n	800d3e6 <SecureElementSetKey+0x62>
 800d3de:	1dfb      	adds	r3, r7, #7
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b89      	cmp	r3, #137	; 0x89
 800d3e4:	d12b      	bne.n	800d43e <SecureElementSetKey+0xba>
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d3e6:	251e      	movs	r5, #30
 800d3e8:	197b      	adds	r3, r7, r5
 800d3ea:	2206      	movs	r2, #6
 800d3ec:	701a      	strb	r2, [r3, #0]
                uint8_t decryptedKey[16] = { 0 };
 800d3ee:	260c      	movs	r6, #12
 800d3f0:	19bb      	adds	r3, r7, r6
 800d3f2:	0018      	movs	r0, r3
 800d3f4:	2310      	movs	r3, #16
 800d3f6:	001a      	movs	r2, r3
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	f00c faad 	bl	8019958 <memset>

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800d3fe:	197c      	adds	r4, r7, r5
 800d400:	19bb      	adds	r3, r7, r6
 800d402:	6838      	ldr	r0, [r7, #0]
 800d404:	227f      	movs	r2, #127	; 0x7f
 800d406:	2110      	movs	r1, #16
 800d408:	f000 f8a8 	bl	800d55c <SecureElementAesEncrypt>
 800d40c:	0003      	movs	r3, r0
 800d40e:	7023      	strb	r3, [r4, #0]

                memcpy1( SeNvmCtx.KeyList[i].KeyValue, decryptedKey, KEY_SIZE );
 800d410:	231f      	movs	r3, #31
 800d412:	18fb      	adds	r3, r7, r3
 800d414:	781a      	ldrb	r2, [r3, #0]
 800d416:	0013      	movs	r3, r2
 800d418:	011b      	lsls	r3, r3, #4
 800d41a:	189b      	adds	r3, r3, r2
 800d41c:	228a      	movs	r2, #138	; 0x8a
 800d41e:	0092      	lsls	r2, r2, #2
 800d420:	189a      	adds	r2, r3, r2
 800d422:	4b1a      	ldr	r3, [pc, #104]	; (800d48c <SecureElementSetKey+0x108>)
 800d424:	18d3      	adds	r3, r2, r3
 800d426:	3305      	adds	r3, #5
 800d428:	19b9      	adds	r1, r7, r6
 800d42a:	2210      	movs	r2, #16
 800d42c:	0018      	movs	r0, r3
 800d42e:	f00c fa0f 	bl	8019850 <memcpy1>
                SeNvmCtxChanged( );
 800d432:	4b17      	ldr	r3, [pc, #92]	; (800d490 <SecureElementSetKey+0x10c>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4798      	blx	r3

                return retval;
 800d438:	197b      	adds	r3, r7, r5
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	e021      	b.n	800d482 <SecureElementSetKey+0xfe>
            }
            else
            {
                memcpy1( SeNvmCtx.KeyList[i].KeyValue, key, KEY_SIZE );
 800d43e:	231f      	movs	r3, #31
 800d440:	18fb      	adds	r3, r7, r3
 800d442:	781a      	ldrb	r2, [r3, #0]
 800d444:	0013      	movs	r3, r2
 800d446:	011b      	lsls	r3, r3, #4
 800d448:	189b      	adds	r3, r3, r2
 800d44a:	228a      	movs	r2, #138	; 0x8a
 800d44c:	0092      	lsls	r2, r2, #2
 800d44e:	189a      	adds	r2, r3, r2
 800d450:	4b0e      	ldr	r3, [pc, #56]	; (800d48c <SecureElementSetKey+0x108>)
 800d452:	18d3      	adds	r3, r2, r3
 800d454:	3305      	adds	r3, #5
 800d456:	6839      	ldr	r1, [r7, #0]
 800d458:	2210      	movs	r2, #16
 800d45a:	0018      	movs	r0, r3
 800d45c:	f00c f9f8 	bl	8019850 <memcpy1>
                SeNvmCtxChanged( );
 800d460:	4b0b      	ldr	r3, [pc, #44]	; (800d490 <SecureElementSetKey+0x10c>)
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	4798      	blx	r3
                return SECURE_ELEMENT_SUCCESS;
 800d466:	2300      	movs	r3, #0
 800d468:	e00b      	b.n	800d482 <SecureElementSetKey+0xfe>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800d46a:	211f      	movs	r1, #31
 800d46c:	187b      	adds	r3, r7, r1
 800d46e:	781a      	ldrb	r2, [r3, #0]
 800d470:	187b      	adds	r3, r7, r1
 800d472:	3201      	adds	r2, #1
 800d474:	701a      	strb	r2, [r3, #0]
 800d476:	231f      	movs	r3, #31
 800d478:	18fb      	adds	r3, r7, r3
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b17      	cmp	r3, #23
 800d47e:	d992      	bls.n	800d3a6 <SecureElementSetKey+0x22>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d480:	2303      	movs	r3, #3
}
 800d482:	0018      	movs	r0, r3
 800d484:	46bd      	mov	sp, r7
 800d486:	b009      	add	sp, #36	; 0x24
 800d488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d48a:	46c0      	nop			; (mov r8, r8)
 800d48c:	20000528 	.word	0x20000528
 800d490:	200008ec 	.word	0x200008ec

0800d494 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID, uint32_t* cmac )
{
 800d494:	b590      	push	{r4, r7, lr}
 800d496:	b087      	sub	sp, #28
 800d498:	af02      	add	r7, sp, #8
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	0019      	movs	r1, r3
 800d4a0:	1dbb      	adds	r3, r7, #6
 800d4a2:	801a      	strh	r2, [r3, #0]
 800d4a4:	1d7b      	adds	r3, r7, #5
 800d4a6:	1c0a      	adds	r2, r1, #0
 800d4a8:	701a      	strb	r2, [r3, #0]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800d4aa:	1d7b      	adds	r3, r7, #5
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	2b7e      	cmp	r3, #126	; 0x7e
 800d4b0:	d901      	bls.n	800d4b6 <SecureElementComputeAesCmac+0x22>
    {
        //Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d4b2:	2303      	movs	r3, #3
 800d4b4:	e00b      	b.n	800d4ce <SecureElementComputeAesCmac+0x3a>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800d4b6:	1d7b      	adds	r3, r7, #5
 800d4b8:	781c      	ldrb	r4, [r3, #0]
 800d4ba:	1dbb      	adds	r3, r7, #6
 800d4bc:	881a      	ldrh	r2, [r3, #0]
 800d4be:	68b9      	ldr	r1, [r7, #8]
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	6a3b      	ldr	r3, [r7, #32]
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	0023      	movs	r3, r4
 800d4c8:	f7ff fd14 	bl	800cef4 <ComputeCmac>
 800d4cc:	0003      	movs	r3, r0
}
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	b005      	add	sp, #20
 800d4d4:	bd90      	pop	{r4, r7, pc}

0800d4d6 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac, KeyIdentifier_t keyID )
{
 800d4d6:	b5b0      	push	{r4, r5, r7, lr}
 800d4d8:	b088      	sub	sp, #32
 800d4da:	af02      	add	r7, sp, #8
 800d4dc:	60f8      	str	r0, [r7, #12]
 800d4de:	0008      	movs	r0, r1
 800d4e0:	607a      	str	r2, [r7, #4]
 800d4e2:	0019      	movs	r1, r3
 800d4e4:	230a      	movs	r3, #10
 800d4e6:	18fb      	adds	r3, r7, r3
 800d4e8:	1c02      	adds	r2, r0, #0
 800d4ea:	801a      	strh	r2, [r3, #0]
 800d4ec:	2309      	movs	r3, #9
 800d4ee:	18fb      	adds	r3, r7, r3
 800d4f0:	1c0a      	adds	r2, r1, #0
 800d4f2:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL )
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d101      	bne.n	800d4fe <SecureElementVerifyAesCmac+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d4fa:	2302      	movs	r3, #2
 800d4fc:	e029      	b.n	800d552 <SecureElementVerifyAesCmac+0x7c>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d4fe:	2517      	movs	r5, #23
 800d500:	197b      	adds	r3, r7, r5
 800d502:	2206      	movs	r2, #6
 800d504:	701a      	strb	r2, [r3, #0]
    uint32_t compCmac = 0;
 800d506:	2300      	movs	r3, #0
 800d508:	613b      	str	r3, [r7, #16]
    retval = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800d50a:	197c      	adds	r4, r7, r5
 800d50c:	2309      	movs	r3, #9
 800d50e:	18fb      	adds	r3, r7, r3
 800d510:	7818      	ldrb	r0, [r3, #0]
 800d512:	230a      	movs	r3, #10
 800d514:	18fb      	adds	r3, r7, r3
 800d516:	881a      	ldrh	r2, [r3, #0]
 800d518:	68f9      	ldr	r1, [r7, #12]
 800d51a:	2310      	movs	r3, #16
 800d51c:	18fb      	adds	r3, r7, r3
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	0003      	movs	r3, r0
 800d522:	2000      	movs	r0, #0
 800d524:	f7ff fce6 	bl	800cef4 <ComputeCmac>
 800d528:	0003      	movs	r3, r0
 800d52a:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d52c:	197b      	adds	r3, r7, r5
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d003      	beq.n	800d53c <SecureElementVerifyAesCmac+0x66>
    {
        return retval;
 800d534:	2317      	movs	r3, #23
 800d536:	18fb      	adds	r3, r7, r3
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	e00a      	b.n	800d552 <SecureElementVerifyAesCmac+0x7c>
    }

    if( expectedCmac != compCmac )
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	429a      	cmp	r2, r3
 800d542:	d003      	beq.n	800d54c <SecureElementVerifyAesCmac+0x76>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800d544:	2317      	movs	r3, #23
 800d546:	18fb      	adds	r3, r7, r3
 800d548:	2201      	movs	r2, #1
 800d54a:	701a      	strb	r2, [r3, #0]
    }

    return retval;
 800d54c:	2317      	movs	r3, #23
 800d54e:	18fb      	adds	r3, r7, r3
 800d550:	781b      	ldrb	r3, [r3, #0]
}
 800d552:	0018      	movs	r0, r3
 800d554:	46bd      	mov	sp, r7
 800d556:	b006      	add	sp, #24
 800d558:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d55c <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID, uint8_t* encBuffer )
{
 800d55c:	b5b0      	push	{r4, r5, r7, lr}
 800d55e:	b086      	sub	sp, #24
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	0008      	movs	r0, r1
 800d566:	0011      	movs	r1, r2
 800d568:	607b      	str	r3, [r7, #4]
 800d56a:	230a      	movs	r3, #10
 800d56c:	18fb      	adds	r3, r7, r3
 800d56e:	1c02      	adds	r2, r0, #0
 800d570:	801a      	strh	r2, [r3, #0]
 800d572:	2309      	movs	r3, #9
 800d574:	18fb      	adds	r3, r7, r3
 800d576:	1c0a      	adds	r2, r1, #0
 800d578:	701a      	strb	r2, [r3, #0]
    if( buffer == NULL || encBuffer == NULL )
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <SecureElementAesEncrypt+0x2a>
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <SecureElementAesEncrypt+0x2e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d586:	2302      	movs	r3, #2
 800d588:	e04c      	b.n	800d624 <SecureElementAesEncrypt+0xc8>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800d58a:	230a      	movs	r3, #10
 800d58c:	18fb      	adds	r3, r7, r3
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	220f      	movs	r2, #15
 800d592:	4013      	ands	r3, r2
 800d594:	b29b      	uxth	r3, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	d001      	beq.n	800d59e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800d59a:	2305      	movs	r3, #5
 800d59c:	e042      	b.n	800d624 <SecureElementAesEncrypt+0xc8>
    }

    memset1( SeNvmCtx.AesContext.ksch, '\0', 240 );
 800d59e:	4b23      	ldr	r3, [pc, #140]	; (800d62c <SecureElementAesEncrypt+0xd0>)
 800d5a0:	22f0      	movs	r2, #240	; 0xf0
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	0018      	movs	r0, r3
 800d5a6:	f00c f98f 	bl	80198c8 <memset1>

    Key_t* pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800d5aa:	2516      	movs	r5, #22
 800d5ac:	197c      	adds	r4, r7, r5
 800d5ae:	2310      	movs	r3, #16
 800d5b0:	18fa      	adds	r2, r7, r3
 800d5b2:	2309      	movs	r3, #9
 800d5b4:	18fb      	adds	r3, r7, r3
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	0011      	movs	r1, r2
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	f7ff fc56 	bl	800ce6c <GetKeyByID>
 800d5c0:	0003      	movs	r3, r0
 800d5c2:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 800d5c4:	197b      	adds	r3, r7, r5
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d128      	bne.n	800d61e <SecureElementAesEncrypt+0xc2>
    {
        aes_set_key( pItem->KeyValue, 16, &SeNvmCtx.AesContext );
 800d5cc:	693b      	ldr	r3, [r7, #16]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	4a16      	ldr	r2, [pc, #88]	; (800d62c <SecureElementAesEncrypt+0xd0>)
 800d5d2:	2110      	movs	r1, #16
 800d5d4:	0018      	movs	r0, r3
 800d5d6:	f7ff f87d 	bl	800c6d4 <aes_set_key>

        uint8_t block = 0;
 800d5da:	2317      	movs	r3, #23
 800d5dc:	18fb      	adds	r3, r7, r3
 800d5de:	2200      	movs	r2, #0
 800d5e0:	701a      	strb	r2, [r3, #0]

        while( size != 0 )
 800d5e2:	e017      	b.n	800d614 <SecureElementAesEncrypt+0xb8>
        {
            aes_encrypt( &buffer[block], &encBuffer[block], &SeNvmCtx.AesContext );
 800d5e4:	2417      	movs	r4, #23
 800d5e6:	193b      	adds	r3, r7, r4
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	68fa      	ldr	r2, [r7, #12]
 800d5ec:	18d0      	adds	r0, r2, r3
 800d5ee:	193b      	adds	r3, r7, r4
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	18d3      	adds	r3, r2, r3
 800d5f6:	4a0d      	ldr	r2, [pc, #52]	; (800d62c <SecureElementAesEncrypt+0xd0>)
 800d5f8:	0019      	movs	r1, r3
 800d5fa:	f7ff f99d 	bl	800c938 <aes_encrypt>
            block = block + 16;
 800d5fe:	193b      	adds	r3, r7, r4
 800d600:	193a      	adds	r2, r7, r4
 800d602:	7812      	ldrb	r2, [r2, #0]
 800d604:	3210      	adds	r2, #16
 800d606:	701a      	strb	r2, [r3, #0]
            size = size - 16;
 800d608:	220a      	movs	r2, #10
 800d60a:	18bb      	adds	r3, r7, r2
 800d60c:	18ba      	adds	r2, r7, r2
 800d60e:	8812      	ldrh	r2, [r2, #0]
 800d610:	3a10      	subs	r2, #16
 800d612:	801a      	strh	r2, [r3, #0]
        while( size != 0 )
 800d614:	230a      	movs	r3, #10
 800d616:	18fb      	adds	r3, r7, r3
 800d618:	881b      	ldrh	r3, [r3, #0]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1e2      	bne.n	800d5e4 <SecureElementAesEncrypt+0x88>
        }
    }
    return retval;
 800d61e:	2316      	movs	r3, #22
 800d620:	18fb      	adds	r3, r7, r3
 800d622:	781b      	ldrb	r3, [r3, #0]
}
 800d624:	0018      	movs	r0, r3
 800d626:	46bd      	mov	sp, r7
 800d628:	b006      	add	sp, #24
 800d62a:	bdb0      	pop	{r4, r5, r7, pc}
 800d62c:	20000548 	.word	0x20000548

0800d630 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( Version_t version, uint8_t* input, KeyIdentifier_t rootKeyID, KeyIdentifier_t targetKeyID )
{
 800d630:	b5b0      	push	{r4, r5, r7, lr}
 800d632:	b08a      	sub	sp, #40	; 0x28
 800d634:	af00      	add	r7, sp, #0
 800d636:	60f8      	str	r0, [r7, #12]
 800d638:	60b9      	str	r1, [r7, #8]
 800d63a:	0019      	movs	r1, r3
 800d63c:	1dfb      	adds	r3, r7, #7
 800d63e:	701a      	strb	r2, [r3, #0]
 800d640:	1dbb      	adds	r3, r7, #6
 800d642:	1c0a      	adds	r2, r1, #0
 800d644:	701a      	strb	r2, [r3, #0]
    if( input == NULL )
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d101      	bne.n	800d650 <SecureElementDeriveAndStoreKey+0x20>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d64c:	2302      	movs	r3, #2
 800d64e:	e048      	b.n	800d6e2 <SecureElementDeriveAndStoreKey+0xb2>
    }

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800d650:	2327      	movs	r3, #39	; 0x27
 800d652:	18fb      	adds	r3, r7, r3
 800d654:	2206      	movs	r2, #6
 800d656:	701a      	strb	r2, [r3, #0]
    uint8_t key[16] = { 0 };
 800d658:	2314      	movs	r3, #20
 800d65a:	18fb      	adds	r3, r7, r3
 800d65c:	0018      	movs	r0, r3
 800d65e:	2310      	movs	r3, #16
 800d660:	001a      	movs	r2, r3
 800d662:	2100      	movs	r1, #0
 800d664:	f00c f978 	bl	8019958 <memset>

    // In case of MC_KE_KEY, prevent other keys than NwkKey or AppKey for LoRaWAN 1.1 or later
    if( targetKeyID == MC_KE_KEY )
 800d668:	1dbb      	adds	r3, r7, #6
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	2b7f      	cmp	r3, #127	; 0x7f
 800d66e:	d10e      	bne.n	800d68e <SecureElementDeriveAndStoreKey+0x5e>
    {
        if( ( ( rootKeyID == APP_KEY ) && ( version.Fields.Minor == 0 ) ) || ( rootKeyID == NWK_KEY ) )
 800d670:	1dfb      	adds	r3, r7, #7
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d104      	bne.n	800d682 <SecureElementDeriveAndStoreKey+0x52>
 800d678:	230c      	movs	r3, #12
 800d67a:	18fb      	adds	r3, r7, r3
 800d67c:	789b      	ldrb	r3, [r3, #2]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d003      	beq.n	800d68a <SecureElementDeriveAndStoreKey+0x5a>
 800d682:	1dfb      	adds	r3, r7, #7
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d101      	bne.n	800d68e <SecureElementDeriveAndStoreKey+0x5e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800d68a:	2303      	movs	r3, #3
 800d68c:	e029      	b.n	800d6e2 <SecureElementDeriveAndStoreKey+0xb2>
        }
    }

    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800d68e:	2527      	movs	r5, #39	; 0x27
 800d690:	197c      	adds	r4, r7, r5
 800d692:	2314      	movs	r3, #20
 800d694:	18f9      	adds	r1, r7, r3
 800d696:	1dfb      	adds	r3, r7, #7
 800d698:	781a      	ldrb	r2, [r3, #0]
 800d69a:	68b8      	ldr	r0, [r7, #8]
 800d69c:	000b      	movs	r3, r1
 800d69e:	2110      	movs	r1, #16
 800d6a0:	f7ff ff5c 	bl	800d55c <SecureElementAesEncrypt>
 800d6a4:	0003      	movs	r3, r0
 800d6a6:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d6a8:	197b      	adds	r3, r7, r5
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d003      	beq.n	800d6b8 <SecureElementDeriveAndStoreKey+0x88>
    {
        return retval;
 800d6b0:	2327      	movs	r3, #39	; 0x27
 800d6b2:	18fb      	adds	r3, r7, r3
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	e014      	b.n	800d6e2 <SecureElementDeriveAndStoreKey+0xb2>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800d6b8:	2527      	movs	r5, #39	; 0x27
 800d6ba:	197c      	adds	r4, r7, r5
 800d6bc:	2314      	movs	r3, #20
 800d6be:	18fa      	adds	r2, r7, r3
 800d6c0:	1dbb      	adds	r3, r7, #6
 800d6c2:	781b      	ldrb	r3, [r3, #0]
 800d6c4:	0011      	movs	r1, r2
 800d6c6:	0018      	movs	r0, r3
 800d6c8:	f7ff fe5c 	bl	800d384 <SecureElementSetKey>
 800d6cc:	0003      	movs	r3, r0
 800d6ce:	7023      	strb	r3, [r4, #0]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800d6d0:	197b      	adds	r3, r7, r5
 800d6d2:	781b      	ldrb	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d003      	beq.n	800d6e0 <SecureElementDeriveAndStoreKey+0xb0>
    {
        return retval;
 800d6d8:	2327      	movs	r3, #39	; 0x27
 800d6da:	18fb      	adds	r3, r7, r3
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	e000      	b.n	800d6e2 <SecureElementDeriveAndStoreKey+0xb2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	0018      	movs	r0, r3
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	b00a      	add	sp, #40	; 0x28
 800d6e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d6ec <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d6fa:	2302      	movs	r3, #2
 800d6fc:	e006      	b.n	800d70c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random( );
 800d6fe:	4b05      	ldr	r3, [pc, #20]	; (800d714 <SecureElementRandomNumber+0x28>)
 800d700:	69db      	ldr	r3, [r3, #28]
 800d702:	4798      	blx	r3
 800d704:	0002      	movs	r2, r0
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	0018      	movs	r0, r3
 800d70e:	46bd      	mov	sp, r7
 800d710:	b002      	add	sp, #8
 800d712:	bd80      	pop	{r7, pc}
 800d714:	0801acec 	.word	0x0801acec

0800d718 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d101      	bne.n	800d72a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d726:	2302      	movs	r3, #2
 800d728:	e009      	b.n	800d73e <SecureElementSetDevEui+0x26>
    }
    memcpy1( SeNvmCtx.DevEui, devEui, SE_EUI_SIZE );
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	4b06      	ldr	r3, [pc, #24]	; (800d748 <SecureElementSetDevEui+0x30>)
 800d72e:	2210      	movs	r2, #16
 800d730:	0018      	movs	r0, r3
 800d732:	f00c f88d 	bl	8019850 <memcpy1>
    SeNvmCtxChanged( );
 800d736:	4b05      	ldr	r3, [pc, #20]	; (800d74c <SecureElementSetDevEui+0x34>)
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800d73c:	2300      	movs	r3, #0
}
 800d73e:	0018      	movs	r0, r3
 800d740:	46bd      	mov	sp, r7
 800d742:	b002      	add	sp, #8
 800d744:	bd80      	pop	{r7, pc}
 800d746:	46c0      	nop			; (mov r8, r8)
 800d748:	20000528 	.word	0x20000528
 800d74c:	200008ec 	.word	0x200008ec

0800d750 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	af00      	add	r7, sp, #0
    return SeNvmCtx.DevEui;
 800d754:	4b01      	ldr	r3, [pc, #4]	; (800d75c <SecureElementGetDevEui+0xc>)
}
 800d756:	0018      	movs	r0, r3
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}
 800d75c:	20000528 	.word	0x20000528

0800d760 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d101      	bne.n	800d772 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800d76e:	2302      	movs	r3, #2
 800d770:	e009      	b.n	800d786 <SecureElementSetJoinEui+0x26>
    }
    memcpy1( SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE );
 800d772:	6879      	ldr	r1, [r7, #4]
 800d774:	4b06      	ldr	r3, [pc, #24]	; (800d790 <SecureElementSetJoinEui+0x30>)
 800d776:	2210      	movs	r2, #16
 800d778:	0018      	movs	r0, r3
 800d77a:	f00c f869 	bl	8019850 <memcpy1>
    SeNvmCtxChanged( );
 800d77e:	4b05      	ldr	r3, [pc, #20]	; (800d794 <SecureElementSetJoinEui+0x34>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4798      	blx	r3
    return SECURE_ELEMENT_SUCCESS;
 800d784:	2300      	movs	r3, #0
}
 800d786:	0018      	movs	r0, r3
 800d788:	46bd      	mov	sp, r7
 800d78a:	b002      	add	sp, #8
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	46c0      	nop			; (mov r8, r8)
 800d790:	20000538 	.word	0x20000538
 800d794:	200008ec 	.word	0x200008ec

0800d798 <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	af00      	add	r7, sp, #0
    return SeNvmCtx.JoinEui;
 800d79c:	4b01      	ldr	r3, [pc, #4]	; (800d7a4 <SecureElementGetJoinEui+0xc>)
}
 800d79e:	0018      	movs	r0, r3
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20000538 	.word	0x20000538

0800d7a8 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d7a8:	b5b0      	push	{r4, r5, r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d7ae:	f00b fe76 	bl	801949e <TimerGetCurrentTime>
 800d7b2:	0002      	movs	r2, r0
 800d7b4:	4b1e      	ldr	r3, [pc, #120]	; (800d830 <OnRadioTxDone+0x88>)
 800d7b6:	601a      	str	r2, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d7b8:	4d1e      	ldr	r5, [pc, #120]	; (800d834 <OnRadioTxDone+0x8c>)
 800d7ba:	23ce      	movs	r3, #206	; 0xce
 800d7bc:	009c      	lsls	r4, r3, #2
 800d7be:	003b      	movs	r3, r7
 800d7c0:	0018      	movs	r0, r3
 800d7c2:	f00b fc82 	bl	80190ca <SysTimeGet>
 800d7c6:	003a      	movs	r2, r7
 800d7c8:	192b      	adds	r3, r5, r4
 800d7ca:	ca03      	ldmia	r2!, {r0, r1}
 800d7cc:	c303      	stmia	r3!, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d7ce:	4b1a      	ldr	r3, [pc, #104]	; (800d838 <OnRadioTxDone+0x90>)
 800d7d0:	781a      	ldrb	r2, [r3, #0]
 800d7d2:	2110      	movs	r1, #16
 800d7d4:	430a      	orrs	r2, r1
 800d7d6:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d7d8:	4a16      	ldr	r2, [pc, #88]	; (800d834 <OnRadioTxDone+0x8c>)
 800d7da:	23d2      	movs	r3, #210	; 0xd2
 800d7dc:	009b      	lsls	r3, r3, #2
 800d7de:	58d3      	ldr	r3, [r2, r3]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00c      	beq.n	800d7fe <OnRadioTxDone+0x56>
 800d7e4:	4a13      	ldr	r2, [pc, #76]	; (800d834 <OnRadioTxDone+0x8c>)
 800d7e6:	23d2      	movs	r3, #210	; 0xd2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	58d3      	ldr	r3, [r2, r3]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <OnRadioTxDone+0x56>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d7f2:	4a10      	ldr	r2, [pc, #64]	; (800d834 <OnRadioTxDone+0x8c>)
 800d7f4:	23d2      	movs	r3, #210	; 0xd2
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	58d3      	ldr	r3, [r2, r3]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txDone\n\r" );
 800d7fe:	2208      	movs	r2, #8
 800d800:	0014      	movs	r4, r2
 800d802:	18bb      	adds	r3, r7, r2
 800d804:	0018      	movs	r0, r3
 800d806:	f00b fc99 	bl	801913c <SysTimeGetMcuTime>
 800d80a:	0022      	movs	r2, r4
 800d80c:	18bb      	adds	r3, r7, r2
 800d80e:	6819      	ldr	r1, [r3, #0]
 800d810:	18bb      	adds	r3, r7, r2
 800d812:	2204      	movs	r2, #4
 800d814:	5e9b      	ldrsh	r3, [r3, r2]
 800d816:	001a      	movs	r2, r3
 800d818:	4b08      	ldr	r3, [pc, #32]	; (800d83c <OnRadioTxDone+0x94>)
 800d81a:	0018      	movs	r0, r3
 800d81c:	f00b ff10 	bl	8019640 <TraceSend>
 800d820:	4b07      	ldr	r3, [pc, #28]	; (800d840 <OnRadioTxDone+0x98>)
 800d822:	0018      	movs	r0, r3
 800d824:	f00b ff0c 	bl	8019640 <TraceSend>
#endif
}
 800d828:	46c0      	nop			; (mov r8, r8)
 800d82a:	46bd      	mov	sp, r7
 800d82c:	b004      	add	sp, #16
 800d82e:	bdb0      	pop	{r4, r5, r7, pc}
 800d830:	20001644 	.word	0x20001644
 800d834:	200008f0 	.word	0x200008f0
 800d838:	20000f54 	.word	0x20000f54
 800d83c:	0801a58c 	.word	0x0801a58c
 800d840:	0801a598 	.word	0x0801a598

0800d844 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d844:	b5b0      	push	{r4, r5, r7, lr}
 800d846:	b086      	sub	sp, #24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	000c      	movs	r4, r1
 800d84e:	0010      	movs	r0, r2
 800d850:	0019      	movs	r1, r3
 800d852:	250a      	movs	r5, #10
 800d854:	197b      	adds	r3, r7, r5
 800d856:	1c22      	adds	r2, r4, #0
 800d858:	801a      	strh	r2, [r3, #0]
 800d85a:	2408      	movs	r4, #8
 800d85c:	193b      	adds	r3, r7, r4
 800d85e:	1c02      	adds	r2, r0, #0
 800d860:	801a      	strh	r2, [r3, #0]
 800d862:	1dfb      	adds	r3, r7, #7
 800d864:	1c0a      	adds	r2, r1, #0
 800d866:	701a      	strb	r2, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d868:	f00b fe19 	bl	801949e <TimerGetCurrentTime>
 800d86c:	0002      	movs	r2, r0
 800d86e:	4b21      	ldr	r3, [pc, #132]	; (800d8f4 <OnRadioRxDone+0xb0>)
 800d870:	601a      	str	r2, [r3, #0]
    RxDoneParams.Payload = payload;
 800d872:	4b20      	ldr	r3, [pc, #128]	; (800d8f4 <OnRadioRxDone+0xb0>)
 800d874:	68fa      	ldr	r2, [r7, #12]
 800d876:	605a      	str	r2, [r3, #4]
    RxDoneParams.Size = size;
 800d878:	4b1e      	ldr	r3, [pc, #120]	; (800d8f4 <OnRadioRxDone+0xb0>)
 800d87a:	197a      	adds	r2, r7, r5
 800d87c:	8812      	ldrh	r2, [r2, #0]
 800d87e:	811a      	strh	r2, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800d880:	4b1c      	ldr	r3, [pc, #112]	; (800d8f4 <OnRadioRxDone+0xb0>)
 800d882:	193a      	adds	r2, r7, r4
 800d884:	8812      	ldrh	r2, [r2, #0]
 800d886:	815a      	strh	r2, [r3, #10]
    RxDoneParams.Snr = snr;
 800d888:	4b1a      	ldr	r3, [pc, #104]	; (800d8f4 <OnRadioRxDone+0xb0>)
 800d88a:	1dfa      	adds	r2, r7, #7
 800d88c:	7812      	ldrb	r2, [r2, #0]
 800d88e:	731a      	strb	r2, [r3, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d890:	4b19      	ldr	r3, [pc, #100]	; (800d8f8 <OnRadioRxDone+0xb4>)
 800d892:	781a      	ldrb	r2, [r3, #0]
 800d894:	2108      	movs	r1, #8
 800d896:	430a      	orrs	r2, r1
 800d898:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d89a:	4a18      	ldr	r2, [pc, #96]	; (800d8fc <OnRadioRxDone+0xb8>)
 800d89c:	23d2      	movs	r3, #210	; 0xd2
 800d89e:	009b      	lsls	r3, r3, #2
 800d8a0:	58d3      	ldr	r3, [r2, r3]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00c      	beq.n	800d8c0 <OnRadioRxDone+0x7c>
 800d8a6:	4a15      	ldr	r2, [pc, #84]	; (800d8fc <OnRadioRxDone+0xb8>)
 800d8a8:	23d2      	movs	r3, #210	; 0xd2
 800d8aa:	009b      	lsls	r3, r3, #2
 800d8ac:	58d3      	ldr	r3, [r2, r3]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d005      	beq.n	800d8c0 <OnRadioRxDone+0x7c>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d8b4:	4a11      	ldr	r2, [pc, #68]	; (800d8fc <OnRadioRxDone+0xb8>)
 800d8b6:	23d2      	movs	r3, #210	; 0xd2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	58d3      	ldr	r3, [r2, r3]
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxDone\n\r" );
 800d8c0:	2210      	movs	r2, #16
 800d8c2:	0014      	movs	r4, r2
 800d8c4:	18bb      	adds	r3, r7, r2
 800d8c6:	0018      	movs	r0, r3
 800d8c8:	f00b fc38 	bl	801913c <SysTimeGetMcuTime>
 800d8cc:	0022      	movs	r2, r4
 800d8ce:	18bb      	adds	r3, r7, r2
 800d8d0:	6819      	ldr	r1, [r3, #0]
 800d8d2:	18bb      	adds	r3, r7, r2
 800d8d4:	2204      	movs	r2, #4
 800d8d6:	5e9b      	ldrsh	r3, [r3, r2]
 800d8d8:	001a      	movs	r2, r3
 800d8da:	4b09      	ldr	r3, [pc, #36]	; (800d900 <OnRadioRxDone+0xbc>)
 800d8dc:	0018      	movs	r0, r3
 800d8de:	f00b feaf 	bl	8019640 <TraceSend>
 800d8e2:	4b08      	ldr	r3, [pc, #32]	; (800d904 <OnRadioRxDone+0xc0>)
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f00b feab 	bl	8019640 <TraceSend>
#endif
}
 800d8ea:	46c0      	nop			; (mov r8, r8)
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	b006      	add	sp, #24
 800d8f0:	bdb0      	pop	{r4, r5, r7, pc}
 800d8f2:	46c0      	nop			; (mov r8, r8)
 800d8f4:	20001648 	.word	0x20001648
 800d8f8:	20000f54 	.word	0x20000f54
 800d8fc:	200008f0 	.word	0x200008f0
 800d900:	0801a58c 	.word	0x0801a58c
 800d904:	0801a5a8 	.word	0x0801a5a8

0800d908 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b082      	sub	sp, #8
 800d90c:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d90e:	4b17      	ldr	r3, [pc, #92]	; (800d96c <OnRadioTxTimeout+0x64>)
 800d910:	781a      	ldrb	r2, [r3, #0]
 800d912:	2104      	movs	r1, #4
 800d914:	430a      	orrs	r2, r1
 800d916:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d918:	4a15      	ldr	r2, [pc, #84]	; (800d970 <OnRadioTxTimeout+0x68>)
 800d91a:	23d2      	movs	r3, #210	; 0xd2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	58d3      	ldr	r3, [r2, r3]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d00c      	beq.n	800d93e <OnRadioTxTimeout+0x36>
 800d924:	4a12      	ldr	r2, [pc, #72]	; (800d970 <OnRadioTxTimeout+0x68>)
 800d926:	23d2      	movs	r3, #210	; 0xd2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	58d3      	ldr	r3, [r2, r3]
 800d92c:	68db      	ldr	r3, [r3, #12]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d005      	beq.n	800d93e <OnRadioTxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d932:	4a0f      	ldr	r2, [pc, #60]	; (800d970 <OnRadioTxTimeout+0x68>)
 800d934:	23d2      	movs	r3, #210	; 0xd2
 800d936:	009b      	lsls	r3, r3, #2
 800d938:	58d3      	ldr	r3, [r2, r3]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY txTimeOut\n\r" );
 800d93e:	003b      	movs	r3, r7
 800d940:	0018      	movs	r0, r3
 800d942:	f00b fbfb 	bl	801913c <SysTimeGetMcuTime>
 800d946:	003b      	movs	r3, r7
 800d948:	6819      	ldr	r1, [r3, #0]
 800d94a:	003b      	movs	r3, r7
 800d94c:	2204      	movs	r2, #4
 800d94e:	5e9b      	ldrsh	r3, [r3, r2]
 800d950:	001a      	movs	r2, r3
 800d952:	4b08      	ldr	r3, [pc, #32]	; (800d974 <OnRadioTxTimeout+0x6c>)
 800d954:	0018      	movs	r0, r3
 800d956:	f00b fe73 	bl	8019640 <TraceSend>
 800d95a:	4b07      	ldr	r3, [pc, #28]	; (800d978 <OnRadioTxTimeout+0x70>)
 800d95c:	0018      	movs	r0, r3
 800d95e:	f00b fe6f 	bl	8019640 <TraceSend>
#endif
}
 800d962:	46c0      	nop			; (mov r8, r8)
 800d964:	46bd      	mov	sp, r7
 800d966:	b002      	add	sp, #8
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	46c0      	nop			; (mov r8, r8)
 800d96c:	20000f54 	.word	0x20000f54
 800d970:	200008f0 	.word	0x200008f0
 800d974:	0801a58c 	.word	0x0801a58c
 800d978:	0801a5b8 	.word	0x0801a5b8

0800d97c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d980:	4b0d      	ldr	r3, [pc, #52]	; (800d9b8 <OnRadioRxError+0x3c>)
 800d982:	781a      	ldrb	r2, [r3, #0]
 800d984:	2102      	movs	r1, #2
 800d986:	430a      	orrs	r2, r1
 800d988:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d98a:	4a0c      	ldr	r2, [pc, #48]	; (800d9bc <OnRadioRxError+0x40>)
 800d98c:	23d2      	movs	r3, #210	; 0xd2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	58d3      	ldr	r3, [r2, r3]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00c      	beq.n	800d9b0 <OnRadioRxError+0x34>
 800d996:	4a09      	ldr	r2, [pc, #36]	; (800d9bc <OnRadioRxError+0x40>)
 800d998:	23d2      	movs	r3, #210	; 0xd2
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	58d3      	ldr	r3, [r2, r3]
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <OnRadioRxError+0x34>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d9a4:	4a05      	ldr	r2, [pc, #20]	; (800d9bc <OnRadioRxError+0x40>)
 800d9a6:	23d2      	movs	r3, #210	; 0xd2
 800d9a8:	009b      	lsls	r3, r3, #2
 800d9aa:	58d3      	ldr	r3, [r2, r3]
 800d9ac:	68db      	ldr	r3, [r3, #12]
 800d9ae:	4798      	blx	r3
    }
}
 800d9b0:	46c0      	nop			; (mov r8, r8)
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	bd80      	pop	{r7, pc}
 800d9b6:	46c0      	nop			; (mov r8, r8)
 800d9b8:	20000f54 	.word	0x20000f54
 800d9bc:	200008f0 	.word	0x200008f0

0800d9c0 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d9c6:	4b17      	ldr	r3, [pc, #92]	; (800da24 <OnRadioRxTimeout+0x64>)
 800d9c8:	781a      	ldrb	r2, [r3, #0]
 800d9ca:	2101      	movs	r1, #1
 800d9cc:	430a      	orrs	r2, r1
 800d9ce:	701a      	strb	r2, [r3, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d9d0:	4a15      	ldr	r2, [pc, #84]	; (800da28 <OnRadioRxTimeout+0x68>)
 800d9d2:	23d2      	movs	r3, #210	; 0xd2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	58d3      	ldr	r3, [r2, r3]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00c      	beq.n	800d9f6 <OnRadioRxTimeout+0x36>
 800d9dc:	4a12      	ldr	r2, [pc, #72]	; (800da28 <OnRadioRxTimeout+0x68>)
 800d9de:	23d2      	movs	r3, #210	; 0xd2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	58d3      	ldr	r3, [r2, r3]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d005      	beq.n	800d9f6 <OnRadioRxTimeout+0x36>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d9ea:	4a0f      	ldr	r2, [pc, #60]	; (800da28 <OnRadioRxTimeout+0x68>)
 800d9ec:	23d2      	movs	r3, #210	; 0xd2
 800d9ee:	009b      	lsls	r3, r3, #2
 800d9f0:	58d3      	ldr	r3, [r2, r3]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	4798      	blx	r3
    }
#if !defined(NO_MAC_PRINTF)
    PRINTNOW(); PRINTF("PHY rxTimeOut\n\r" );
 800d9f6:	003b      	movs	r3, r7
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f00b fb9f 	bl	801913c <SysTimeGetMcuTime>
 800d9fe:	003b      	movs	r3, r7
 800da00:	6819      	ldr	r1, [r3, #0]
 800da02:	003b      	movs	r3, r7
 800da04:	2204      	movs	r2, #4
 800da06:	5e9b      	ldrsh	r3, [r3, r2]
 800da08:	001a      	movs	r2, r3
 800da0a:	4b08      	ldr	r3, [pc, #32]	; (800da2c <OnRadioRxTimeout+0x6c>)
 800da0c:	0018      	movs	r0, r3
 800da0e:	f00b fe17 	bl	8019640 <TraceSend>
 800da12:	4b07      	ldr	r3, [pc, #28]	; (800da30 <OnRadioRxTimeout+0x70>)
 800da14:	0018      	movs	r0, r3
 800da16:	f00b fe13 	bl	8019640 <TraceSend>
#endif
}
 800da1a:	46c0      	nop			; (mov r8, r8)
 800da1c:	46bd      	mov	sp, r7
 800da1e:	b002      	add	sp, #8
 800da20:	bd80      	pop	{r7, pc}
 800da22:	46c0      	nop			; (mov r8, r8)
 800da24:	20000f54 	.word	0x20000f54
 800da28:	200008f0 	.word	0x200008f0
 800da2c:	0801a58c 	.word	0x0801a58c
 800da30:	0801a5c8 	.word	0x0801a5c8

0800da34 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800da34:	b580      	push	{r7, lr}
 800da36:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800da38:	4b0a      	ldr	r3, [pc, #40]	; (800da64 <UpdateRxSlotIdleState+0x30>)
 800da3a:	4a0b      	ldr	r2, [pc, #44]	; (800da68 <UpdateRxSlotIdleState+0x34>)
 800da3c:	589b      	ldr	r3, [r3, r2]
 800da3e:	22f0      	movs	r2, #240	; 0xf0
 800da40:	5c9b      	ldrb	r3, [r3, r2]
 800da42:	2b02      	cmp	r3, #2
 800da44:	d005      	beq.n	800da52 <UpdateRxSlotIdleState+0x1e>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800da46:	4a07      	ldr	r2, [pc, #28]	; (800da64 <UpdateRxSlotIdleState+0x30>)
 800da48:	2390      	movs	r3, #144	; 0x90
 800da4a:	00db      	lsls	r3, r3, #3
 800da4c:	2106      	movs	r1, #6
 800da4e:	54d1      	strb	r1, [r2, r3]
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800da50:	e004      	b.n	800da5c <UpdateRxSlotIdleState+0x28>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800da52:	4a04      	ldr	r2, [pc, #16]	; (800da64 <UpdateRxSlotIdleState+0x30>)
 800da54:	2390      	movs	r3, #144	; 0x90
 800da56:	00db      	lsls	r3, r3, #3
 800da58:	2102      	movs	r1, #2
 800da5a:	54d1      	strb	r1, [r2, r3]
}
 800da5c:	46c0      	nop			; (mov r8, r8)
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	46c0      	nop			; (mov r8, r8)
 800da64:	200008f0 	.word	0x200008f0
 800da68:	00000484 	.word	0x00000484

0800da6c <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800da72:	4b4a      	ldr	r3, [pc, #296]	; (800db9c <ProcessRadioTxDone+0x130>)
 800da74:	4a4a      	ldr	r2, [pc, #296]	; (800dba0 <ProcessRadioTxDone+0x134>)
 800da76:	589b      	ldr	r3, [r3, r2]
 800da78:	22f0      	movs	r2, #240	; 0xf0
 800da7a:	5c9b      	ldrb	r3, [r3, r2]
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d002      	beq.n	800da86 <ProcessRadioTxDone+0x1a>
    {
        Radio.Sleep( );
 800da80:	4b48      	ldr	r3, [pc, #288]	; (800dba4 <ProcessRadioTxDone+0x138>)
 800da82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da84:	4798      	blx	r3
    }
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800da86:	4a45      	ldr	r2, [pc, #276]	; (800db9c <ProcessRadioTxDone+0x130>)
 800da88:	23ec      	movs	r3, #236	; 0xec
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	58d2      	ldr	r2, [r2, r3]
 800da8e:	4b46      	ldr	r3, [pc, #280]	; (800dba8 <ProcessRadioTxDone+0x13c>)
 800da90:	0011      	movs	r1, r2
 800da92:	0018      	movs	r0, r3
 800da94:	f00b fcde 	bl	8019454 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800da98:	4b43      	ldr	r3, [pc, #268]	; (800dba8 <ProcessRadioTxDone+0x13c>)
 800da9a:	0018      	movs	r0, r3
 800da9c:	f00b fb88 	bl	80191b0 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800daa0:	4a3e      	ldr	r2, [pc, #248]	; (800db9c <ProcessRadioTxDone+0x130>)
 800daa2:	23ed      	movs	r3, #237	; 0xed
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	58d2      	ldr	r2, [r2, r3]
 800daa8:	4b40      	ldr	r3, [pc, #256]	; (800dbac <ProcessRadioTxDone+0x140>)
 800daaa:	0011      	movs	r1, r2
 800daac:	0018      	movs	r0, r3
 800daae:	f00b fcd1 	bl	8019454 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800dab2:	4b3e      	ldr	r3, [pc, #248]	; (800dbac <ProcessRadioTxDone+0x140>)
 800dab4:	0018      	movs	r0, r3
 800dab6:	f00b fb7b 	bl	80191b0 <TimerStart>

    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800daba:	4b38      	ldr	r3, [pc, #224]	; (800db9c <ProcessRadioTxDone+0x130>)
 800dabc:	4a38      	ldr	r2, [pc, #224]	; (800dba0 <ProcessRadioTxDone+0x134>)
 800dabe:	589b      	ldr	r3, [r3, r2]
 800dac0:	22f0      	movs	r2, #240	; 0xf0
 800dac2:	5c9b      	ldrb	r3, [r3, r2]
 800dac4:	2b02      	cmp	r3, #2
 800dac6:	d004      	beq.n	800dad2 <ProcessRadioTxDone+0x66>
 800dac8:	4b34      	ldr	r3, [pc, #208]	; (800db9c <ProcessRadioTxDone+0x130>)
 800daca:	4a39      	ldr	r2, [pc, #228]	; (800dbb0 <ProcessRadioTxDone+0x144>)
 800dacc:	5c9b      	ldrb	r3, [r3, r2]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d021      	beq.n	800db16 <ProcessRadioTxDone+0xaa>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800dad2:	210c      	movs	r1, #12
 800dad4:	187b      	adds	r3, r7, r1
 800dad6:	2216      	movs	r2, #22
 800dad8:	701a      	strb	r2, [r3, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800dada:	4b30      	ldr	r3, [pc, #192]	; (800db9c <ProcessRadioTxDone+0x130>)
 800dadc:	4a30      	ldr	r2, [pc, #192]	; (800dba0 <ProcessRadioTxDone+0x134>)
 800dade:	589b      	ldr	r3, [r3, r2]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	187a      	adds	r2, r7, r1
 800dae4:	0011      	movs	r1, r2
 800dae6:	0018      	movs	r0, r3
 800dae8:	f007 fe62 	bl	80157b0 <RegionGetPhyParam>
 800daec:	0003      	movs	r3, r0
 800daee:	001a      	movs	r2, r3
 800daf0:	2108      	movs	r1, #8
 800daf2:	187b      	adds	r3, r7, r1
 800daf4:	601a      	str	r2, [r3, #0]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800daf6:	4a29      	ldr	r2, [pc, #164]	; (800db9c <ProcessRadioTxDone+0x130>)
 800daf8:	23ed      	movs	r3, #237	; 0xed
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	58d2      	ldr	r2, [r2, r3]
 800dafe:	187b      	adds	r3, r7, r1
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	18d2      	adds	r2, r2, r3
 800db04:	4b2b      	ldr	r3, [pc, #172]	; (800dbb4 <ProcessRadioTxDone+0x148>)
 800db06:	0011      	movs	r1, r2
 800db08:	0018      	movs	r0, r3
 800db0a:	f00b fca3 	bl	8019454 <TimerSetValue>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800db0e:	4b29      	ldr	r3, [pc, #164]	; (800dbb4 <ProcessRadioTxDone+0x148>)
 800db10:	0018      	movs	r0, r3
 800db12:	f00b fb4d 	bl	80191b0 <TimerStart>
    }

    // Store last Tx channel
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 800db16:	4b21      	ldr	r3, [pc, #132]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db18:	4a21      	ldr	r2, [pc, #132]	; (800dba0 <ProcessRadioTxDone+0x134>)
 800db1a:	589a      	ldr	r2, [r3, r2]
 800db1c:	4b1f      	ldr	r3, [pc, #124]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db1e:	4926      	ldr	r1, [pc, #152]	; (800dbb8 <ProcessRadioTxDone+0x14c>)
 800db20:	5c59      	ldrb	r1, [r3, r1]
 800db22:	239f      	movs	r3, #159	; 0x9f
 800db24:	005b      	lsls	r3, r3, #1
 800db26:	54d1      	strb	r1, [r2, r3]
    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800db28:	4b1c      	ldr	r3, [pc, #112]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db2a:	4a23      	ldr	r2, [pc, #140]	; (800dbb8 <ProcessRadioTxDone+0x14c>)
 800db2c:	5c9a      	ldrb	r2, [r3, r2]
 800db2e:	003b      	movs	r3, r7
 800db30:	701a      	strb	r2, [r3, #0]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800db32:	4b1a      	ldr	r3, [pc, #104]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db34:	4a1a      	ldr	r2, [pc, #104]	; (800dba0 <ProcessRadioTxDone+0x134>)
 800db36:	589a      	ldr	r2, [r3, r2]
 800db38:	23ea      	movs	r3, #234	; 0xea
 800db3a:	005b      	lsls	r3, r3, #1
 800db3c:	5cd3      	ldrb	r3, [r2, r3]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d103      	bne.n	800db4a <ProcessRadioTxDone+0xde>
    {
        txDone.Joined  = false;
 800db42:	003b      	movs	r3, r7
 800db44:	2200      	movs	r2, #0
 800db46:	705a      	strb	r2, [r3, #1]
 800db48:	e002      	b.n	800db50 <ProcessRadioTxDone+0xe4>
    }
    else
    {
        txDone.Joined  = true;
 800db4a:	003b      	movs	r3, r7
 800db4c:	2201      	movs	r2, #1
 800db4e:	705a      	strb	r2, [r3, #1]
    }
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800db50:	4b1a      	ldr	r3, [pc, #104]	; (800dbbc <ProcessRadioTxDone+0x150>)
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	003b      	movs	r3, r7
 800db56:	605a      	str	r2, [r3, #4]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800db58:	4b10      	ldr	r3, [pc, #64]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db5a:	4a11      	ldr	r2, [pc, #68]	; (800dba0 <ProcessRadioTxDone+0x134>)
 800db5c:	589b      	ldr	r3, [r3, r2]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	003a      	movs	r2, r7
 800db62:	0011      	movs	r1, r2
 800db64:	0018      	movs	r0, r3
 800db66:	f007 fe4b 	bl	8015800 <RegionSetBandTxDone>
    // Update Aggregated last tx done time
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800db6a:	4b0c      	ldr	r3, [pc, #48]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db6c:	4a0c      	ldr	r2, [pc, #48]	; (800dba0 <ProcessRadioTxDone+0x134>)
 800db6e:	589a      	ldr	r2, [r3, r2]
 800db70:	4b12      	ldr	r3, [pc, #72]	; (800dbbc <ProcessRadioTxDone+0x150>)
 800db72:	6819      	ldr	r1, [r3, #0]
 800db74:	23e2      	movs	r3, #226	; 0xe2
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == false )
 800db7a:	4b08      	ldr	r3, [pc, #32]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db7c:	4a0c      	ldr	r2, [pc, #48]	; (800dbb0 <ProcessRadioTxDone+0x144>)
 800db7e:	5c9b      	ldrb	r3, [r3, r2]
 800db80:	2201      	movs	r2, #1
 800db82:	4053      	eors	r3, r2
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <ProcessRadioTxDone+0x126>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800db8a:	4b04      	ldr	r3, [pc, #16]	; (800db9c <ProcessRadioTxDone+0x130>)
 800db8c:	4a0c      	ldr	r2, [pc, #48]	; (800dbc0 <ProcessRadioTxDone+0x154>)
 800db8e:	2100      	movs	r1, #0
 800db90:	5499      	strb	r1, [r3, r2]
    }
}
 800db92:	46c0      	nop			; (mov r8, r8)
 800db94:	46bd      	mov	sp, r7
 800db96:	b004      	add	sp, #16
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	46c0      	nop			; (mov r8, r8)
 800db9c:	200008f0 	.word	0x200008f0
 800dba0:	00000484 	.word	0x00000484
 800dba4:	0801acec 	.word	0x0801acec
 800dba8:	20000c70 	.word	0x20000c70
 800dbac:	20000c88 	.word	0x20000c88
 800dbb0:	00000414 	.word	0x00000414
 800dbb4:	20000ce8 	.word	0x20000ce8
 800dbb8:	00000415 	.word	0x00000415
 800dbbc:	20001644 	.word	0x20001644
 800dbc0:	0000043d 	.word	0x0000043d

0800dbc4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800dbc8:	4a11      	ldr	r2, [pc, #68]	; (800dc10 <PrepareRxDoneAbort+0x4c>)
 800dbca:	23d0      	movs	r3, #208	; 0xd0
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	58d3      	ldr	r3, [r2, r3]
 800dbd0:	2280      	movs	r2, #128	; 0x80
 800dbd2:	431a      	orrs	r2, r3
 800dbd4:	0011      	movs	r1, r2
 800dbd6:	4a0e      	ldr	r2, [pc, #56]	; (800dc10 <PrepareRxDoneAbort+0x4c>)
 800dbd8:	23d0      	movs	r3, #208	; 0xd0
 800dbda:	009b      	lsls	r3, r3, #2
 800dbdc:	50d1      	str	r1, [r2, r3]

    if( MacCtx.NodeAckRequested == true )
 800dbde:	4b0c      	ldr	r3, [pc, #48]	; (800dc10 <PrepareRxDoneAbort+0x4c>)
 800dbe0:	4a0c      	ldr	r2, [pc, #48]	; (800dc14 <PrepareRxDoneAbort+0x50>)
 800dbe2:	5c9b      	ldrb	r3, [r3, r2]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d002      	beq.n	800dbee <PrepareRxDoneAbort+0x2a>
    {
        OnAckTimeoutTimerEvent( NULL );
 800dbe8:	2000      	movs	r0, #0
 800dbea:	f001 f9bb 	bl	800ef64 <OnAckTimeoutTimerEvent>
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800dbee:	4b08      	ldr	r3, [pc, #32]	; (800dc10 <PrepareRxDoneAbort+0x4c>)
 800dbf0:	4a09      	ldr	r2, [pc, #36]	; (800dc18 <PrepareRxDoneAbort+0x54>)
 800dbf2:	5c99      	ldrb	r1, [r3, r2]
 800dbf4:	2002      	movs	r0, #2
 800dbf6:	4301      	orrs	r1, r0
 800dbf8:	5499      	strb	r1, [r3, r2]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800dbfa:	4b05      	ldr	r3, [pc, #20]	; (800dc10 <PrepareRxDoneAbort+0x4c>)
 800dbfc:	4a06      	ldr	r2, [pc, #24]	; (800dc18 <PrepareRxDoneAbort+0x54>)
 800dbfe:	5c99      	ldrb	r1, [r3, r2]
 800dc00:	2020      	movs	r0, #32
 800dc02:	4301      	orrs	r1, r0
 800dc04:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800dc06:	f7ff ff15 	bl	800da34 <UpdateRxSlotIdleState>
}
 800dc0a:	46c0      	nop			; (mov r8, r8)
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	200008f0 	.word	0x200008f0
 800dc14:	00000414 	.word	0x00000414
 800dc18:	00000481 	.word	0x00000481

0800dc1c <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800dc1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc1e:	b0a7      	sub	sp, #156	; 0x9c
 800dc20:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800dc22:	2380      	movs	r3, #128	; 0x80
 800dc24:	18fb      	adds	r3, r7, r3
 800dc26:	2213      	movs	r2, #19
 800dc28:	701a      	strb	r2, [r3, #0]

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800dc2a:	4bdd      	ldr	r3, [pc, #884]	; (800dfa0 <ProcessRadioRxDone+0x384>)
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint16_t size = RxDoneParams.Size;
 800dc30:	247a      	movs	r4, #122	; 0x7a
 800dc32:	193b      	adds	r3, r7, r4
 800dc34:	4ada      	ldr	r2, [pc, #872]	; (800dfa0 <ProcessRadioRxDone+0x384>)
 800dc36:	8912      	ldrh	r2, [r2, #8]
 800dc38:	801a      	strh	r2, [r3, #0]
    int16_t rssi = RxDoneParams.Rssi;
 800dc3a:	2078      	movs	r0, #120	; 0x78
 800dc3c:	183b      	adds	r3, r7, r0
 800dc3e:	4ad8      	ldr	r2, [pc, #864]	; (800dfa0 <ProcessRadioRxDone+0x384>)
 800dc40:	8952      	ldrh	r2, [r2, #10]
 800dc42:	801a      	strh	r2, [r3, #0]
    int8_t snr = RxDoneParams.Snr;
 800dc44:	2577      	movs	r5, #119	; 0x77
 800dc46:	197b      	adds	r3, r7, r5
 800dc48:	4ad5      	ldr	r2, [pc, #852]	; (800dfa0 <ProcessRadioRxDone+0x384>)
 800dc4a:	7b12      	ldrb	r2, [r2, #12]
 800dc4c:	701a      	strb	r2, [r3, #0]

    uint8_t pktHeaderLen = 0;
 800dc4e:	2376      	movs	r3, #118	; 0x76
 800dc50:	18fb      	adds	r3, r7, r3
 800dc52:	2200      	movs	r2, #0
 800dc54:	701a      	strb	r2, [r3, #0]

    uint32_t downLinkCounter = 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	60bb      	str	r3, [r7, #8]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800dc5a:	4bd2      	ldr	r3, [pc, #840]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dc5c:	4ad2      	ldr	r2, [pc, #840]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800dc5e:	589b      	ldr	r3, [r3, r2]
 800dc60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc62:	2284      	movs	r2, #132	; 0x84
 800dc64:	18ba      	adds	r2, r7, r2
 800dc66:	6013      	str	r3, [r2, #0]
    uint8_t multicast = 0;
 800dc68:	2383      	movs	r3, #131	; 0x83
 800dc6a:	18fb      	adds	r3, r7, r3
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	701a      	strb	r2, [r3, #0]
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800dc70:	2382      	movs	r3, #130	; 0x82
 800dc72:	18fb      	adds	r3, r7, r3
 800dc74:	2204      	movs	r2, #4
 800dc76:	701a      	strb	r2, [r3, #0]
    FCntIdentifier_t fCntID;

    MacCtx.McpsConfirm.AckReceived = false;
 800dc78:	4aca      	ldr	r2, [pc, #808]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dc7a:	2388      	movs	r3, #136	; 0x88
 800dc7c:	00db      	lsls	r3, r3, #3
 800dc7e:	2100      	movs	r1, #0
 800dc80:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 800dc82:	4bc8      	ldr	r3, [pc, #800]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dc84:	183a      	adds	r2, r7, r0
 800dc86:	49c9      	ldr	r1, [pc, #804]	; (800dfac <ProcessRadioRxDone+0x390>)
 800dc88:	8812      	ldrh	r2, [r2, #0]
 800dc8a:	525a      	strh	r2, [r3, r1]
    MacCtx.McpsIndication.Snr = snr;
 800dc8c:	4bc5      	ldr	r3, [pc, #788]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dc8e:	197a      	adds	r2, r7, r5
 800dc90:	49c7      	ldr	r1, [pc, #796]	; (800dfb0 <ProcessRadioRxDone+0x394>)
 800dc92:	7812      	ldrb	r2, [r2, #0]
 800dc94:	545a      	strb	r2, [r3, r1]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800dc96:	4ac3      	ldr	r2, [pc, #780]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dc98:	2390      	movs	r3, #144	; 0x90
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	5cd1      	ldrb	r1, [r2, r3]
 800dc9e:	4bc1      	ldr	r3, [pc, #772]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dca0:	4ac4      	ldr	r2, [pc, #784]	; (800dfb4 <ProcessRadioRxDone+0x398>)
 800dca2:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Port = 0;
 800dca4:	4bbf      	ldr	r3, [pc, #764]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dca6:	4ac4      	ldr	r2, [pc, #784]	; (800dfb8 <ProcessRadioRxDone+0x39c>)
 800dca8:	2100      	movs	r1, #0
 800dcaa:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Multicast = 0;
 800dcac:	4bbd      	ldr	r3, [pc, #756]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcae:	4ac3      	ldr	r2, [pc, #780]	; (800dfbc <ProcessRadioRxDone+0x3a0>)
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800dcb4:	4bbb      	ldr	r3, [pc, #748]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcb6:	4ac2      	ldr	r2, [pc, #776]	; (800dfc0 <ProcessRadioRxDone+0x3a4>)
 800dcb8:	2100      	movs	r1, #0
 800dcba:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800dcbc:	4bb9      	ldr	r3, [pc, #740]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcbe:	4ac1      	ldr	r2, [pc, #772]	; (800dfc4 <ProcessRadioRxDone+0x3a8>)
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800dcc4:	4ab7      	ldr	r2, [pc, #732]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcc6:	2385      	movs	r3, #133	; 0x85
 800dcc8:	00db      	lsls	r3, r3, #3
 800dcca:	2100      	movs	r1, #0
 800dccc:	54d1      	strb	r1, [r2, r3]
    MacCtx.McpsIndication.RxData = false;
 800dcce:	4bb5      	ldr	r3, [pc, #724]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcd0:	4abd      	ldr	r2, [pc, #756]	; (800dfc8 <ProcessRadioRxDone+0x3ac>)
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800dcd6:	4bb3      	ldr	r3, [pc, #716]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcd8:	4abc      	ldr	r2, [pc, #752]	; (800dfcc <ProcessRadioRxDone+0x3b0>)
 800dcda:	2100      	movs	r1, #0
 800dcdc:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dcde:	4ab1      	ldr	r2, [pc, #708]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dce0:	2386      	movs	r3, #134	; 0x86
 800dce2:	00db      	lsls	r3, r3, #3
 800dce4:	2100      	movs	r1, #0
 800dce6:	50d1      	str	r1, [r2, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dce8:	4bae      	ldr	r3, [pc, #696]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcea:	4ab9      	ldr	r2, [pc, #740]	; (800dfd0 <ProcessRadioRxDone+0x3b4>)
 800dcec:	2100      	movs	r1, #0
 800dcee:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800dcf0:	4bac      	ldr	r3, [pc, #688]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcf2:	4ab8      	ldr	r2, [pc, #736]	; (800dfd4 <ProcessRadioRxDone+0x3b8>)
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	5099      	str	r1, [r3, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dcf8:	4aaa      	ldr	r2, [pc, #680]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dcfa:	2387      	movs	r3, #135	; 0x87
 800dcfc:	00db      	lsls	r3, r3, #3
 800dcfe:	2100      	movs	r1, #0
 800dd00:	54d1      	strb	r1, [r2, r3]

    Radio.Sleep( );
 800dd02:	4bb5      	ldr	r3, [pc, #724]	; (800dfd8 <ProcessRadioRxDone+0x3bc>)
 800dd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd06:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800dd08:	4bb4      	ldr	r3, [pc, #720]	; (800dfdc <ProcessRadioRxDone+0x3c0>)
 800dd0a:	0018      	movs	r0, r3
 800dd0c:	f00b fb28 	bl	8019360 <TimerStop>

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dd10:	193b      	adds	r3, r7, r4
 800dd12:	881a      	ldrh	r2, [r3, #0]
 800dd14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd16:	0011      	movs	r1, r2
 800dd18:	0018      	movs	r0, r3
 800dd1a:	f005 fabc 	bl	8013296 <LoRaMacClassBRxBeacon>
 800dd1e:	1e03      	subs	r3, r0, #0
 800dd20:	d00e      	beq.n	800dd40 <ProcessRadioRxDone+0x124>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dd22:	4ba0      	ldr	r3, [pc, #640]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dd24:	2278      	movs	r2, #120	; 0x78
 800dd26:	18ba      	adds	r2, r7, r2
 800dd28:	49ad      	ldr	r1, [pc, #692]	; (800dfe0 <ProcessRadioRxDone+0x3c4>)
 800dd2a:	8812      	ldrh	r2, [r2, #0]
 800dd2c:	525a      	strh	r2, [r3, r1]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dd2e:	4a9d      	ldr	r2, [pc, #628]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dd30:	2377      	movs	r3, #119	; 0x77
 800dd32:	18f9      	adds	r1, r7, r3
 800dd34:	238f      	movs	r3, #143	; 0x8f
 800dd36:	00db      	lsls	r3, r3, #3
 800dd38:	7809      	ldrb	r1, [r1, #0]
 800dd3a:	54d1      	strb	r1, [r2, r3]
        return;
 800dd3c:	f000 fc84 	bl	800e648 <ProcessRadioRxDone+0xa2c>
    }
    // Check if we expect a ping or a multicast slot.
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800dd40:	4b98      	ldr	r3, [pc, #608]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dd42:	4a99      	ldr	r2, [pc, #612]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800dd44:	589b      	ldr	r3, [r3, r2]
 800dd46:	22f0      	movs	r2, #240	; 0xf0
 800dd48:	5c9b      	ldrb	r3, [r3, r2]
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d11c      	bne.n	800dd88 <ProcessRadioRxDone+0x16c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dd4e:	f005 fab4 	bl	80132ba <LoRaMacClassBIsPingExpected>
 800dd52:	1e03      	subs	r3, r0, #0
 800dd54:	d00a      	beq.n	800dd6c <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd56:	2000      	movs	r0, #0
 800dd58:	f005 fa6b 	bl	8013232 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dd5c:	2000      	movs	r0, #0
 800dd5e:	f005 fa8a 	bl	8013276 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dd62:	4b90      	ldr	r3, [pc, #576]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dd64:	4a93      	ldr	r2, [pc, #588]	; (800dfb4 <ProcessRadioRxDone+0x398>)
 800dd66:	2104      	movs	r1, #4
 800dd68:	5499      	strb	r1, [r3, r2]
 800dd6a:	e00d      	b.n	800dd88 <ProcessRadioRxDone+0x16c>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dd6c:	f005 faab 	bl	80132c6 <LoRaMacClassBIsMulticastExpected>
 800dd70:	1e03      	subs	r3, r0, #0
 800dd72:	d009      	beq.n	800dd88 <ProcessRadioRxDone+0x16c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd74:	2000      	movs	r0, #0
 800dd76:	f005 fa66 	bl	8013246 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	f005 fa83 	bl	8013286 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dd80:	4b88      	ldr	r3, [pc, #544]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dd82:	4a8c      	ldr	r2, [pc, #560]	; (800dfb4 <ProcessRadioRxDone+0x398>)
 800dd84:	2105      	movs	r1, #5
 800dd86:	5499      	strb	r1, [r3, r2]
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dd88:	2276      	movs	r2, #118	; 0x76
 800dd8a:	18bb      	adds	r3, r7, r2
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	18ba      	adds	r2, r7, r2
 800dd90:	1c59      	adds	r1, r3, #1
 800dd92:	7011      	strb	r1, [r2, #0]
 800dd94:	001a      	movs	r2, r3
 800dd96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd98:	189b      	adds	r3, r3, r2
 800dd9a:	781a      	ldrb	r2, [r3, #0]
 800dd9c:	2174      	movs	r1, #116	; 0x74
 800dd9e:	187b      	adds	r3, r7, r1
 800dda0:	701a      	strb	r2, [r3, #0]

    switch( macHdr.Bits.MType )
 800dda2:	187b      	adds	r3, r7, r1
 800dda4:	781b      	ldrb	r3, [r3, #0]
 800dda6:	061b      	lsls	r3, r3, #24
 800dda8:	0f5b      	lsrs	r3, r3, #29
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	2b03      	cmp	r3, #3
 800ddae:	d100      	bne.n	800ddb2 <ProcessRadioRxDone+0x196>
 800ddb0:	e11e      	b.n	800dff0 <ProcessRadioRxDone+0x3d4>
 800ddb2:	dc03      	bgt.n	800ddbc <ProcessRadioRxDone+0x1a0>
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d00a      	beq.n	800ddce <ProcessRadioRxDone+0x1b2>
 800ddb8:	f000 fc1d 	bl	800e5f6 <ProcessRadioRxDone+0x9da>
 800ddbc:	2b05      	cmp	r3, #5
 800ddbe:	d100      	bne.n	800ddc2 <ProcessRadioRxDone+0x1a6>
 800ddc0:	e112      	b.n	800dfe8 <ProcessRadioRxDone+0x3cc>
 800ddc2:	2b07      	cmp	r3, #7
 800ddc4:	d101      	bne.n	800ddca <ProcessRadioRxDone+0x1ae>
 800ddc6:	f000 fbe7 	bl	800e598 <ProcessRadioRxDone+0x97c>
 800ddca:	f000 fc14 	bl	800e5f6 <ProcessRadioRxDone+0x9da>
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            macMsgJoinAccept.Buffer = payload;
 800ddce:	210c      	movs	r1, #12
 800ddd0:	187b      	adds	r3, r7, r1
 800ddd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ddd4:	601a      	str	r2, [r3, #0]
            macMsgJoinAccept.BufSize = size;
 800ddd6:	237a      	movs	r3, #122	; 0x7a
 800ddd8:	18fb      	adds	r3, r7, r3
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	187b      	adds	r3, r7, r1
 800dde0:	711a      	strb	r2, [r3, #4]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800dde2:	4b70      	ldr	r3, [pc, #448]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dde4:	4a70      	ldr	r2, [pc, #448]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800dde6:	589a      	ldr	r2, [r3, r2]
 800dde8:	23ea      	movs	r3, #234	; 0xea
 800ddea:	005b      	lsls	r3, r3, #1
 800ddec:	5cd3      	ldrb	r3, [r2, r3]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d007      	beq.n	800de02 <ProcessRadioRxDone+0x1e6>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ddf2:	4b6c      	ldr	r3, [pc, #432]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800ddf4:	4a7b      	ldr	r2, [pc, #492]	; (800dfe4 <ProcessRadioRxDone+0x3c8>)
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800ddfa:	f7ff fee3 	bl	800dbc4 <PrepareRxDoneAbort>
                return;
 800ddfe:	f000 fc23 	bl	800e648 <ProcessRadioRxDone+0xa2c>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800de02:	f7ff fcc9 	bl	800d798 <SecureElementGetJoinEui>
 800de06:	0001      	movs	r1, r0
 800de08:	2580      	movs	r5, #128	; 0x80
 800de0a:	197c      	adds	r4, r7, r5
 800de0c:	230c      	movs	r3, #12
 800de0e:	18fb      	adds	r3, r7, r3
 800de10:	001a      	movs	r2, r3
 800de12:	20ff      	movs	r0, #255	; 0xff
 800de14:	f006 fd30 	bl	8014878 <LoRaMacCryptoHandleJoinAccept>
 800de18:	0003      	movs	r3, r0
 800de1a:	7023      	strb	r3, [r4, #0]

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800de1c:	197b      	adds	r3, r7, r5
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d000      	beq.n	800de26 <ProcessRadioRxDone+0x20a>
 800de24:	e0b0      	b.n	800df88 <ProcessRadioRxDone+0x36c>
            {
                // Network ID
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800de26:	240c      	movs	r4, #12
 800de28:	193b      	adds	r3, r7, r4
 800de2a:	7a59      	ldrb	r1, [r3, #9]
 800de2c:	4b5d      	ldr	r3, [pc, #372]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de2e:	4a5e      	ldr	r2, [pc, #376]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de30:	589b      	ldr	r3, [r3, r2]
 800de32:	000a      	movs	r2, r1
 800de34:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800de36:	4b5b      	ldr	r3, [pc, #364]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de38:	4a5b      	ldr	r2, [pc, #364]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de3a:	589b      	ldr	r3, [r3, r2]
 800de3c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800de3e:	193b      	adds	r3, r7, r4
 800de40:	7a9b      	ldrb	r3, [r3, #10]
 800de42:	021a      	lsls	r2, r3, #8
 800de44:	4b57      	ldr	r3, [pc, #348]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de46:	4858      	ldr	r0, [pc, #352]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de48:	581b      	ldr	r3, [r3, r0]
 800de4a:	430a      	orrs	r2, r1
 800de4c:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800de4e:	4b55      	ldr	r3, [pc, #340]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de50:	4a55      	ldr	r2, [pc, #340]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de52:	589b      	ldr	r3, [r3, r2]
 800de54:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800de56:	193b      	adds	r3, r7, r4
 800de58:	7adb      	ldrb	r3, [r3, #11]
 800de5a:	041a      	lsls	r2, r3, #16
 800de5c:	4b51      	ldr	r3, [pc, #324]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de5e:	4852      	ldr	r0, [pc, #328]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de60:	581b      	ldr	r3, [r3, r0]
 800de62:	430a      	orrs	r2, r1
 800de64:	649a      	str	r2, [r3, #72]	; 0x48

                // Device Address
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800de66:	4b4f      	ldr	r3, [pc, #316]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de68:	4a4f      	ldr	r2, [pc, #316]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de6a:	589b      	ldr	r3, [r3, r2]
 800de6c:	0020      	movs	r0, r4
 800de6e:	183a      	adds	r2, r7, r0
 800de70:	68d2      	ldr	r2, [r2, #12]
 800de72:	64da      	str	r2, [r3, #76]	; 0x4c

                // DLSettings
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800de74:	183b      	adds	r3, r7, r0
 800de76:	7c1b      	ldrb	r3, [r3, #16]
 800de78:	065b      	lsls	r3, r3, #25
 800de7a:	0f5b      	lsrs	r3, r3, #29
 800de7c:	b2d9      	uxtb	r1, r3
 800de7e:	4b49      	ldr	r3, [pc, #292]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de80:	4a49      	ldr	r2, [pc, #292]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de82:	589a      	ldr	r2, [r3, r2]
 800de84:	231a      	movs	r3, #26
 800de86:	33ff      	adds	r3, #255	; 0xff
 800de88:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800de8a:	183b      	adds	r3, r7, r0
 800de8c:	7c1b      	ldrb	r3, [r3, #16]
 800de8e:	071b      	lsls	r3, r3, #28
 800de90:	0f1b      	lsrs	r3, r3, #28
 800de92:	b2d9      	uxtb	r1, r3
 800de94:	4b43      	ldr	r3, [pc, #268]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800de96:	4a44      	ldr	r2, [pc, #272]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800de98:	589a      	ldr	r2, [r3, r2]
 800de9a:	2390      	movs	r3, #144	; 0x90
 800de9c:	005b      	lsls	r3, r3, #1
 800de9e:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800dea0:	183b      	adds	r3, r7, r0
 800dea2:	7c1b      	ldrb	r3, [r3, #16]
 800dea4:	071b      	lsls	r3, r3, #28
 800dea6:	0f1b      	lsrs	r3, r3, #28
 800dea8:	b2d9      	uxtb	r1, r3
 800deaa:	4b3e      	ldr	r3, [pc, #248]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800deac:	4a3e      	ldr	r2, [pc, #248]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800deae:	589a      	ldr	r2, [r3, r2]
 800deb0:	2394      	movs	r3, #148	; 0x94
 800deb2:	005b      	lsls	r3, r3, #1
 800deb4:	54d1      	strb	r1, [r2, r3]

                // RxDelay
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800deb6:	183b      	adds	r3, r7, r0
 800deb8:	7c59      	ldrb	r1, [r3, #17]
 800deba:	4b3a      	ldr	r3, [pc, #232]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800debc:	4a3a      	ldr	r2, [pc, #232]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800debe:	589a      	ldr	r2, [r3, r2]
 800dec0:	2384      	movs	r3, #132	; 0x84
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	50d1      	str	r1, [r2, r3]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800dec6:	4b37      	ldr	r3, [pc, #220]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dec8:	4a37      	ldr	r2, [pc, #220]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800deca:	589a      	ldr	r2, [r3, r2]
 800decc:	2384      	movs	r3, #132	; 0x84
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	58d3      	ldr	r3, [r2, r3]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d106      	bne.n	800dee4 <ProcessRadioRxDone+0x2c8>
                {
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800ded6:	4b33      	ldr	r3, [pc, #204]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800ded8:	4a33      	ldr	r2, [pc, #204]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800deda:	589a      	ldr	r2, [r3, r2]
 800dedc:	2384      	movs	r3, #132	; 0x84
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	2101      	movs	r1, #1
 800dee2:	50d1      	str	r1, [r2, r3]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800dee4:	4b2f      	ldr	r3, [pc, #188]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800dee6:	4a30      	ldr	r2, [pc, #192]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800dee8:	589a      	ldr	r2, [r3, r2]
 800deea:	2384      	movs	r3, #132	; 0x84
 800deec:	005b      	lsls	r3, r3, #1
 800deee:	58d2      	ldr	r2, [r2, r3]
 800def0:	4b2c      	ldr	r3, [pc, #176]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800def2:	492d      	ldr	r1, [pc, #180]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800def4:	5859      	ldr	r1, [r3, r1]
 800def6:	0013      	movs	r3, r2
 800def8:	015b      	lsls	r3, r3, #5
 800defa:	1a9b      	subs	r3, r3, r2
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	189b      	adds	r3, r3, r2
 800df00:	00db      	lsls	r3, r3, #3
 800df02:	001a      	movs	r2, r3
 800df04:	2384      	movs	r3, #132	; 0x84
 800df06:	005b      	lsls	r3, r3, #1
 800df08:	50ca      	str	r2, [r1, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800df0a:	4b26      	ldr	r3, [pc, #152]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800df0c:	4a26      	ldr	r2, [pc, #152]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800df0e:	589a      	ldr	r2, [r3, r2]
 800df10:	2384      	movs	r3, #132	; 0x84
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	58d3      	ldr	r3, [r2, r3]
 800df16:	4a23      	ldr	r2, [pc, #140]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800df18:	4923      	ldr	r1, [pc, #140]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800df1a:	5852      	ldr	r2, [r2, r1]
 800df1c:	21fa      	movs	r1, #250	; 0xfa
 800df1e:	0089      	lsls	r1, r1, #2
 800df20:	1859      	adds	r1, r3, r1
 800df22:	2386      	movs	r3, #134	; 0x86
 800df24:	005b      	lsls	r3, r3, #1
 800df26:	50d1      	str	r1, [r2, r3]

                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800df28:	4b1e      	ldr	r3, [pc, #120]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800df2a:	4a1f      	ldr	r2, [pc, #124]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800df2c:	589a      	ldr	r2, [r3, r2]
 800df2e:	23e9      	movs	r3, #233	; 0xe9
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	2100      	movs	r1, #0
 800df34:	54d1      	strb	r1, [r2, r3]

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800df36:	216c      	movs	r1, #108	; 0x6c
 800df38:	187b      	adds	r3, r7, r1
 800df3a:	220c      	movs	r2, #12
 800df3c:	18ba      	adds	r2, r7, r2
 800df3e:	3212      	adds	r2, #18
 800df40:	601a      	str	r2, [r3, #0]
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800df42:	237a      	movs	r3, #122	; 0x7a
 800df44:	18fb      	adds	r3, r7, r3
 800df46:	881b      	ldrh	r3, [r3, #0]
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	3b11      	subs	r3, #17
 800df4c:	b2da      	uxtb	r2, r3
 800df4e:	187b      	adds	r3, r7, r1
 800df50:	711a      	strb	r2, [r3, #4]

                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800df52:	4b14      	ldr	r3, [pc, #80]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800df54:	4a14      	ldr	r2, [pc, #80]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800df56:	589b      	ldr	r3, [r3, r2]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	187a      	adds	r2, r7, r1
 800df5c:	0011      	movs	r1, r2
 800df5e:	0018      	movs	r0, r3
 800df60:	f007 fcaa 	bl	80158b8 <RegionApplyCFList>

                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800df64:	4b0f      	ldr	r3, [pc, #60]	; (800dfa4 <ProcessRadioRxDone+0x388>)
 800df66:	4a10      	ldr	r2, [pc, #64]	; (800dfa8 <ProcessRadioRxDone+0x38c>)
 800df68:	589a      	ldr	r2, [r3, r2]
 800df6a:	23ea      	movs	r3, #234	; 0xea
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	2102      	movs	r1, #2
 800df70:	54d1      	strb	r1, [r2, r3]

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800df72:	2000      	movs	r0, #0
 800df74:	f005 fe50 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 800df78:	1e03      	subs	r3, r0, #0
 800df7a:	d100      	bne.n	800df7e <ProcessRadioRxDone+0x362>
 800df7c:	e342      	b.n	800e604 <ProcessRadioRxDone+0x9e8>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800df7e:	2100      	movs	r1, #0
 800df80:	2000      	movs	r0, #0
 800df82:	f005 fdc5 	bl	8013b10 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
                }
            }
            break;
 800df86:	e33d      	b.n	800e604 <ProcessRadioRxDone+0x9e8>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800df88:	2000      	movs	r0, #0
 800df8a:	f005 fe45 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 800df8e:	1e03      	subs	r3, r0, #0
 800df90:	d100      	bne.n	800df94 <ProcessRadioRxDone+0x378>
 800df92:	e337      	b.n	800e604 <ProcessRadioRxDone+0x9e8>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800df94:	2100      	movs	r1, #0
 800df96:	2007      	movs	r0, #7
 800df98:	f005 fdba 	bl	8013b10 <LoRaMacConfirmQueueSetStatus>
            break;
 800df9c:	e332      	b.n	800e604 <ProcessRadioRxDone+0x9e8>
 800df9e:	46c0      	nop			; (mov r8, r8)
 800dfa0:	20001648 	.word	0x20001648
 800dfa4:	200008f0 	.word	0x200008f0
 800dfa8:	00000484 	.word	0x00000484
 800dfac:	0000042a 	.word	0x0000042a
 800dfb0:	0000042c 	.word	0x0000042c
 800dfb4:	0000042d 	.word	0x0000042d
 800dfb8:	0000041f 	.word	0x0000041f
 800dfbc:	0000041e 	.word	0x0000041e
 800dfc0:	00000421 	.word	0x00000421
 800dfc4:	00000424 	.word	0x00000424
 800dfc8:	00000429 	.word	0x00000429
 800dfcc:	0000042e 	.word	0x0000042e
 800dfd0:	0000041c 	.word	0x0000041c
 800dfd4:	00000434 	.word	0x00000434
 800dfd8:	0801acec 	.word	0x0801acec
 800dfdc:	20000c88 	.word	0x20000c88
 800dfe0:	00000476 	.word	0x00000476
 800dfe4:	0000041d 	.word	0x0000041d
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800dfe8:	4bcc      	ldr	r3, [pc, #816]	; (800e31c <ProcessRadioRxDone+0x700>)
 800dfea:	4acd      	ldr	r2, [pc, #820]	; (800e320 <ProcessRadioRxDone+0x704>)
 800dfec:	2101      	movs	r1, #1
 800dfee:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800dff0:	4bca      	ldr	r3, [pc, #808]	; (800e31c <ProcessRadioRxDone+0x700>)
 800dff2:	4acc      	ldr	r2, [pc, #816]	; (800e324 <ProcessRadioRxDone+0x708>)
 800dff4:	589a      	ldr	r2, [r3, r2]
 800dff6:	232e      	movs	r3, #46	; 0x2e
 800dff8:	33ff      	adds	r3, #255	; 0xff
 800dffa:	5cd2      	ldrb	r2, [r2, r3]
 800dffc:	2168      	movs	r1, #104	; 0x68
 800dffe:	187b      	adds	r3, r7, r1
 800e000:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e002:	4ac6      	ldr	r2, [pc, #792]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e004:	2384      	movs	r3, #132	; 0x84
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	5cd3      	ldrb	r3, [r2, r3]
 800e00a:	b25a      	sxtb	r2, r3
 800e00c:	187b      	adds	r3, r7, r1
 800e00e:	705a      	strb	r2, [r3, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e010:	187b      	adds	r3, r7, r1
 800e012:	220d      	movs	r2, #13
 800e014:	701a      	strb	r2, [r3, #0]

            // Get the maximum payload length
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800e016:	4bc1      	ldr	r3, [pc, #772]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e018:	4ac2      	ldr	r2, [pc, #776]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e01a:	589a      	ldr	r2, [r3, r2]
 800e01c:	2340      	movs	r3, #64	; 0x40
 800e01e:	33ff      	adds	r3, #255	; 0xff
 800e020:	5cd3      	ldrb	r3, [r2, r3]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d003      	beq.n	800e02e <ProcessRadioRxDone+0x412>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e026:	2368      	movs	r3, #104	; 0x68
 800e028:	18fb      	adds	r3, r7, r3
 800e02a:	220e      	movs	r2, #14
 800e02c:	701a      	strb	r2, [r3, #0]
            }
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e02e:	4bbb      	ldr	r3, [pc, #748]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e030:	4abc      	ldr	r2, [pc, #752]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e032:	589b      	ldr	r3, [r3, r2]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	2268      	movs	r2, #104	; 0x68
 800e038:	18ba      	adds	r2, r7, r2
 800e03a:	0011      	movs	r1, r2
 800e03c:	0018      	movs	r0, r3
 800e03e:	f007 fbb7 	bl	80157b0 <RegionGetPhyParam>
 800e042:	0003      	movs	r3, r0
 800e044:	001a      	movs	r2, r3
 800e046:	2364      	movs	r3, #100	; 0x64
 800e048:	18fb      	adds	r3, r7, r3
 800e04a:	601a      	str	r2, [r3, #0]
            if( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORA_MAC_FRMPAYLOAD_OVERHEAD ) ) > ( int16_t )phyParam.Value )
 800e04c:	237a      	movs	r3, #122	; 0x7a
 800e04e:	18fb      	adds	r3, r7, r3
 800e050:	881b      	ldrh	r3, [r3, #0]
 800e052:	3b0d      	subs	r3, #13
 800e054:	b29b      	uxth	r3, r3
 800e056:	b21b      	sxth	r3, r3
 800e058:	1c1a      	adds	r2, r3, #0
 800e05a:	b213      	sxth	r3, r2
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	da01      	bge.n	800e064 <ProcessRadioRxDone+0x448>
 800e060:	2300      	movs	r3, #0
 800e062:	1c1a      	adds	r2, r3, #0
 800e064:	b212      	sxth	r2, r2
 800e066:	2364      	movs	r3, #100	; 0x64
 800e068:	18fb      	adds	r3, r7, r3
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	b21b      	sxth	r3, r3
 800e06e:	429a      	cmp	r2, r3
 800e070:	dd06      	ble.n	800e080 <ProcessRadioRxDone+0x464>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e072:	4baa      	ldr	r3, [pc, #680]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e074:	4aac      	ldr	r2, [pc, #688]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e076:	2101      	movs	r1, #1
 800e078:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800e07a:	f7ff fda3 	bl	800dbc4 <PrepareRxDoneAbort>
                return;
 800e07e:	e2e3      	b.n	800e648 <ProcessRadioRxDone+0xa2c>
            }
            macMsgData.Buffer = payload;
 800e080:	2134      	movs	r1, #52	; 0x34
 800e082:	187b      	adds	r3, r7, r1
 800e084:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e086:	601a      	str	r2, [r3, #0]
            macMsgData.BufSize = size;
 800e088:	237a      	movs	r3, #122	; 0x7a
 800e08a:	18fb      	adds	r3, r7, r3
 800e08c:	881b      	ldrh	r3, [r3, #0]
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	187b      	adds	r3, r7, r1
 800e092:	711a      	strb	r2, [r3, #4]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e094:	187b      	adds	r3, r7, r1
 800e096:	4aa5      	ldr	r2, [pc, #660]	; (800e32c <ProcessRadioRxDone+0x710>)
 800e098:	625a      	str	r2, [r3, #36]	; 0x24
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e09a:	0008      	movs	r0, r1
 800e09c:	187b      	adds	r3, r7, r1
 800e09e:	2228      	movs	r2, #40	; 0x28
 800e0a0:	21ff      	movs	r1, #255	; 0xff
 800e0a2:	5499      	strb	r1, [r3, r2]

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e0a4:	183b      	adds	r3, r7, r0
 800e0a6:	0018      	movs	r0, r3
 800e0a8:	f007 f897 	bl	80151da <LoRaMacParserData>
 800e0ac:	1e03      	subs	r3, r0, #0
 800e0ae:	d006      	beq.n	800e0be <ProcessRadioRxDone+0x4a2>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0b0:	4b9a      	ldr	r3, [pc, #616]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e0b2:	4a9d      	ldr	r2, [pc, #628]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e0b4:	2101      	movs	r1, #1
 800e0b6:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800e0b8:	f7ff fd84 	bl	800dbc4 <PrepareRxDoneAbort>
                return;
 800e0bc:	e2c4      	b.n	800e648 <ProcessRadioRxDone+0xa2c>
            }

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e0be:	2034      	movs	r0, #52	; 0x34
 800e0c0:	183b      	adds	r3, r7, r0
 800e0c2:	689a      	ldr	r2, [r3, #8]
 800e0c4:	4b95      	ldr	r3, [pc, #596]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e0c6:	499a      	ldr	r1, [pc, #616]	; (800e330 <ProcessRadioRxDone+0x714>)
 800e0c8:	505a      	str	r2, [r3, r1]

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e0ca:	1dba      	adds	r2, r7, #6
 800e0cc:	183b      	adds	r3, r7, r0
 800e0ce:	0011      	movs	r1, r2
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	f003 f849 	bl	8011168 <DetermineFrameType>
 800e0d6:	1e03      	subs	r3, r0, #0
 800e0d8:	d006      	beq.n	800e0e8 <ProcessRadioRxDone+0x4cc>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e0da:	4b90      	ldr	r3, [pc, #576]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e0dc:	4a92      	ldr	r2, [pc, #584]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e0de:	2101      	movs	r1, #1
 800e0e0:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 800e0e2:	f7ff fd6f 	bl	800dbc4 <PrepareRxDoneAbort>
                return;
 800e0e6:	e2af      	b.n	800e648 <ProcessRadioRxDone+0xa2c>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e0e8:	2383      	movs	r3, #131	; 0x83
 800e0ea:	18fb      	adds	r3, r7, r3
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	701a      	strb	r2, [r3, #0]
            downLinkCounter = 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e0f4:	2381      	movs	r3, #129	; 0x81
 800e0f6:	18fb      	adds	r3, r7, r3
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	701a      	strb	r2, [r3, #0]
 800e0fc:	e066      	b.n	800e1cc <ProcessRadioRxDone+0x5b0>
            {
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e0fe:	4b87      	ldr	r3, [pc, #540]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e100:	4a88      	ldr	r2, [pc, #544]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e102:	5899      	ldr	r1, [r3, r2]
 800e104:	2381      	movs	r3, #129	; 0x81
 800e106:	18fb      	adds	r3, r7, r3
 800e108:	781a      	ldrb	r2, [r3, #0]
 800e10a:	0013      	movs	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	189b      	adds	r3, r3, r2
 800e110:	00db      	lsls	r3, r3, #3
 800e112:	18cb      	adds	r3, r1, r3
 800e114:	3354      	adds	r3, #84	; 0x54
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	2334      	movs	r3, #52	; 0x34
 800e11a:	18fb      	adds	r3, r7, r3
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	429a      	cmp	r2, r3
 800e120:	d14e      	bne.n	800e1c0 <ProcessRadioRxDone+0x5a4>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e122:	4b7e      	ldr	r3, [pc, #504]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e124:	4a7f      	ldr	r2, [pc, #508]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e126:	5899      	ldr	r1, [r3, r2]
 800e128:	2381      	movs	r3, #129	; 0x81
 800e12a:	18fb      	adds	r3, r7, r3
 800e12c:	781a      	ldrb	r2, [r3, #0]
 800e12e:	2051      	movs	r0, #81	; 0x51
 800e130:	0013      	movs	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	189b      	adds	r3, r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	18cb      	adds	r3, r1, r3
 800e13a:	181b      	adds	r3, r3, r0
 800e13c:	781b      	ldrb	r3, [r3, #0]
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d03e      	beq.n	800e1c0 <ProcessRadioRxDone+0x5a4>
                {
                    multicast = 1;
 800e142:	2383      	movs	r3, #131	; 0x83
 800e144:	18fb      	adds	r3, r7, r3
 800e146:	2201      	movs	r2, #1
 800e148:	701a      	strb	r2, [r3, #0]
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800e14a:	4b74      	ldr	r3, [pc, #464]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e14c:	4a75      	ldr	r2, [pc, #468]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e14e:	5898      	ldr	r0, [r3, r2]
 800e150:	2581      	movs	r5, #129	; 0x81
 800e152:	197b      	adds	r3, r7, r5
 800e154:	781a      	ldrb	r2, [r3, #0]
 800e156:	2382      	movs	r3, #130	; 0x82
 800e158:	18f9      	adds	r1, r7, r3
 800e15a:	2452      	movs	r4, #82	; 0x52
 800e15c:	0013      	movs	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	189b      	adds	r3, r3, r2
 800e162:	00db      	lsls	r3, r3, #3
 800e164:	18c3      	adds	r3, r0, r3
 800e166:	191b      	adds	r3, r3, r4
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	700b      	strb	r3, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800e16c:	4b6b      	ldr	r3, [pc, #428]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e16e:	4a6d      	ldr	r2, [pc, #436]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e170:	5899      	ldr	r1, [r3, r2]
 800e172:	0028      	movs	r0, r5
 800e174:	183b      	adds	r3, r7, r0
 800e176:	781a      	ldrb	r2, [r3, #0]
 800e178:	0013      	movs	r3, r2
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	189b      	adds	r3, r3, r2
 800e17e:	00db      	lsls	r3, r3, #3
 800e180:	18cb      	adds	r3, r1, r3
 800e182:	336c      	adds	r3, #108	; 0x6c
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	60bb      	str	r3, [r7, #8]
                    address = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address;
 800e18a:	4b64      	ldr	r3, [pc, #400]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e18c:	4a65      	ldr	r2, [pc, #404]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e18e:	5899      	ldr	r1, [r3, r2]
 800e190:	183b      	adds	r3, r7, r0
 800e192:	781a      	ldrb	r2, [r3, #0]
 800e194:	0013      	movs	r3, r2
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	189b      	adds	r3, r3, r2
 800e19a:	00db      	lsls	r3, r3, #3
 800e19c:	18cb      	adds	r3, r1, r3
 800e19e:	3354      	adds	r3, #84	; 0x54
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2284      	movs	r2, #132	; 0x84
 800e1a4:	18ba      	adds	r2, r7, r2
 800e1a6:	6013      	str	r3, [r2, #0]
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800e1a8:	4b5c      	ldr	r3, [pc, #368]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e1aa:	4a5e      	ldr	r2, [pc, #376]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e1ac:	589b      	ldr	r3, [r3, r2]
 800e1ae:	22f0      	movs	r2, #240	; 0xf0
 800e1b0:	5c9b      	ldrb	r3, [r3, r2]
 800e1b2:	2b02      	cmp	r3, #2
 800e1b4:	d110      	bne.n	800e1d8 <ProcessRadioRxDone+0x5bc>
                    {
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e1b6:	4b59      	ldr	r3, [pc, #356]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e1b8:	4a5e      	ldr	r2, [pc, #376]	; (800e334 <ProcessRadioRxDone+0x718>)
 800e1ba:	2103      	movs	r1, #3
 800e1bc:	5499      	strb	r1, [r3, r2]
                    }
                    break;
 800e1be:	e00b      	b.n	800e1d8 <ProcessRadioRxDone+0x5bc>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e1c0:	2181      	movs	r1, #129	; 0x81
 800e1c2:	187b      	adds	r3, r7, r1
 800e1c4:	781a      	ldrb	r2, [r3, #0]
 800e1c6:	187b      	adds	r3, r7, r1
 800e1c8:	3201      	adds	r2, #1
 800e1ca:	701a      	strb	r2, [r3, #0]
 800e1cc:	2381      	movs	r3, #129	; 0x81
 800e1ce:	18fb      	adds	r3, r7, r3
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	d993      	bls.n	800e0fe <ProcessRadioRxDone+0x4e2>
 800e1d6:	e000      	b.n	800e1da <ProcessRadioRxDone+0x5be>
                    break;
 800e1d8:	46c0      	nop			; (mov r8, r8)
                }
            }

            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800e1da:	2168      	movs	r1, #104	; 0x68
 800e1dc:	187b      	adds	r3, r7, r1
 800e1de:	2215      	movs	r2, #21
 800e1e0:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800e1e2:	4b4e      	ldr	r3, [pc, #312]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e1e4:	4a4f      	ldr	r2, [pc, #316]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e1e6:	589b      	ldr	r3, [r3, r2]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	187a      	adds	r2, r7, r1
 800e1ec:	0011      	movs	r1, r2
 800e1ee:	0018      	movs	r0, r3
 800e1f0:	f007 fade 	bl	80157b0 <RegionGetPhyParam>
 800e1f4:	0003      	movs	r3, r0
 800e1f6:	001a      	movs	r2, r3
 800e1f8:	2064      	movs	r0, #100	; 0x64
 800e1fa:	183b      	adds	r3, r7, r0
 800e1fc:	601a      	str	r2, [r3, #0]

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800e1fe:	1dbb      	adds	r3, r7, #6
 800e200:	781d      	ldrb	r5, [r3, #0]
 800e202:	4b46      	ldr	r3, [pc, #280]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e204:	4a47      	ldr	r2, [pc, #284]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e206:	5899      	ldr	r1, [r3, r2]
 800e208:	183b      	adds	r3, r7, r0
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	2280      	movs	r2, #128	; 0x80
 800e210:	18bc      	adds	r4, r7, r2
 800e212:	22e8      	movs	r2, #232	; 0xe8
 800e214:	0052      	lsls	r2, r2, #1
 800e216:	588e      	ldr	r6, [r1, r2]
 800e218:	2134      	movs	r1, #52	; 0x34
 800e21a:	1879      	adds	r1, r7, r1
 800e21c:	2082      	movs	r0, #130	; 0x82
 800e21e:	183a      	adds	r2, r7, r0
 800e220:	7810      	ldrb	r0, [r2, #0]
 800e222:	2208      	movs	r2, #8
 800e224:	18ba      	adds	r2, r7, r2
 800e226:	9202      	str	r2, [sp, #8]
 800e228:	1dfa      	adds	r2, r7, #7
 800e22a:	9201      	str	r2, [sp, #4]
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	0033      	movs	r3, r6
 800e230:	000a      	movs	r2, r1
 800e232:	0029      	movs	r1, r5
 800e234:	f000 fed8 	bl	800efe8 <GetFCntDown>
 800e238:	0003      	movs	r3, r0
 800e23a:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e23c:	2280      	movs	r2, #128	; 0x80
 800e23e:	18bb      	adds	r3, r7, r2
 800e240:	781b      	ldrb	r3, [r3, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d041      	beq.n	800e2ca <ProcessRadioRxDone+0x6ae>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e246:	2380      	movs	r3, #128	; 0x80
 800e248:	18fb      	adds	r3, r7, r3
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b07      	cmp	r3, #7
 800e24e:	d126      	bne.n	800e29e <ProcessRadioRxDone+0x682>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e250:	4b32      	ldr	r3, [pc, #200]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e252:	4a35      	ldr	r2, [pc, #212]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e254:	2108      	movs	r1, #8
 800e256:	5499      	strb	r1, [r3, r2]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800e258:	4b30      	ldr	r3, [pc, #192]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e25a:	4a32      	ldr	r2, [pc, #200]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e25c:	589a      	ldr	r2, [r3, r2]
 800e25e:	23e9      	movs	r3, #233	; 0xe9
 800e260:	005b      	lsls	r3, r3, #1
 800e262:	5cd3      	ldrb	r3, [r2, r3]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d128      	bne.n	800e2ba <ProcessRadioRxDone+0x69e>
 800e268:	2374      	movs	r3, #116	; 0x74
 800e26a:	18fb      	adds	r3, r7, r3
 800e26c:	781b      	ldrb	r3, [r3, #0]
 800e26e:	221f      	movs	r2, #31
 800e270:	4393      	bics	r3, r2
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2ba0      	cmp	r3, #160	; 0xa0
 800e276:	d120      	bne.n	800e2ba <ProcessRadioRxDone+0x69e>
 800e278:	4b28      	ldr	r3, [pc, #160]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e27a:	4a2a      	ldr	r2, [pc, #168]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e27c:	589a      	ldr	r2, [r3, r2]
 800e27e:	23ec      	movs	r3, #236	; 0xec
 800e280:	005b      	lsls	r3, r3, #1
 800e282:	58d2      	ldr	r2, [r2, r3]
 800e284:	2334      	movs	r3, #52	; 0x34
 800e286:	18fb      	adds	r3, r7, r3
 800e288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d115      	bne.n	800e2ba <ProcessRadioRxDone+0x69e>
                    {
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800e28e:	4b23      	ldr	r3, [pc, #140]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e290:	4a24      	ldr	r2, [pc, #144]	; (800e324 <ProcessRadioRxDone+0x708>)
 800e292:	589a      	ldr	r2, [r3, r2]
 800e294:	23e0      	movs	r3, #224	; 0xe0
 800e296:	005b      	lsls	r3, r3, #1
 800e298:	2101      	movs	r1, #1
 800e29a:	54d1      	strb	r1, [r2, r3]
 800e29c:	e00d      	b.n	800e2ba <ProcessRadioRxDone+0x69e>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800e29e:	2380      	movs	r3, #128	; 0x80
 800e2a0:	18fb      	adds	r3, r7, r3
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	2b08      	cmp	r3, #8
 800e2a6:	d104      	bne.n	800e2b2 <ProcessRadioRxDone+0x696>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800e2a8:	4b1c      	ldr	r3, [pc, #112]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e2aa:	4a1f      	ldr	r2, [pc, #124]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e2ac:	210a      	movs	r1, #10
 800e2ae:	5499      	strb	r1, [r3, r2]
 800e2b0:	e003      	b.n	800e2ba <ProcessRadioRxDone+0x69e>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e2b2:	4b1a      	ldr	r3, [pc, #104]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e2b4:	4a1c      	ldr	r2, [pc, #112]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	5499      	strb	r1, [r3, r2]
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e2ba:	68b9      	ldr	r1, [r7, #8]
 800e2bc:	4a17      	ldr	r2, [pc, #92]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e2be:	2386      	movs	r3, #134	; 0x86
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800e2c4:	f7ff fc7e 	bl	800dbc4 <PrepareRxDoneAbort>
                return;
 800e2c8:	e1be      	b.n	800e648 <ProcessRadioRxDone+0xa2c>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e2ca:	1dfb      	adds	r3, r7, #7
 800e2cc:	781a      	ldrb	r2, [r3, #0]
 800e2ce:	68bd      	ldr	r5, [r7, #8]
 800e2d0:	2680      	movs	r6, #128	; 0x80
 800e2d2:	19bc      	adds	r4, r7, r6
 800e2d4:	2384      	movs	r3, #132	; 0x84
 800e2d6:	18fb      	adds	r3, r7, r3
 800e2d8:	6819      	ldr	r1, [r3, #0]
 800e2da:	2382      	movs	r3, #130	; 0x82
 800e2dc:	18fb      	adds	r3, r7, r3
 800e2de:	7818      	ldrb	r0, [r3, #0]
 800e2e0:	2334      	movs	r3, #52	; 0x34
 800e2e2:	18fb      	adds	r3, r7, r3
 800e2e4:	9300      	str	r3, [sp, #0]
 800e2e6:	002b      	movs	r3, r5
 800e2e8:	f006 fd52 	bl	8014d90 <LoRaMacCryptoUnsecureMessage>
 800e2ec:	0003      	movs	r3, r0
 800e2ee:	7023      	strb	r3, [r4, #0]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e2f0:	19bb      	adds	r3, r7, r6
 800e2f2:	781b      	ldrb	r3, [r3, #0]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d01f      	beq.n	800e338 <ProcessRadioRxDone+0x71c>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e2f8:	2380      	movs	r3, #128	; 0x80
 800e2fa:	18fb      	adds	r3, r7, r3
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d104      	bne.n	800e30c <ProcessRadioRxDone+0x6f0>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e302:	4b06      	ldr	r3, [pc, #24]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e304:	4a08      	ldr	r2, [pc, #32]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e306:	210b      	movs	r1, #11
 800e308:	5499      	strb	r1, [r3, r2]
 800e30a:	e003      	b.n	800e314 <ProcessRadioRxDone+0x6f8>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e30c:	4b03      	ldr	r3, [pc, #12]	; (800e31c <ProcessRadioRxDone+0x700>)
 800e30e:	4a06      	ldr	r2, [pc, #24]	; (800e328 <ProcessRadioRxDone+0x70c>)
 800e310:	210c      	movs	r1, #12
 800e312:	5499      	strb	r1, [r3, r2]
                }
                PrepareRxDoneAbort( );
 800e314:	f7ff fc56 	bl	800dbc4 <PrepareRxDoneAbort>
                return;
 800e318:	46c0      	nop			; (mov r8, r8)
 800e31a:	e195      	b.n	800e648 <ProcessRadioRxDone+0xa2c>
 800e31c:	200008f0 	.word	0x200008f0
 800e320:	0000041c 	.word	0x0000041c
 800e324:	00000484 	.word	0x00000484
 800e328:	0000041d 	.word	0x0000041d
 800e32c:	20000b28 	.word	0x20000b28
 800e330:	00000434 	.word	0x00000434
 800e334:	0000042d 	.word	0x0000042d
            }

            // Frame is valid
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e338:	4bc5      	ldr	r3, [pc, #788]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e33a:	4ac6      	ldr	r2, [pc, #792]	; (800e654 <ProcessRadioRxDone+0xa38>)
 800e33c:	2100      	movs	r1, #0
 800e33e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800e340:	4bc3      	ldr	r3, [pc, #780]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e342:	2283      	movs	r2, #131	; 0x83
 800e344:	18ba      	adds	r2, r7, r2
 800e346:	49c4      	ldr	r1, [pc, #784]	; (800e658 <ProcessRadioRxDone+0xa3c>)
 800e348:	7812      	ldrb	r2, [r2, #0]
 800e34a:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e34c:	2034      	movs	r0, #52	; 0x34
 800e34e:	183b      	adds	r3, r7, r0
 800e350:	7b1b      	ldrb	r3, [r3, #12]
 800e352:	06db      	lsls	r3, r3, #27
 800e354:	0fdb      	lsrs	r3, r3, #31
 800e356:	b2db      	uxtb	r3, r3
 800e358:	0019      	movs	r1, r3
 800e35a:	4bbd      	ldr	r3, [pc, #756]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e35c:	4abf      	ldr	r2, [pc, #764]	; (800e65c <ProcessRadioRxDone+0xa40>)
 800e35e:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = NULL;
 800e360:	4bbb      	ldr	r3, [pc, #748]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e362:	4abf      	ldr	r2, [pc, #764]	; (800e660 <ProcessRadioRxDone+0xa44>)
 800e364:	2100      	movs	r1, #0
 800e366:	5099      	str	r1, [r3, r2]
            MacCtx.McpsIndication.BufferSize = 0;
 800e368:	4ab9      	ldr	r2, [pc, #740]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e36a:	2385      	movs	r3, #133	; 0x85
 800e36c:	00db      	lsls	r3, r3, #3
 800e36e:	2100      	movs	r1, #0
 800e370:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e372:	68b9      	ldr	r1, [r7, #8]
 800e374:	4ab6      	ldr	r2, [pc, #728]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e376:	2386      	movs	r3, #134	; 0x86
 800e378:	00db      	lsls	r3, r3, #3
 800e37a:	50d1      	str	r1, [r2, r3]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e37c:	183b      	adds	r3, r7, r0
 800e37e:	7b1b      	ldrb	r3, [r3, #12]
 800e380:	069b      	lsls	r3, r3, #26
 800e382:	0fdb      	lsrs	r3, r3, #31
 800e384:	b2db      	uxtb	r3, r3
 800e386:	1e5a      	subs	r2, r3, #1
 800e388:	4193      	sbcs	r3, r2
 800e38a:	b2d9      	uxtb	r1, r3
 800e38c:	4bb0      	ldr	r3, [pc, #704]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e38e:	4ab5      	ldr	r2, [pc, #724]	; (800e664 <ProcessRadioRxDone+0xa48>)
 800e390:	5499      	strb	r1, [r3, r2]

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e392:	4baf      	ldr	r3, [pc, #700]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e394:	4ab4      	ldr	r2, [pc, #720]	; (800e668 <ProcessRadioRxDone+0xa4c>)
 800e396:	2100      	movs	r1, #0
 800e398:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e39a:	183b      	adds	r3, r7, r0
 800e39c:	7b1b      	ldrb	r3, [r3, #12]
 800e39e:	069b      	lsls	r3, r3, #26
 800e3a0:	0fdb      	lsrs	r3, r3, #31
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	1e5a      	subs	r2, r3, #1
 800e3a6:	4193      	sbcs	r3, r2
 800e3a8:	b2d9      	uxtb	r1, r3
 800e3aa:	4aa9      	ldr	r2, [pc, #676]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e3ac:	2388      	movs	r3, #136	; 0x88
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	54d1      	strb	r1, [r2, r3]

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800e3b2:	4ba7      	ldr	r3, [pc, #668]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e3b4:	4aad      	ldr	r2, [pc, #692]	; (800e66c <ProcessRadioRxDone+0xa50>)
 800e3b6:	5c9b      	ldrb	r3, [r3, r2]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d004      	beq.n	800e3c6 <ProcessRadioRxDone+0x7aa>
                ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_2 ) )
 800e3bc:	4ba4      	ldr	r3, [pc, #656]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e3be:	4aab      	ldr	r2, [pc, #684]	; (800e66c <ProcessRadioRxDone+0xa50>)
 800e3c0:	5c9b      	ldrb	r3, [r3, r2]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d105      	bne.n	800e3d2 <ProcessRadioRxDone+0x7b6>
            {
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800e3c6:	4ba2      	ldr	r3, [pc, #648]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e3c8:	4aa9      	ldr	r2, [pc, #676]	; (800e670 <ProcessRadioRxDone+0xa54>)
 800e3ca:	589b      	ldr	r3, [r3, r2]
 800e3cc:	22f4      	movs	r2, #244	; 0xf4
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	5099      	str	r1, [r3, r2]
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e3d2:	2383      	movs	r3, #131	; 0x83
 800e3d4:	18fb      	adds	r3, r7, r3
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d104      	bne.n	800e3e6 <ProcessRadioRxDone+0x7ca>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e3dc:	4b9c      	ldr	r3, [pc, #624]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e3de:	4aa5      	ldr	r2, [pc, #660]	; (800e674 <ProcessRadioRxDone+0xa58>)
 800e3e0:	2102      	movs	r1, #2
 800e3e2:	5499      	strb	r1, [r3, r2]
 800e3e4:	e02f      	b.n	800e446 <ProcessRadioRxDone+0x82a>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e3e6:	2374      	movs	r3, #116	; 0x74
 800e3e8:	18fb      	adds	r3, r7, r3
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	221f      	movs	r2, #31
 800e3ee:	4393      	bics	r3, r2
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2ba0      	cmp	r3, #160	; 0xa0
 800e3f4:	d11c      	bne.n	800e430 <ProcessRadioRxDone+0x814>
                {
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800e3f6:	4b96      	ldr	r3, [pc, #600]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e3f8:	4a9d      	ldr	r2, [pc, #628]	; (800e670 <ProcessRadioRxDone+0xa54>)
 800e3fa:	589a      	ldr	r2, [r3, r2]
 800e3fc:	23e0      	movs	r3, #224	; 0xe0
 800e3fe:	005b      	lsls	r3, r3, #1
 800e400:	2101      	movs	r1, #1
 800e402:	54d1      	strb	r1, [r2, r3]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800e404:	4b92      	ldr	r3, [pc, #584]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e406:	4a9a      	ldr	r2, [pc, #616]	; (800e670 <ProcessRadioRxDone+0xa54>)
 800e408:	589a      	ldr	r2, [r3, r2]
 800e40a:	23e9      	movs	r3, #233	; 0xe9
 800e40c:	005b      	lsls	r3, r3, #1
 800e40e:	5cd3      	ldrb	r3, [r2, r3]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d108      	bne.n	800e426 <ProcessRadioRxDone+0x80a>
                    {
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800e414:	4b8e      	ldr	r3, [pc, #568]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e416:	4a96      	ldr	r2, [pc, #600]	; (800e670 <ProcessRadioRxDone+0xa54>)
 800e418:	589a      	ldr	r2, [r3, r2]
 800e41a:	2334      	movs	r3, #52	; 0x34
 800e41c:	18fb      	adds	r3, r7, r3
 800e41e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e420:	23ec      	movs	r3, #236	; 0xec
 800e422:	005b      	lsls	r3, r3, #1
 800e424:	50d1      	str	r1, [r2, r3]
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e426:	4b8a      	ldr	r3, [pc, #552]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e428:	4a92      	ldr	r2, [pc, #584]	; (800e674 <ProcessRadioRxDone+0xa58>)
 800e42a:	2101      	movs	r1, #1
 800e42c:	5499      	strb	r1, [r3, r2]
 800e42e:	e00a      	b.n	800e446 <ProcessRadioRxDone+0x82a>
                }
                else
                {
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800e430:	4b87      	ldr	r3, [pc, #540]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e432:	4a8f      	ldr	r2, [pc, #572]	; (800e670 <ProcessRadioRxDone+0xa54>)
 800e434:	589a      	ldr	r2, [r3, r2]
 800e436:	23e0      	movs	r3, #224	; 0xe0
 800e438:	005b      	lsls	r3, r3, #1
 800e43a:	2100      	movs	r1, #0
 800e43c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e43e:	4b84      	ldr	r3, [pc, #528]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e440:	4a8c      	ldr	r2, [pc, #560]	; (800e674 <ProcessRadioRxDone+0xa58>)
 800e442:	2100      	movs	r1, #0
 800e444:	5499      	strb	r1, [r3, r2]
                }
            }

            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e446:	4b82      	ldr	r3, [pc, #520]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e448:	4a88      	ldr	r2, [pc, #544]	; (800e66c <ProcessRadioRxDone+0xa50>)
 800e44a:	5c98      	ldrb	r0, [r3, r2]
 800e44c:	4b80      	ldr	r3, [pc, #512]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e44e:	4a8a      	ldr	r2, [pc, #552]	; (800e678 <ProcessRadioRxDone+0xa5c>)
 800e450:	5c9a      	ldrb	r2, [r3, r2]
 800e452:	2334      	movs	r3, #52	; 0x34
 800e454:	18fb      	adds	r3, r7, r3
 800e456:	7b1b      	ldrb	r3, [r3, #12]
 800e458:	1c19      	adds	r1, r3, #0
 800e45a:	f002 f999 	bl	8010790 <RemoveMacCommands>

            switch( fType )
 800e45e:	1dbb      	adds	r3, r7, #6
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	2b01      	cmp	r3, #1
 800e464:	d038      	beq.n	800e4d8 <ProcessRadioRxDone+0x8bc>
 800e466:	dc02      	bgt.n	800e46e <ProcessRadioRxDone+0x852>
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d005      	beq.n	800e478 <ProcessRadioRxDone+0x85c>
 800e46c:	e086      	b.n	800e57c <ProcessRadioRxDone+0x960>
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d052      	beq.n	800e518 <ProcessRadioRxDone+0x8fc>
 800e472:	2b03      	cmp	r3, #3
 800e474:	d06a      	beq.n	800e54c <ProcessRadioRxDone+0x930>
 800e476:	e081      	b.n	800e57c <ProcessRadioRxDone+0x960>
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800e478:	2034      	movs	r0, #52	; 0x34
 800e47a:	183b      	adds	r3, r7, r0
 800e47c:	7b1b      	ldrb	r3, [r3, #12]
 800e47e:	071b      	lsls	r3, r3, #28
 800e480:	0f1b      	lsrs	r3, r3, #28
 800e482:	b2db      	uxtb	r3, r3
 800e484:	001c      	movs	r4, r3
 800e486:	4b72      	ldr	r3, [pc, #456]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e488:	4a78      	ldr	r2, [pc, #480]	; (800e66c <ProcessRadioRxDone+0xa50>)
 800e48a:	5c9b      	ldrb	r3, [r3, r2]
 800e48c:	2277      	movs	r2, #119	; 0x77
 800e48e:	18ba      	adds	r2, r7, r2
 800e490:	2100      	movs	r1, #0
 800e492:	5651      	ldrsb	r1, [r2, r1]
 800e494:	0005      	movs	r5, r0
 800e496:	183a      	adds	r2, r7, r0
 800e498:	3210      	adds	r2, #16
 800e49a:	0010      	movs	r0, r2
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	000b      	movs	r3, r1
 800e4a0:	0022      	movs	r2, r4
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	f000 ffd6 	bl	800f454 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e4a8:	0028      	movs	r0, r5
 800e4aa:	183b      	adds	r3, r7, r0
 800e4ac:	2220      	movs	r2, #32
 800e4ae:	5c99      	ldrb	r1, [r3, r2]
 800e4b0:	4b67      	ldr	r3, [pc, #412]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e4b2:	4a72      	ldr	r2, [pc, #456]	; (800e67c <ProcessRadioRxDone+0xa60>)
 800e4b4:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e4b6:	183b      	adds	r3, r7, r0
 800e4b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4ba:	4b65      	ldr	r3, [pc, #404]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e4bc:	4968      	ldr	r1, [pc, #416]	; (800e660 <ProcessRadioRxDone+0xa44>)
 800e4be:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e4c0:	183b      	adds	r3, r7, r0
 800e4c2:	2228      	movs	r2, #40	; 0x28
 800e4c4:	5c99      	ldrb	r1, [r3, r2]
 800e4c6:	4a62      	ldr	r2, [pc, #392]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e4c8:	2385      	movs	r3, #133	; 0x85
 800e4ca:	00db      	lsls	r3, r3, #3
 800e4cc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800e4ce:	4b60      	ldr	r3, [pc, #384]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e4d0:	4a6b      	ldr	r2, [pc, #428]	; (800e680 <ProcessRadioRxDone+0xa64>)
 800e4d2:	2101      	movs	r1, #1
 800e4d4:	5499      	strb	r1, [r3, r2]
                    break;
 800e4d6:	e058      	b.n	800e58a <ProcessRadioRxDone+0x96e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800e4d8:	2034      	movs	r0, #52	; 0x34
 800e4da:	183b      	adds	r3, r7, r0
 800e4dc:	7b1b      	ldrb	r3, [r3, #12]
 800e4de:	071b      	lsls	r3, r3, #28
 800e4e0:	0f1b      	lsrs	r3, r3, #28
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	001c      	movs	r4, r3
 800e4e6:	4b5a      	ldr	r3, [pc, #360]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e4e8:	4a60      	ldr	r2, [pc, #384]	; (800e66c <ProcessRadioRxDone+0xa50>)
 800e4ea:	5c9b      	ldrb	r3, [r3, r2]
 800e4ec:	2277      	movs	r2, #119	; 0x77
 800e4ee:	18ba      	adds	r2, r7, r2
 800e4f0:	2100      	movs	r1, #0
 800e4f2:	5651      	ldrsb	r1, [r2, r1]
 800e4f4:	0005      	movs	r5, r0
 800e4f6:	183a      	adds	r2, r7, r0
 800e4f8:	3210      	adds	r2, #16
 800e4fa:	0010      	movs	r0, r2
 800e4fc:	9300      	str	r3, [sp, #0]
 800e4fe:	000b      	movs	r3, r1
 800e500:	0022      	movs	r2, r4
 800e502:	2100      	movs	r1, #0
 800e504:	f000 ffa6 	bl	800f454 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e508:	0028      	movs	r0, r5
 800e50a:	183b      	adds	r3, r7, r0
 800e50c:	2220      	movs	r2, #32
 800e50e:	5c99      	ldrb	r1, [r3, r2]
 800e510:	4b4f      	ldr	r3, [pc, #316]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e512:	4a5a      	ldr	r2, [pc, #360]	; (800e67c <ProcessRadioRxDone+0xa60>)
 800e514:	5499      	strb	r1, [r3, r2]
                    break;
 800e516:	e038      	b.n	800e58a <ProcessRadioRxDone+0x96e>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800e518:	2434      	movs	r4, #52	; 0x34
 800e51a:	193b      	adds	r3, r7, r4
 800e51c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e51e:	193b      	adds	r3, r7, r4
 800e520:	2228      	movs	r2, #40	; 0x28
 800e522:	5c99      	ldrb	r1, [r3, r2]
 800e524:	4b4a      	ldr	r3, [pc, #296]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e526:	4a51      	ldr	r2, [pc, #324]	; (800e66c <ProcessRadioRxDone+0xa50>)
 800e528:	5c9b      	ldrb	r3, [r3, r2]
 800e52a:	2277      	movs	r2, #119	; 0x77
 800e52c:	18ba      	adds	r2, r7, r2
 800e52e:	7812      	ldrb	r2, [r2, #0]
 800e530:	b252      	sxtb	r2, r2
 800e532:	9300      	str	r3, [sp, #0]
 800e534:	0013      	movs	r3, r2
 800e536:	000a      	movs	r2, r1
 800e538:	2100      	movs	r1, #0
 800e53a:	f000 ff8b 	bl	800f454 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e53e:	193b      	adds	r3, r7, r4
 800e540:	2220      	movs	r2, #32
 800e542:	5c99      	ldrb	r1, [r3, r2]
 800e544:	4b42      	ldr	r3, [pc, #264]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e546:	4a4d      	ldr	r2, [pc, #308]	; (800e67c <ProcessRadioRxDone+0xa60>)
 800e548:	5499      	strb	r1, [r3, r2]
                    break;
 800e54a:	e01e      	b.n	800e58a <ProcessRadioRxDone+0x96e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e54c:	2034      	movs	r0, #52	; 0x34
 800e54e:	183b      	adds	r3, r7, r0
 800e550:	2220      	movs	r2, #32
 800e552:	5c99      	ldrb	r1, [r3, r2]
 800e554:	4b3e      	ldr	r3, [pc, #248]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e556:	4a49      	ldr	r2, [pc, #292]	; (800e67c <ProcessRadioRxDone+0xa60>)
 800e558:	5499      	strb	r1, [r3, r2]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e55a:	183b      	adds	r3, r7, r0
 800e55c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e55e:	4b3c      	ldr	r3, [pc, #240]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e560:	493f      	ldr	r1, [pc, #252]	; (800e660 <ProcessRadioRxDone+0xa44>)
 800e562:	505a      	str	r2, [r3, r1]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e564:	183b      	adds	r3, r7, r0
 800e566:	2228      	movs	r2, #40	; 0x28
 800e568:	5c99      	ldrb	r1, [r3, r2]
 800e56a:	4a39      	ldr	r2, [pc, #228]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e56c:	2385      	movs	r3, #133	; 0x85
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	54d1      	strb	r1, [r2, r3]
                    MacCtx.McpsIndication.RxData = true;
 800e572:	4b37      	ldr	r3, [pc, #220]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e574:	4a42      	ldr	r2, [pc, #264]	; (800e680 <ProcessRadioRxDone+0xa64>)
 800e576:	2101      	movs	r1, #1
 800e578:	5499      	strb	r1, [r3, r2]
                    break;
 800e57a:	e006      	b.n	800e58a <ProcessRadioRxDone+0x96e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e57c:	4b34      	ldr	r3, [pc, #208]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e57e:	4a35      	ldr	r2, [pc, #212]	; (800e654 <ProcessRadioRxDone+0xa38>)
 800e580:	2101      	movs	r1, #1
 800e582:	5499      	strb	r1, [r3, r2]
                    PrepareRxDoneAbort( );
 800e584:	f7ff fb1e 	bl	800dbc4 <PrepareRxDoneAbort>
                    break;
 800e588:	46c0      	nop			; (mov r8, r8)
            }

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e58a:	4b31      	ldr	r3, [pc, #196]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e58c:	4a3d      	ldr	r2, [pc, #244]	; (800e684 <ProcessRadioRxDone+0xa68>)
 800e58e:	5c99      	ldrb	r1, [r3, r2]
 800e590:	2002      	movs	r0, #2
 800e592:	4301      	orrs	r1, r0
 800e594:	5499      	strb	r1, [r3, r2]

            break;
 800e596:	e036      	b.n	800e606 <ProcessRadioRxDone+0x9ea>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e598:	2476      	movs	r4, #118	; 0x76
 800e59a:	193b      	adds	r3, r7, r4
 800e59c:	781b      	ldrb	r3, [r3, #0]
 800e59e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e5a0:	18d1      	adds	r1, r2, r3
 800e5a2:	193b      	adds	r3, r7, r4
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	b29b      	uxth	r3, r3
 800e5a8:	257a      	movs	r5, #122	; 0x7a
 800e5aa:	197a      	adds	r2, r7, r5
 800e5ac:	8812      	ldrh	r2, [r2, #0]
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	4b35      	ldr	r3, [pc, #212]	; (800e688 <ProcessRadioRxDone+0xa6c>)
 800e5b4:	0018      	movs	r0, r3
 800e5b6:	f00b f94b 	bl	8019850 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e5ba:	4b25      	ldr	r3, [pc, #148]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e5bc:	4a2d      	ldr	r2, [pc, #180]	; (800e674 <ProcessRadioRxDone+0xa58>)
 800e5be:	2103      	movs	r1, #3
 800e5c0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e5c2:	4b23      	ldr	r3, [pc, #140]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e5c4:	4a23      	ldr	r2, [pc, #140]	; (800e654 <ProcessRadioRxDone+0xa38>)
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e5ca:	4b21      	ldr	r3, [pc, #132]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e5cc:	4924      	ldr	r1, [pc, #144]	; (800e660 <ProcessRadioRxDone+0xa44>)
 800e5ce:	4a2e      	ldr	r2, [pc, #184]	; (800e688 <ProcessRadioRxDone+0xa6c>)
 800e5d0:	505a      	str	r2, [r3, r1]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e5d2:	197b      	adds	r3, r7, r5
 800e5d4:	881b      	ldrh	r3, [r3, #0]
 800e5d6:	b2da      	uxtb	r2, r3
 800e5d8:	193b      	adds	r3, r7, r4
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	1ad3      	subs	r3, r2, r3
 800e5de:	b2d9      	uxtb	r1, r3
 800e5e0:	4a1b      	ldr	r2, [pc, #108]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e5e2:	2385      	movs	r3, #133	; 0x85
 800e5e4:	00db      	lsls	r3, r3, #3
 800e5e6:	54d1      	strb	r1, [r2, r3]

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e5e8:	4b19      	ldr	r3, [pc, #100]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e5ea:	4a26      	ldr	r2, [pc, #152]	; (800e684 <ProcessRadioRxDone+0xa68>)
 800e5ec:	5c99      	ldrb	r1, [r3, r2]
 800e5ee:	2002      	movs	r0, #2
 800e5f0:	4301      	orrs	r1, r0
 800e5f2:	5499      	strb	r1, [r3, r2]
            break;
 800e5f4:	e007      	b.n	800e606 <ProcessRadioRxDone+0x9ea>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5f6:	4b16      	ldr	r3, [pc, #88]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e5f8:	4a16      	ldr	r2, [pc, #88]	; (800e654 <ProcessRadioRxDone+0xa38>)
 800e5fa:	2101      	movs	r1, #1
 800e5fc:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 800e5fe:	f7ff fae1 	bl	800dbc4 <PrepareRxDoneAbort>
            break;
 800e602:	e000      	b.n	800e606 <ProcessRadioRxDone+0x9ea>
            break;
 800e604:	46c0      	nop			; (mov r8, r8)
    }

    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800e606:	4b12      	ldr	r3, [pc, #72]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e608:	4a20      	ldr	r2, [pc, #128]	; (800e68c <ProcessRadioRxDone+0xa70>)
 800e60a:	5c9b      	ldrb	r3, [r3, r2]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d009      	beq.n	800e624 <ProcessRadioRxDone+0xa08>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800e610:	4a0f      	ldr	r2, [pc, #60]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e612:	2388      	movs	r3, #136	; 0x88
 800e614:	00db      	lsls	r3, r3, #3
 800e616:	5cd3      	ldrb	r3, [r2, r3]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d00d      	beq.n	800e638 <ProcessRadioRxDone+0xa1c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e61c:	2000      	movs	r0, #0
 800e61e:	f000 fca1 	bl	800ef64 <OnAckTimeoutTimerEvent>
 800e622:	e009      	b.n	800e638 <ProcessRadioRxDone+0xa1c>
        }
    }
    else
    {
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800e624:	4b0a      	ldr	r3, [pc, #40]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e626:	4a12      	ldr	r2, [pc, #72]	; (800e670 <ProcessRadioRxDone+0xa54>)
 800e628:	589b      	ldr	r3, [r3, r2]
 800e62a:	22f0      	movs	r2, #240	; 0xf0
 800e62c:	5c9b      	ldrb	r3, [r3, r2]
 800e62e:	2b02      	cmp	r3, #2
 800e630:	d102      	bne.n	800e638 <ProcessRadioRxDone+0xa1c>
        {
            OnAckTimeoutTimerEvent( NULL );
 800e632:	2000      	movs	r0, #0
 800e634:	f000 fc96 	bl	800ef64 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e638:	4b05      	ldr	r3, [pc, #20]	; (800e650 <ProcessRadioRxDone+0xa34>)
 800e63a:	4a12      	ldr	r2, [pc, #72]	; (800e684 <ProcessRadioRxDone+0xa68>)
 800e63c:	5c99      	ldrb	r1, [r3, r2]
 800e63e:	2020      	movs	r0, #32
 800e640:	4301      	orrs	r1, r0
 800e642:	5499      	strb	r1, [r3, r2]

    UpdateRxSlotIdleState( );
 800e644:	f7ff f9f6 	bl	800da34 <UpdateRxSlotIdleState>
}
 800e648:	46bd      	mov	sp, r7
 800e64a:	b023      	add	sp, #140	; 0x8c
 800e64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e64e:	46c0      	nop			; (mov r8, r8)
 800e650:	200008f0 	.word	0x200008f0
 800e654:	0000041d 	.word	0x0000041d
 800e658:	0000041e 	.word	0x0000041e
 800e65c:	00000421 	.word	0x00000421
 800e660:	00000424 	.word	0x00000424
 800e664:	0000042e 	.word	0x0000042e
 800e668:	0000043d 	.word	0x0000043d
 800e66c:	0000042d 	.word	0x0000042d
 800e670:	00000484 	.word	0x00000484
 800e674:	0000041c 	.word	0x0000041c
 800e678:	0000043c 	.word	0x0000043c
 800e67c:	0000041f 	.word	0x0000041f
 800e680:	00000429 	.word	0x00000429
 800e684:	00000481 	.word	0x00000481
 800e688:	20000b28 	.word	0x20000b28
 800e68c:	00000414 	.word	0x00000414

0800e690 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	af00      	add	r7, sp, #0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e694:	4b12      	ldr	r3, [pc, #72]	; (800e6e0 <ProcessRadioTxTimeout+0x50>)
 800e696:	4a13      	ldr	r2, [pc, #76]	; (800e6e4 <ProcessRadioTxTimeout+0x54>)
 800e698:	589b      	ldr	r3, [r3, r2]
 800e69a:	22f0      	movs	r2, #240	; 0xf0
 800e69c:	5c9b      	ldrb	r3, [r3, r2]
 800e69e:	2b02      	cmp	r3, #2
 800e6a0:	d002      	beq.n	800e6a8 <ProcessRadioTxTimeout+0x18>
    {
        Radio.Sleep( );
 800e6a2:	4b11      	ldr	r3, [pc, #68]	; (800e6e8 <ProcessRadioTxTimeout+0x58>)
 800e6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a6:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e6a8:	f7ff f9c4 	bl	800da34 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e6ac:	4b0c      	ldr	r3, [pc, #48]	; (800e6e0 <ProcessRadioTxTimeout+0x50>)
 800e6ae:	4a0f      	ldr	r2, [pc, #60]	; (800e6ec <ProcessRadioTxTimeout+0x5c>)
 800e6b0:	2102      	movs	r1, #2
 800e6b2:	5499      	strb	r1, [r3, r2]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e6b4:	2002      	movs	r0, #2
 800e6b6:	f005 fa7d 	bl	8013bb4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e6ba:	4b09      	ldr	r3, [pc, #36]	; (800e6e0 <ProcessRadioTxTimeout+0x50>)
 800e6bc:	4a0c      	ldr	r2, [pc, #48]	; (800e6f0 <ProcessRadioTxTimeout+0x60>)
 800e6be:	5c9b      	ldrb	r3, [r3, r2]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d003      	beq.n	800e6cc <ProcessRadioTxTimeout+0x3c>
    {
        MacCtx.AckTimeoutRetry = true;
 800e6c4:	4b06      	ldr	r3, [pc, #24]	; (800e6e0 <ProcessRadioTxTimeout+0x50>)
 800e6c6:	4a0b      	ldr	r2, [pc, #44]	; (800e6f4 <ProcessRadioTxTimeout+0x64>)
 800e6c8:	2101      	movs	r1, #1
 800e6ca:	5499      	strb	r1, [r3, r2]
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e6cc:	4b04      	ldr	r3, [pc, #16]	; (800e6e0 <ProcessRadioTxTimeout+0x50>)
 800e6ce:	4a0a      	ldr	r2, [pc, #40]	; (800e6f8 <ProcessRadioTxTimeout+0x68>)
 800e6d0:	5c99      	ldrb	r1, [r3, r2]
 800e6d2:	2020      	movs	r0, #32
 800e6d4:	4301      	orrs	r1, r0
 800e6d6:	5499      	strb	r1, [r3, r2]
}
 800e6d8:	46c0      	nop			; (mov r8, r8)
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	46c0      	nop			; (mov r8, r8)
 800e6e0:	200008f0 	.word	0x200008f0
 800e6e4:	00000484 	.word	0x00000484
 800e6e8:	0801acec 	.word	0x0801acec
 800e6ec:	0000043d 	.word	0x0000043d
 800e6f0:	00000414 	.word	0x00000414
 800e6f4:	00000413 	.word	0x00000413
 800e6f8:	00000481 	.word	0x00000481

0800e6fc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	0002      	movs	r2, r0
 800e704:	1dfb      	adds	r3, r7, #7
 800e706:	701a      	strb	r2, [r3, #0]
 800e708:	1dbb      	adds	r3, r7, #6
 800e70a:	1c0a      	adds	r2, r1, #0
 800e70c:	701a      	strb	r2, [r3, #0]
    bool classBRx = false;
 800e70e:	230f      	movs	r3, #15
 800e710:	18fb      	adds	r3, r7, r3
 800e712:	2200      	movs	r2, #0
 800e714:	701a      	strb	r2, [r3, #0]

    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e716:	4b3d      	ldr	r3, [pc, #244]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e718:	4a3d      	ldr	r2, [pc, #244]	; (800e810 <HandleRadioRxErrorTimeout+0x114>)
 800e71a:	589b      	ldr	r3, [r3, r2]
 800e71c:	22f0      	movs	r2, #240	; 0xf0
 800e71e:	5c9b      	ldrb	r3, [r3, r2]
 800e720:	2b02      	cmp	r3, #2
 800e722:	d002      	beq.n	800e72a <HandleRadioRxErrorTimeout+0x2e>
    {
        Radio.Sleep( );
 800e724:	4b3b      	ldr	r3, [pc, #236]	; (800e814 <HandleRadioRxErrorTimeout+0x118>)
 800e726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e728:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e72a:	f004 fdc0 	bl	80132ae <LoRaMacClassBIsBeaconExpected>
 800e72e:	1e03      	subs	r3, r0, #0
 800e730:	d009      	beq.n	800e746 <HandleRadioRxErrorTimeout+0x4a>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e732:	2002      	movs	r0, #2
 800e734:	f004 fd73 	bl	801321e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e738:	2000      	movs	r0, #0
 800e73a:	f004 fd94 	bl	8013266 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e73e:	230f      	movs	r3, #15
 800e740:	18fb      	adds	r3, r7, r3
 800e742:	2201      	movs	r2, #1
 800e744:	701a      	strb	r2, [r3, #0]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800e746:	4b31      	ldr	r3, [pc, #196]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e748:	4a31      	ldr	r2, [pc, #196]	; (800e810 <HandleRadioRxErrorTimeout+0x114>)
 800e74a:	589b      	ldr	r3, [r3, r2]
 800e74c:	22f0      	movs	r2, #240	; 0xf0
 800e74e:	5c9b      	ldrb	r3, [r3, r2]
 800e750:	2b01      	cmp	r3, #1
 800e752:	d11b      	bne.n	800e78c <HandleRadioRxErrorTimeout+0x90>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e754:	f004 fdb1 	bl	80132ba <LoRaMacClassBIsPingExpected>
 800e758:	1e03      	subs	r3, r0, #0
 800e75a:	d009      	beq.n	800e770 <HandleRadioRxErrorTimeout+0x74>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e75c:	2000      	movs	r0, #0
 800e75e:	f004 fd68 	bl	8013232 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e762:	2000      	movs	r0, #0
 800e764:	f004 fd87 	bl	8013276 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e768:	230f      	movs	r3, #15
 800e76a:	18fb      	adds	r3, r7, r3
 800e76c:	2201      	movs	r2, #1
 800e76e:	701a      	strb	r2, [r3, #0]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e770:	f004 fda9 	bl	80132c6 <LoRaMacClassBIsMulticastExpected>
 800e774:	1e03      	subs	r3, r0, #0
 800e776:	d009      	beq.n	800e78c <HandleRadioRxErrorTimeout+0x90>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e778:	2000      	movs	r0, #0
 800e77a:	f004 fd64 	bl	8013246 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e77e:	2000      	movs	r0, #0
 800e780:	f004 fd81 	bl	8013286 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e784:	230f      	movs	r3, #15
 800e786:	18fb      	adds	r3, r7, r3
 800e788:	2201      	movs	r2, #1
 800e78a:	701a      	strb	r2, [r3, #0]
        }
    }

    if( classBRx == false )
 800e78c:	230f      	movs	r3, #15
 800e78e:	18fb      	adds	r3, r7, r3
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	2201      	movs	r2, #1
 800e794:	4053      	eors	r3, r2
 800e796:	b2db      	uxtb	r3, r3
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d031      	beq.n	800e800 <HandleRadioRxErrorTimeout+0x104>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e79c:	4a1b      	ldr	r2, [pc, #108]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e79e:	2390      	movs	r3, #144	; 0x90
 800e7a0:	00db      	lsls	r3, r3, #3
 800e7a2:	5cd3      	ldrb	r3, [r2, r3]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10f      	bne.n	800e7c8 <HandleRadioRxErrorTimeout+0xcc>
        {
            if( MacCtx.NodeAckRequested == true )
 800e7a8:	4b18      	ldr	r3, [pc, #96]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e7aa:	4a1b      	ldr	r2, [pc, #108]	; (800e818 <HandleRadioRxErrorTimeout+0x11c>)
 800e7ac:	5c9b      	ldrb	r3, [r3, r2]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d004      	beq.n	800e7bc <HandleRadioRxErrorTimeout+0xc0>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e7b2:	4b16      	ldr	r3, [pc, #88]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e7b4:	1dfa      	adds	r2, r7, #7
 800e7b6:	4919      	ldr	r1, [pc, #100]	; (800e81c <HandleRadioRxErrorTimeout+0x120>)
 800e7b8:	7812      	ldrb	r2, [r2, #0]
 800e7ba:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e7bc:	1dfb      	adds	r3, r7, #7
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	0018      	movs	r0, r3
 800e7c2:	f005 f9f7 	bl	8013bb4 <LoRaMacConfirmQueueSetStatusCmn>
 800e7c6:	e01b      	b.n	800e800 <HandleRadioRxErrorTimeout+0x104>
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e7c8:	4b10      	ldr	r3, [pc, #64]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e7ca:	4a13      	ldr	r2, [pc, #76]	; (800e818 <HandleRadioRxErrorTimeout+0x11c>)
 800e7cc:	5c9b      	ldrb	r3, [r3, r2]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d004      	beq.n	800e7dc <HandleRadioRxErrorTimeout+0xe0>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e7d2:	4b0e      	ldr	r3, [pc, #56]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e7d4:	1dba      	adds	r2, r7, #6
 800e7d6:	4911      	ldr	r1, [pc, #68]	; (800e81c <HandleRadioRxErrorTimeout+0x120>)
 800e7d8:	7812      	ldrb	r2, [r2, #0]
 800e7da:	545a      	strb	r2, [r3, r1]
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e7dc:	1dbb      	adds	r3, r7, #6
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	0018      	movs	r0, r3
 800e7e2:	f005 f9e7 	bl	8013bb4 <LoRaMacConfirmQueueSetStatusCmn>

            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800e7e6:	4b09      	ldr	r3, [pc, #36]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e7e8:	4a09      	ldr	r2, [pc, #36]	; (800e810 <HandleRadioRxErrorTimeout+0x114>)
 800e7ea:	589b      	ldr	r3, [r3, r2]
 800e7ec:	22f0      	movs	r2, #240	; 0xf0
 800e7ee:	5c9b      	ldrb	r3, [r3, r2]
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d005      	beq.n	800e800 <HandleRadioRxErrorTimeout+0x104>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e7f4:	4b05      	ldr	r3, [pc, #20]	; (800e80c <HandleRadioRxErrorTimeout+0x110>)
 800e7f6:	4a0a      	ldr	r2, [pc, #40]	; (800e820 <HandleRadioRxErrorTimeout+0x124>)
 800e7f8:	5c99      	ldrb	r1, [r3, r2]
 800e7fa:	2020      	movs	r0, #32
 800e7fc:	4301      	orrs	r1, r0
 800e7fe:	5499      	strb	r1, [r3, r2]
            }
        }
    }

    UpdateRxSlotIdleState( );
 800e800:	f7ff f918 	bl	800da34 <UpdateRxSlotIdleState>
}
 800e804:	46c0      	nop			; (mov r8, r8)
 800e806:	46bd      	mov	sp, r7
 800e808:	b004      	add	sp, #16
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	200008f0 	.word	0x200008f0
 800e810:	00000484 	.word	0x00000484
 800e814:	0801acec 	.word	0x0801acec
 800e818:	00000414 	.word	0x00000414
 800e81c:	0000043d 	.word	0x0000043d
 800e820:	00000481 	.word	0x00000481

0800e824 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e824:	b580      	push	{r7, lr}
 800e826:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e828:	2106      	movs	r1, #6
 800e82a:	2005      	movs	r0, #5
 800e82c:	f7ff ff66 	bl	800e6fc <HandleRadioRxErrorTimeout>
}
 800e830:	46c0      	nop			; (mov r8, r8)
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e836:	b580      	push	{r7, lr}
 800e838:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e83a:	2104      	movs	r1, #4
 800e83c:	2003      	movs	r0, #3
 800e83e:	f7ff ff5d 	bl	800e6fc <HandleRadioRxErrorTimeout>
}
 800e842:	46c0      	nop			; (mov r8, r8)
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800e84e:	f3ef 8310 	mrs	r3, PRIMASK
 800e852:	607b      	str	r3, [r7, #4]
  return(result);
 800e854:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e856:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e858:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800e85a:	4b1f      	ldr	r3, [pc, #124]	; (800e8d8 <LoRaMacHandleIrqEvents+0x90>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e860:	4b1d      	ldr	r3, [pc, #116]	; (800e8d8 <LoRaMacHandleIrqEvents+0x90>)
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	f383 8810 	msr	PRIMASK, r3
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d02c      	beq.n	800e8d0 <LoRaMacHandleIrqEvents+0x88>
    {
        if( events.Events.TxDone == 1 )
 800e876:	003b      	movs	r3, r7
 800e878:	781b      	ldrb	r3, [r3, #0]
 800e87a:	2210      	movs	r2, #16
 800e87c:	4013      	ands	r3, r2
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b00      	cmp	r3, #0
 800e882:	d001      	beq.n	800e888 <LoRaMacHandleIrqEvents+0x40>
        {
            ProcessRadioTxDone( );
 800e884:	f7ff f8f2 	bl	800da6c <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e888:	003b      	movs	r3, r7
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	2208      	movs	r2, #8
 800e88e:	4013      	ands	r3, r2
 800e890:	b2db      	uxtb	r3, r3
 800e892:	2b00      	cmp	r3, #0
 800e894:	d001      	beq.n	800e89a <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e896:	f7ff f9c1 	bl	800dc1c <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e89a:	003b      	movs	r3, r7
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2204      	movs	r2, #4
 800e8a0:	4013      	ands	r3, r2
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d001      	beq.n	800e8ac <LoRaMacHandleIrqEvents+0x64>
        {
            ProcessRadioTxTimeout( );
 800e8a8:	f7ff fef2 	bl	800e690 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e8ac:	003b      	movs	r3, r7
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	2202      	movs	r2, #2
 800e8b2:	4013      	ands	r3, r2
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d001      	beq.n	800e8be <LoRaMacHandleIrqEvents+0x76>
        {
            ProcessRadioRxError( );
 800e8ba:	f7ff ffb3 	bl	800e824 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e8be:	003b      	movs	r3, r7
 800e8c0:	781b      	ldrb	r3, [r3, #0]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	b2db      	uxtb	r3, r3
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <LoRaMacHandleIrqEvents+0x88>
        {
            ProcessRadioRxTimeout( );
 800e8cc:	f7ff ffb3 	bl	800e836 <ProcessRadioRxTimeout>
        }
    }
}
 800e8d0:	46c0      	nop			; (mov r8, r8)
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	b004      	add	sp, #16
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	20000f54 	.word	0x20000f54

0800e8dc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e8e0:	4a08      	ldr	r2, [pc, #32]	; (800e904 <LoRaMacIsBusy+0x28>)
 800e8e2:	23d0      	movs	r3, #208	; 0xd0
 800e8e4:	009b      	lsls	r3, r3, #2
 800e8e6:	58d3      	ldr	r3, [r2, r3]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d106      	bne.n	800e8fa <LoRaMacIsBusy+0x1e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e8ec:	4b05      	ldr	r3, [pc, #20]	; (800e904 <LoRaMacIsBusy+0x28>)
 800e8ee:	4a06      	ldr	r2, [pc, #24]	; (800e908 <LoRaMacIsBusy+0x2c>)
 800e8f0:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e8f2:	2b01      	cmp	r3, #1
 800e8f4:	d101      	bne.n	800e8fa <LoRaMacIsBusy+0x1e>
    {
        return false;
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e000      	b.n	800e8fc <LoRaMacIsBusy+0x20>
    }
    return true;
 800e8fa:	2301      	movs	r3, #1
}
 800e8fc:	0018      	movs	r0, r3
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
 800e902:	46c0      	nop			; (mov r8, r8)
 800e904:	200008f0 	.word	0x200008f0
 800e908:	00000482 	.word	0x00000482

0800e90c <LoRaMacEnableRequests>:


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
 800e912:	0002      	movs	r2, r0
 800e914:	1dfb      	adds	r3, r7, #7
 800e916:	701a      	strb	r2, [r3, #0]
    MacCtx.AllowRequests = requestState;
 800e918:	4b04      	ldr	r3, [pc, #16]	; (800e92c <LoRaMacEnableRequests+0x20>)
 800e91a:	1dfa      	adds	r2, r7, #7
 800e91c:	4904      	ldr	r1, [pc, #16]	; (800e930 <LoRaMacEnableRequests+0x24>)
 800e91e:	7812      	ldrb	r2, [r2, #0]
 800e920:	545a      	strb	r2, [r3, r1]
}
 800e922:	46c0      	nop			; (mov r8, r8)
 800e924:	46bd      	mov	sp, r7
 800e926:	b002      	add	sp, #8
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	46c0      	nop			; (mov r8, r8)
 800e92c:	200008f0 	.word	0x200008f0
 800e930:	00000482 	.word	0x00000482

0800e934 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e93a:	1d3b      	adds	r3, r7, #4
 800e93c:	4a2c      	ldr	r2, [pc, #176]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e93e:	492d      	ldr	r1, [pc, #180]	; (800e9f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e940:	5c52      	ldrb	r2, [r2, r1]
 800e942:	701a      	strb	r2, [r3, #0]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e944:	4a2a      	ldr	r2, [pc, #168]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e946:	23d0      	movs	r3, #208	; 0xd0
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	58d3      	ldr	r3, [r2, r3]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d14a      	bne.n	800e9e6 <LoRaMacHandleRequestEvents+0xb2>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e950:	4b27      	ldr	r3, [pc, #156]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e952:	4a28      	ldr	r2, [pc, #160]	; (800e9f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e954:	5c9b      	ldrb	r3, [r3, r2]
 800e956:	2201      	movs	r2, #1
 800e958:	4013      	ands	r3, r2
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d005      	beq.n	800e96c <LoRaMacHandleRequestEvents+0x38>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e960:	4b23      	ldr	r3, [pc, #140]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e962:	4a24      	ldr	r2, [pc, #144]	; (800e9f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e964:	5c99      	ldrb	r1, [r3, r2]
 800e966:	2001      	movs	r0, #1
 800e968:	4381      	bics	r1, r0
 800e96a:	5499      	strb	r1, [r3, r2]
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e96c:	4b20      	ldr	r3, [pc, #128]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e96e:	4a21      	ldr	r2, [pc, #132]	; (800e9f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e970:	5c9b      	ldrb	r3, [r3, r2]
 800e972:	2204      	movs	r2, #4
 800e974:	4013      	ands	r3, r2
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d005      	beq.n	800e988 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e97c:	4b1c      	ldr	r3, [pc, #112]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e97e:	4a1d      	ldr	r2, [pc, #116]	; (800e9f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e980:	5c99      	ldrb	r1, [r3, r2]
 800e982:	2004      	movs	r0, #4
 800e984:	4381      	bics	r1, r0
 800e986:	5499      	strb	r1, [r3, r2]
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e988:	2001      	movs	r0, #1
 800e98a:	f7ff ffbf 	bl	800e90c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e98e:	1d3b      	adds	r3, r7, #4
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2201      	movs	r2, #1
 800e994:	4013      	ands	r3, r2
 800e996:	b2db      	uxtb	r3, r3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d007      	beq.n	800e9ac <LoRaMacHandleRequestEvents+0x78>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e99c:	4a14      	ldr	r2, [pc, #80]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e99e:	23d1      	movs	r3, #209	; 0xd1
 800e9a0:	009b      	lsls	r3, r3, #2
 800e9a2:	58d3      	ldr	r3, [r2, r3]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4a14      	ldr	r2, [pc, #80]	; (800e9f8 <LoRaMacHandleRequestEvents+0xc4>)
 800e9a8:	0010      	movs	r0, r2
 800e9aa:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e9ac:	1d3b      	adds	r3, r7, #4
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	2204      	movs	r2, #4
 800e9b2:	4013      	ands	r3, r2
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d00d      	beq.n	800e9d6 <LoRaMacHandleRequestEvents+0xa2>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e9ba:	4b10      	ldr	r3, [pc, #64]	; (800e9fc <LoRaMacHandleRequestEvents+0xc8>)
 800e9bc:	0018      	movs	r0, r3
 800e9be:	f005 f945 	bl	8013c4c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e9c2:	f005 f9a5 	bl	8013d10 <LoRaMacConfirmQueueGetCnt>
 800e9c6:	1e03      	subs	r3, r0, #0
 800e9c8:	d005      	beq.n	800e9d6 <LoRaMacHandleRequestEvents+0xa2>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e9ca:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e9cc:	4a09      	ldr	r2, [pc, #36]	; (800e9f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e9ce:	5c99      	ldrb	r1, [r3, r2]
 800e9d0:	2004      	movs	r0, #4
 800e9d2:	4301      	orrs	r1, r0
 800e9d4:	5499      	strb	r1, [r3, r2]
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e9d6:	f004 fc91 	bl	80132fc <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e9da:	4b05      	ldr	r3, [pc, #20]	; (800e9f0 <LoRaMacHandleRequestEvents+0xbc>)
 800e9dc:	4a05      	ldr	r2, [pc, #20]	; (800e9f4 <LoRaMacHandleRequestEvents+0xc0>)
 800e9de:	5c99      	ldrb	r1, [r3, r2]
 800e9e0:	2020      	movs	r0, #32
 800e9e2:	4381      	bics	r1, r0
 800e9e4:	5499      	strb	r1, [r3, r2]
    }
}
 800e9e6:	46c0      	nop			; (mov r8, r8)
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	b002      	add	sp, #8
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	46c0      	nop			; (mov r8, r8)
 800e9f0:	200008f0 	.word	0x200008f0
 800e9f4:	00000481 	.word	0x00000481
 800e9f8:	20000d2c 	.word	0x20000d2c
 800e9fc:	20000d40 	.word	0x20000d40

0800ea00 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800ea06:	4a0b      	ldr	r2, [pc, #44]	; (800ea34 <LoRaMacHandleScheduleUplinkEvent+0x34>)
 800ea08:	23d0      	movs	r3, #208	; 0xd0
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	58d3      	ldr	r3, [r2, r3]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d10c      	bne.n	800ea2c <LoRaMacHandleScheduleUplinkEvent+0x2c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800ea12:	1dfb      	adds	r3, r7, #7
 800ea14:	2200      	movs	r2, #0
 800ea16:	701a      	strb	r2, [r3, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800ea18:	1dfb      	adds	r3, r7, #7
 800ea1a:	0018      	movs	r0, r3
 800ea1c:	f004 ff70 	bl	8013900 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800ea20:	1dfb      	adds	r3, r7, #7
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <LoRaMacHandleScheduleUplinkEvent+0x2c>
        {// Setup MLME indication
            SetMlmeScheduleUplinkIndication( );
 800ea28:	f000 fd04 	bl	800f434 <SetMlmeScheduleUplinkIndication>
        }
    }
}
 800ea2c:	46c0      	nop			; (mov r8, r8)
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	b002      	add	sp, #8
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	200008f0 	.word	0x200008f0

0800ea38 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b088      	sub	sp, #32
 800ea3c:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800ea3e:	4b26      	ldr	r3, [pc, #152]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800ea40:	4a26      	ldr	r2, [pc, #152]	; (800eadc <LoRaMacHandleIndicationEvents+0xa4>)
 800ea42:	5c9b      	ldrb	r3, [r3, r2]
 800ea44:	2208      	movs	r2, #8
 800ea46:	4013      	ands	r3, r2
 800ea48:	b2db      	uxtb	r3, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d00d      	beq.n	800ea6a <LoRaMacHandleIndicationEvents+0x32>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800ea4e:	4b22      	ldr	r3, [pc, #136]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800ea50:	4a22      	ldr	r2, [pc, #136]	; (800eadc <LoRaMacHandleIndicationEvents+0xa4>)
 800ea52:	5c99      	ldrb	r1, [r3, r2]
 800ea54:	2008      	movs	r0, #8
 800ea56:	4381      	bics	r1, r0
 800ea58:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800ea5a:	4a1f      	ldr	r2, [pc, #124]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800ea5c:	23d1      	movs	r3, #209	; 0xd1
 800ea5e:	009b      	lsls	r3, r3, #2
 800ea60:	58d3      	ldr	r3, [r2, r3]
 800ea62:	68db      	ldr	r3, [r3, #12]
 800ea64:	4a1e      	ldr	r2, [pc, #120]	; (800eae0 <LoRaMacHandleIndicationEvents+0xa8>)
 800ea66:	0010      	movs	r0, r2
 800ea68:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800ea6a:	4b1b      	ldr	r3, [pc, #108]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800ea6c:	4a1b      	ldr	r2, [pc, #108]	; (800eadc <LoRaMacHandleIndicationEvents+0xa4>)
 800ea6e:	5c9b      	ldrb	r3, [r3, r2]
 800ea70:	2210      	movs	r2, #16
 800ea72:	4013      	ands	r3, r2
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d013      	beq.n	800eaa2 <LoRaMacHandleIndicationEvents+0x6a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800ea7a:	1d3b      	adds	r3, r7, #4
 800ea7c:	2206      	movs	r2, #6
 800ea7e:	701a      	strb	r2, [r3, #0]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ea80:	1d3b      	adds	r3, r7, #4
 800ea82:	2200      	movs	r2, #0
 800ea84:	705a      	strb	r2, [r3, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800ea86:	4a14      	ldr	r2, [pc, #80]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800ea88:	23d1      	movs	r3, #209	; 0xd1
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	58d3      	ldr	r3, [r2, r3]
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	1d3a      	adds	r2, r7, #4
 800ea92:	0010      	movs	r0, r2
 800ea94:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800ea96:	4b10      	ldr	r3, [pc, #64]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800ea98:	4a10      	ldr	r2, [pc, #64]	; (800eadc <LoRaMacHandleIndicationEvents+0xa4>)
 800ea9a:	5c99      	ldrb	r1, [r3, r2]
 800ea9c:	2010      	movs	r0, #16
 800ea9e:	4381      	bics	r1, r0
 800eaa0:	5499      	strb	r1, [r3, r2]
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800eaa2:	4b0d      	ldr	r3, [pc, #52]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800eaa4:	4a0d      	ldr	r2, [pc, #52]	; (800eadc <LoRaMacHandleIndicationEvents+0xa4>)
 800eaa6:	5c9b      	ldrb	r3, [r3, r2]
 800eaa8:	2202      	movs	r2, #2
 800eaaa:	4013      	ands	r3, r2
 800eaac:	b2db      	uxtb	r3, r3
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00d      	beq.n	800eace <LoRaMacHandleIndicationEvents+0x96>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800eab2:	4b09      	ldr	r3, [pc, #36]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800eab4:	4a09      	ldr	r2, [pc, #36]	; (800eadc <LoRaMacHandleIndicationEvents+0xa4>)
 800eab6:	5c99      	ldrb	r1, [r3, r2]
 800eab8:	2002      	movs	r0, #2
 800eaba:	4381      	bics	r1, r0
 800eabc:	5499      	strb	r1, [r3, r2]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800eabe:	4a06      	ldr	r2, [pc, #24]	; (800ead8 <LoRaMacHandleIndicationEvents+0xa0>)
 800eac0:	23d1      	movs	r3, #209	; 0xd1
 800eac2:	009b      	lsls	r3, r3, #2
 800eac4:	58d3      	ldr	r3, [r2, r3]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	4a06      	ldr	r2, [pc, #24]	; (800eae4 <LoRaMacHandleIndicationEvents+0xac>)
 800eaca:	0010      	movs	r0, r2
 800eacc:	4798      	blx	r3
    }
}
 800eace:	46c0      	nop			; (mov r8, r8)
 800ead0:	46bd      	mov	sp, r7
 800ead2:	b008      	add	sp, #32
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	46c0      	nop			; (mov r8, r8)
 800ead8:	200008f0 	.word	0x200008f0
 800eadc:	00000481 	.word	0x00000481
 800eae0:	20000d54 	.word	0x20000d54
 800eae4:	20000d0c 	.word	0x20000d0c

0800eae8 <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800eae8:	b590      	push	{r4, r7, lr}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800eaee:	4b39      	ldr	r3, [pc, #228]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eaf0:	4a39      	ldr	r2, [pc, #228]	; (800ebd8 <LoRaMacHandleMcpsRequest+0xf0>)
 800eaf2:	5c9b      	ldrb	r3, [r3, r2]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	4013      	ands	r3, r2
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d066      	beq.n	800ebcc <LoRaMacHandleMcpsRequest+0xe4>
    {
        bool stopRetransmission = false;
 800eafe:	1dfb      	adds	r3, r7, #7
 800eb00:	2200      	movs	r2, #0
 800eb02:	701a      	strb	r2, [r3, #0]
        bool waitForRetransmission = false;
 800eb04:	1dbb      	adds	r3, r7, #6
 800eb06:	2200      	movs	r2, #0
 800eb08:	701a      	strb	r2, [r3, #0]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800eb0a:	4b32      	ldr	r3, [pc, #200]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eb0c:	4a33      	ldr	r2, [pc, #204]	; (800ebdc <LoRaMacHandleMcpsRequest+0xf4>)
 800eb0e:	5c9b      	ldrb	r3, [r3, r2]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d004      	beq.n	800eb1e <LoRaMacHandleMcpsRequest+0x36>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800eb14:	4b2f      	ldr	r3, [pc, #188]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eb16:	4a31      	ldr	r2, [pc, #196]	; (800ebdc <LoRaMacHandleMcpsRequest+0xf4>)
 800eb18:	5c9b      	ldrb	r3, [r3, r2]
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800eb1a:	2b03      	cmp	r3, #3
 800eb1c:	d105      	bne.n	800eb2a <LoRaMacHandleMcpsRequest+0x42>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800eb1e:	1dfc      	adds	r4, r7, #7
 800eb20:	f002 fb70 	bl	8011204 <CheckRetransUnconfirmedUplink>
 800eb24:	0003      	movs	r3, r0
 800eb26:	7023      	strb	r3, [r4, #0]
 800eb28:	e026      	b.n	800eb78 <LoRaMacHandleMcpsRequest+0x90>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800eb2a:	4b2a      	ldr	r3, [pc, #168]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eb2c:	4a2b      	ldr	r2, [pc, #172]	; (800ebdc <LoRaMacHandleMcpsRequest+0xf4>)
 800eb2e:	5c9b      	ldrb	r3, [r3, r2]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d121      	bne.n	800eb78 <LoRaMacHandleMcpsRequest+0x90>
        {
            if( MacCtx.AckTimeoutRetry == true )
 800eb34:	4b27      	ldr	r3, [pc, #156]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eb36:	4a2a      	ldr	r2, [pc, #168]	; (800ebe0 <LoRaMacHandleMcpsRequest+0xf8>)
 800eb38:	5c9b      	ldrb	r3, [r3, r2]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d019      	beq.n	800eb72 <LoRaMacHandleMcpsRequest+0x8a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800eb3e:	1dfc      	adds	r4, r7, #7
 800eb40:	f002 fb94 	bl	801126c <CheckRetransConfirmedUplink>
 800eb44:	0003      	movs	r3, r0
 800eb46:	7023      	strb	r3, [r4, #0]

                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800eb48:	4b22      	ldr	r3, [pc, #136]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eb4a:	4a26      	ldr	r2, [pc, #152]	; (800ebe4 <LoRaMacHandleMcpsRequest+0xfc>)
 800eb4c:	589a      	ldr	r2, [r3, r2]
 800eb4e:	23e9      	movs	r3, #233	; 0xe9
 800eb50:	005b      	lsls	r3, r3, #1
 800eb52:	5cd3      	ldrb	r3, [r2, r3]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d10f      	bne.n	800eb78 <LoRaMacHandleMcpsRequest+0x90>
                {
                    if( stopRetransmission == false )
 800eb58:	1dfb      	adds	r3, r7, #7
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	2201      	movs	r2, #1
 800eb5e:	4053      	eors	r3, r2
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d002      	beq.n	800eb6c <LoRaMacHandleMcpsRequest+0x84>
                    {
                        AckTimeoutRetriesProcess( );
 800eb66:	f002 fbf5 	bl	8011354 <AckTimeoutRetriesProcess>
 800eb6a:	e005      	b.n	800eb78 <LoRaMacHandleMcpsRequest+0x90>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800eb6c:	f002 fc40 	bl	80113f0 <AckTimeoutRetriesFinalize>
 800eb70:	e002      	b.n	800eb78 <LoRaMacHandleMcpsRequest+0x90>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800eb72:	1dbb      	adds	r3, r7, #6
 800eb74:	2201      	movs	r2, #1
 800eb76:	701a      	strb	r2, [r3, #0]
            }
        }

        if( stopRetransmission == true )
 800eb78:	1dfb      	adds	r3, r7, #7
 800eb7a:	781b      	ldrb	r3, [r3, #0]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d011      	beq.n	800eba4 <LoRaMacHandleMcpsRequest+0xbc>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800eb80:	4b19      	ldr	r3, [pc, #100]	; (800ebe8 <LoRaMacHandleMcpsRequest+0x100>)
 800eb82:	0018      	movs	r0, r3
 800eb84:	f00a fbec 	bl	8019360 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800eb88:	4a12      	ldr	r2, [pc, #72]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eb8a:	23d0      	movs	r3, #208	; 0xd0
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	58d3      	ldr	r3, [r2, r3]
 800eb90:	2220      	movs	r2, #32
 800eb92:	4393      	bics	r3, r2
 800eb94:	0019      	movs	r1, r3
 800eb96:	4a0f      	ldr	r2, [pc, #60]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800eb98:	23d0      	movs	r3, #208	; 0xd0
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	50d1      	str	r1, [r2, r3]
            StopRetransmission( );
 800eb9e:	f002 fb8d 	bl	80112bc <StopRetransmission>
            MacCtx.AckTimeoutRetry = false;
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800eba2:	e013      	b.n	800ebcc <LoRaMacHandleMcpsRequest+0xe4>
        else if( waitForRetransmission == false )
 800eba4:	1dbb      	adds	r3, r7, #6
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	4053      	eors	r3, r2
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d00c      	beq.n	800ebcc <LoRaMacHandleMcpsRequest+0xe4>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ebb2:	4b08      	ldr	r3, [pc, #32]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800ebb4:	4a08      	ldr	r2, [pc, #32]	; (800ebd8 <LoRaMacHandleMcpsRequest+0xf0>)
 800ebb6:	5c99      	ldrb	r1, [r3, r2]
 800ebb8:	2020      	movs	r0, #32
 800ebba:	4381      	bics	r1, r0
 800ebbc:	5499      	strb	r1, [r3, r2]
            MacCtx.AckTimeoutRetry = false;
 800ebbe:	4b05      	ldr	r3, [pc, #20]	; (800ebd4 <LoRaMacHandleMcpsRequest+0xec>)
 800ebc0:	4a07      	ldr	r2, [pc, #28]	; (800ebe0 <LoRaMacHandleMcpsRequest+0xf8>)
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	5499      	strb	r1, [r3, r2]
            OnTxDelayedTimerEvent( NULL );
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	f000 f8e8 	bl	800ed9c <OnTxDelayedTimerEvent>
}
 800ebcc:	46c0      	nop			; (mov r8, r8)
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	b003      	add	sp, #12
 800ebd2:	bd90      	pop	{r4, r7, pc}
 800ebd4:	200008f0 	.word	0x200008f0
 800ebd8:	00000481 	.word	0x00000481
 800ebdc:	0000043c 	.word	0x0000043c
 800ebe0:	00000413 	.word	0x00000413
 800ebe4:	00000484 	.word	0x00000484
 800ebe8:	20000c58 	.word	0x20000c58

0800ebec <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ebf0:	4b1d      	ldr	r3, [pc, #116]	; (800ec68 <LoRaMacHandleMlmeRequest+0x7c>)
 800ebf2:	4a1e      	ldr	r2, [pc, #120]	; (800ec6c <LoRaMacHandleMlmeRequest+0x80>)
 800ebf4:	5c9b      	ldrb	r3, [r3, r2]
 800ebf6:	2204      	movs	r2, #4
 800ebf8:	4013      	ands	r3, r2
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d02f      	beq.n	800ec60 <LoRaMacHandleMlmeRequest+0x74>
    {
        if( ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 800ec00:	2000      	movs	r0, #0
 800ec02:	f005 f809 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 800ec06:	1e03      	subs	r3, r0, #0
 800ec08:	d015      	beq.n	800ec36 <LoRaMacHandleMlmeRequest+0x4a>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ec0a:	2000      	movs	r0, #0
 800ec0c:	f004 ffac 	bl	8013b68 <LoRaMacConfirmQueueGetStatus>
 800ec10:	1e03      	subs	r3, r0, #0
 800ec12:	d104      	bne.n	800ec1e <LoRaMacHandleMlmeRequest+0x32>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800ec14:	4a14      	ldr	r2, [pc, #80]	; (800ec68 <LoRaMacHandleMlmeRequest+0x7c>)
 800ec16:	2382      	movs	r3, #130	; 0x82
 800ec18:	00db      	lsls	r3, r3, #3
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	54d1      	strb	r1, [r2, r3]
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ec1e:	4a12      	ldr	r2, [pc, #72]	; (800ec68 <LoRaMacHandleMlmeRequest+0x7c>)
 800ec20:	23d0      	movs	r3, #208	; 0xd0
 800ec22:	009b      	lsls	r3, r3, #2
 800ec24:	58d3      	ldr	r3, [r2, r3]
 800ec26:	2202      	movs	r2, #2
 800ec28:	4393      	bics	r3, r2
 800ec2a:	0019      	movs	r1, r3
 800ec2c:	4a0e      	ldr	r2, [pc, #56]	; (800ec68 <LoRaMacHandleMlmeRequest+0x7c>)
 800ec2e:	23d0      	movs	r3, #208	; 0xd0
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	50d1      	str	r1, [r2, r3]
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
    }
}
 800ec34:	e014      	b.n	800ec60 <LoRaMacHandleMlmeRequest+0x74>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ec36:	2004      	movs	r0, #4
 800ec38:	f004 ffee 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 800ec3c:	1e03      	subs	r3, r0, #0
 800ec3e:	d104      	bne.n	800ec4a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800ec40:	2005      	movs	r0, #5
 800ec42:	f004 ffe9 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 800ec46:	1e03      	subs	r3, r0, #0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ec48:	d00a      	beq.n	800ec60 <LoRaMacHandleMlmeRequest+0x74>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ec4a:	4a07      	ldr	r2, [pc, #28]	; (800ec68 <LoRaMacHandleMlmeRequest+0x7c>)
 800ec4c:	23d0      	movs	r3, #208	; 0xd0
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	58d3      	ldr	r3, [r2, r3]
 800ec52:	2202      	movs	r2, #2
 800ec54:	4393      	bics	r3, r2
 800ec56:	0019      	movs	r1, r3
 800ec58:	4a03      	ldr	r2, [pc, #12]	; (800ec68 <LoRaMacHandleMlmeRequest+0x7c>)
 800ec5a:	23d0      	movs	r3, #208	; 0xd0
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	50d1      	str	r1, [r2, r3]
}
 800ec60:	46c0      	nop			; (mov r8, r8)
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	46c0      	nop			; (mov r8, r8)
 800ec68:	200008f0 	.word	0x200008f0
 800ec6c:	00000481 	.word	0x00000481

0800ec70 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ec74:	200b      	movs	r0, #11
 800ec76:	f004 ffcf 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 800ec7a:	1e03      	subs	r3, r0, #0
 800ec7c:	d01c      	beq.n	800ecb8 <LoRaMacCheckForBeaconAcquisition+0x48>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ec7e:	4b10      	ldr	r3, [pc, #64]	; (800ecc0 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ec80:	4a10      	ldr	r2, [pc, #64]	; (800ecc4 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800ec82:	5c9b      	ldrb	r3, [r3, r2]
 800ec84:	2201      	movs	r2, #1
 800ec86:	4013      	ands	r3, r2
 800ec88:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d114      	bne.n	800ecb8 <LoRaMacCheckForBeaconAcquisition+0x48>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ec8e:	4b0c      	ldr	r3, [pc, #48]	; (800ecc0 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ec90:	4a0c      	ldr	r2, [pc, #48]	; (800ecc4 <LoRaMacCheckForBeaconAcquisition+0x54>)
 800ec92:	5c9b      	ldrb	r3, [r3, r2]
 800ec94:	2204      	movs	r2, #4
 800ec96:	4013      	ands	r3, r2
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d00c      	beq.n	800ecb8 <LoRaMacCheckForBeaconAcquisition+0x48>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ec9e:	4a08      	ldr	r2, [pc, #32]	; (800ecc0 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800eca0:	23d0      	movs	r3, #208	; 0xd0
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	58d3      	ldr	r3, [r2, r3]
 800eca6:	2202      	movs	r2, #2
 800eca8:	4393      	bics	r3, r2
 800ecaa:	0019      	movs	r1, r3
 800ecac:	4a04      	ldr	r2, [pc, #16]	; (800ecc0 <LoRaMacCheckForBeaconAcquisition+0x50>)
 800ecae:	23d0      	movs	r3, #208	; 0xd0
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	50d1      	str	r1, [r2, r3]
            return 0x01;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	e000      	b.n	800ecba <LoRaMacCheckForBeaconAcquisition+0x4a>
        }
    }
    return 0x00;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	0018      	movs	r0, r3
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	200008f0 	.word	0x200008f0
 800ecc4:	00000481 	.word	0x00000481

0800ecc8 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800eccc:	4a0f      	ldr	r2, [pc, #60]	; (800ed0c <LoRaMacCheckForRxAbort+0x44>)
 800ecce:	23d0      	movs	r3, #208	; 0xd0
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	58d3      	ldr	r3, [r2, r3]
 800ecd4:	2280      	movs	r2, #128	; 0x80
 800ecd6:	4013      	ands	r3, r2
 800ecd8:	d015      	beq.n	800ed06 <LoRaMacCheckForRxAbort+0x3e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800ecda:	4a0c      	ldr	r2, [pc, #48]	; (800ed0c <LoRaMacCheckForRxAbort+0x44>)
 800ecdc:	23d0      	movs	r3, #208	; 0xd0
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	58d3      	ldr	r3, [r2, r3]
 800ece2:	2280      	movs	r2, #128	; 0x80
 800ece4:	4393      	bics	r3, r2
 800ece6:	0019      	movs	r1, r3
 800ece8:	4a08      	ldr	r2, [pc, #32]	; (800ed0c <LoRaMacCheckForRxAbort+0x44>)
 800ecea:	23d0      	movs	r3, #208	; 0xd0
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	50d1      	str	r1, [r2, r3]
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ecf0:	4a06      	ldr	r2, [pc, #24]	; (800ed0c <LoRaMacCheckForRxAbort+0x44>)
 800ecf2:	23d0      	movs	r3, #208	; 0xd0
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	58d3      	ldr	r3, [r2, r3]
 800ecf8:	2202      	movs	r2, #2
 800ecfa:	4393      	bics	r3, r2
 800ecfc:	0019      	movs	r1, r3
 800ecfe:	4a03      	ldr	r2, [pc, #12]	; (800ed0c <LoRaMacCheckForRxAbort+0x44>)
 800ed00:	23d0      	movs	r3, #208	; 0xd0
 800ed02:	009b      	lsls	r3, r3, #2
 800ed04:	50d1      	str	r1, [r2, r3]
    }
}
 800ed06:	46c0      	nop			; (mov r8, r8)
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}
 800ed0c:	200008f0 	.word	0x200008f0

0800ed10 <LoRaMacProcess>:


void LoRaMacProcess( void )
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ed16:	1dfb      	adds	r3, r7, #7
 800ed18:	2200      	movs	r2, #0
 800ed1a:	701a      	strb	r2, [r3, #0]

    LoRaMacHandleIrqEvents( );
 800ed1c:	f7ff fd94 	bl	800e848 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ed20:	f004 fb49 	bl	80133b6 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800ed24:	4b1b      	ldr	r3, [pc, #108]	; (800ed94 <LoRaMacProcess+0x84>)
 800ed26:	4a1c      	ldr	r2, [pc, #112]	; (800ed98 <LoRaMacProcess+0x88>)
 800ed28:	5c9b      	ldrb	r3, [r3, r2]
 800ed2a:	2220      	movs	r2, #32
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d020      	beq.n	800ed76 <LoRaMacProcess+0x66>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ed34:	2000      	movs	r0, #0
 800ed36:	f7ff fde9 	bl	800e90c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ed3a:	f7ff ffc5 	bl	800ecc8 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ed3e:	f002 fbed 	bl	801151c <IsRequestPending>
 800ed42:	1e03      	subs	r3, r0, #0
 800ed44:	d008      	beq.n	800ed58 <LoRaMacProcess+0x48>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ed46:	f7ff ff93 	bl	800ec70 <LoRaMacCheckForBeaconAcquisition>
 800ed4a:	0003      	movs	r3, r0
 800ed4c:	0019      	movs	r1, r3
 800ed4e:	1dfb      	adds	r3, r7, #7
 800ed50:	1dfa      	adds	r2, r7, #7
 800ed52:	7812      	ldrb	r2, [r2, #0]
 800ed54:	430a      	orrs	r2, r1
 800ed56:	701a      	strb	r2, [r3, #0]
        }

        if( noTx == 0x00 )
 800ed58:	1dfb      	adds	r3, r7, #7
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d103      	bne.n	800ed68 <LoRaMacProcess+0x58>
        {
            LoRaMacHandleMlmeRequest( );
 800ed60:	f7ff ff44 	bl	800ebec <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ed64:	f7ff fec0 	bl	800eae8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ed68:	f7ff fde4 	bl	800e934 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ed6c:	f7ff fe48 	bl	800ea00 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ed70:	2001      	movs	r0, #1
 800ed72:	f7ff fdcb 	bl	800e90c <LoRaMacEnableRequests>
    }
    LoRaMacHandleIndicationEvents( );
 800ed76:	f7ff fe5f 	bl	800ea38 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ed7a:	4a06      	ldr	r2, [pc, #24]	; (800ed94 <LoRaMacProcess+0x84>)
 800ed7c:	2390      	movs	r3, #144	; 0x90
 800ed7e:	00db      	lsls	r3, r3, #3
 800ed80:	5cd3      	ldrb	r3, [r2, r3]
 800ed82:	2b02      	cmp	r3, #2
 800ed84:	d101      	bne.n	800ed8a <LoRaMacProcess+0x7a>
    {
        OpenContinuousRxCWindow( );
 800ed86:	f001 fe5b 	bl	8010a40 <OpenContinuousRxCWindow>
    }
}
 800ed8a:	46c0      	nop			; (mov r8, r8)
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	b002      	add	sp, #8
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	46c0      	nop			; (mov r8, r8)
 800ed94:	200008f0 	.word	0x200008f0
 800ed98:	00000481 	.word	0x00000481

0800ed9c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800eda4:	4b19      	ldr	r3, [pc, #100]	; (800ee0c <OnTxDelayedTimerEvent+0x70>)
 800eda6:	0018      	movs	r0, r3
 800eda8:	f00a fada 	bl	8019360 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800edac:	4a18      	ldr	r2, [pc, #96]	; (800ee10 <OnTxDelayedTimerEvent+0x74>)
 800edae:	23d0      	movs	r3, #208	; 0xd0
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	58d3      	ldr	r3, [r2, r3]
 800edb4:	2220      	movs	r2, #32
 800edb6:	4393      	bics	r3, r2
 800edb8:	0019      	movs	r1, r3
 800edba:	4a15      	ldr	r2, [pc, #84]	; (800ee10 <OnTxDelayedTimerEvent+0x74>)
 800edbc:	23d0      	movs	r3, #208	; 0xd0
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	50d1      	str	r1, [r2, r3]

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800edc2:	2001      	movs	r0, #1
 800edc4:	f001 fa98 	bl	80102f8 <ScheduleTx>
 800edc8:	1e03      	subs	r3, r0, #0
 800edca:	d01a      	beq.n	800ee02 <OnTxDelayedTimerEvent+0x66>
 800edcc:	2b0b      	cmp	r3, #11
 800edce:	d018      	beq.n	800ee02 <OnTxDelayedTimerEvent+0x66>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800edd0:	4b0f      	ldr	r3, [pc, #60]	; (800ee10 <OnTxDelayedTimerEvent+0x74>)
 800edd2:	4a10      	ldr	r2, [pc, #64]	; (800ee14 <OnTxDelayedTimerEvent+0x78>)
 800edd4:	589b      	ldr	r3, [r3, r2]
 800edd6:	22f9      	movs	r2, #249	; 0xf9
 800edd8:	569b      	ldrsb	r3, [r3, r2]
 800edda:	b2d9      	uxtb	r1, r3
 800eddc:	4b0c      	ldr	r3, [pc, #48]	; (800ee10 <OnTxDelayedTimerEvent+0x74>)
 800edde:	4a0e      	ldr	r2, [pc, #56]	; (800ee18 <OnTxDelayedTimerEvent+0x7c>)
 800ede0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800ede2:	4b0b      	ldr	r3, [pc, #44]	; (800ee10 <OnTxDelayedTimerEvent+0x74>)
 800ede4:	4a0d      	ldr	r2, [pc, #52]	; (800ee1c <OnTxDelayedTimerEvent+0x80>)
 800ede6:	5c99      	ldrb	r1, [r3, r2]
 800ede8:	4b09      	ldr	r3, [pc, #36]	; (800ee10 <OnTxDelayedTimerEvent+0x74>)
 800edea:	4a0d      	ldr	r2, [pc, #52]	; (800ee20 <OnTxDelayedTimerEvent+0x84>)
 800edec:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800edee:	4b08      	ldr	r3, [pc, #32]	; (800ee10 <OnTxDelayedTimerEvent+0x74>)
 800edf0:	4a0c      	ldr	r2, [pc, #48]	; (800ee24 <OnTxDelayedTimerEvent+0x88>)
 800edf2:	2109      	movs	r1, #9
 800edf4:	5499      	strb	r1, [r3, r2]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800edf6:	2009      	movs	r0, #9
 800edf8:	f004 fedc 	bl	8013bb4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800edfc:	f002 fa5e 	bl	80112bc <StopRetransmission>
            break;
 800ee00:	e000      	b.n	800ee04 <OnTxDelayedTimerEvent+0x68>
            break;
 800ee02:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ee04:	46c0      	nop			; (mov r8, r8)
 800ee06:	46bd      	mov	sp, r7
 800ee08:	b002      	add	sp, #8
 800ee0a:	bd80      	pop	{r7, pc}
 800ee0c:	20000c58 	.word	0x20000c58
 800ee10:	200008f0 	.word	0x200008f0
 800ee14:	00000484 	.word	0x00000484
 800ee18:	0000043e 	.word	0x0000043e
 800ee1c:	00000412 	.word	0x00000412
 800ee20:	00000441 	.word	0x00000441
 800ee24:	0000043d 	.word	0x0000043d

0800ee28 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800ee30:	4b1a      	ldr	r3, [pc, #104]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee32:	4a1b      	ldr	r2, [pc, #108]	; (800eea0 <OnRxWindow1TimerEvent+0x78>)
 800ee34:	5c99      	ldrb	r1, [r3, r2]
 800ee36:	4a19      	ldr	r2, [pc, #100]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee38:	23ee      	movs	r3, #238	; 0xee
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800ee3e:	4b17      	ldr	r3, [pc, #92]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee40:	4a18      	ldr	r2, [pc, #96]	; (800eea4 <OnRxWindow1TimerEvent+0x7c>)
 800ee42:	589a      	ldr	r2, [r3, r2]
 800ee44:	231a      	movs	r3, #26
 800ee46:	33ff      	adds	r3, #255	; 0xff
 800ee48:	5cd3      	ldrb	r3, [r2, r3]
 800ee4a:	b259      	sxtb	r1, r3
 800ee4c:	4b13      	ldr	r3, [pc, #76]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee4e:	4a16      	ldr	r2, [pc, #88]	; (800eea8 <OnRxWindow1TimerEvent+0x80>)
 800ee50:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800ee52:	4b12      	ldr	r3, [pc, #72]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee54:	4a13      	ldr	r2, [pc, #76]	; (800eea4 <OnRxWindow1TimerEvent+0x7c>)
 800ee56:	589a      	ldr	r2, [r3, r2]
 800ee58:	232e      	movs	r3, #46	; 0x2e
 800ee5a:	33ff      	adds	r3, #255	; 0xff
 800ee5c:	5cd1      	ldrb	r1, [r2, r3]
 800ee5e:	4a0f      	ldr	r2, [pc, #60]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee60:	23f2      	movs	r3, #242	; 0xf2
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ee66:	4b0d      	ldr	r3, [pc, #52]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee68:	4a0e      	ldr	r2, [pc, #56]	; (800eea4 <OnRxWindow1TimerEvent+0x7c>)
 800ee6a:	589a      	ldr	r2, [r3, r2]
 800ee6c:	2340      	movs	r3, #64	; 0x40
 800ee6e:	33ff      	adds	r3, #255	; 0xff
 800ee70:	5cd1      	ldrb	r1, [r2, r3]
 800ee72:	4b0a      	ldr	r3, [pc, #40]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee74:	4a0d      	ldr	r2, [pc, #52]	; (800eeac <OnRxWindow1TimerEvent+0x84>)
 800ee76:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ee78:	4b08      	ldr	r3, [pc, #32]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee7a:	4a0d      	ldr	r2, [pc, #52]	; (800eeb0 <OnRxWindow1TimerEvent+0x88>)
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ee80:	4b06      	ldr	r3, [pc, #24]	; (800ee9c <OnRxWindow1TimerEvent+0x74>)
 800ee82:	4a0c      	ldr	r2, [pc, #48]	; (800eeb4 <OnRxWindow1TimerEvent+0x8c>)
 800ee84:	2100      	movs	r1, #0
 800ee86:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ee88:	4a0b      	ldr	r2, [pc, #44]	; (800eeb8 <OnRxWindow1TimerEvent+0x90>)
 800ee8a:	4b0c      	ldr	r3, [pc, #48]	; (800eebc <OnRxWindow1TimerEvent+0x94>)
 800ee8c:	0011      	movs	r1, r2
 800ee8e:	0018      	movs	r0, r3
 800ee90:	f001 fda2 	bl	80109d8 <RxWindowSetup>
}
 800ee94:	46c0      	nop			; (mov r8, r8)
 800ee96:	46bd      	mov	sp, r7
 800ee98:	b002      	add	sp, #8
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	200008f0 	.word	0x200008f0
 800eea0:	00000415 	.word	0x00000415
 800eea4:	00000484 	.word	0x00000484
 800eea8:	000003bb 	.word	0x000003bb
 800eeac:	000003c9 	.word	0x000003c9
 800eeb0:	000003ca 	.word	0x000003ca
 800eeb4:	000003cb 	.word	0x000003cb
 800eeb8:	20000ca8 	.word	0x20000ca8
 800eebc:	20000c70 	.word	0x20000c70

0800eec0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800eec8:	4a1e      	ldr	r2, [pc, #120]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800eeca:	2390      	movs	r3, #144	; 0x90
 800eecc:	00db      	lsls	r3, r3, #3
 800eece:	5cd3      	ldrb	r3, [r2, r3]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d032      	beq.n	800ef3a <OnRxWindow2TimerEvent+0x7a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800eed4:	4b1b      	ldr	r3, [pc, #108]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800eed6:	4a1c      	ldr	r2, [pc, #112]	; (800ef48 <OnRxWindow2TimerEvent+0x88>)
 800eed8:	5c99      	ldrb	r1, [r3, r2]
 800eeda:	4a1a      	ldr	r2, [pc, #104]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800eedc:	23f3      	movs	r3, #243	; 0xf3
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 800eee2:	4b18      	ldr	r3, [pc, #96]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800eee4:	4a19      	ldr	r2, [pc, #100]	; (800ef4c <OnRxWindow2TimerEvent+0x8c>)
 800eee6:	589a      	ldr	r2, [r3, r2]
 800eee8:	238e      	movs	r3, #142	; 0x8e
 800eeea:	005b      	lsls	r3, r3, #1
 800eeec:	58d1      	ldr	r1, [r2, r3]
 800eeee:	4a15      	ldr	r2, [pc, #84]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800eef0:	23f4      	movs	r3, #244	; 0xf4
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800eef6:	4b13      	ldr	r3, [pc, #76]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800eef8:	4a14      	ldr	r2, [pc, #80]	; (800ef4c <OnRxWindow2TimerEvent+0x8c>)
 800eefa:	589a      	ldr	r2, [r3, r2]
 800eefc:	232e      	movs	r3, #46	; 0x2e
 800eefe:	33ff      	adds	r3, #255	; 0xff
 800ef00:	5cd1      	ldrb	r1, [r2, r3]
 800ef02:	4a10      	ldr	r2, [pc, #64]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800ef04:	23f7      	movs	r3, #247	; 0xf7
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ef0a:	4b0e      	ldr	r3, [pc, #56]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800ef0c:	4a0f      	ldr	r2, [pc, #60]	; (800ef4c <OnRxWindow2TimerEvent+0x8c>)
 800ef0e:	589a      	ldr	r2, [r3, r2]
 800ef10:	2340      	movs	r3, #64	; 0x40
 800ef12:	33ff      	adds	r3, #255	; 0xff
 800ef14:	5cd1      	ldrb	r1, [r2, r3]
 800ef16:	4b0b      	ldr	r3, [pc, #44]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800ef18:	4a0d      	ldr	r2, [pc, #52]	; (800ef50 <OnRxWindow2TimerEvent+0x90>)
 800ef1a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ef1c:	4b09      	ldr	r3, [pc, #36]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800ef1e:	4a0d      	ldr	r2, [pc, #52]	; (800ef54 <OnRxWindow2TimerEvent+0x94>)
 800ef20:	2100      	movs	r1, #0
 800ef22:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ef24:	4b07      	ldr	r3, [pc, #28]	; (800ef44 <OnRxWindow2TimerEvent+0x84>)
 800ef26:	4a0c      	ldr	r2, [pc, #48]	; (800ef58 <OnRxWindow2TimerEvent+0x98>)
 800ef28:	2101      	movs	r1, #1
 800ef2a:	5499      	strb	r1, [r3, r2]

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800ef2c:	4a0b      	ldr	r2, [pc, #44]	; (800ef5c <OnRxWindow2TimerEvent+0x9c>)
 800ef2e:	4b0c      	ldr	r3, [pc, #48]	; (800ef60 <OnRxWindow2TimerEvent+0xa0>)
 800ef30:	0011      	movs	r1, r2
 800ef32:	0018      	movs	r0, r3
 800ef34:	f001 fd50 	bl	80109d8 <RxWindowSetup>
 800ef38:	e000      	b.n	800ef3c <OnRxWindow2TimerEvent+0x7c>
        return;
 800ef3a:	46c0      	nop			; (mov r8, r8)
}
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	b002      	add	sp, #8
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	46c0      	nop			; (mov r8, r8)
 800ef44:	200008f0 	.word	0x200008f0
 800ef48:	00000415 	.word	0x00000415
 800ef4c:	00000484 	.word	0x00000484
 800ef50:	000003dd 	.word	0x000003dd
 800ef54:	000003de 	.word	0x000003de
 800ef58:	000003df 	.word	0x000003df
 800ef5c:	20000cbc 	.word	0x20000cbc
 800ef60:	20000c88 	.word	0x20000c88

0800ef64 <OnAckTimeoutTimerEvent>:

static void OnAckTimeoutTimerEvent( void* context )
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b082      	sub	sp, #8
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800ef6c:	4b18      	ldr	r3, [pc, #96]	; (800efd0 <OnAckTimeoutTimerEvent+0x6c>)
 800ef6e:	0018      	movs	r0, r3
 800ef70:	f00a f9f6 	bl	8019360 <TimerStop>

    if( MacCtx.NodeAckRequested == true )
 800ef74:	4b17      	ldr	r3, [pc, #92]	; (800efd4 <OnAckTimeoutTimerEvent+0x70>)
 800ef76:	4a18      	ldr	r2, [pc, #96]	; (800efd8 <OnAckTimeoutTimerEvent+0x74>)
 800ef78:	5c9b      	ldrb	r3, [r3, r2]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d003      	beq.n	800ef86 <OnAckTimeoutTimerEvent+0x22>
    {
        MacCtx.AckTimeoutRetry = true;
 800ef7e:	4b15      	ldr	r3, [pc, #84]	; (800efd4 <OnAckTimeoutTimerEvent+0x70>)
 800ef80:	4a16      	ldr	r2, [pc, #88]	; (800efdc <OnAckTimeoutTimerEvent+0x78>)
 800ef82:	2101      	movs	r1, #1
 800ef84:	5499      	strb	r1, [r3, r2]
    }
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ef86:	4b13      	ldr	r3, [pc, #76]	; (800efd4 <OnAckTimeoutTimerEvent+0x70>)
 800ef88:	4a15      	ldr	r2, [pc, #84]	; (800efe0 <OnAckTimeoutTimerEvent+0x7c>)
 800ef8a:	589b      	ldr	r3, [r3, r2]
 800ef8c:	22f0      	movs	r2, #240	; 0xf0
 800ef8e:	5c9b      	ldrb	r3, [r3, r2]
 800ef90:	2b02      	cmp	r3, #2
 800ef92:	d105      	bne.n	800efa0 <OnAckTimeoutTimerEvent+0x3c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ef94:	4b0f      	ldr	r3, [pc, #60]	; (800efd4 <OnAckTimeoutTimerEvent+0x70>)
 800ef96:	4a13      	ldr	r2, [pc, #76]	; (800efe4 <OnAckTimeoutTimerEvent+0x80>)
 800ef98:	5c99      	ldrb	r1, [r3, r2]
 800ef9a:	2020      	movs	r0, #32
 800ef9c:	4301      	orrs	r1, r0
 800ef9e:	5499      	strb	r1, [r3, r2]
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800efa0:	4a0c      	ldr	r2, [pc, #48]	; (800efd4 <OnAckTimeoutTimerEvent+0x70>)
 800efa2:	23d2      	movs	r3, #210	; 0xd2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	58d3      	ldr	r3, [r2, r3]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d00c      	beq.n	800efc6 <OnAckTimeoutTimerEvent+0x62>
 800efac:	4a09      	ldr	r2, [pc, #36]	; (800efd4 <OnAckTimeoutTimerEvent+0x70>)
 800efae:	23d2      	movs	r3, #210	; 0xd2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	58d3      	ldr	r3, [r2, r3]
 800efb4:	68db      	ldr	r3, [r3, #12]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d005      	beq.n	800efc6 <OnAckTimeoutTimerEvent+0x62>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800efba:	4a06      	ldr	r2, [pc, #24]	; (800efd4 <OnAckTimeoutTimerEvent+0x70>)
 800efbc:	23d2      	movs	r3, #210	; 0xd2
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	58d3      	ldr	r3, [r2, r3]
 800efc2:	68db      	ldr	r3, [r3, #12]
 800efc4:	4798      	blx	r3
    }
}
 800efc6:	46c0      	nop			; (mov r8, r8)
 800efc8:	46bd      	mov	sp, r7
 800efca:	b002      	add	sp, #8
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	46c0      	nop			; (mov r8, r8)
 800efd0:	20000ce8 	.word	0x20000ce8
 800efd4:	200008f0 	.word	0x200008f0
 800efd8:	00000414 	.word	0x00000414
 800efdc:	00000413 	.word	0x00000413
 800efe0:	00000484 	.word	0x00000484
 800efe4:	00000481 	.word	0x00000481

0800efe8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800efe8:	b590      	push	{r4, r7, lr}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	60ba      	str	r2, [r7, #8]
 800eff0:	607b      	str	r3, [r7, #4]
 800eff2:	230f      	movs	r3, #15
 800eff4:	18fb      	adds	r3, r7, r3
 800eff6:	1c02      	adds	r2, r0, #0
 800eff8:	701a      	strb	r2, [r3, #0]
 800effa:	230e      	movs	r3, #14
 800effc:	18fb      	adds	r3, r7, r3
 800effe:	1c0a      	adds	r2, r1, #0
 800f000:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d005      	beq.n	800f014 <GetFCntDown+0x2c>
 800f008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d002      	beq.n	800f014 <GetFCntDown+0x2c>
 800f00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f010:	2b00      	cmp	r3, #0
 800f012:	d101      	bne.n	800f018 <GetFCntDown+0x30>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800f014:	230a      	movs	r3, #10
 800f016:	e042      	b.n	800f09e <GetFCntDown+0xb6>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800f018:	230f      	movs	r3, #15
 800f01a:	18fb      	adds	r3, r7, r3
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	2b04      	cmp	r3, #4
 800f020:	d82e      	bhi.n	800f080 <GetFCntDown+0x98>
 800f022:	009a      	lsls	r2, r3, #2
 800f024:	4b20      	ldr	r3, [pc, #128]	; (800f0a8 <GetFCntDown+0xc0>)
 800f026:	18d3      	adds	r3, r2, r3
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	469f      	mov	pc, r3
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800f02c:	1d3b      	adds	r3, r7, #4
 800f02e:	789b      	ldrb	r3, [r3, #2]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d111      	bne.n	800f058 <GetFCntDown+0x70>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800f034:	230e      	movs	r3, #14
 800f036:	18fb      	adds	r3, r7, r3
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d004      	beq.n	800f048 <GetFCntDown+0x60>
 800f03e:	230e      	movs	r3, #14
 800f040:	18fb      	adds	r3, r7, r3
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	2b03      	cmp	r3, #3
 800f046:	d103      	bne.n	800f050 <GetFCntDown+0x68>
                {
                    *fCntID = A_FCNT_DOWN;
 800f048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f04a:	2202      	movs	r2, #2
 800f04c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800f04e:	e019      	b.n	800f084 <GetFCntDown+0x9c>
                    *fCntID = N_FCNT_DOWN;
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	2201      	movs	r2, #1
 800f054:	701a      	strb	r2, [r3, #0]
            break;
 800f056:	e015      	b.n	800f084 <GetFCntDown+0x9c>
                *fCntID = FCNT_DOWN;
 800f058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05a:	2203      	movs	r2, #3
 800f05c:	701a      	strb	r2, [r3, #0]
            break;
 800f05e:	e011      	b.n	800f084 <GetFCntDown+0x9c>
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800f060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f062:	2204      	movs	r2, #4
 800f064:	701a      	strb	r2, [r3, #0]
            break;
 800f066:	e00d      	b.n	800f084 <GetFCntDown+0x9c>
        case MULTICAST_1_ADDR:
            *fCntID = MC_FCNT_DOWN_1;
 800f068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f06a:	2205      	movs	r2, #5
 800f06c:	701a      	strb	r2, [r3, #0]
            break;
 800f06e:	e009      	b.n	800f084 <GetFCntDown+0x9c>
        case MULTICAST_2_ADDR:
            *fCntID = MC_FCNT_DOWN_2;
 800f070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f072:	2206      	movs	r2, #6
 800f074:	701a      	strb	r2, [r3, #0]
            break;
 800f076:	e005      	b.n	800f084 <GetFCntDown+0x9c>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
 800f078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f07a:	2207      	movs	r2, #7
 800f07c:	701a      	strb	r2, [r3, #0]
            break;
 800f07e:	e001      	b.n	800f084 <GetFCntDown+0x9c>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800f080:	2305      	movs	r3, #5
 800f082:	e00c      	b.n	800f09e <GetFCntDown+0xb6>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f086:	7818      	ldrb	r0, [r3, #0]
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	89db      	ldrh	r3, [r3, #14]
 800f08c:	001c      	movs	r4, r3
 800f08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f090:	2220      	movs	r2, #32
 800f092:	18ba      	adds	r2, r7, r2
 800f094:	8811      	ldrh	r1, [r2, #0]
 800f096:	0022      	movs	r2, r4
 800f098:	f005 fab2 	bl	8014600 <LoRaMacCryptoGetFCntDown>
 800f09c:	0003      	movs	r3, r0
}
 800f09e:	0018      	movs	r0, r3
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	b005      	add	sp, #20
 800f0a4:	bd90      	pop	{r4, r7, pc}
 800f0a6:	46c0      	nop			; (mov r8, r8)
 800f0a8:	0801b1bc 	.word	0x0801b1bc

0800f0ac <SwitchClass>:

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800f0ac:	b5b0      	push	{r4, r5, r7, lr}
 800f0ae:	b086      	sub	sp, #24
 800f0b0:	af02      	add	r7, sp, #8
 800f0b2:	0002      	movs	r2, r0
 800f0b4:	1dfb      	adds	r3, r7, #7
 800f0b6:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f0b8:	230f      	movs	r3, #15
 800f0ba:	18fb      	adds	r3, r7, r3
 800f0bc:	2203      	movs	r2, #3
 800f0be:	701a      	strb	r2, [r3, #0]

    switch( MacCtx.NvmCtx->DeviceClass )
 800f0c0:	4b96      	ldr	r3, [pc, #600]	; (800f31c <SwitchClass+0x270>)
 800f0c2:	4a97      	ldr	r2, [pc, #604]	; (800f320 <SwitchClass+0x274>)
 800f0c4:	589b      	ldr	r3, [r3, r2]
 800f0c6:	22f0      	movs	r2, #240	; 0xf0
 800f0c8:	5c9b      	ldrb	r3, [r3, r2]
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	d100      	bne.n	800f0d0 <SwitchClass+0x24>
 800f0ce:	e0f1      	b.n	800f2b4 <SwitchClass+0x208>
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	d100      	bne.n	800f0d6 <SwitchClass+0x2a>
 800f0d4:	e103      	b.n	800f2de <SwitchClass+0x232>
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d000      	beq.n	800f0dc <SwitchClass+0x30>
 800f0da:	e118      	b.n	800f30e <SwitchClass+0x262>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800f0dc:	1dfb      	adds	r3, r7, #7
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d10d      	bne.n	800f100 <SwitchClass+0x54>
            {
                // Revert back RxC parameters
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800f0e4:	4b8d      	ldr	r3, [pc, #564]	; (800f31c <SwitchClass+0x270>)
 800f0e6:	4a8e      	ldr	r2, [pc, #568]	; (800f320 <SwitchClass+0x274>)
 800f0e8:	5899      	ldr	r1, [r3, r2]
 800f0ea:	4b8c      	ldr	r3, [pc, #560]	; (800f31c <SwitchClass+0x270>)
 800f0ec:	4a8c      	ldr	r2, [pc, #560]	; (800f320 <SwitchClass+0x274>)
 800f0ee:	5898      	ldr	r0, [r3, r2]
 800f0f0:	2392      	movs	r3, #146	; 0x92
 800f0f2:	005b      	lsls	r3, r3, #1
 800f0f4:	228e      	movs	r2, #142	; 0x8e
 800f0f6:	0052      	lsls	r2, r2, #1
 800f0f8:	18c3      	adds	r3, r0, r3
 800f0fa:	188a      	adds	r2, r1, r2
 800f0fc:	ca03      	ldmia	r2!, {r0, r1}
 800f0fe:	c303      	stmia	r3!, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800f100:	1dfb      	adds	r3, r7, #7
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	2b01      	cmp	r3, #1
 800f106:	d113      	bne.n	800f130 <SwitchClass+0x84>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f108:	250f      	movs	r5, #15
 800f10a:	197c      	adds	r4, r7, r5
 800f10c:	1dfb      	adds	r3, r7, #7
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	0018      	movs	r0, r3
 800f112:	f004 f8f8 	bl	8013306 <LoRaMacClassBSwitchClass>
 800f116:	0003      	movs	r3, r0
 800f118:	7023      	strb	r3, [r4, #0]
                if( status == LORAMAC_STATUS_OK )
 800f11a:	197b      	adds	r3, r7, r5
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d106      	bne.n	800f130 <SwitchClass+0x84>
                {
                    MacCtx.NvmCtx->DeviceClass = deviceClass;
 800f122:	4b7e      	ldr	r3, [pc, #504]	; (800f31c <SwitchClass+0x270>)
 800f124:	4a7e      	ldr	r2, [pc, #504]	; (800f320 <SwitchClass+0x274>)
 800f126:	589b      	ldr	r3, [r3, r2]
 800f128:	1dfa      	adds	r2, r7, #7
 800f12a:	21f0      	movs	r1, #240	; 0xf0
 800f12c:	7812      	ldrb	r2, [r2, #0]
 800f12e:	545a      	strb	r2, [r3, r1]
                }
            }

            if( deviceClass == CLASS_C )
 800f130:	1dfb      	adds	r3, r7, #7
 800f132:	781b      	ldrb	r3, [r3, #0]
 800f134:	2b02      	cmp	r3, #2
 800f136:	d000      	beq.n	800f13a <SwitchClass+0x8e>
 800f138:	e0e4      	b.n	800f304 <SwitchClass+0x258>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800f13a:	4b78      	ldr	r3, [pc, #480]	; (800f31c <SwitchClass+0x270>)
 800f13c:	4a78      	ldr	r2, [pc, #480]	; (800f320 <SwitchClass+0x274>)
 800f13e:	589b      	ldr	r3, [r3, r2]
 800f140:	1dfa      	adds	r2, r7, #7
 800f142:	21f0      	movs	r1, #240	; 0xf0
 800f144:	7812      	ldrb	r2, [r2, #0]
 800f146:	545a      	strb	r2, [r3, r1]

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f148:	4874      	ldr	r0, [pc, #464]	; (800f31c <SwitchClass+0x270>)
 800f14a:	23f8      	movs	r3, #248	; 0xf8
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4973      	ldr	r1, [pc, #460]	; (800f31c <SwitchClass+0x270>)
 800f150:	22f3      	movs	r2, #243	; 0xf3
 800f152:	0092      	lsls	r2, r2, #2
 800f154:	18c3      	adds	r3, r0, r3
 800f156:	188a      	adds	r2, r1, r2
 800f158:	ca13      	ldmia	r2!, {r0, r1, r4}
 800f15a:	c313      	stmia	r3!, {r0, r1, r4}
 800f15c:	ca03      	ldmia	r2!, {r0, r1}
 800f15e:	c303      	stmia	r3!, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f160:	4b6e      	ldr	r3, [pc, #440]	; (800f31c <SwitchClass+0x270>)
 800f162:	4a70      	ldr	r2, [pc, #448]	; (800f324 <SwitchClass+0x278>)
 800f164:	2102      	movs	r1, #2
 800f166:	5499      	strb	r1, [r3, r2]

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f168:	230e      	movs	r3, #14
 800f16a:	18fb      	adds	r3, r7, r3
 800f16c:	2200      	movs	r2, #0
 800f16e:	701a      	strb	r2, [r3, #0]
 800f170:	e070      	b.n	800f254 <SwitchClass+0x1a8>
                {
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f172:	4b6a      	ldr	r3, [pc, #424]	; (800f31c <SwitchClass+0x270>)
 800f174:	4a6a      	ldr	r2, [pc, #424]	; (800f320 <SwitchClass+0x274>)
 800f176:	5899      	ldr	r1, [r3, r2]
 800f178:	230e      	movs	r3, #14
 800f17a:	18fb      	adds	r3, r7, r3
 800f17c:	2200      	movs	r2, #0
 800f17e:	569a      	ldrsb	r2, [r3, r2]
 800f180:	2051      	movs	r0, #81	; 0x51
 800f182:	0013      	movs	r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	189b      	adds	r3, r3, r2
 800f188:	00db      	lsls	r3, r3, #3
 800f18a:	18cb      	adds	r3, r1, r3
 800f18c:	181b      	adds	r3, r3, r0
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d056      	beq.n	800f242 <SwitchClass+0x196>
                    // TODO: Check multicast channel device class.
                    {
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f194:	4b61      	ldr	r3, [pc, #388]	; (800f31c <SwitchClass+0x270>)
 800f196:	4a62      	ldr	r2, [pc, #392]	; (800f320 <SwitchClass+0x274>)
 800f198:	5898      	ldr	r0, [r3, r2]
 800f19a:	240e      	movs	r4, #14
 800f19c:	193b      	adds	r3, r7, r4
 800f19e:	2200      	movs	r2, #0
 800f1a0:	569a      	ldrsb	r2, [r3, r2]
 800f1a2:	4b5e      	ldr	r3, [pc, #376]	; (800f31c <SwitchClass+0x270>)
 800f1a4:	495e      	ldr	r1, [pc, #376]	; (800f320 <SwitchClass+0x274>)
 800f1a6:	5859      	ldr	r1, [r3, r1]
 800f1a8:	0013      	movs	r3, r2
 800f1aa:	009b      	lsls	r3, r3, #2
 800f1ac:	189b      	adds	r3, r3, r2
 800f1ae:	00db      	lsls	r3, r3, #3
 800f1b0:	18c3      	adds	r3, r0, r3
 800f1b2:	3364      	adds	r3, #100	; 0x64
 800f1b4:	681a      	ldr	r2, [r3, #0]
 800f1b6:	2392      	movs	r3, #146	; 0x92
 800f1b8:	005b      	lsls	r3, r3, #1
 800f1ba:	50ca      	str	r2, [r1, r3]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f1bc:	4b57      	ldr	r3, [pc, #348]	; (800f31c <SwitchClass+0x270>)
 800f1be:	4a58      	ldr	r2, [pc, #352]	; (800f320 <SwitchClass+0x274>)
 800f1c0:	5899      	ldr	r1, [r3, r2]
 800f1c2:	193b      	adds	r3, r7, r4
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	569a      	ldrsb	r2, [r3, r2]
 800f1c8:	2068      	movs	r0, #104	; 0x68
 800f1ca:	0013      	movs	r3, r2
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	189b      	adds	r3, r3, r2
 800f1d0:	00db      	lsls	r3, r3, #3
 800f1d2:	18cb      	adds	r3, r1, r3
 800f1d4:	181b      	adds	r3, r3, r0
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	5659      	ldrsb	r1, [r3, r1]
 800f1da:	4b50      	ldr	r3, [pc, #320]	; (800f31c <SwitchClass+0x270>)
 800f1dc:	4a50      	ldr	r2, [pc, #320]	; (800f320 <SwitchClass+0x274>)
 800f1de:	589a      	ldr	r2, [r3, r2]
 800f1e0:	b2c9      	uxtb	r1, r1
 800f1e2:	2394      	movs	r3, #148	; 0x94
 800f1e4:	005b      	lsls	r3, r3, #1
 800f1e6:	54d1      	strb	r1, [r2, r3]

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f1e8:	4b4c      	ldr	r3, [pc, #304]	; (800f31c <SwitchClass+0x270>)
 800f1ea:	4a4f      	ldr	r2, [pc, #316]	; (800f328 <SwitchClass+0x27c>)
 800f1ec:	5c99      	ldrb	r1, [r3, r2]
 800f1ee:	4a4b      	ldr	r2, [pc, #300]	; (800f31c <SwitchClass+0x270>)
 800f1f0:	23f8      	movs	r3, #248	; 0xf8
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800f1f6:	4b49      	ldr	r3, [pc, #292]	; (800f31c <SwitchClass+0x270>)
 800f1f8:	4a49      	ldr	r2, [pc, #292]	; (800f320 <SwitchClass+0x274>)
 800f1fa:	589a      	ldr	r2, [r3, r2]
 800f1fc:	2392      	movs	r3, #146	; 0x92
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	58d1      	ldr	r1, [r2, r3]
 800f202:	4a46      	ldr	r2, [pc, #280]	; (800f31c <SwitchClass+0x270>)
 800f204:	23f9      	movs	r3, #249	; 0xf9
 800f206:	009b      	lsls	r3, r3, #2
 800f208:	50d1      	str	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800f20a:	4b44      	ldr	r3, [pc, #272]	; (800f31c <SwitchClass+0x270>)
 800f20c:	4a44      	ldr	r2, [pc, #272]	; (800f320 <SwitchClass+0x274>)
 800f20e:	589a      	ldr	r2, [r3, r2]
 800f210:	232e      	movs	r3, #46	; 0x2e
 800f212:	33ff      	adds	r3, #255	; 0xff
 800f214:	5cd1      	ldrb	r1, [r2, r3]
 800f216:	4a41      	ldr	r2, [pc, #260]	; (800f31c <SwitchClass+0x270>)
 800f218:	23fc      	movs	r3, #252	; 0xfc
 800f21a:	009b      	lsls	r3, r3, #2
 800f21c:	54d1      	strb	r1, [r2, r3]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800f21e:	4b3f      	ldr	r3, [pc, #252]	; (800f31c <SwitchClass+0x270>)
 800f220:	4a3f      	ldr	r2, [pc, #252]	; (800f320 <SwitchClass+0x274>)
 800f222:	589a      	ldr	r2, [r3, r2]
 800f224:	2340      	movs	r3, #64	; 0x40
 800f226:	33ff      	adds	r3, #255	; 0xff
 800f228:	5cd1      	ldrb	r1, [r2, r3]
 800f22a:	4b3c      	ldr	r3, [pc, #240]	; (800f31c <SwitchClass+0x270>)
 800f22c:	4a3f      	ldr	r2, [pc, #252]	; (800f32c <SwitchClass+0x280>)
 800f22e:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f230:	4b3a      	ldr	r3, [pc, #232]	; (800f31c <SwitchClass+0x270>)
 800f232:	4a3c      	ldr	r2, [pc, #240]	; (800f324 <SwitchClass+0x278>)
 800f234:	2103      	movs	r1, #3
 800f236:	5499      	strb	r1, [r3, r2]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f238:	4b38      	ldr	r3, [pc, #224]	; (800f31c <SwitchClass+0x270>)
 800f23a:	4a3d      	ldr	r2, [pc, #244]	; (800f330 <SwitchClass+0x284>)
 800f23c:	2101      	movs	r1, #1
 800f23e:	5499      	strb	r1, [r3, r2]
                        break;
 800f240:	e00e      	b.n	800f260 <SwitchClass+0x1b4>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f242:	210e      	movs	r1, #14
 800f244:	187b      	adds	r3, r7, r1
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	b25b      	sxtb	r3, r3
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	3301      	adds	r3, #1
 800f24e:	b2da      	uxtb	r2, r3
 800f250:	187b      	adds	r3, r7, r1
 800f252:	701a      	strb	r2, [r3, #0]
 800f254:	230e      	movs	r3, #14
 800f256:	18fb      	adds	r3, r7, r3
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	b25b      	sxtb	r3, r3
 800f25c:	2b03      	cmp	r3, #3
 800f25e:	dd88      	ble.n	800f172 <SwitchClass+0xc6>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f260:	4b2e      	ldr	r3, [pc, #184]	; (800f31c <SwitchClass+0x270>)
 800f262:	4a34      	ldr	r2, [pc, #208]	; (800f334 <SwitchClass+0x288>)
 800f264:	2100      	movs	r1, #0
 800f266:	5499      	strb	r1, [r3, r2]
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f268:	4b33      	ldr	r3, [pc, #204]	; (800f338 <SwitchClass+0x28c>)
 800f26a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f26c:	4798      	blx	r3
                // Compute Rx2 windows parameters in case the RX2 datarate has changed
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f26e:	4b2b      	ldr	r3, [pc, #172]	; (800f31c <SwitchClass+0x270>)
 800f270:	4a2b      	ldr	r2, [pc, #172]	; (800f320 <SwitchClass+0x274>)
 800f272:	589b      	ldr	r3, [r3, r2]
 800f274:	7818      	ldrb	r0, [r3, #0]
                                                 MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 800f276:	4b29      	ldr	r3, [pc, #164]	; (800f31c <SwitchClass+0x270>)
 800f278:	4a29      	ldr	r2, [pc, #164]	; (800f320 <SwitchClass+0x274>)
 800f27a:	589a      	ldr	r2, [r3, r2]
 800f27c:	2394      	movs	r3, #148	; 0x94
 800f27e:	005b      	lsls	r3, r3, #1
 800f280:	5cd3      	ldrb	r3, [r2, r3]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f282:	b259      	sxtb	r1, r3
                                                 MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800f284:	4b25      	ldr	r3, [pc, #148]	; (800f31c <SwitchClass+0x270>)
 800f286:	4a26      	ldr	r2, [pc, #152]	; (800f320 <SwitchClass+0x274>)
 800f288:	589a      	ldr	r2, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f28a:	2380      	movs	r3, #128	; 0x80
 800f28c:	005b      	lsls	r3, r3, #1
 800f28e:	5cd4      	ldrb	r4, [r2, r3]
                                                 MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 800f290:	4b22      	ldr	r3, [pc, #136]	; (800f31c <SwitchClass+0x270>)
 800f292:	4a23      	ldr	r2, [pc, #140]	; (800f320 <SwitchClass+0x274>)
 800f294:	589b      	ldr	r3, [r3, r2]
                RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800f296:	22fc      	movs	r2, #252	; 0xfc
 800f298:	589a      	ldr	r2, [r3, r2]
 800f29a:	4b28      	ldr	r3, [pc, #160]	; (800f33c <SwitchClass+0x290>)
 800f29c:	9300      	str	r3, [sp, #0]
 800f29e:	0013      	movs	r3, r2
 800f2a0:	0022      	movs	r2, r4
 800f2a2:	f006 fb34 	bl	801590e <RegionComputeRxWindowParameters>
                                                 &MacCtx.RxWindowCConfig );
                OpenContinuousRxCWindow( );
 800f2a6:	f001 fbcb 	bl	8010a40 <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f2aa:	230f      	movs	r3, #15
 800f2ac:	18fb      	adds	r3, r7, r3
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f2b2:	e027      	b.n	800f304 <SwitchClass+0x258>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f2b4:	250f      	movs	r5, #15
 800f2b6:	197c      	adds	r4, r7, r5
 800f2b8:	1dfb      	adds	r3, r7, #7
 800f2ba:	781b      	ldrb	r3, [r3, #0]
 800f2bc:	0018      	movs	r0, r3
 800f2be:	f004 f822 	bl	8013306 <LoRaMacClassBSwitchClass>
 800f2c2:	0003      	movs	r3, r0
 800f2c4:	7023      	strb	r3, [r4, #0]
            if( status == LORAMAC_STATUS_OK )
 800f2c6:	197b      	adds	r3, r7, r5
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d11c      	bne.n	800f308 <SwitchClass+0x25c>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800f2ce:	4b13      	ldr	r3, [pc, #76]	; (800f31c <SwitchClass+0x270>)
 800f2d0:	4a13      	ldr	r2, [pc, #76]	; (800f320 <SwitchClass+0x274>)
 800f2d2:	589b      	ldr	r3, [r3, r2]
 800f2d4:	1dfa      	adds	r2, r7, #7
 800f2d6:	21f0      	movs	r1, #240	; 0xf0
 800f2d8:	7812      	ldrb	r2, [r2, #0]
 800f2da:	545a      	strb	r2, [r3, r1]
            }
            break;
 800f2dc:	e014      	b.n	800f308 <SwitchClass+0x25c>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f2de:	1dfb      	adds	r3, r7, #7
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d112      	bne.n	800f30c <SwitchClass+0x260>
            {
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 800f2e6:	4b0d      	ldr	r3, [pc, #52]	; (800f31c <SwitchClass+0x270>)
 800f2e8:	4a0d      	ldr	r2, [pc, #52]	; (800f320 <SwitchClass+0x274>)
 800f2ea:	589b      	ldr	r3, [r3, r2]
 800f2ec:	1dfa      	adds	r2, r7, #7
 800f2ee:	21f0      	movs	r1, #240	; 0xf0
 800f2f0:	7812      	ldrb	r2, [r2, #0]
 800f2f2:	545a      	strb	r2, [r3, r1]

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f2f4:	4b10      	ldr	r3, [pc, #64]	; (800f338 <SwitchClass+0x28c>)
 800f2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2f8:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f2fa:	230f      	movs	r3, #15
 800f2fc:	18fb      	adds	r3, r7, r3
 800f2fe:	2200      	movs	r2, #0
 800f300:	701a      	strb	r2, [r3, #0]
            }
            break;
 800f302:	e003      	b.n	800f30c <SwitchClass+0x260>
            break;
 800f304:	46c0      	nop			; (mov r8, r8)
 800f306:	e002      	b.n	800f30e <SwitchClass+0x262>
            break;
 800f308:	46c0      	nop			; (mov r8, r8)
 800f30a:	e000      	b.n	800f30e <SwitchClass+0x262>
            break;
 800f30c:	46c0      	nop			; (mov r8, r8)
        }
    }

    return status;
 800f30e:	230f      	movs	r3, #15
 800f310:	18fb      	adds	r3, r7, r3
 800f312:	781b      	ldrb	r3, [r3, #0]
}
 800f314:	0018      	movs	r0, r3
 800f316:	46bd      	mov	sp, r7
 800f318:	b004      	add	sp, #16
 800f31a:	bdb0      	pop	{r4, r5, r7, pc}
 800f31c:	200008f0 	.word	0x200008f0
 800f320:	00000484 	.word	0x00000484
 800f324:	000003f3 	.word	0x000003f3
 800f328:	00000415 	.word	0x00000415
 800f32c:	000003f1 	.word	0x000003f1
 800f330:	000003f2 	.word	0x000003f2
 800f334:	00000414 	.word	0x00000414
 800f338:	0801acec 	.word	0x0801acec
 800f33c:	20000cd0 	.word	0x20000cd0

0800f340 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	0002      	movs	r2, r0
 800f348:	1dfb      	adds	r3, r7, #7
 800f34a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f34c:	4b18      	ldr	r3, [pc, #96]	; (800f3b0 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800f34e:	4a19      	ldr	r2, [pc, #100]	; (800f3b4 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800f350:	589a      	ldr	r2, [r3, r2]
 800f352:	2396      	movs	r3, #150	; 0x96
 800f354:	005b      	lsls	r3, r3, #1
 800f356:	5cd2      	ldrb	r2, [r2, r3]
 800f358:	210c      	movs	r1, #12
 800f35a:	187b      	adds	r3, r7, r1
 800f35c:	709a      	strb	r2, [r3, #2]
    getPhy.Datarate = datarate;
 800f35e:	187b      	adds	r3, r7, r1
 800f360:	1dfa      	adds	r2, r7, #7
 800f362:	7812      	ldrb	r2, [r2, #0]
 800f364:	705a      	strb	r2, [r3, #1]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f366:	187b      	adds	r3, r7, r1
 800f368:	220d      	movs	r2, #13
 800f36a:	701a      	strb	r2, [r3, #0]

    // Get the maximum payload length
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 800f36c:	4b10      	ldr	r3, [pc, #64]	; (800f3b0 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800f36e:	4a11      	ldr	r2, [pc, #68]	; (800f3b4 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800f370:	589a      	ldr	r2, [r3, r2]
 800f372:	2340      	movs	r3, #64	; 0x40
 800f374:	33ff      	adds	r3, #255	; 0xff
 800f376:	5cd3      	ldrb	r3, [r2, r3]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d003      	beq.n	800f384 <GetMaxAppPayloadWithoutFOptsLength+0x44>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f37c:	230c      	movs	r3, #12
 800f37e:	18fb      	adds	r3, r7, r3
 800f380:	220e      	movs	r2, #14
 800f382:	701a      	strb	r2, [r3, #0]
    }
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800f384:	4b0a      	ldr	r3, [pc, #40]	; (800f3b0 <GetMaxAppPayloadWithoutFOptsLength+0x70>)
 800f386:	4a0b      	ldr	r2, [pc, #44]	; (800f3b4 <GetMaxAppPayloadWithoutFOptsLength+0x74>)
 800f388:	589b      	ldr	r3, [r3, r2]
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	220c      	movs	r2, #12
 800f38e:	18ba      	adds	r2, r7, r2
 800f390:	0011      	movs	r1, r2
 800f392:	0018      	movs	r0, r3
 800f394:	f006 fa0c 	bl	80157b0 <RegionGetPhyParam>
 800f398:	0003      	movs	r3, r0
 800f39a:	001a      	movs	r2, r3
 800f39c:	2108      	movs	r1, #8
 800f39e:	187b      	adds	r3, r7, r1
 800f3a0:	601a      	str	r2, [r3, #0]

    return phyParam.Value;
 800f3a2:	187b      	adds	r3, r7, r1
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	b2db      	uxtb	r3, r3
}
 800f3a8:	0018      	movs	r0, r3
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	b004      	add	sp, #16
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	200008f0 	.word	0x200008f0
 800f3b4:	00000484 	.word	0x00000484

0800f3b8 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f3b8:	b5b0      	push	{r4, r5, r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	0004      	movs	r4, r0
 800f3c0:	0008      	movs	r0, r1
 800f3c2:	0011      	movs	r1, r2
 800f3c4:	1dfb      	adds	r3, r7, #7
 800f3c6:	1c22      	adds	r2, r4, #0
 800f3c8:	701a      	strb	r2, [r3, #0]
 800f3ca:	1dbb      	adds	r3, r7, #6
 800f3cc:	1c02      	adds	r2, r0, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
 800f3d0:	1d7b      	adds	r3, r7, #5
 800f3d2:	1c0a      	adds	r2, r1, #0
 800f3d4:	701a      	strb	r2, [r3, #0]
    uint16_t maxN = 0;
 800f3d6:	200e      	movs	r0, #14
 800f3d8:	0004      	movs	r4, r0
 800f3da:	183b      	adds	r3, r7, r0
 800f3dc:	2200      	movs	r2, #0
 800f3de:	801a      	strh	r2, [r3, #0]
    uint16_t payloadSize = 0;
 800f3e0:	250c      	movs	r5, #12
 800f3e2:	197b      	adds	r3, r7, r5
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	801a      	strh	r2, [r3, #0]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f3e8:	1dbb      	adds	r3, r7, #6
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	b25b      	sxtb	r3, r3
 800f3ee:	0018      	movs	r0, r3
 800f3f0:	f7ff ffa6 	bl	800f340 <GetMaxAppPayloadWithoutFOptsLength>
 800f3f4:	0003      	movs	r3, r0
 800f3f6:	001a      	movs	r2, r3
 800f3f8:	0020      	movs	r0, r4
 800f3fa:	183b      	adds	r3, r7, r0
 800f3fc:	801a      	strh	r2, [r3, #0]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f3fe:	1dfb      	adds	r3, r7, #7
 800f400:	781b      	ldrb	r3, [r3, #0]
 800f402:	b299      	uxth	r1, r3
 800f404:	1d7b      	adds	r3, r7, #5
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	b29a      	uxth	r2, r3
 800f40a:	197b      	adds	r3, r7, r5
 800f40c:	188a      	adds	r2, r1, r2
 800f40e:	801a      	strh	r2, [r3, #0]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f410:	197a      	adds	r2, r7, r5
 800f412:	183b      	adds	r3, r7, r0
 800f414:	8812      	ldrh	r2, [r2, #0]
 800f416:	881b      	ldrh	r3, [r3, #0]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d806      	bhi.n	800f42a <ValidatePayloadLength+0x72>
 800f41c:	230c      	movs	r3, #12
 800f41e:	18fb      	adds	r3, r7, r3
 800f420:	881b      	ldrh	r3, [r3, #0]
 800f422:	2bff      	cmp	r3, #255	; 0xff
 800f424:	d801      	bhi.n	800f42a <ValidatePayloadLength+0x72>
    {
        return true;
 800f426:	2301      	movs	r3, #1
 800f428:	e000      	b.n	800f42c <ValidatePayloadLength+0x74>
    }
    return false;
 800f42a:	2300      	movs	r3, #0
}
 800f42c:	0018      	movs	r0, r3
 800f42e:	46bd      	mov	sp, r7
 800f430:	b004      	add	sp, #16
 800f432:	bdb0      	pop	{r4, r5, r7, pc}

0800f434 <SetMlmeScheduleUplinkIndication>:

static void SetMlmeScheduleUplinkIndication( void )
{
 800f434:	b580      	push	{r7, lr}
 800f436:	af00      	add	r7, sp, #0
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800f438:	4b04      	ldr	r3, [pc, #16]	; (800f44c <SetMlmeScheduleUplinkIndication+0x18>)
 800f43a:	4a05      	ldr	r2, [pc, #20]	; (800f450 <SetMlmeScheduleUplinkIndication+0x1c>)
 800f43c:	5c99      	ldrb	r1, [r3, r2]
 800f43e:	2010      	movs	r0, #16
 800f440:	4301      	orrs	r1, r0
 800f442:	5499      	strb	r1, [r3, r2]
}
 800f444:	46c0      	nop			; (mov r8, r8)
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	46c0      	nop			; (mov r8, r8)
 800f44c:	200008f0 	.word	0x200008f0
 800f450:	00000481 	.word	0x00000481

0800f454 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f454:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f456:	b0a5      	sub	sp, #148	; 0x94
 800f458:	af02      	add	r7, sp, #8
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	000c      	movs	r4, r1
 800f45e:	0010      	movs	r0, r2
 800f460:	0019      	movs	r1, r3
 800f462:	1cfb      	adds	r3, r7, #3
 800f464:	1c22      	adds	r2, r4, #0
 800f466:	701a      	strb	r2, [r3, #0]
 800f468:	1cbb      	adds	r3, r7, #2
 800f46a:	1c02      	adds	r2, r0, #0
 800f46c:	701a      	strb	r2, [r3, #0]
 800f46e:	1c7b      	adds	r3, r7, #1
 800f470:	1c0a      	adds	r2, r1, #0
 800f472:	701a      	strb	r2, [r3, #0]
    uint8_t status = 0;
 800f474:	236b      	movs	r3, #107	; 0x6b
 800f476:	18fb      	adds	r3, r7, r3
 800f478:	2200      	movs	r2, #0
 800f47a:	701a      	strb	r2, [r3, #0]
    bool adrBlockFound = false;
 800f47c:	2387      	movs	r3, #135	; 0x87
 800f47e:	18fb      	adds	r3, r7, r3
 800f480:	2200      	movs	r2, #0
 800f482:	701a      	strb	r2, [r3, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f484:	2168      	movs	r1, #104	; 0x68
 800f486:	187b      	adds	r3, r7, r1
 800f488:	2200      	movs	r2, #0
 800f48a:	701a      	strb	r2, [r3, #0]
 800f48c:	187b      	adds	r3, r7, r1
 800f48e:	2200      	movs	r2, #0
 800f490:	705a      	strb	r2, [r3, #1]

    while( macIndex < commandsSize )
 800f492:	f000 fd80 	bl	800ff96 <ProcessMacCommands+0xb42>
    {
        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f496:	1cfb      	adds	r3, r7, #3
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	1cfa      	adds	r2, r7, #3
 800f49c:	1c59      	adds	r1, r3, #1
 800f49e:	7011      	strb	r1, [r2, #0]
 800f4a0:	001a      	movs	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	189b      	adds	r3, r3, r2
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b13      	cmp	r3, #19
 800f4aa:	d901      	bls.n	800f4b0 <ProcessMacCommands+0x5c>
 800f4ac:	f000 fd7c 	bl	800ffa8 <ProcessMacCommands+0xb54>
 800f4b0:	009a      	lsls	r2, r3, #2
 800f4b2:	4be6      	ldr	r3, [pc, #920]	; (800f84c <ProcessMacCommands+0x3f8>)
 800f4b4:	18d3      	adds	r3, r2, r3
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	469f      	mov	pc, r3
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f4ba:	2003      	movs	r0, #3
 800f4bc:	f004 fbac 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 800f4c0:	1e03      	subs	r3, r0, #0
 800f4c2:	d01c      	beq.n	800f4fe <ProcessMacCommands+0xaa>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f4c4:	2103      	movs	r1, #3
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	f004 fb22 	bl	8013b10 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f4cc:	1cfb      	adds	r3, r7, #3
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	1cfa      	adds	r2, r7, #3
 800f4d2:	1c59      	adds	r1, r3, #1
 800f4d4:	7011      	strb	r1, [r2, #0]
 800f4d6:	001a      	movs	r2, r3
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	189b      	adds	r3, r3, r2
 800f4dc:	7819      	ldrb	r1, [r3, #0]
 800f4de:	4adc      	ldr	r2, [pc, #880]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f4e0:	238b      	movs	r3, #139	; 0x8b
 800f4e2:	00db      	lsls	r3, r3, #3
 800f4e4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f4e6:	1cfb      	adds	r3, r7, #3
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	1cfa      	adds	r2, r7, #3
 800f4ec:	1c59      	adds	r1, r3, #1
 800f4ee:	7011      	strb	r1, [r2, #0]
 800f4f0:	001a      	movs	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	189b      	adds	r3, r3, r2
 800f4f6:	7819      	ldrb	r1, [r3, #0]
 800f4f8:	4bd5      	ldr	r3, [pc, #852]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f4fa:	4ad6      	ldr	r2, [pc, #856]	; (800f854 <ProcessMacCommands+0x400>)
 800f4fc:	5499      	strb	r1, [r3, r2]
 800f4fe:	2287      	movs	r2, #135	; 0x87
 800f500:	18bb      	adds	r3, r7, r2
 800f502:	18ba      	adds	r2, r7, r2
 800f504:	7812      	ldrb	r2, [r2, #0]
 800f506:	701a      	strb	r2, [r3, #0]
                }
                break;
 800f508:	f000 fd45 	bl	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f50c:	2357      	movs	r3, #87	; 0x57
 800f50e:	18fb      	adds	r3, r7, r3
 800f510:	2200      	movs	r2, #0
 800f512:	701a      	strb	r2, [r3, #0]
                int8_t linkAdrTxPower = TX_POWER_0;
 800f514:	2356      	movs	r3, #86	; 0x56
 800f516:	18fb      	adds	r3, r7, r3
 800f518:	2200      	movs	r2, #0
 800f51a:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbRep = 0;
 800f51c:	2355      	movs	r3, #85	; 0x55
 800f51e:	18fb      	adds	r3, r7, r3
 800f520:	2200      	movs	r2, #0
 800f522:	701a      	strb	r2, [r3, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800f524:	2354      	movs	r3, #84	; 0x54
 800f526:	18fb      	adds	r3, r7, r3
 800f528:	2200      	movs	r2, #0
 800f52a:	701a      	strb	r2, [r3, #0]

                if( adrBlockFound == false )
 800f52c:	2387      	movs	r3, #135	; 0x87
 800f52e:	18fb      	adds	r3, r7, r3
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	2201      	movs	r2, #1
 800f534:	4053      	eors	r3, r2
 800f536:	b2db      	uxtb	r3, r3
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d100      	bne.n	800f53e <ProcessMacCommands+0xea>
 800f53c:	e0a6      	b.n	800f68c <ProcessMacCommands+0x238>
                {
                    adrBlockFound = true;
 800f53e:	2387      	movs	r3, #135	; 0x87
 800f540:	18fb      	adds	r3, r7, r3
 800f542:	2201      	movs	r2, #1
 800f544:	701a      	strb	r2, [r3, #0]

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800f546:	1cfb      	adds	r3, r7, #3
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	3b01      	subs	r3, #1
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	18d2      	adds	r2, r2, r3
 800f550:	2158      	movs	r1, #88	; 0x58
 800f552:	187b      	adds	r3, r7, r1
 800f554:	605a      	str	r2, [r3, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f556:	1cba      	adds	r2, r7, #2
 800f558:	1cfb      	adds	r3, r7, #3
 800f55a:	7812      	ldrb	r2, [r2, #0]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	1ad3      	subs	r3, r2, r3
 800f560:	b2db      	uxtb	r3, r3
 800f562:	3301      	adds	r3, #1
 800f564:	b2da      	uxtb	r2, r3
 800f566:	187b      	adds	r3, r7, r1
 800f568:	721a      	strb	r2, [r3, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800f56a:	4bb9      	ldr	r3, [pc, #740]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f56c:	4aba      	ldr	r2, [pc, #744]	; (800f858 <ProcessMacCommands+0x404>)
 800f56e:	589b      	ldr	r3, [r3, r2]
 800f570:	22f2      	movs	r2, #242	; 0xf2
 800f572:	5c9a      	ldrb	r2, [r3, r2]
 800f574:	187b      	adds	r3, r7, r1
 800f576:	729a      	strb	r2, [r3, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800f578:	4bb5      	ldr	r3, [pc, #724]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f57a:	4ab7      	ldr	r2, [pc, #732]	; (800f858 <ProcessMacCommands+0x404>)
 800f57c:	589a      	ldr	r2, [r3, r2]
 800f57e:	2396      	movs	r3, #150	; 0x96
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	5cd2      	ldrb	r2, [r2, r3]
 800f584:	187b      	adds	r3, r7, r1
 800f586:	725a      	strb	r2, [r3, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800f588:	4bb1      	ldr	r3, [pc, #708]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f58a:	4ab3      	ldr	r2, [pc, #716]	; (800f858 <ProcessMacCommands+0x404>)
 800f58c:	589b      	ldr	r3, [r3, r2]
 800f58e:	22f9      	movs	r2, #249	; 0xf9
 800f590:	569a      	ldrsb	r2, [r3, r2]
 800f592:	000d      	movs	r5, r1
 800f594:	187b      	adds	r3, r7, r1
 800f596:	72da      	strb	r2, [r3, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800f598:	4bad      	ldr	r3, [pc, #692]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f59a:	4aaf      	ldr	r2, [pc, #700]	; (800f858 <ProcessMacCommands+0x404>)
 800f59c:	589b      	ldr	r3, [r3, r2]
 800f59e:	22f8      	movs	r2, #248	; 0xf8
 800f5a0:	569a      	ldrsb	r2, [r3, r2]
 800f5a2:	197b      	adds	r3, r7, r5
 800f5a4:	731a      	strb	r2, [r3, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800f5a6:	4baa      	ldr	r3, [pc, #680]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f5a8:	4aab      	ldr	r2, [pc, #684]	; (800f858 <ProcessMacCommands+0x404>)
 800f5aa:	589a      	ldr	r2, [r3, r2]
 800f5ac:	238c      	movs	r3, #140	; 0x8c
 800f5ae:	005b      	lsls	r3, r3, #1
 800f5b0:	5cd2      	ldrb	r2, [r2, r3]
 800f5b2:	197b      	adds	r3, r7, r5
 800f5b4:	735a      	strb	r2, [r3, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800f5b6:	4ba6      	ldr	r3, [pc, #664]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f5b8:	4aa7      	ldr	r2, [pc, #668]	; (800f858 <ProcessMacCommands+0x404>)
 800f5ba:	5899      	ldr	r1, [r3, r2]
 800f5bc:	197b      	adds	r3, r7, r5
 800f5be:	22e8      	movs	r2, #232	; 0xe8
 800f5c0:	0052      	lsls	r2, r2, #1
 800f5c2:	588a      	ldr	r2, [r1, r2]
 800f5c4:	601a      	str	r2, [r3, #0]

                    // Process the ADR requests
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800f5c6:	4ba2      	ldr	r3, [pc, #648]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f5c8:	4aa3      	ldr	r2, [pc, #652]	; (800f858 <ProcessMacCommands+0x404>)
 800f5ca:	589b      	ldr	r3, [r3, r2]
 800f5cc:	7818      	ldrb	r0, [r3, #0]
 800f5ce:	2356      	movs	r3, #86	; 0x56
 800f5d0:	18fc      	adds	r4, r7, r3
 800f5d2:	2357      	movs	r3, #87	; 0x57
 800f5d4:	18fa      	adds	r2, r7, r3
 800f5d6:	1979      	adds	r1, r7, r5
 800f5d8:	2354      	movs	r3, #84	; 0x54
 800f5da:	18fb      	adds	r3, r7, r3
 800f5dc:	9301      	str	r3, [sp, #4]
 800f5de:	2355      	movs	r3, #85	; 0x55
 800f5e0:	18fb      	adds	r3, r7, r3
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	0023      	movs	r3, r4
 800f5e6:	f006 f9eb 	bl	80159c0 <RegionLinkAdrReq>
 800f5ea:	0003      	movs	r3, r0
 800f5ec:	001a      	movs	r2, r3
 800f5ee:	216b      	movs	r1, #107	; 0x6b
 800f5f0:	187b      	adds	r3, r7, r1
 800f5f2:	701a      	strb	r2, [r3, #0]
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800f5f4:	187b      	adds	r3, r7, r1
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	001a      	movs	r2, r3
 800f5fa:	2307      	movs	r3, #7
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	2b07      	cmp	r3, #7
 800f600:	d11a      	bne.n	800f638 <ProcessMacCommands+0x1e4>
                    {
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800f602:	4b93      	ldr	r3, [pc, #588]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f604:	4a94      	ldr	r2, [pc, #592]	; (800f858 <ProcessMacCommands+0x404>)
 800f606:	589b      	ldr	r3, [r3, r2]
 800f608:	2257      	movs	r2, #87	; 0x57
 800f60a:	18ba      	adds	r2, r7, r2
 800f60c:	2100      	movs	r1, #0
 800f60e:	5651      	ldrsb	r1, [r2, r1]
 800f610:	22f9      	movs	r2, #249	; 0xf9
 800f612:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800f614:	4b8e      	ldr	r3, [pc, #568]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f616:	4a90      	ldr	r2, [pc, #576]	; (800f858 <ProcessMacCommands+0x404>)
 800f618:	589b      	ldr	r3, [r3, r2]
 800f61a:	2256      	movs	r2, #86	; 0x56
 800f61c:	18ba      	adds	r2, r7, r2
 800f61e:	2100      	movs	r1, #0
 800f620:	5651      	ldrsb	r1, [r2, r1]
 800f622:	22f8      	movs	r2, #248	; 0xf8
 800f624:	5499      	strb	r1, [r3, r2]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f626:	4b8a      	ldr	r3, [pc, #552]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f628:	4a8b      	ldr	r2, [pc, #556]	; (800f858 <ProcessMacCommands+0x404>)
 800f62a:	589a      	ldr	r2, [r3, r2]
 800f62c:	2355      	movs	r3, #85	; 0x55
 800f62e:	18fb      	adds	r3, r7, r3
 800f630:	7819      	ldrb	r1, [r3, #0]
 800f632:	238c      	movs	r3, #140	; 0x8c
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	54d1      	strb	r1, [r2, r3]
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f638:	2386      	movs	r3, #134	; 0x86
 800f63a:	18fb      	adds	r3, r7, r3
 800f63c:	2200      	movs	r2, #0
 800f63e:	701a      	strb	r2, [r3, #0]
 800f640:	e00c      	b.n	800f65c <ProcessMacCommands+0x208>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f642:	236b      	movs	r3, #107	; 0x6b
 800f644:	18fb      	adds	r3, r7, r3
 800f646:	2201      	movs	r2, #1
 800f648:	0019      	movs	r1, r3
 800f64a:	2003      	movs	r0, #3
 800f64c:	f004 f81c 	bl	8013688 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f650:	2186      	movs	r1, #134	; 0x86
 800f652:	187b      	adds	r3, r7, r1
 800f654:	781a      	ldrb	r2, [r3, #0]
 800f656:	187b      	adds	r3, r7, r1
 800f658:	3201      	adds	r2, #1
 800f65a:	701a      	strb	r2, [r3, #0]
 800f65c:	2354      	movs	r3, #84	; 0x54
 800f65e:	18fb      	adds	r3, r7, r3
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	2105      	movs	r1, #5
 800f664:	0018      	movs	r0, r3
 800f666:	f7f0 fd4f 	bl	8000108 <__udivsi3>
 800f66a:	0003      	movs	r3, r0
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	2286      	movs	r2, #134	; 0x86
 800f670:	18ba      	adds	r2, r7, r2
 800f672:	7812      	ldrb	r2, [r2, #0]
 800f674:	429a      	cmp	r2, r3
 800f676:	d3e4      	bcc.n	800f642 <ProcessMacCommands+0x1ee>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800f678:	2354      	movs	r3, #84	; 0x54
 800f67a:	18fb      	adds	r3, r7, r3
 800f67c:	781a      	ldrb	r2, [r3, #0]
 800f67e:	1cfb      	adds	r3, r7, #3
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	18d3      	adds	r3, r2, r3
 800f684:	b2da      	uxtb	r2, r3
 800f686:	1cfb      	adds	r3, r7, #3
 800f688:	3a01      	subs	r2, #1
 800f68a:	701a      	strb	r2, [r3, #0]
                }
                break;
 800f68c:	46c0      	nop			; (mov r8, r8)
 800f68e:	f000 fc82 	bl	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800f692:	1cfb      	adds	r3, r7, #3
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	1cfa      	adds	r2, r7, #3
 800f698:	1c59      	adds	r1, r3, #1
 800f69a:	7011      	strb	r1, [r2, #0]
 800f69c:	001a      	movs	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	189b      	adds	r3, r3, r2
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	4a6a      	ldr	r2, [pc, #424]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f6a6:	496c      	ldr	r1, [pc, #432]	; (800f858 <ProcessMacCommands+0x404>)
 800f6a8:	5852      	ldr	r2, [r2, r1]
 800f6aa:	210f      	movs	r1, #15
 800f6ac:	400b      	ands	r3, r1
 800f6ae:	b2d9      	uxtb	r1, r3
 800f6b0:	239e      	movs	r3, #158	; 0x9e
 800f6b2:	005b      	lsls	r3, r3, #1
 800f6b4:	54d1      	strb	r1, [r2, r3]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800f6b6:	4b66      	ldr	r3, [pc, #408]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f6b8:	4a67      	ldr	r2, [pc, #412]	; (800f858 <ProcessMacCommands+0x404>)
 800f6ba:	589a      	ldr	r2, [r3, r2]
 800f6bc:	239e      	movs	r3, #158	; 0x9e
 800f6be:	005b      	lsls	r3, r3, #1
 800f6c0:	5cd3      	ldrb	r3, [r2, r3]
 800f6c2:	001a      	movs	r2, r3
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	4093      	lsls	r3, r2
 800f6c8:	0019      	movs	r1, r3
 800f6ca:	4b61      	ldr	r3, [pc, #388]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f6cc:	4a62      	ldr	r2, [pc, #392]	; (800f858 <ProcessMacCommands+0x404>)
 800f6ce:	589a      	ldr	r2, [r3, r2]
 800f6d0:	b289      	uxth	r1, r1
 800f6d2:	23e1      	movs	r3, #225	; 0xe1
 800f6d4:	005b      	lsls	r3, r3, #1
 800f6d6:	52d1      	strh	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f6d8:	2368      	movs	r3, #104	; 0x68
 800f6da:	18fb      	adds	r3, r7, r3
 800f6dc:	2200      	movs	r2, #0
 800f6de:	0019      	movs	r1, r3
 800f6e0:	2004      	movs	r0, #4
 800f6e2:	f003 ffd1 	bl	8013688 <LoRaMacCommandsAddCmd>
 800f6e6:	2287      	movs	r2, #135	; 0x87
 800f6e8:	18bb      	adds	r3, r7, r2
 800f6ea:	18ba      	adds	r2, r7, r2
 800f6ec:	7812      	ldrb	r2, [r2, #0]
 800f6ee:	701a      	strb	r2, [r3, #0]
                break;
 800f6f0:	f000 fc51 	bl	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f6f4:	246b      	movs	r4, #107	; 0x6b
 800f6f6:	193b      	adds	r3, r7, r4
 800f6f8:	2207      	movs	r2, #7
 800f6fa:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f6fc:	1cfb      	adds	r3, r7, #3
 800f6fe:	781b      	ldrb	r3, [r3, #0]
 800f700:	687a      	ldr	r2, [r7, #4]
 800f702:	18d3      	adds	r3, r2, r3
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	091b      	lsrs	r3, r3, #4
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	b25b      	sxtb	r3, r3
 800f70c:	2207      	movs	r2, #7
 800f70e:	4013      	ands	r3, r2
 800f710:	b25a      	sxtb	r2, r3
 800f712:	204c      	movs	r0, #76	; 0x4c
 800f714:	183b      	adds	r3, r7, r0
 800f716:	705a      	strb	r2, [r3, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f718:	1cfb      	adds	r3, r7, #3
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	18d3      	adds	r3, r2, r3
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	b25b      	sxtb	r3, r3
 800f724:	220f      	movs	r2, #15
 800f726:	4013      	ands	r3, r2
 800f728:	b25a      	sxtb	r2, r3
 800f72a:	183b      	adds	r3, r7, r0
 800f72c:	701a      	strb	r2, [r3, #0]
                macIndex++;
 800f72e:	1cfb      	adds	r3, r7, #3
 800f730:	781a      	ldrb	r2, [r3, #0]
 800f732:	1cfb      	adds	r3, r7, #3
 800f734:	3201      	adds	r2, #1
 800f736:	701a      	strb	r2, [r3, #0]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f738:	1cfb      	adds	r3, r7, #3
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	1cfa      	adds	r2, r7, #3
 800f73e:	1c59      	adds	r1, r3, #1
 800f740:	7011      	strb	r1, [r2, #0]
 800f742:	001a      	movs	r2, r3
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	189b      	adds	r3, r3, r2
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	001a      	movs	r2, r3
 800f74c:	183b      	adds	r3, r7, r0
 800f74e:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f750:	1cfb      	adds	r3, r7, #3
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	1cfa      	adds	r2, r7, #3
 800f756:	1c59      	adds	r1, r3, #1
 800f758:	7011      	strb	r1, [r2, #0]
 800f75a:	001a      	movs	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	189b      	adds	r3, r3, r2
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	021a      	lsls	r2, r3, #8
 800f764:	183b      	adds	r3, r7, r0
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	431a      	orrs	r2, r3
 800f76a:	183b      	adds	r3, r7, r0
 800f76c:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f76e:	1cfb      	adds	r3, r7, #3
 800f770:	781b      	ldrb	r3, [r3, #0]
 800f772:	1cfa      	adds	r2, r7, #3
 800f774:	1c59      	adds	r1, r3, #1
 800f776:	7011      	strb	r1, [r2, #0]
 800f778:	001a      	movs	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	189b      	adds	r3, r3, r2
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	041a      	lsls	r2, r3, #16
 800f782:	0001      	movs	r1, r0
 800f784:	187b      	adds	r3, r7, r1
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	431a      	orrs	r2, r3
 800f78a:	187b      	adds	r3, r7, r1
 800f78c:	605a      	str	r2, [r3, #4]
                rxParamSetupReq.Frequency *= 100;
 800f78e:	187b      	adds	r3, r7, r1
 800f790:	685b      	ldr	r3, [r3, #4]
 800f792:	2264      	movs	r2, #100	; 0x64
 800f794:	435a      	muls	r2, r3
 800f796:	187b      	adds	r3, r7, r1
 800f798:	605a      	str	r2, [r3, #4]

                // Perform request on region
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800f79a:	4b2d      	ldr	r3, [pc, #180]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f79c:	4a2e      	ldr	r2, [pc, #184]	; (800f858 <ProcessMacCommands+0x404>)
 800f79e:	589b      	ldr	r3, [r3, r2]
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	187a      	adds	r2, r7, r1
 800f7a4:	0011      	movs	r1, r2
 800f7a6:	0018      	movs	r0, r3
 800f7a8:	f006 f928 	bl	80159fc <RegionRxParamSetupReq>
 800f7ac:	0003      	movs	r3, r0
 800f7ae:	001a      	movs	r2, r3
 800f7b0:	193b      	adds	r3, r7, r4
 800f7b2:	701a      	strb	r2, [r3, #0]

                if( ( status & 0x07 ) == 0x07 )
 800f7b4:	193b      	adds	r3, r7, r4
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	001a      	movs	r2, r3
 800f7ba:	2307      	movs	r3, #7
 800f7bc:	4013      	ands	r3, r2
 800f7be:	2b07      	cmp	r3, #7
 800f7c0:	d12e      	bne.n	800f820 <ProcessMacCommands+0x3cc>
                {
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f7c2:	204c      	movs	r0, #76	; 0x4c
 800f7c4:	183b      	adds	r3, r7, r0
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	5659      	ldrsb	r1, [r3, r1]
 800f7ca:	4b21      	ldr	r3, [pc, #132]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f7cc:	4a22      	ldr	r2, [pc, #136]	; (800f858 <ProcessMacCommands+0x404>)
 800f7ce:	589a      	ldr	r2, [r3, r2]
 800f7d0:	b2c9      	uxtb	r1, r1
 800f7d2:	2390      	movs	r3, #144	; 0x90
 800f7d4:	005b      	lsls	r3, r3, #1
 800f7d6:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f7d8:	183b      	adds	r3, r7, r0
 800f7da:	2100      	movs	r1, #0
 800f7dc:	5659      	ldrsb	r1, [r3, r1]
 800f7de:	4b1c      	ldr	r3, [pc, #112]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f7e0:	4a1d      	ldr	r2, [pc, #116]	; (800f858 <ProcessMacCommands+0x404>)
 800f7e2:	589a      	ldr	r2, [r3, r2]
 800f7e4:	b2c9      	uxtb	r1, r1
 800f7e6:	2394      	movs	r3, #148	; 0x94
 800f7e8:	005b      	lsls	r3, r3, #1
 800f7ea:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f7ec:	4b18      	ldr	r3, [pc, #96]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f7ee:	4a1a      	ldr	r2, [pc, #104]	; (800f858 <ProcessMacCommands+0x404>)
 800f7f0:	589a      	ldr	r2, [r3, r2]
 800f7f2:	183b      	adds	r3, r7, r0
 800f7f4:	6859      	ldr	r1, [r3, #4]
 800f7f6:	238e      	movs	r3, #142	; 0x8e
 800f7f8:	005b      	lsls	r3, r3, #1
 800f7fa:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f7fc:	4b14      	ldr	r3, [pc, #80]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f7fe:	4a16      	ldr	r2, [pc, #88]	; (800f858 <ProcessMacCommands+0x404>)
 800f800:	589a      	ldr	r2, [r3, r2]
 800f802:	183b      	adds	r3, r7, r0
 800f804:	6859      	ldr	r1, [r3, #4]
 800f806:	2392      	movs	r3, #146	; 0x92
 800f808:	005b      	lsls	r3, r3, #1
 800f80a:	50d1      	str	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f80c:	183b      	adds	r3, r7, r0
 800f80e:	2101      	movs	r1, #1
 800f810:	5659      	ldrsb	r1, [r3, r1]
 800f812:	4b0f      	ldr	r3, [pc, #60]	; (800f850 <ProcessMacCommands+0x3fc>)
 800f814:	4a10      	ldr	r2, [pc, #64]	; (800f858 <ProcessMacCommands+0x404>)
 800f816:	589a      	ldr	r2, [r3, r2]
 800f818:	b2c9      	uxtb	r1, r1
 800f81a:	231a      	movs	r3, #26
 800f81c:	33ff      	adds	r3, #255	; 0xff
 800f81e:	54d1      	strb	r1, [r2, r3]
                }
                macCmdPayload[0] = status;
 800f820:	236b      	movs	r3, #107	; 0x6b
 800f822:	18fb      	adds	r3, r7, r3
 800f824:	781a      	ldrb	r2, [r3, #0]
 800f826:	2168      	movs	r1, #104	; 0x68
 800f828:	187b      	adds	r3, r7, r1
 800f82a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f82c:	187b      	adds	r3, r7, r1
 800f82e:	2201      	movs	r2, #1
 800f830:	0019      	movs	r1, r3
 800f832:	2005      	movs	r0, #5
 800f834:	f003 ff28 	bl	8013688 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800f838:	f7ff fdfc 	bl	800f434 <SetMlmeScheduleUplinkIndication>
                break;
 800f83c:	46c0      	nop			; (mov r8, r8)
 800f83e:	2287      	movs	r2, #135	; 0x87
 800f840:	18bb      	adds	r3, r7, r2
 800f842:	18ba      	adds	r2, r7, r2
 800f844:	7812      	ldrb	r2, [r2, #0]
 800f846:	701a      	strb	r2, [r3, #0]
 800f848:	e3a5      	b.n	800ff96 <ProcessMacCommands+0xb42>
 800f84a:	46c0      	nop			; (mov r8, r8)
 800f84c:	0801b1d0 	.word	0x0801b1d0
 800f850:	200008f0 	.word	0x200008f0
 800f854:	00000459 	.word	0x00000459
 800f858:	00000484 	.word	0x00000484
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f85c:	2385      	movs	r3, #133	; 0x85
 800f85e:	18fb      	adds	r3, r7, r3
 800f860:	22ff      	movs	r2, #255	; 0xff
 800f862:	701a      	strb	r2, [r3, #0]
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f864:	4af1      	ldr	r2, [pc, #964]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800f866:	23d2      	movs	r3, #210	; 0xd2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	58d3      	ldr	r3, [r2, r3]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d010      	beq.n	800f892 <ProcessMacCommands+0x43e>
 800f870:	4aee      	ldr	r2, [pc, #952]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800f872:	23d2      	movs	r3, #210	; 0xd2
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	58d3      	ldr	r3, [r2, r3]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d009      	beq.n	800f892 <ProcessMacCommands+0x43e>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f87e:	4aeb      	ldr	r2, [pc, #940]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800f880:	23d2      	movs	r3, #210	; 0xd2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	58d3      	ldr	r3, [r2, r3]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2285      	movs	r2, #133	; 0x85
 800f88a:	18bc      	adds	r4, r7, r2
 800f88c:	4798      	blx	r3
 800f88e:	0003      	movs	r3, r0
 800f890:	7023      	strb	r3, [r4, #0]
                }
                macCmdPayload[0] = batteryLevel;
 800f892:	2168      	movs	r1, #104	; 0x68
 800f894:	187b      	adds	r3, r7, r1
 800f896:	2285      	movs	r2, #133	; 0x85
 800f898:	18ba      	adds	r2, r7, r2
 800f89a:	7812      	ldrb	r2, [r2, #0]
 800f89c:	701a      	strb	r2, [r3, #0]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f89e:	1c7b      	adds	r3, r7, #1
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	223f      	movs	r2, #63	; 0x3f
 800f8a4:	4013      	ands	r3, r2
 800f8a6:	b2da      	uxtb	r2, r3
 800f8a8:	187b      	adds	r3, r7, r1
 800f8aa:	705a      	strb	r2, [r3, #1]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f8ac:	187b      	adds	r3, r7, r1
 800f8ae:	2202      	movs	r2, #2
 800f8b0:	0019      	movs	r1, r3
 800f8b2:	2006      	movs	r0, #6
 800f8b4:	f003 fee8 	bl	8013688 <LoRaMacCommandsAddCmd>
 800f8b8:	2287      	movs	r2, #135	; 0x87
 800f8ba:	18bb      	adds	r3, r7, r2
 800f8bc:	18ba      	adds	r2, r7, r2
 800f8be:	7812      	ldrb	r2, [r2, #0]
 800f8c0:	701a      	strb	r2, [r3, #0]
                break;
 800f8c2:	e368      	b.n	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f8c4:	246b      	movs	r4, #107	; 0x6b
 800f8c6:	193b      	adds	r3, r7, r4
 800f8c8:	2203      	movs	r2, #3
 800f8ca:	701a      	strb	r2, [r3, #0]

                newChannelReq.ChannelId = payload[macIndex++];
 800f8cc:	1cfb      	adds	r3, r7, #3
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	1cfa      	adds	r2, r7, #3
 800f8d2:	1c59      	adds	r1, r3, #1
 800f8d4:	7011      	strb	r1, [r2, #0]
 800f8d6:	001a      	movs	r2, r3
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	189b      	adds	r3, r3, r2
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	b25a      	sxtb	r2, r3
 800f8e0:	2544      	movs	r5, #68	; 0x44
 800f8e2:	197b      	adds	r3, r7, r5
 800f8e4:	711a      	strb	r2, [r3, #4]
                newChannelReq.NewChannel = &chParam;
 800f8e6:	197b      	adds	r3, r7, r5
 800f8e8:	2038      	movs	r0, #56	; 0x38
 800f8ea:	183a      	adds	r2, r7, r0
 800f8ec:	601a      	str	r2, [r3, #0]

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f8ee:	1cfb      	adds	r3, r7, #3
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	1cfa      	adds	r2, r7, #3
 800f8f4:	1c59      	adds	r1, r3, #1
 800f8f6:	7011      	strb	r1, [r2, #0]
 800f8f8:	001a      	movs	r2, r3
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	189b      	adds	r3, r3, r2
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	001a      	movs	r2, r3
 800f902:	183b      	adds	r3, r7, r0
 800f904:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f906:	1cfb      	adds	r3, r7, #3
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	1cfa      	adds	r2, r7, #3
 800f90c:	1c59      	adds	r1, r3, #1
 800f90e:	7011      	strb	r1, [r2, #0]
 800f910:	001a      	movs	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	189b      	adds	r3, r3, r2
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	021a      	lsls	r2, r3, #8
 800f91a:	183b      	adds	r3, r7, r0
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	431a      	orrs	r2, r3
 800f920:	183b      	adds	r3, r7, r0
 800f922:	601a      	str	r2, [r3, #0]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f924:	1cfb      	adds	r3, r7, #3
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	1cfa      	adds	r2, r7, #3
 800f92a:	1c59      	adds	r1, r3, #1
 800f92c:	7011      	strb	r1, [r2, #0]
 800f92e:	001a      	movs	r2, r3
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	189b      	adds	r3, r3, r2
 800f934:	781b      	ldrb	r3, [r3, #0]
 800f936:	041a      	lsls	r2, r3, #16
 800f938:	183b      	adds	r3, r7, r0
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	431a      	orrs	r2, r3
 800f93e:	183b      	adds	r3, r7, r0
 800f940:	601a      	str	r2, [r3, #0]
                chParam.Frequency *= 100;
 800f942:	183b      	adds	r3, r7, r0
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	2264      	movs	r2, #100	; 0x64
 800f948:	435a      	muls	r2, r3
 800f94a:	183b      	adds	r3, r7, r0
 800f94c:	601a      	str	r2, [r3, #0]
                chParam.Rx1Frequency = 0;
 800f94e:	183b      	adds	r3, r7, r0
 800f950:	2200      	movs	r2, #0
 800f952:	605a      	str	r2, [r3, #4]
                chParam.DrRange.Value = payload[macIndex++];
 800f954:	1cfb      	adds	r3, r7, #3
 800f956:	781b      	ldrb	r3, [r3, #0]
 800f958:	1cfa      	adds	r2, r7, #3
 800f95a:	1c59      	adds	r1, r3, #1
 800f95c:	7011      	strb	r1, [r2, #0]
 800f95e:	001a      	movs	r2, r3
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	189b      	adds	r3, r3, r2
 800f964:	781b      	ldrb	r3, [r3, #0]
 800f966:	b25a      	sxtb	r2, r3
 800f968:	183b      	adds	r3, r7, r0
 800f96a:	721a      	strb	r2, [r3, #8]

                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800f96c:	4baf      	ldr	r3, [pc, #700]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800f96e:	4ab0      	ldr	r2, [pc, #704]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800f970:	589b      	ldr	r3, [r3, r2]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	197a      	adds	r2, r7, r5
 800f976:	0011      	movs	r1, r2
 800f978:	0018      	movs	r0, r3
 800f97a:	f006 f855 	bl	8015a28 <RegionNewChannelReq>
 800f97e:	0003      	movs	r3, r0
 800f980:	001a      	movs	r2, r3
 800f982:	193b      	adds	r3, r7, r4
 800f984:	701a      	strb	r2, [r3, #0]

                macCmdPayload[0] = status;
 800f986:	193b      	adds	r3, r7, r4
 800f988:	781a      	ldrb	r2, [r3, #0]
 800f98a:	2168      	movs	r1, #104	; 0x68
 800f98c:	187b      	adds	r3, r7, r1
 800f98e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f990:	187b      	adds	r3, r7, r1
 800f992:	2201      	movs	r2, #1
 800f994:	0019      	movs	r1, r3
 800f996:	2007      	movs	r0, #7
 800f998:	f003 fe76 	bl	8013688 <LoRaMacCommandsAddCmd>
                break;
 800f99c:	46c0      	nop			; (mov r8, r8)
 800f99e:	2287      	movs	r2, #135	; 0x87
 800f9a0:	18bb      	adds	r3, r7, r2
 800f9a2:	18ba      	adds	r2, r7, r2
 800f9a4:	7812      	ldrb	r2, [r2, #0]
 800f9a6:	701a      	strb	r2, [r3, #0]
 800f9a8:	e2f5      	b.n	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f9aa:	1cfb      	adds	r3, r7, #3
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	1cfa      	adds	r2, r7, #3
 800f9b0:	1c59      	adds	r1, r3, #1
 800f9b2:	7011      	strb	r1, [r2, #0]
 800f9b4:	001a      	movs	r2, r3
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	189b      	adds	r3, r3, r2
 800f9ba:	781a      	ldrb	r2, [r3, #0]
 800f9bc:	2084      	movs	r0, #132	; 0x84
 800f9be:	183b      	adds	r3, r7, r0
 800f9c0:	210f      	movs	r1, #15
 800f9c2:	400a      	ands	r2, r1
 800f9c4:	701a      	strb	r2, [r3, #0]

                if( delay == 0 )
 800f9c6:	183b      	adds	r3, r7, r0
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d105      	bne.n	800f9da <ProcessMacCommands+0x586>
                {
                    delay++;
 800f9ce:	2184      	movs	r1, #132	; 0x84
 800f9d0:	187b      	adds	r3, r7, r1
 800f9d2:	781a      	ldrb	r2, [r3, #0]
 800f9d4:	187b      	adds	r3, r7, r1
 800f9d6:	3201      	adds	r2, #1
 800f9d8:	701a      	strb	r2, [r3, #0]
                }
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800f9da:	2384      	movs	r3, #132	; 0x84
 800f9dc:	18fb      	adds	r3, r7, r3
 800f9de:	781a      	ldrb	r2, [r3, #0]
 800f9e0:	0013      	movs	r3, r2
 800f9e2:	015b      	lsls	r3, r3, #5
 800f9e4:	1a9b      	subs	r3, r3, r2
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	189b      	adds	r3, r3, r2
 800f9ea:	00db      	lsls	r3, r3, #3
 800f9ec:	0019      	movs	r1, r3
 800f9ee:	4b8f      	ldr	r3, [pc, #572]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800f9f0:	4a8f      	ldr	r2, [pc, #572]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800f9f2:	589a      	ldr	r2, [r3, r2]
 800f9f4:	2384      	movs	r3, #132	; 0x84
 800f9f6:	005b      	lsls	r3, r3, #1
 800f9f8:	50d1      	str	r1, [r2, r3]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800f9fa:	4b8c      	ldr	r3, [pc, #560]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800f9fc:	4a8c      	ldr	r2, [pc, #560]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800f9fe:	589a      	ldr	r2, [r3, r2]
 800fa00:	2384      	movs	r3, #132	; 0x84
 800fa02:	005b      	lsls	r3, r3, #1
 800fa04:	58d3      	ldr	r3, [r2, r3]
 800fa06:	4a89      	ldr	r2, [pc, #548]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fa08:	4989      	ldr	r1, [pc, #548]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fa0a:	5852      	ldr	r2, [r2, r1]
 800fa0c:	21fa      	movs	r1, #250	; 0xfa
 800fa0e:	0089      	lsls	r1, r1, #2
 800fa10:	1859      	adds	r1, r3, r1
 800fa12:	2386      	movs	r3, #134	; 0x86
 800fa14:	005b      	lsls	r3, r3, #1
 800fa16:	50d1      	str	r1, [r2, r3]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800fa18:	2368      	movs	r3, #104	; 0x68
 800fa1a:	18fb      	adds	r3, r7, r3
 800fa1c:	2200      	movs	r2, #0
 800fa1e:	0019      	movs	r1, r3
 800fa20:	2008      	movs	r0, #8
 800fa22:	f003 fe31 	bl	8013688 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800fa26:	f7ff fd05 	bl	800f434 <SetMlmeScheduleUplinkIndication>
 800fa2a:	2287      	movs	r2, #135	; 0x87
 800fa2c:	18bb      	adds	r3, r7, r2
 800fa2e:	18ba      	adds	r2, r7, r2
 800fa30:	7812      	ldrb	r2, [r2, #0]
 800fa32:	701a      	strb	r2, [r3, #0]
                break;
 800fa34:	e2af      	b.n	800ff96 <ProcessMacCommands+0xb42>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800fa36:	1cfb      	adds	r3, r7, #3
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	1cfa      	adds	r2, r7, #3
 800fa3c:	1c59      	adds	r1, r3, #1
 800fa3e:	7011      	strb	r1, [r2, #0]
 800fa40:	001a      	movs	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	189a      	adds	r2, r3, r2
 800fa46:	2176      	movs	r1, #118	; 0x76
 800fa48:	187b      	adds	r3, r7, r1
 800fa4a:	7812      	ldrb	r2, [r2, #0]
 800fa4c:	701a      	strb	r2, [r3, #0]

                txParamSetupReq.UplinkDwellTime = 0;
 800fa4e:	2034      	movs	r0, #52	; 0x34
 800fa50:	183b      	adds	r3, r7, r0
 800fa52:	2200      	movs	r2, #0
 800fa54:	701a      	strb	r2, [r3, #0]
                txParamSetupReq.DownlinkDwellTime = 0;
 800fa56:	183b      	adds	r3, r7, r0
 800fa58:	2200      	movs	r2, #0
 800fa5a:	705a      	strb	r2, [r3, #1]

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800fa5c:	187b      	adds	r3, r7, r1
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2220      	movs	r2, #32
 800fa62:	4013      	ands	r3, r2
 800fa64:	d003      	beq.n	800fa6e <ProcessMacCommands+0x61a>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800fa66:	2334      	movs	r3, #52	; 0x34
 800fa68:	18fb      	adds	r3, r7, r3
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	705a      	strb	r2, [r3, #1]
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800fa6e:	2376      	movs	r3, #118	; 0x76
 800fa70:	18fb      	adds	r3, r7, r3
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	2210      	movs	r2, #16
 800fa76:	4013      	ands	r3, r2
 800fa78:	d003      	beq.n	800fa82 <ProcessMacCommands+0x62e>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800fa7a:	2334      	movs	r3, #52	; 0x34
 800fa7c:	18fb      	adds	r3, r7, r3
 800fa7e:	2201      	movs	r2, #1
 800fa80:	701a      	strb	r2, [r3, #0]
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800fa82:	2376      	movs	r3, #118	; 0x76
 800fa84:	18fb      	adds	r3, r7, r3
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	220f      	movs	r2, #15
 800fa8a:	4013      	ands	r3, r2
 800fa8c:	b2da      	uxtb	r2, r3
 800fa8e:	2134      	movs	r1, #52	; 0x34
 800fa90:	187b      	adds	r3, r7, r1
 800fa92:	709a      	strb	r2, [r3, #2]

                // Check the status for correctness
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800fa94:	4b65      	ldr	r3, [pc, #404]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fa96:	4a66      	ldr	r2, [pc, #408]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fa98:	589b      	ldr	r3, [r3, r2]
 800fa9a:	781b      	ldrb	r3, [r3, #0]
 800fa9c:	187a      	adds	r2, r7, r1
 800fa9e:	0011      	movs	r1, r2
 800faa0:	0018      	movs	r0, r3
 800faa2:	f005 ffd7 	bl	8015a54 <RegionTxParamSetupReq>
 800faa6:	0003      	movs	r3, r0
 800faa8:	3301      	adds	r3, #1
 800faaa:	d055      	beq.n	800fb58 <ProcessMacCommands+0x704>
                {
                    // Accept command
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800faac:	4b5f      	ldr	r3, [pc, #380]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800faae:	4a60      	ldr	r2, [pc, #384]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fab0:	589a      	ldr	r2, [r3, r2]
 800fab2:	2034      	movs	r0, #52	; 0x34
 800fab4:	183b      	adds	r3, r7, r0
 800fab6:	7819      	ldrb	r1, [r3, #0]
 800fab8:	2396      	movs	r3, #150	; 0x96
 800faba:	005b      	lsls	r3, r3, #1
 800fabc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800fabe:	4b5b      	ldr	r3, [pc, #364]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fac0:	4a5b      	ldr	r2, [pc, #364]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fac2:	589a      	ldr	r2, [r3, r2]
 800fac4:	183b      	adds	r3, r7, r0
 800fac6:	7859      	ldrb	r1, [r3, #1]
 800fac8:	232e      	movs	r3, #46	; 0x2e
 800faca:	33ff      	adds	r3, #255	; 0xff
 800facc:	54d1      	strb	r1, [r2, r3]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800face:	183b      	adds	r3, r7, r0
 800fad0:	789b      	ldrb	r3, [r3, #2]
 800fad2:	001a      	movs	r2, r3
 800fad4:	4b57      	ldr	r3, [pc, #348]	; (800fc34 <ProcessMacCommands+0x7e0>)
 800fad6:	5c99      	ldrb	r1, [r3, r2]
 800fad8:	4b54      	ldr	r3, [pc, #336]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fada:	4a55      	ldr	r2, [pc, #340]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fadc:	589c      	ldr	r4, [r3, r2]
 800fade:	0008      	movs	r0, r1
 800fae0:	f7f1 fb06 	bl	80010f0 <__aeabi_ui2f>
 800fae4:	1c02      	adds	r2, r0, #0
 800fae6:	2398      	movs	r3, #152	; 0x98
 800fae8:	005b      	lsls	r3, r3, #1
 800faea:	50e2      	str	r2, [r4, r3]
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800faec:	2130      	movs	r1, #48	; 0x30
 800faee:	187b      	adds	r3, r7, r1
 800faf0:	2202      	movs	r2, #2
 800faf2:	701a      	strb	r2, [r3, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800faf4:	4b4d      	ldr	r3, [pc, #308]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800faf6:	4a4e      	ldr	r2, [pc, #312]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800faf8:	589a      	ldr	r2, [r3, r2]
 800fafa:	2396      	movs	r3, #150	; 0x96
 800fafc:	005b      	lsls	r3, r3, #1
 800fafe:	5cd2      	ldrb	r2, [r2, r3]
 800fb00:	187b      	adds	r3, r7, r1
 800fb02:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800fb04:	4b49      	ldr	r3, [pc, #292]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fb06:	4a4a      	ldr	r2, [pc, #296]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fb08:	589b      	ldr	r3, [r3, r2]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	187a      	adds	r2, r7, r1
 800fb0e:	0011      	movs	r1, r2
 800fb10:	0018      	movs	r0, r3
 800fb12:	f005 fe4d 	bl	80157b0 <RegionGetPhyParam>
 800fb16:	0003      	movs	r3, r0
 800fb18:	001a      	movs	r2, r3
 800fb1a:	212c      	movs	r1, #44	; 0x2c
 800fb1c:	187b      	adds	r3, r7, r1
 800fb1e:	601a      	str	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800fb20:	187b      	adds	r3, r7, r1
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	b259      	sxtb	r1, r3
 800fb26:	4b41      	ldr	r3, [pc, #260]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fb28:	4a41      	ldr	r2, [pc, #260]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fb2a:	589b      	ldr	r3, [r3, r2]
 800fb2c:	22f9      	movs	r2, #249	; 0xf9
 800fb2e:	5698      	ldrsb	r0, [r3, r2]
 800fb30:	4b3e      	ldr	r3, [pc, #248]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fb32:	4a3f      	ldr	r2, [pc, #252]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fb34:	589b      	ldr	r3, [r3, r2]
 800fb36:	1c04      	adds	r4, r0, #0
 800fb38:	1c08      	adds	r0, r1, #0
 800fb3a:	b241      	sxtb	r1, r0
 800fb3c:	b262      	sxtb	r2, r4
 800fb3e:	4291      	cmp	r1, r2
 800fb40:	da00      	bge.n	800fb44 <ProcessMacCommands+0x6f0>
 800fb42:	1c20      	adds	r0, r4, #0
 800fb44:	b241      	sxtb	r1, r0
 800fb46:	22f9      	movs	r2, #249	; 0xf9
 800fb48:	5499      	strb	r1, [r3, r2]

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800fb4a:	2368      	movs	r3, #104	; 0x68
 800fb4c:	18fb      	adds	r3, r7, r3
 800fb4e:	2200      	movs	r2, #0
 800fb50:	0019      	movs	r1, r3
 800fb52:	2009      	movs	r0, #9
 800fb54:	f003 fd98 	bl	8013688 <LoRaMacCommandsAddCmd>
                }
                break;
 800fb58:	46c0      	nop			; (mov r8, r8)
 800fb5a:	2287      	movs	r2, #135	; 0x87
 800fb5c:	18bb      	adds	r3, r7, r2
 800fb5e:	18ba      	adds	r2, r7, r2
 800fb60:	7812      	ldrb	r2, [r2, #0]
 800fb62:	701a      	strb	r2, [r3, #0]
 800fb64:	e217      	b.n	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800fb66:	246b      	movs	r4, #107	; 0x6b
 800fb68:	193b      	adds	r3, r7, r4
 800fb6a:	2203      	movs	r2, #3
 800fb6c:	701a      	strb	r2, [r3, #0]

                dlChannelReq.ChannelId = payload[macIndex++];
 800fb6e:	1cfb      	adds	r3, r7, #3
 800fb70:	781b      	ldrb	r3, [r3, #0]
 800fb72:	1cfa      	adds	r2, r7, #3
 800fb74:	1c59      	adds	r1, r3, #1
 800fb76:	7011      	strb	r1, [r2, #0]
 800fb78:	001a      	movs	r2, r3
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	189b      	adds	r3, r3, r2
 800fb7e:	781a      	ldrb	r2, [r3, #0]
 800fb80:	2024      	movs	r0, #36	; 0x24
 800fb82:	183b      	adds	r3, r7, r0
 800fb84:	701a      	strb	r2, [r3, #0]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800fb86:	1cfb      	adds	r3, r7, #3
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	1cfa      	adds	r2, r7, #3
 800fb8c:	1c59      	adds	r1, r3, #1
 800fb8e:	7011      	strb	r1, [r2, #0]
 800fb90:	001a      	movs	r2, r3
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	189b      	adds	r3, r3, r2
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	001a      	movs	r2, r3
 800fb9a:	183b      	adds	r3, r7, r0
 800fb9c:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800fb9e:	1cfb      	adds	r3, r7, #3
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	1cfa      	adds	r2, r7, #3
 800fba4:	1c59      	adds	r1, r3, #1
 800fba6:	7011      	strb	r1, [r2, #0]
 800fba8:	001a      	movs	r2, r3
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	189b      	adds	r3, r3, r2
 800fbae:	781b      	ldrb	r3, [r3, #0]
 800fbb0:	021a      	lsls	r2, r3, #8
 800fbb2:	183b      	adds	r3, r7, r0
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	431a      	orrs	r2, r3
 800fbb8:	183b      	adds	r3, r7, r0
 800fbba:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800fbbc:	1cfb      	adds	r3, r7, #3
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	1cfa      	adds	r2, r7, #3
 800fbc2:	1c59      	adds	r1, r3, #1
 800fbc4:	7011      	strb	r1, [r2, #0]
 800fbc6:	001a      	movs	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	189b      	adds	r3, r3, r2
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	041a      	lsls	r2, r3, #16
 800fbd0:	0001      	movs	r1, r0
 800fbd2:	187b      	adds	r3, r7, r1
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	431a      	orrs	r2, r3
 800fbd8:	187b      	adds	r3, r7, r1
 800fbda:	605a      	str	r2, [r3, #4]
                dlChannelReq.Rx1Frequency *= 100;
 800fbdc:	187b      	adds	r3, r7, r1
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	2264      	movs	r2, #100	; 0x64
 800fbe2:	435a      	muls	r2, r3
 800fbe4:	187b      	adds	r3, r7, r1
 800fbe6:	605a      	str	r2, [r3, #4]

                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800fbe8:	4b10      	ldr	r3, [pc, #64]	; (800fc2c <ProcessMacCommands+0x7d8>)
 800fbea:	4a11      	ldr	r2, [pc, #68]	; (800fc30 <ProcessMacCommands+0x7dc>)
 800fbec:	589b      	ldr	r3, [r3, r2]
 800fbee:	781b      	ldrb	r3, [r3, #0]
 800fbf0:	187a      	adds	r2, r7, r1
 800fbf2:	0011      	movs	r1, r2
 800fbf4:	0018      	movs	r0, r3
 800fbf6:	f005 ff43 	bl	8015a80 <RegionDlChannelReq>
 800fbfa:	0003      	movs	r3, r0
 800fbfc:	001a      	movs	r2, r3
 800fbfe:	193b      	adds	r3, r7, r4
 800fc00:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800fc02:	193b      	adds	r3, r7, r4
 800fc04:	781a      	ldrb	r2, [r3, #0]
 800fc06:	2168      	movs	r1, #104	; 0x68
 800fc08:	187b      	adds	r3, r7, r1
 800fc0a:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800fc0c:	187b      	adds	r3, r7, r1
 800fc0e:	2201      	movs	r2, #1
 800fc10:	0019      	movs	r1, r3
 800fc12:	200a      	movs	r0, #10
 800fc14:	f003 fd38 	bl	8013688 <LoRaMacCommandsAddCmd>
                // Setup indication to inform the application
                SetMlmeScheduleUplinkIndication( );
 800fc18:	f7ff fc0c 	bl	800f434 <SetMlmeScheduleUplinkIndication>
                break;
 800fc1c:	46c0      	nop			; (mov r8, r8)
 800fc1e:	2287      	movs	r2, #135	; 0x87
 800fc20:	18bb      	adds	r3, r7, r2
 800fc22:	18ba      	adds	r2, r7, r2
 800fc24:	7812      	ldrb	r2, [r2, #0]
 800fc26:	701a      	strb	r2, [r3, #0]
 800fc28:	e1b5      	b.n	800ff96 <ProcessMacCommands+0xb42>
 800fc2a:	46c0      	nop			; (mov r8, r8)
 800fc2c:	200008f0 	.word	0x200008f0
 800fc30:	00000484 	.word	0x00000484
 800fc34:	0801b1ac 	.word	0x0801b1ac
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                SysTime_t gpsEpochTime = { 0 };
 800fc38:	241c      	movs	r4, #28
 800fc3a:	193b      	adds	r3, r7, r4
 800fc3c:	0018      	movs	r0, r3
 800fc3e:	2308      	movs	r3, #8
 800fc40:	001a      	movs	r2, r3
 800fc42:	2100      	movs	r1, #0
 800fc44:	f009 fe88 	bl	8019958 <memset>
                SysTime_t sysTime = { 0 };
 800fc48:	2514      	movs	r5, #20
 800fc4a:	197b      	adds	r3, r7, r5
 800fc4c:	0018      	movs	r0, r3
 800fc4e:	2308      	movs	r3, #8
 800fc50:	001a      	movs	r2, r3
 800fc52:	2100      	movs	r1, #0
 800fc54:	f009 fe80 	bl	8019958 <memset>
                SysTime_t sysTimeCurrent = { 0 };
 800fc58:	260c      	movs	r6, #12
 800fc5a:	19bb      	adds	r3, r7, r6
 800fc5c:	0018      	movs	r0, r3
 800fc5e:	2308      	movs	r3, #8
 800fc60:	001a      	movs	r2, r3
 800fc62:	2100      	movs	r1, #0
 800fc64:	f009 fe78 	bl	8019958 <memset>

                gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800fc68:	1cfb      	adds	r3, r7, #3
 800fc6a:	781b      	ldrb	r3, [r3, #0]
 800fc6c:	1cfa      	adds	r2, r7, #3
 800fc6e:	1c59      	adds	r1, r3, #1
 800fc70:	7011      	strb	r1, [r2, #0]
 800fc72:	001a      	movs	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	189b      	adds	r3, r3, r2
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	001a      	movs	r2, r3
 800fc7c:	0020      	movs	r0, r4
 800fc7e:	183b      	adds	r3, r7, r0
 800fc80:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800fc82:	1cfb      	adds	r3, r7, #3
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	1cfa      	adds	r2, r7, #3
 800fc88:	1c59      	adds	r1, r3, #1
 800fc8a:	7011      	strb	r1, [r2, #0]
 800fc8c:	001a      	movs	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	189b      	adds	r3, r3, r2
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	021a      	lsls	r2, r3, #8
 800fc96:	183b      	adds	r3, r7, r0
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	431a      	orrs	r2, r3
 800fc9c:	183b      	adds	r3, r7, r0
 800fc9e:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800fca0:	1cfb      	adds	r3, r7, #3
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	1cfa      	adds	r2, r7, #3
 800fca6:	1c59      	adds	r1, r3, #1
 800fca8:	7011      	strb	r1, [r2, #0]
 800fcaa:	001a      	movs	r2, r3
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	189b      	adds	r3, r3, r2
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	041a      	lsls	r2, r3, #16
 800fcb4:	183b      	adds	r3, r7, r0
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	431a      	orrs	r2, r3
 800fcba:	183b      	adds	r3, r7, r0
 800fcbc:	601a      	str	r2, [r3, #0]
                gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800fcbe:	1cfb      	adds	r3, r7, #3
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	1cfa      	adds	r2, r7, #3
 800fcc4:	1c59      	adds	r1, r3, #1
 800fcc6:	7011      	strb	r1, [r2, #0]
 800fcc8:	001a      	movs	r2, r3
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	189b      	adds	r3, r3, r2
 800fcce:	781b      	ldrb	r3, [r3, #0]
 800fcd0:	061a      	lsls	r2, r3, #24
 800fcd2:	183b      	adds	r3, r7, r0
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	431a      	orrs	r2, r3
 800fcd8:	183b      	adds	r3, r7, r0
 800fcda:	601a      	str	r2, [r3, #0]
                gpsEpochTime.SubSeconds = payload[macIndex++];
 800fcdc:	1cfb      	adds	r3, r7, #3
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	1cfa      	adds	r2, r7, #3
 800fce2:	1c59      	adds	r1, r3, #1
 800fce4:	7011      	strb	r1, [r2, #0]
 800fce6:	001a      	movs	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	189b      	adds	r3, r3, r2
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	b21a      	sxth	r2, r3
 800fcf0:	183b      	adds	r3, r7, r0
 800fcf2:	809a      	strh	r2, [r3, #4]

                // Convert the fractional second received in ms
                // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800fcf4:	0001      	movs	r1, r0
 800fcf6:	183b      	adds	r3, r7, r0
 800fcf8:	2204      	movs	r2, #4
 800fcfa:	5e9b      	ldrsh	r3, [r3, r2]
 800fcfc:	001a      	movs	r2, r3
 800fcfe:	0013      	movs	r3, r2
 800fd00:	015b      	lsls	r3, r3, #5
 800fd02:	1a9b      	subs	r3, r3, r2
 800fd04:	009b      	lsls	r3, r3, #2
 800fd06:	189b      	adds	r3, r3, r2
 800fd08:	00db      	lsls	r3, r3, #3
 800fd0a:	121b      	asrs	r3, r3, #8
 800fd0c:	b21a      	sxth	r2, r3
 800fd0e:	187b      	adds	r3, r7, r1
 800fd10:	809a      	strh	r2, [r3, #4]

                // Copy received GPS Epoch time into system time
                sysTime = gpsEpochTime;
 800fd12:	002c      	movs	r4, r5
 800fd14:	193b      	adds	r3, r7, r4
 800fd16:	187a      	adds	r2, r7, r1
 800fd18:	ca03      	ldmia	r2!, {r0, r1}
 800fd1a:	c303      	stmia	r3!, {r0, r1}
                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800fd1c:	193b      	adds	r3, r7, r4
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4aa3      	ldr	r2, [pc, #652]	; (800ffb0 <ProcessMacCommands+0xb5c>)
 800fd22:	189a      	adds	r2, r3, r2
 800fd24:	193b      	adds	r3, r7, r4
 800fd26:	601a      	str	r2, [r3, #0]

                // Compensate time difference between Tx Done time and now
                sysTimeCurrent = SysTimeGet( );
 800fd28:	19bb      	adds	r3, r7, r6
 800fd2a:	0018      	movs	r0, r3
 800fd2c:	f009 f9cd 	bl	80190ca <SysTimeGet>
                sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800fd30:	236c      	movs	r3, #108	; 0x6c
 800fd32:	18fd      	adds	r5, r7, r3
 800fd34:	499f      	ldr	r1, [pc, #636]	; (800ffb4 <ProcessMacCommands+0xb60>)
 800fd36:	23ce      	movs	r3, #206	; 0xce
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	0026      	movs	r6, r4
 800fd3c:	193a      	adds	r2, r7, r4
 800fd3e:	2404      	movs	r4, #4
 800fd40:	18c8      	adds	r0, r1, r3
 800fd42:	1900      	adds	r0, r0, r4
 800fd44:	466c      	mov	r4, sp
 800fd46:	6800      	ldr	r0, [r0, #0]
 800fd48:	6020      	str	r0, [r4, #0]
 800fd4a:	58cb      	ldr	r3, [r1, r3]
 800fd4c:	6811      	ldr	r1, [r2, #0]
 800fd4e:	6852      	ldr	r2, [r2, #4]
 800fd50:	0028      	movs	r0, r5
 800fd52:	f009 f935 	bl	8018fc0 <SysTimeSub>
 800fd56:	0034      	movs	r4, r6
 800fd58:	0025      	movs	r5, r4
 800fd5a:	193c      	adds	r4, r7, r4
 800fd5c:	236c      	movs	r3, #108	; 0x6c
 800fd5e:	18fb      	adds	r3, r7, r3
 800fd60:	260c      	movs	r6, #12
 800fd62:	19ba      	adds	r2, r7, r6
 800fd64:	4669      	mov	r1, sp
 800fd66:	6858      	ldr	r0, [r3, #4]
 800fd68:	6008      	str	r0, [r1, #0]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	6811      	ldr	r1, [r2, #0]
 800fd6e:	6852      	ldr	r2, [r2, #4]
 800fd70:	0020      	movs	r0, r4
 800fd72:	f009 f8cd 	bl	8018f10 <SysTimeAdd>

                // Apply the new system time.
                SysTimeSet( sysTime );
 800fd76:	002c      	movs	r4, r5
 800fd78:	193b      	adds	r3, r7, r4
 800fd7a:	6818      	ldr	r0, [r3, #0]
 800fd7c:	6859      	ldr	r1, [r3, #4]
 800fd7e:	f009 f973 	bl	8019068 <SysTimeSet>
                LoRaMacClassBDeviceTimeAns( );
 800fd82:	f003 fafc 	bl	801337e <LoRaMacClassBDeviceTimeAns>
                MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800fd86:	4a8b      	ldr	r2, [pc, #556]	; (800ffb4 <ProcessMacCommands+0xb60>)
 800fd88:	2387      	movs	r3, #135	; 0x87
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	2101      	movs	r1, #1
 800fd8e:	54d1      	strb	r1, [r2, r3]
                break;
 800fd90:	46c0      	nop			; (mov r8, r8)
 800fd92:	2287      	movs	r2, #135	; 0x87
 800fd94:	18bb      	adds	r3, r7, r2
 800fd96:	18ba      	adds	r2, r7, r2
 800fd98:	7812      	ldrb	r2, [r2, #0]
 800fd9a:	701a      	strb	r2, [r3, #0]
 800fd9c:	e0fb      	b.n	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                // According to the specification, it is not allowed to process this answer in
                // a ping or multicast slot
                if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800fd9e:	4a85      	ldr	r2, [pc, #532]	; (800ffb4 <ProcessMacCommands+0xb60>)
 800fda0:	2390      	movs	r3, #144	; 0x90
 800fda2:	00db      	lsls	r3, r3, #3
 800fda4:	5cd3      	ldrb	r3, [r2, r3]
 800fda6:	2b04      	cmp	r3, #4
 800fda8:	d007      	beq.n	800fdba <ProcessMacCommands+0x966>
 800fdaa:	4a82      	ldr	r2, [pc, #520]	; (800ffb4 <ProcessMacCommands+0xb60>)
 800fdac:	2390      	movs	r3, #144	; 0x90
 800fdae:	00db      	lsls	r3, r3, #3
 800fdb0:	5cd3      	ldrb	r3, [r2, r3]
 800fdb2:	2b05      	cmp	r3, #5
 800fdb4:	d001      	beq.n	800fdba <ProcessMacCommands+0x966>
                {
                    LoRaMacClassBPingSlotInfoAns( );
 800fdb6:	f003 fac3 	bl	8013340 <LoRaMacClassBPingSlotInfoAns>
 800fdba:	2287      	movs	r2, #135	; 0x87
 800fdbc:	18bb      	adds	r3, r7, r2
 800fdbe:	18ba      	adds	r2, r7, r2
 800fdc0:	7812      	ldrb	r2, [r2, #0]
 800fdc2:	701a      	strb	r2, [r3, #0]
                }
                break;
 800fdc4:	e0e7      	b.n	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800fdc6:	207c      	movs	r0, #124	; 0x7c
 800fdc8:	183b      	adds	r3, r7, r0
 800fdca:	2203      	movs	r2, #3
 800fdcc:	701a      	strb	r2, [r3, #0]
                uint32_t frequency = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800fdd2:	1cfb      	adds	r3, r7, #3
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	1cfa      	adds	r2, r7, #3
 800fdd8:	1c59      	adds	r1, r3, #1
 800fdda:	7011      	strb	r1, [r2, #0]
 800fddc:	001a      	movs	r2, r3
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	189b      	adds	r3, r3, r2
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fde6:	1cfb      	adds	r3, r7, #3
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	1cfa      	adds	r2, r7, #3
 800fdec:	1c59      	adds	r1, r3, #1
 800fdee:	7011      	strb	r1, [r2, #0]
 800fdf0:	001a      	movs	r2, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	189b      	adds	r3, r3, r2
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	021b      	lsls	r3, r3, #8
 800fdfa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fe00:	1cfb      	adds	r3, r7, #3
 800fe02:	781b      	ldrb	r3, [r3, #0]
 800fe04:	1cfa      	adds	r2, r7, #3
 800fe06:	1c59      	adds	r1, r3, #1
 800fe08:	7011      	strb	r1, [r2, #0]
 800fe0a:	001a      	movs	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	189b      	adds	r3, r3, r2
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	041b      	lsls	r3, r3, #16
 800fe14:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fe16:	4313      	orrs	r3, r2
 800fe18:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 800fe1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe1c:	2264      	movs	r2, #100	; 0x64
 800fe1e:	4353      	muls	r3, r2
 800fe20:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fe22:	1cfb      	adds	r3, r7, #3
 800fe24:	781b      	ldrb	r3, [r3, #0]
 800fe26:	1cfa      	adds	r2, r7, #3
 800fe28:	1c59      	adds	r1, r3, #1
 800fe2a:	7011      	strb	r1, [r2, #0]
 800fe2c:	001a      	movs	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	189b      	adds	r3, r3, r2
 800fe32:	781a      	ldrb	r2, [r3, #0]
 800fe34:	2677      	movs	r6, #119	; 0x77
 800fe36:	19bb      	adds	r3, r7, r6
 800fe38:	210f      	movs	r1, #15
 800fe3a:	400a      	ands	r2, r1
 800fe3c:	701a      	strb	r2, [r3, #0]

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fe3e:	0005      	movs	r5, r0
 800fe40:	183c      	adds	r4, r7, r0
 800fe42:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fe44:	19bb      	adds	r3, r7, r6
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	0011      	movs	r1, r2
 800fe4a:	0018      	movs	r0, r3
 800fe4c:	f003 fa7d 	bl	801334a <LoRaMacClassBPingSlotChannelReq>
 800fe50:	0003      	movs	r3, r0
 800fe52:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 800fe54:	2168      	movs	r1, #104	; 0x68
 800fe56:	187b      	adds	r3, r7, r1
 800fe58:	0028      	movs	r0, r5
 800fe5a:	183a      	adds	r2, r7, r0
 800fe5c:	7812      	ldrb	r2, [r2, #0]
 800fe5e:	701a      	strb	r2, [r3, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800fe60:	187b      	adds	r3, r7, r1
 800fe62:	2201      	movs	r2, #1
 800fe64:	0019      	movs	r1, r3
 800fe66:	2011      	movs	r0, #17
 800fe68:	f003 fc0e 	bl	8013688 <LoRaMacCommandsAddCmd>
 800fe6c:	2287      	movs	r2, #135	; 0x87
 800fe6e:	18bb      	adds	r3, r7, r2
 800fe70:	18ba      	adds	r2, r7, r2
 800fe72:	7812      	ldrb	r2, [r2, #0]
 800fe74:	701a      	strb	r2, [r3, #0]
                break;
 800fe76:	e08e      	b.n	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                uint16_t beaconTimingDelay = 0;
 800fe78:	207e      	movs	r0, #126	; 0x7e
 800fe7a:	183b      	adds	r3, r7, r0
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	801a      	strh	r2, [r3, #0]
                uint8_t beaconTimingChannel = 0;
 800fe80:	247d      	movs	r4, #125	; 0x7d
 800fe82:	193b      	adds	r3, r7, r4
 800fe84:	2200      	movs	r2, #0
 800fe86:	701a      	strb	r2, [r3, #0]

                beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800fe88:	1cfb      	adds	r3, r7, #3
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	1cfa      	adds	r2, r7, #3
 800fe8e:	1c59      	adds	r1, r3, #1
 800fe90:	7011      	strb	r1, [r2, #0]
 800fe92:	001a      	movs	r2, r3
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	189b      	adds	r3, r3, r2
 800fe98:	781a      	ldrb	r2, [r3, #0]
 800fe9a:	183b      	adds	r3, r7, r0
 800fe9c:	801a      	strh	r2, [r3, #0]
                beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800fe9e:	1cfb      	adds	r3, r7, #3
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	1cfa      	adds	r2, r7, #3
 800fea4:	1c59      	adds	r1, r3, #1
 800fea6:	7011      	strb	r1, [r2, #0]
 800fea8:	001a      	movs	r2, r3
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	189b      	adds	r3, r3, r2
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	021b      	lsls	r3, r3, #8
 800feb2:	b21a      	sxth	r2, r3
 800feb4:	183b      	adds	r3, r7, r0
 800feb6:	2100      	movs	r1, #0
 800feb8:	5e5b      	ldrsh	r3, [r3, r1]
 800feba:	4313      	orrs	r3, r2
 800febc:	b21a      	sxth	r2, r3
 800febe:	183b      	adds	r3, r7, r0
 800fec0:	801a      	strh	r2, [r3, #0]
                beaconTimingChannel = payload[macIndex++];
 800fec2:	1cfb      	adds	r3, r7, #3
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	1cfa      	adds	r2, r7, #3
 800fec8:	1c59      	adds	r1, r3, #1
 800feca:	7011      	strb	r1, [r2, #0]
 800fecc:	001a      	movs	r2, r3
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	189a      	adds	r2, r3, r2
 800fed2:	193b      	adds	r3, r7, r4
 800fed4:	7812      	ldrb	r2, [r2, #0]
 800fed6:	701a      	strb	r2, [r3, #0]

                LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800fed8:	4b37      	ldr	r3, [pc, #220]	; (800ffb8 <ProcessMacCommands+0xb64>)
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	193b      	adds	r3, r7, r4
 800fede:	7819      	ldrb	r1, [r3, #0]
 800fee0:	183b      	adds	r3, r7, r0
 800fee2:	881b      	ldrh	r3, [r3, #0]
 800fee4:	0018      	movs	r0, r3
 800fee6:	f003 fa3c 	bl	8013362 <LoRaMacClassBBeaconTimingAns>
 800feea:	2287      	movs	r2, #135	; 0x87
 800feec:	18bb      	adds	r3, r7, r2
 800feee:	18ba      	adds	r2, r7, r2
 800fef0:	7812      	ldrb	r2, [r2, #0]
 800fef2:	701a      	strb	r2, [r3, #0]
                break;
 800fef4:	e04f      	b.n	800ff96 <ProcessMacCommands+0xb42>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800fef6:	2300      	movs	r3, #0
 800fef8:	2080      	movs	r0, #128	; 0x80
 800fefa:	183a      	adds	r2, r7, r0
 800fefc:	6013      	str	r3, [r2, #0]

                    frequency = ( uint32_t )payload[macIndex++];
 800fefe:	1cfb      	adds	r3, r7, #3
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	1cfa      	adds	r2, r7, #3
 800ff04:	1c59      	adds	r1, r3, #1
 800ff06:	7011      	strb	r1, [r2, #0]
 800ff08:	001a      	movs	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	189b      	adds	r3, r3, r2
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	183a      	adds	r2, r7, r0
 800ff12:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ff14:	1cfb      	adds	r3, r7, #3
 800ff16:	781b      	ldrb	r3, [r3, #0]
 800ff18:	1cfa      	adds	r2, r7, #3
 800ff1a:	1c59      	adds	r1, r3, #1
 800ff1c:	7011      	strb	r1, [r2, #0]
 800ff1e:	001a      	movs	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	189b      	adds	r3, r3, r2
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	021b      	lsls	r3, r3, #8
 800ff28:	183a      	adds	r2, r7, r0
 800ff2a:	6812      	ldr	r2, [r2, #0]
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	183a      	adds	r2, r7, r0
 800ff30:	6013      	str	r3, [r2, #0]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ff32:	1cfb      	adds	r3, r7, #3
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	1cfa      	adds	r2, r7, #3
 800ff38:	1c59      	adds	r1, r3, #1
 800ff3a:	7011      	strb	r1, [r2, #0]
 800ff3c:	001a      	movs	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	189b      	adds	r3, r3, r2
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	041b      	lsls	r3, r3, #16
 800ff46:	183a      	adds	r2, r7, r0
 800ff48:	6812      	ldr	r2, [r2, #0]
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	183a      	adds	r2, r7, r0
 800ff4e:	6013      	str	r3, [r2, #0]
                    frequency *= 100;
 800ff50:	183b      	adds	r3, r7, r0
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2264      	movs	r2, #100	; 0x64
 800ff56:	4353      	muls	r3, r2
 800ff58:	183a      	adds	r2, r7, r0
 800ff5a:	6013      	str	r3, [r2, #0]

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800ff5c:	183b      	adds	r3, r7, r0
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	0018      	movs	r0, r3
 800ff62:	f003 fa11 	bl	8013388 <LoRaMacClassBBeaconFreqReq>
 800ff66:	1e03      	subs	r3, r0, #0
 800ff68:	d004      	beq.n	800ff74 <ProcessMacCommands+0xb20>
                    {
                        macCmdPayload[0] = 1;
 800ff6a:	2368      	movs	r3, #104	; 0x68
 800ff6c:	18fb      	adds	r3, r7, r3
 800ff6e:	2201      	movs	r2, #1
 800ff70:	701a      	strb	r2, [r3, #0]
 800ff72:	e003      	b.n	800ff7c <ProcessMacCommands+0xb28>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800ff74:	2368      	movs	r3, #104	; 0x68
 800ff76:	18fb      	adds	r3, r7, r3
 800ff78:	2200      	movs	r2, #0
 800ff7a:	701a      	strb	r2, [r3, #0]
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800ff7c:	2368      	movs	r3, #104	; 0x68
 800ff7e:	18fb      	adds	r3, r7, r3
 800ff80:	2201      	movs	r2, #1
 800ff82:	0019      	movs	r1, r3
 800ff84:	2013      	movs	r0, #19
 800ff86:	f003 fb7f 	bl	8013688 <LoRaMacCommandsAddCmd>
 800ff8a:	2287      	movs	r2, #135	; 0x87
 800ff8c:	18bb      	adds	r3, r7, r2
 800ff8e:	18ba      	adds	r2, r7, r2
 800ff90:	7812      	ldrb	r2, [r2, #0]
 800ff92:	701a      	strb	r2, [r3, #0]
                }
                break;
 800ff94:	46c0      	nop			; (mov r8, r8)
    while( macIndex < commandsSize )
 800ff96:	1cfa      	adds	r2, r7, #3
 800ff98:	1cbb      	adds	r3, r7, #2
 800ff9a:	7812      	ldrb	r2, [r2, #0]
 800ff9c:	781b      	ldrb	r3, [r3, #0]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d201      	bcs.n	800ffa6 <ProcessMacCommands+0xb52>
 800ffa2:	f7ff fa78 	bl	800f496 <ProcessMacCommands+0x42>
 800ffa6:	e000      	b.n	800ffaa <ProcessMacCommands+0xb56>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800ffa8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	b023      	add	sp, #140	; 0x8c
 800ffae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffb0:	12d53d80 	.word	0x12d53d80
 800ffb4:	200008f0 	.word	0x200008f0
 800ffb8:	20001648 	.word	0x20001648

0800ffbc <Send>:

LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800ffbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffbe:	b08f      	sub	sp, #60	; 0x3c
 800ffc0:	af02      	add	r7, sp, #8
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	0008      	movs	r0, r1
 800ffc6:	607a      	str	r2, [r7, #4]
 800ffc8:	0019      	movs	r1, r3
 800ffca:	230b      	movs	r3, #11
 800ffcc:	18fb      	adds	r3, r7, r3
 800ffce:	1c02      	adds	r2, r0, #0
 800ffd0:	701a      	strb	r2, [r3, #0]
 800ffd2:	2308      	movs	r3, #8
 800ffd4:	18fb      	adds	r3, r7, r3
 800ffd6:	1c0a      	adds	r2, r1, #0
 800ffd8:	801a      	strh	r2, [r3, #0]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ffda:	232f      	movs	r3, #47	; 0x2f
 800ffdc:	18fb      	adds	r3, r7, r3
 800ffde:	2203      	movs	r2, #3
 800ffe0:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ffe2:	4b8f      	ldr	r3, [pc, #572]	; (8010220 <Send+0x264>)
 800ffe4:	4a8f      	ldr	r2, [pc, #572]	; (8010224 <Send+0x268>)
 800ffe6:	589a      	ldr	r2, [r3, r2]
 800ffe8:	232e      	movs	r3, #46	; 0x2e
 800ffea:	18fb      	adds	r3, r7, r3
 800ffec:	21f9      	movs	r1, #249	; 0xf9
 800ffee:	5c52      	ldrb	r2, [r2, r1]
 800fff0:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800fff2:	4b8b      	ldr	r3, [pc, #556]	; (8010220 <Send+0x264>)
 800fff4:	4a8b      	ldr	r2, [pc, #556]	; (8010224 <Send+0x268>)
 800fff6:	589a      	ldr	r2, [r3, r2]
 800fff8:	232d      	movs	r3, #45	; 0x2d
 800fffa:	18fb      	adds	r3, r7, r3
 800fffc:	21f8      	movs	r1, #248	; 0xf8
 800fffe:	5c52      	ldrb	r2, [r2, r1]
 8010000:	701a      	strb	r2, [r3, #0]
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8010002:	4b87      	ldr	r3, [pc, #540]	; (8010220 <Send+0x264>)
 8010004:	4a87      	ldr	r2, [pc, #540]	; (8010224 <Send+0x268>)
 8010006:	589b      	ldr	r3, [r3, r2]
 8010008:	22f4      	movs	r2, #244	; 0xf4
 801000a:	589b      	ldr	r3, [r3, r2]
 801000c:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 801000e:	4b84      	ldr	r3, [pc, #528]	; (8010220 <Send+0x264>)
 8010010:	4a84      	ldr	r2, [pc, #528]	; (8010224 <Send+0x268>)
 8010012:	589a      	ldr	r2, [r3, r2]
 8010014:	23ea      	movs	r3, #234	; 0xea
 8010016:	005b      	lsls	r3, r3, #1
 8010018:	5cd3      	ldrb	r3, [r2, r3]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d101      	bne.n	8010022 <Send+0x66>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 801001e:	2307      	movs	r3, #7
 8010020:	e0f9      	b.n	8010216 <Send+0x25a>
    }
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 8010022:	4b7f      	ldr	r3, [pc, #508]	; (8010220 <Send+0x264>)
 8010024:	4a7f      	ldr	r2, [pc, #508]	; (8010224 <Send+0x268>)
 8010026:	589a      	ldr	r2, [r3, r2]
 8010028:	239e      	movs	r3, #158	; 0x9e
 801002a:	005b      	lsls	r3, r3, #1
 801002c:	5cd3      	ldrb	r3, [r2, r3]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d106      	bne.n	8010040 <Send+0x84>
    {
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8010032:	4b7b      	ldr	r3, [pc, #492]	; (8010220 <Send+0x264>)
 8010034:	4a7b      	ldr	r2, [pc, #492]	; (8010224 <Send+0x268>)
 8010036:	589a      	ldr	r2, [r3, r2]
 8010038:	23e4      	movs	r3, #228	; 0xe4
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	2100      	movs	r1, #0
 801003e:	50d1      	str	r1, [r2, r3]
    }

    fCtrl.Value = 0;
 8010040:	202c      	movs	r0, #44	; 0x2c
 8010042:	183b      	adds	r3, r7, r0
 8010044:	2200      	movs	r2, #0
 8010046:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.FOptsLen      = 0;
 8010048:	183b      	adds	r3, r7, r0
 801004a:	781a      	ldrb	r2, [r3, #0]
 801004c:	210f      	movs	r1, #15
 801004e:	438a      	bics	r2, r1
 8010050:	701a      	strb	r2, [r3, #0]
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 8010052:	4b73      	ldr	r3, [pc, #460]	; (8010220 <Send+0x264>)
 8010054:	4a73      	ldr	r2, [pc, #460]	; (8010224 <Send+0x268>)
 8010056:	589b      	ldr	r3, [r3, r2]
 8010058:	22f2      	movs	r2, #242	; 0xf2
 801005a:	5c9a      	ldrb	r2, [r3, r2]
 801005c:	183b      	adds	r3, r7, r0
 801005e:	01d0      	lsls	r0, r2, #7
 8010060:	781a      	ldrb	r2, [r3, #0]
 8010062:	217f      	movs	r1, #127	; 0x7f
 8010064:	400a      	ands	r2, r1
 8010066:	1c11      	adds	r1, r2, #0
 8010068:	1c02      	adds	r2, r0, #0
 801006a:	430a      	orrs	r2, r1
 801006c:	701a      	strb	r2, [r3, #0]

    // Check class b
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 801006e:	4b6c      	ldr	r3, [pc, #432]	; (8010220 <Send+0x264>)
 8010070:	4a6c      	ldr	r2, [pc, #432]	; (8010224 <Send+0x268>)
 8010072:	589b      	ldr	r3, [r3, r2]
 8010074:	22f0      	movs	r2, #240	; 0xf0
 8010076:	5c9b      	ldrb	r3, [r3, r2]
 8010078:	2b01      	cmp	r3, #1
 801007a:	d106      	bne.n	801008a <Send+0xce>
    {
        fCtrl.Bits.FPending      = 1;
 801007c:	232c      	movs	r3, #44	; 0x2c
 801007e:	18fb      	adds	r3, r7, r3
 8010080:	781a      	ldrb	r2, [r3, #0]
 8010082:	2110      	movs	r1, #16
 8010084:	430a      	orrs	r2, r1
 8010086:	701a      	strb	r2, [r3, #0]
 8010088:	e005      	b.n	8010096 <Send+0xda>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 801008a:	232c      	movs	r3, #44	; 0x2c
 801008c:	18fb      	adds	r3, r7, r3
 801008e:	781a      	ldrb	r2, [r3, #0]
 8010090:	2110      	movs	r1, #16
 8010092:	438a      	bics	r2, r1
 8010094:	701a      	strb	r2, [r3, #0]
    }

    // Check server ack
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 8010096:	4b62      	ldr	r3, [pc, #392]	; (8010220 <Send+0x264>)
 8010098:	4a62      	ldr	r2, [pc, #392]	; (8010224 <Send+0x268>)
 801009a:	589a      	ldr	r2, [r3, r2]
 801009c:	23e0      	movs	r3, #224	; 0xe0
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	5cd3      	ldrb	r3, [r2, r3]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d005      	beq.n	80100b2 <Send+0xf6>
    {
        fCtrl.Bits.Ack = 1;
 80100a6:	232c      	movs	r3, #44	; 0x2c
 80100a8:	18fb      	adds	r3, r7, r3
 80100aa:	781a      	ldrb	r2, [r3, #0]
 80100ac:	2120      	movs	r1, #32
 80100ae:	430a      	orrs	r2, r1
 80100b0:	701a      	strb	r2, [r3, #0]
    }

    // ADR next request
    adrNext.Version = MacCtx.NvmCtx->Version;
 80100b2:	4b5b      	ldr	r3, [pc, #364]	; (8010220 <Send+0x264>)
 80100b4:	4a5b      	ldr	r2, [pc, #364]	; (8010224 <Send+0x268>)
 80100b6:	5899      	ldr	r1, [r3, r2]
 80100b8:	2014      	movs	r0, #20
 80100ba:	183b      	adds	r3, r7, r0
 80100bc:	22e8      	movs	r2, #232	; 0xe8
 80100be:	0052      	lsls	r2, r2, #1
 80100c0:	588a      	ldr	r2, [r1, r2]
 80100c2:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = true;
 80100c4:	0001      	movs	r1, r0
 80100c6:	187b      	adds	r3, r7, r1
 80100c8:	2201      	movs	r2, #1
 80100ca:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 80100cc:	242c      	movs	r4, #44	; 0x2c
 80100ce:	193b      	adds	r3, r7, r4
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	061b      	lsls	r3, r3, #24
 80100d4:	0fdb      	lsrs	r3, r3, #31
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	1e5a      	subs	r2, r3, #1
 80100da:	4193      	sbcs	r3, r2
 80100dc:	b2da      	uxtb	r2, r3
 80100de:	187b      	adds	r3, r7, r1
 80100e0:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 80100e2:	4b4f      	ldr	r3, [pc, #316]	; (8010220 <Send+0x264>)
 80100e4:	4a4f      	ldr	r2, [pc, #316]	; (8010224 <Send+0x268>)
 80100e6:	589b      	ldr	r3, [r3, r2]
 80100e8:	22f4      	movs	r2, #244	; 0xf4
 80100ea:	589a      	ldr	r2, [r3, r2]
 80100ec:	0008      	movs	r0, r1
 80100ee:	183b      	adds	r3, r7, r0
 80100f0:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80100f2:	4a4b      	ldr	r2, [pc, #300]	; (8010220 <Send+0x264>)
 80100f4:	23fd      	movs	r3, #253	; 0xfd
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	5ad2      	ldrh	r2, [r2, r3]
 80100fa:	183b      	adds	r3, r7, r0
 80100fc:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 80100fe:	4b48      	ldr	r3, [pc, #288]	; (8010220 <Send+0x264>)
 8010100:	4a49      	ldr	r2, [pc, #292]	; (8010228 <Send+0x26c>)
 8010102:	5a9a      	ldrh	r2, [r3, r2]
 8010104:	183b      	adds	r3, r7, r0
 8010106:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010108:	4b45      	ldr	r3, [pc, #276]	; (8010220 <Send+0x264>)
 801010a:	4a46      	ldr	r2, [pc, #280]	; (8010224 <Send+0x268>)
 801010c:	589b      	ldr	r3, [r3, r2]
 801010e:	22f9      	movs	r2, #249	; 0xf9
 8010110:	569a      	ldrsb	r2, [r3, r2]
 8010112:	183b      	adds	r3, r7, r0
 8010114:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010116:	4b42      	ldr	r3, [pc, #264]	; (8010220 <Send+0x264>)
 8010118:	4a42      	ldr	r2, [pc, #264]	; (8010224 <Send+0x268>)
 801011a:	589b      	ldr	r3, [r3, r2]
 801011c:	22f8      	movs	r2, #248	; 0xf8
 801011e:	569a      	ldrsb	r2, [r3, r2]
 8010120:	183b      	adds	r3, r7, r0
 8010122:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8010124:	4b3e      	ldr	r3, [pc, #248]	; (8010220 <Send+0x264>)
 8010126:	4a3f      	ldr	r2, [pc, #252]	; (8010224 <Send+0x268>)
 8010128:	589a      	ldr	r2, [r3, r2]
 801012a:	2396      	movs	r3, #150	; 0x96
 801012c:	005b      	lsls	r3, r3, #1
 801012e:	5cd2      	ldrb	r2, [r2, r3]
 8010130:	183b      	adds	r3, r7, r0
 8010132:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8010134:	4b3a      	ldr	r3, [pc, #232]	; (8010220 <Send+0x264>)
 8010136:	4a3b      	ldr	r2, [pc, #236]	; (8010224 <Send+0x268>)
 8010138:	589b      	ldr	r3, [r3, r2]
 801013a:	781a      	ldrb	r2, [r3, #0]
 801013c:	183b      	adds	r3, r7, r0
 801013e:	74da      	strb	r2, [r3, #19]

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010140:	4b37      	ldr	r3, [pc, #220]	; (8010220 <Send+0x264>)
 8010142:	4a38      	ldr	r2, [pc, #224]	; (8010224 <Send+0x268>)
 8010144:	589b      	ldr	r3, [r3, r2]
 8010146:	33f9      	adds	r3, #249	; 0xf9
 8010148:	0019      	movs	r1, r3
                                               &MacCtx.NvmCtx->MacParams.ChannelsTxPower, &adrAckCounter );
 801014a:	4b35      	ldr	r3, [pc, #212]	; (8010220 <Send+0x264>)
 801014c:	4a35      	ldr	r2, [pc, #212]	; (8010224 <Send+0x268>)
 801014e:	589b      	ldr	r3, [r3, r2]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 8010150:	33f8      	adds	r3, #248	; 0xf8
 8010152:	001a      	movs	r2, r3
 8010154:	2328      	movs	r3, #40	; 0x28
 8010156:	18fb      	adds	r3, r7, r3
 8010158:	1838      	adds	r0, r7, r0
 801015a:	f003 f829 	bl	80131b0 <LoRaMacAdrCalcNext>
 801015e:	0003      	movs	r3, r0
 8010160:	0019      	movs	r1, r3
 8010162:	0026      	movs	r6, r4
 8010164:	193b      	adds	r3, r7, r4
 8010166:	2201      	movs	r2, #1
 8010168:	400a      	ands	r2, r1
 801016a:	0190      	lsls	r0, r2, #6
 801016c:	781a      	ldrb	r2, [r3, #0]
 801016e:	2140      	movs	r1, #64	; 0x40
 8010170:	438a      	bics	r2, r1
 8010172:	1c11      	adds	r1, r2, #0
 8010174:	1c02      	adds	r2, r0, #0
 8010176:	430a      	orrs	r2, r1
 8010178:	701a      	strb	r2, [r3, #0]

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 801017a:	232f      	movs	r3, #47	; 0x2f
 801017c:	18fc      	adds	r4, r7, r3
 801017e:	687d      	ldr	r5, [r7, #4]
 8010180:	220b      	movs	r2, #11
 8010182:	18bb      	adds	r3, r7, r2
 8010184:	781a      	ldrb	r2, [r3, #0]
 8010186:	19b9      	adds	r1, r7, r6
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	2608      	movs	r6, #8
 801018c:	19bb      	adds	r3, r7, r6
 801018e:	881b      	ldrh	r3, [r3, #0]
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	002b      	movs	r3, r5
 8010194:	f000 fc86 	bl	8010aa4 <PrepareFrame>
 8010198:	0003      	movs	r3, r0
 801019a:	7023      	strb	r3, [r4, #0]

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 801019c:	232f      	movs	r3, #47	; 0x2f
 801019e:	18fb      	adds	r3, r7, r3
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d004      	beq.n	80101b0 <Send+0x1f4>
 80101a6:	232f      	movs	r3, #47	; 0x2f
 80101a8:	18fb      	adds	r3, r7, r3
 80101aa:	781b      	ldrb	r3, [r3, #0]
 80101ac:	2b0a      	cmp	r3, #10
 80101ae:	d106      	bne.n	80101be <Send+0x202>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( false );
 80101b0:	232f      	movs	r3, #47	; 0x2f
 80101b2:	18fc      	adds	r4, r7, r3
 80101b4:	2000      	movs	r0, #0
 80101b6:	f000 f89f 	bl	80102f8 <ScheduleTx>
 80101ba:	0003      	movs	r3, r0
 80101bc:	7023      	strb	r3, [r4, #0]
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 80101be:	232f      	movs	r3, #47	; 0x2f
 80101c0:	18fb      	adds	r3, r7, r3
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d010      	beq.n	80101ea <Send+0x22e>
    {
        // Bad case - restore
        // Store local variables
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 80101c8:	4b15      	ldr	r3, [pc, #84]	; (8010220 <Send+0x264>)
 80101ca:	4a16      	ldr	r2, [pc, #88]	; (8010224 <Send+0x268>)
 80101cc:	589b      	ldr	r3, [r3, r2]
 80101ce:	222e      	movs	r2, #46	; 0x2e
 80101d0:	18ba      	adds	r2, r7, r2
 80101d2:	21f9      	movs	r1, #249	; 0xf9
 80101d4:	7812      	ldrb	r2, [r2, #0]
 80101d6:	545a      	strb	r2, [r3, r1]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 80101d8:	4b11      	ldr	r3, [pc, #68]	; (8010220 <Send+0x264>)
 80101da:	4a12      	ldr	r2, [pc, #72]	; (8010224 <Send+0x268>)
 80101dc:	589b      	ldr	r3, [r3, r2]
 80101de:	222d      	movs	r2, #45	; 0x2d
 80101e0:	18ba      	adds	r2, r7, r2
 80101e2:	21f8      	movs	r1, #248	; 0xf8
 80101e4:	7812      	ldrb	r2, [r2, #0]
 80101e6:	545a      	strb	r2, [r3, r1]
 80101e8:	e012      	b.n	8010210 <Send+0x254>
    }
    else
    {
        // Good case
        MacCtx.NvmCtx->SrvAckRequested = false;
 80101ea:	4b0d      	ldr	r3, [pc, #52]	; (8010220 <Send+0x264>)
 80101ec:	4a0d      	ldr	r2, [pc, #52]	; (8010224 <Send+0x268>)
 80101ee:	589a      	ldr	r2, [r3, r2]
 80101f0:	23e0      	movs	r3, #224	; 0xe0
 80101f2:	005b      	lsls	r3, r3, #1
 80101f4:	2100      	movs	r1, #0
 80101f6:	54d1      	strb	r1, [r2, r3]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 80101f8:	4b09      	ldr	r3, [pc, #36]	; (8010220 <Send+0x264>)
 80101fa:	4a0a      	ldr	r2, [pc, #40]	; (8010224 <Send+0x268>)
 80101fc:	589b      	ldr	r3, [r3, r2]
 80101fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010200:	21f4      	movs	r1, #244	; 0xf4
 8010202:	505a      	str	r2, [r3, r1]
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8010204:	f003 faca 	bl	801379c <LoRaMacCommandsRemoveNoneStickyCmds>
 8010208:	1e03      	subs	r3, r0, #0
 801020a:	d001      	beq.n	8010210 <Send+0x254>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801020c:	2313      	movs	r3, #19
 801020e:	e002      	b.n	8010216 <Send+0x25a>
        }
    }
    return status;
 8010210:	232f      	movs	r3, #47	; 0x2f
 8010212:	18fb      	adds	r3, r7, r3
 8010214:	781b      	ldrb	r3, [r3, #0]
}
 8010216:	0018      	movs	r0, r3
 8010218:	46bd      	mov	sp, r7
 801021a:	b00d      	add	sp, #52	; 0x34
 801021c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801021e:	46c0      	nop			; (mov r8, r8)
 8010220:	200008f0 	.word	0x200008f0
 8010224:	00000484 	.word	0x00000484
 8010228:	000003f6 	.word	0x000003f6

0801022c <SendReJoinReq>:

LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 801022c:	b5b0      	push	{r4, r5, r7, lr}
 801022e:	b084      	sub	sp, #16
 8010230:	af00      	add	r7, sp, #0
 8010232:	0002      	movs	r2, r0
 8010234:	1dfb      	adds	r3, r7, #7
 8010236:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010238:	230e      	movs	r3, #14
 801023a:	18fb      	adds	r3, r7, r3
 801023c:	2200      	movs	r2, #0
 801023e:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8010240:	230c      	movs	r3, #12
 8010242:	18fb      	adds	r3, r7, r3
 8010244:	2200      	movs	r2, #0
 8010246:	701a      	strb	r2, [r3, #0]
    bool allowDelayedTx = true;
 8010248:	230f      	movs	r3, #15
 801024a:	18fb      	adds	r3, r7, r3
 801024c:	2201      	movs	r2, #1
 801024e:	701a      	strb	r2, [r3, #0]

    // Setup join/rejoin message
    switch( joinReqType )
 8010250:	1dfb      	adds	r3, r7, #7
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	2bff      	cmp	r3, #255	; 0xff
 8010256:	d132      	bne.n	80102be <SendReJoinReq+0x92>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8010258:	2000      	movs	r0, #0
 801025a:	f7fe ff27 	bl	800f0ac <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 801025e:	4a22      	ldr	r2, [pc, #136]	; (80102e8 <SendReJoinReq+0xbc>)
 8010260:	2382      	movs	r3, #130	; 0x82
 8010262:	005b      	lsls	r3, r3, #1
 8010264:	2100      	movs	r1, #0
 8010266:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8010268:	4a1f      	ldr	r2, [pc, #124]	; (80102e8 <SendReJoinReq+0xbc>)
 801026a:	2384      	movs	r3, #132	; 0x84
 801026c:	005b      	lsls	r3, r3, #1
 801026e:	491f      	ldr	r1, [pc, #124]	; (80102ec <SendReJoinReq+0xc0>)
 8010270:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010272:	4a1d      	ldr	r2, [pc, #116]	; (80102e8 <SendReJoinReq+0xbc>)
 8010274:	2386      	movs	r3, #134	; 0x86
 8010276:	005b      	lsls	r3, r3, #1
 8010278:	21ff      	movs	r1, #255	; 0xff
 801027a:	54d1      	strb	r1, [r2, r3]

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 801027c:	200c      	movs	r0, #12
 801027e:	183b      	adds	r3, r7, r0
 8010280:	781a      	ldrb	r2, [r3, #0]
 8010282:	211f      	movs	r1, #31
 8010284:	400a      	ands	r2, r1
 8010286:	701a      	strb	r2, [r3, #0]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8010288:	183b      	adds	r3, r7, r0
 801028a:	7819      	ldrb	r1, [r3, #0]
 801028c:	4a16      	ldr	r2, [pc, #88]	; (80102e8 <SendReJoinReq+0xbc>)
 801028e:	230e      	movs	r3, #14
 8010290:	33ff      	adds	r3, #255	; 0xff
 8010292:	54d1      	strb	r1, [r2, r3]

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8010294:	f7fd fa80 	bl	800d798 <SecureElementGetJoinEui>
 8010298:	0001      	movs	r1, r0
 801029a:	4b15      	ldr	r3, [pc, #84]	; (80102f0 <SendReJoinReq+0xc4>)
 801029c:	2208      	movs	r2, #8
 801029e:	0018      	movs	r0, r3
 80102a0:	f009 fad6 	bl	8019850 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 80102a4:	f7fd fa54 	bl	800d750 <SecureElementGetDevEui>
 80102a8:	0001      	movs	r1, r0
 80102aa:	4b12      	ldr	r3, [pc, #72]	; (80102f4 <SendReJoinReq+0xc8>)
 80102ac:	2208      	movs	r2, #8
 80102ae:	0018      	movs	r0, r3
 80102b0:	f009 face 	bl	8019850 <memcpy1>

            allowDelayedTx = false;
 80102b4:	230f      	movs	r3, #15
 80102b6:	18fb      	adds	r3, r7, r3
 80102b8:	2200      	movs	r2, #0
 80102ba:	701a      	strb	r2, [r3, #0]

            break;
 80102bc:	e004      	b.n	80102c8 <SendReJoinReq+0x9c>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80102be:	230e      	movs	r3, #14
 80102c0:	18fb      	adds	r3, r7, r3
 80102c2:	2202      	movs	r2, #2
 80102c4:	701a      	strb	r2, [r3, #0]
            break;
 80102c6:	46c0      	nop			; (mov r8, r8)
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 80102c8:	250e      	movs	r5, #14
 80102ca:	197c      	adds	r4, r7, r5
 80102cc:	230f      	movs	r3, #15
 80102ce:	18fb      	adds	r3, r7, r3
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	0018      	movs	r0, r3
 80102d4:	f000 f810 	bl	80102f8 <ScheduleTx>
 80102d8:	0003      	movs	r3, r0
 80102da:	7023      	strb	r3, [r4, #0]
    return status;
 80102dc:	197b      	adds	r3, r7, r5
 80102de:	781b      	ldrb	r3, [r3, #0]
}
 80102e0:	0018      	movs	r0, r3
 80102e2:	46bd      	mov	sp, r7
 80102e4:	b004      	add	sp, #16
 80102e6:	bdb0      	pop	{r4, r5, r7, pc}
 80102e8:	200008f0 	.word	0x200008f0
 80102ec:	200008f2 	.word	0x200008f2
 80102f0:	200009fe 	.word	0x200009fe
 80102f4:	20000a06 	.word	0x20000a06

080102f8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 80102f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102fa:	b08b      	sub	sp, #44	; 0x2c
 80102fc:	af02      	add	r7, sp, #8
 80102fe:	0002      	movs	r2, r0
 8010300:	1dfb      	adds	r3, r7, #7
 8010302:	701a      	strb	r2, [r3, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010304:	231f      	movs	r3, #31
 8010306:	18fb      	adds	r3, r7, r3
 8010308:	2203      	movs	r2, #3
 801030a:	701a      	strb	r2, [r3, #0]
    TimerTime_t dutyCycleTimeOff = 0;
 801030c:	2300      	movs	r3, #0
 801030e:	61bb      	str	r3, [r7, #24]
    NextChanParams_t nextChan;
    size_t macCmdsSize = 0;
 8010310:	2300      	movs	r3, #0
 8010312:	60bb      	str	r3, [r7, #8]

    // Update back-off
    CalculateBackOff( MacCtx.NvmCtx->LastTxChannel );
 8010314:	4ba7      	ldr	r3, [pc, #668]	; (80105b4 <ScheduleTx+0x2bc>)
 8010316:	4aa8      	ldr	r2, [pc, #672]	; (80105b8 <ScheduleTx+0x2c0>)
 8010318:	589a      	ldr	r2, [r3, r2]
 801031a:	239f      	movs	r3, #159	; 0x9f
 801031c:	005b      	lsls	r3, r3, #1
 801031e:	5cd3      	ldrb	r3, [r2, r3]
 8010320:	0018      	movs	r0, r3
 8010322:	f000 f9c5 	bl	80106b0 <CalculateBackOff>

    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8010326:	4ba3      	ldr	r3, [pc, #652]	; (80105b4 <ScheduleTx+0x2bc>)
 8010328:	4aa3      	ldr	r2, [pc, #652]	; (80105b8 <ScheduleTx+0x2c0>)
 801032a:	589a      	ldr	r2, [r3, r2]
 801032c:	23e4      	movs	r3, #228	; 0xe4
 801032e:	005b      	lsls	r3, r3, #1
 8010330:	58d2      	ldr	r2, [r2, r3]
 8010332:	210c      	movs	r1, #12
 8010334:	187b      	adds	r3, r7, r1
 8010336:	601a      	str	r2, [r3, #0]
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010338:	4b9e      	ldr	r3, [pc, #632]	; (80105b4 <ScheduleTx+0x2bc>)
 801033a:	4a9f      	ldr	r2, [pc, #636]	; (80105b8 <ScheduleTx+0x2c0>)
 801033c:	589b      	ldr	r3, [r3, r2]
 801033e:	22f9      	movs	r2, #249	; 0xf9
 8010340:	569a      	ldrsb	r2, [r3, r2]
 8010342:	187b      	adds	r3, r7, r1
 8010344:	721a      	strb	r2, [r3, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8010346:	4b9b      	ldr	r3, [pc, #620]	; (80105b4 <ScheduleTx+0x2bc>)
 8010348:	4a9b      	ldr	r2, [pc, #620]	; (80105b8 <ScheduleTx+0x2c0>)
 801034a:	589a      	ldr	r2, [r3, r2]
 801034c:	233e      	movs	r3, #62	; 0x3e
 801034e:	33ff      	adds	r3, #255	; 0xff
 8010350:	5cd2      	ldrb	r2, [r2, r3]
 8010352:	187b      	adds	r3, r7, r1
 8010354:	729a      	strb	r2, [r3, #10]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8010356:	4b97      	ldr	r3, [pc, #604]	; (80105b4 <ScheduleTx+0x2bc>)
 8010358:	4a97      	ldr	r2, [pc, #604]	; (80105b8 <ScheduleTx+0x2c0>)
 801035a:	589a      	ldr	r2, [r3, r2]
 801035c:	23ea      	movs	r3, #234	; 0xea
 801035e:	005b      	lsls	r3, r3, #1
 8010360:	5cd3      	ldrb	r3, [r2, r3]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d104      	bne.n	8010370 <ScheduleTx+0x78>
    {
        nextChan.Joined = false;
 8010366:	230c      	movs	r3, #12
 8010368:	18fb      	adds	r3, r7, r3
 801036a:	2200      	movs	r2, #0
 801036c:	725a      	strb	r2, [r3, #9]
 801036e:	e003      	b.n	8010378 <ScheduleTx+0x80>
    }
    else
    {
        nextChan.Joined = true;
 8010370:	230c      	movs	r3, #12
 8010372:	18fb      	adds	r3, r7, r3
 8010374:	2201      	movs	r2, #1
 8010376:	725a      	strb	r2, [r3, #9]
    }
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 8010378:	4b8e      	ldr	r3, [pc, #568]	; (80105b4 <ScheduleTx+0x2bc>)
 801037a:	4a8f      	ldr	r2, [pc, #572]	; (80105b8 <ScheduleTx+0x2c0>)
 801037c:	589a      	ldr	r2, [r3, r2]
 801037e:	23e2      	movs	r3, #226	; 0xe2
 8010380:	005b      	lsls	r3, r3, #1
 8010382:	58d2      	ldr	r2, [r2, r3]
 8010384:	210c      	movs	r1, #12
 8010386:	187b      	adds	r3, r7, r1
 8010388:	605a      	str	r2, [r3, #4]

    // Select channel
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &dutyCycleTimeOff, &MacCtx.NvmCtx->AggregatedTimeOff );
 801038a:	4b8a      	ldr	r3, [pc, #552]	; (80105b4 <ScheduleTx+0x2bc>)
 801038c:	4a8a      	ldr	r2, [pc, #552]	; (80105b8 <ScheduleTx+0x2c0>)
 801038e:	589b      	ldr	r3, [r3, r2]
 8010390:	7818      	ldrb	r0, [r3, #0]
 8010392:	4b88      	ldr	r3, [pc, #544]	; (80105b4 <ScheduleTx+0x2bc>)
 8010394:	4a88      	ldr	r2, [pc, #544]	; (80105b8 <ScheduleTx+0x2c0>)
 8010396:	589b      	ldr	r3, [r3, r2]
 8010398:	33c9      	adds	r3, #201	; 0xc9
 801039a:	33ff      	adds	r3, #255	; 0xff
 801039c:	261f      	movs	r6, #31
 801039e:	19bc      	adds	r4, r7, r6
 80103a0:	2218      	movs	r2, #24
 80103a2:	18bd      	adds	r5, r7, r2
 80103a4:	4a85      	ldr	r2, [pc, #532]	; (80105bc <ScheduleTx+0x2c4>)
 80103a6:	1879      	adds	r1, r7, r1
 80103a8:	9300      	str	r3, [sp, #0]
 80103aa:	002b      	movs	r3, r5
 80103ac:	f005 fbb6 	bl	8015b1c <RegionNextChannel>
 80103b0:	0003      	movs	r3, r0
 80103b2:	7023      	strb	r3, [r4, #0]

    if( status != LORAMAC_STATUS_OK )
 80103b4:	19bb      	adds	r3, r7, r6
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d026      	beq.n	801040a <ScheduleTx+0x112>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80103bc:	231f      	movs	r3, #31
 80103be:	18fb      	adds	r3, r7, r3
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2b0b      	cmp	r3, #11
 80103c4:	d11d      	bne.n	8010402 <ScheduleTx+0x10a>
 80103c6:	1dfb      	adds	r3, r7, #7
 80103c8:	781b      	ldrb	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d019      	beq.n	8010402 <ScheduleTx+0x10a>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( dutyCycleTimeOff != 0 )
 80103ce:	69bb      	ldr	r3, [r7, #24]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d014      	beq.n	80103fe <ScheduleTx+0x106>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80103d4:	4a77      	ldr	r2, [pc, #476]	; (80105b4 <ScheduleTx+0x2bc>)
 80103d6:	23d0      	movs	r3, #208	; 0xd0
 80103d8:	009b      	lsls	r3, r3, #2
 80103da:	58d3      	ldr	r3, [r2, r3]
 80103dc:	2220      	movs	r2, #32
 80103de:	431a      	orrs	r2, r3
 80103e0:	0011      	movs	r1, r2
 80103e2:	4a74      	ldr	r2, [pc, #464]	; (80105b4 <ScheduleTx+0x2bc>)
 80103e4:	23d0      	movs	r3, #208	; 0xd0
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	50d1      	str	r1, [r2, r3]
                TimerSetValue( &MacCtx.TxDelayedTimer, dutyCycleTimeOff );
 80103ea:	69ba      	ldr	r2, [r7, #24]
 80103ec:	4b74      	ldr	r3, [pc, #464]	; (80105c0 <ScheduleTx+0x2c8>)
 80103ee:	0011      	movs	r1, r2
 80103f0:	0018      	movs	r0, r3
 80103f2:	f009 f82f 	bl	8019454 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 80103f6:	4b72      	ldr	r3, [pc, #456]	; (80105c0 <ScheduleTx+0x2c8>)
 80103f8:	0018      	movs	r0, r3
 80103fa:	f008 fed9 	bl	80191b0 <TimerStart>
            }
            return LORAMAC_STATUS_OK;
 80103fe:	2300      	movs	r3, #0
 8010400:	e0d3      	b.n	80105aa <ScheduleTx+0x2b2>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010402:	231f      	movs	r3, #31
 8010404:	18fb      	adds	r3, r7, r3
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	e0cf      	b.n	80105aa <ScheduleTx+0x2b2>
        }
    }

    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801040a:	4b6a      	ldr	r3, [pc, #424]	; (80105b4 <ScheduleTx+0x2bc>)
 801040c:	4a6a      	ldr	r2, [pc, #424]	; (80105b8 <ScheduleTx+0x2c0>)
 801040e:	589b      	ldr	r3, [r3, r2]
 8010410:	781c      	ldrb	r4, [r3, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region, MacCtx.NvmCtx->MacParams.DownlinkDwellTime, MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8010412:	4b68      	ldr	r3, [pc, #416]	; (80105b4 <ScheduleTx+0x2bc>)
 8010414:	4a68      	ldr	r2, [pc, #416]	; (80105b8 <ScheduleTx+0x2c0>)
 8010416:	589b      	ldr	r3, [r3, r2]
 8010418:	7818      	ldrb	r0, [r3, #0]
 801041a:	4b66      	ldr	r3, [pc, #408]	; (80105b4 <ScheduleTx+0x2bc>)
 801041c:	4a66      	ldr	r2, [pc, #408]	; (80105b8 <ScheduleTx+0x2c0>)
 801041e:	589a      	ldr	r2, [r3, r2]
 8010420:	232e      	movs	r3, #46	; 0x2e
 8010422:	33ff      	adds	r3, #255	; 0xff
 8010424:	5cd1      	ldrb	r1, [r2, r3]
 8010426:	4b63      	ldr	r3, [pc, #396]	; (80105b4 <ScheduleTx+0x2bc>)
 8010428:	4a63      	ldr	r2, [pc, #396]	; (80105b8 <ScheduleTx+0x2c0>)
 801042a:	589b      	ldr	r3, [r3, r2]
 801042c:	22f9      	movs	r2, #249	; 0xf9
 801042e:	569d      	ldrsb	r5, [r3, r2]
 8010430:	4b60      	ldr	r3, [pc, #384]	; (80105b4 <ScheduleTx+0x2bc>)
 8010432:	4a61      	ldr	r2, [pc, #388]	; (80105b8 <ScheduleTx+0x2c0>)
 8010434:	589a      	ldr	r2, [r3, r2]
 8010436:	231a      	movs	r3, #26
 8010438:	33ff      	adds	r3, #255	; 0xff
 801043a:	5cd3      	ldrb	r3, [r2, r3]
 801043c:	b25b      	sxtb	r3, r3
 801043e:	002a      	movs	r2, r5
 8010440:	f005 fb9c 	bl	8015b7c <RegionApplyDrOffset>
 8010444:	0003      	movs	r3, r0
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010446:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010448:	4b5a      	ldr	r3, [pc, #360]	; (80105b4 <ScheduleTx+0x2bc>)
 801044a:	4a5b      	ldr	r2, [pc, #364]	; (80105b8 <ScheduleTx+0x2c0>)
 801044c:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801044e:	2380      	movs	r3, #128	; 0x80
 8010450:	005b      	lsls	r3, r3, #1
 8010452:	5cd0      	ldrb	r0, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 8010454:	4b57      	ldr	r3, [pc, #348]	; (80105b4 <ScheduleTx+0x2bc>)
 8010456:	4a58      	ldr	r2, [pc, #352]	; (80105b8 <ScheduleTx+0x2c0>)
 8010458:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801045a:	22fc      	movs	r2, #252	; 0xfc
 801045c:	589a      	ldr	r2, [r3, r2]
 801045e:	4b59      	ldr	r3, [pc, #356]	; (80105c4 <ScheduleTx+0x2cc>)
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	0013      	movs	r3, r2
 8010464:	0002      	movs	r2, r0
 8010466:	0020      	movs	r0, r4
 8010468:	f005 fa51 	bl	801590e <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 801046c:	4b51      	ldr	r3, [pc, #324]	; (80105b4 <ScheduleTx+0x2bc>)
 801046e:	4a52      	ldr	r2, [pc, #328]	; (80105b8 <ScheduleTx+0x2c0>)
 8010470:	589b      	ldr	r3, [r3, r2]
 8010472:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8010474:	4b4f      	ldr	r3, [pc, #316]	; (80105b4 <ScheduleTx+0x2bc>)
 8010476:	4a50      	ldr	r2, [pc, #320]	; (80105b8 <ScheduleTx+0x2c0>)
 8010478:	589a      	ldr	r2, [r3, r2]
 801047a:	2390      	movs	r3, #144	; 0x90
 801047c:	005b      	lsls	r3, r3, #1
 801047e:	5cd3      	ldrb	r3, [r2, r3]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010480:	b259      	sxtb	r1, r3
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8010482:	4b4c      	ldr	r3, [pc, #304]	; (80105b4 <ScheduleTx+0x2bc>)
 8010484:	4a4c      	ldr	r2, [pc, #304]	; (80105b8 <ScheduleTx+0x2c0>)
 8010486:	589a      	ldr	r2, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010488:	2380      	movs	r3, #128	; 0x80
 801048a:	005b      	lsls	r3, r3, #1
 801048c:	5cd4      	ldrb	r4, [r2, r3]
                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 801048e:	4b49      	ldr	r3, [pc, #292]	; (80105b4 <ScheduleTx+0x2bc>)
 8010490:	4a49      	ldr	r2, [pc, #292]	; (80105b8 <ScheduleTx+0x2c0>)
 8010492:	589b      	ldr	r3, [r3, r2]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8010494:	22fc      	movs	r2, #252	; 0xfc
 8010496:	589a      	ldr	r2, [r3, r2]
 8010498:	4b4b      	ldr	r3, [pc, #300]	; (80105c8 <ScheduleTx+0x2d0>)
 801049a:	9300      	str	r3, [sp, #0]
 801049c:	0013      	movs	r3, r2
 801049e:	0022      	movs	r2, r4
 80104a0:	f005 fa35 	bl	801590e <RegionComputeRxWindowParameters>
                                     &MacCtx.RxWindow2Config );

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80104a4:	4b43      	ldr	r3, [pc, #268]	; (80105b4 <ScheduleTx+0x2bc>)
 80104a6:	4a44      	ldr	r2, [pc, #272]	; (80105b8 <ScheduleTx+0x2c0>)
 80104a8:	589a      	ldr	r2, [r3, r2]
 80104aa:	23ea      	movs	r3, #234	; 0xea
 80104ac:	005b      	lsls	r3, r3, #1
 80104ae:	5cd3      	ldrb	r3, [r2, r3]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d11e      	bne.n	80104f2 <ScheduleTx+0x1fa>
    {
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80104b4:	4b3f      	ldr	r3, [pc, #252]	; (80105b4 <ScheduleTx+0x2bc>)
 80104b6:	4a40      	ldr	r2, [pc, #256]	; (80105b8 <ScheduleTx+0x2c0>)
 80104b8:	589a      	ldr	r2, [r3, r2]
 80104ba:	2388      	movs	r3, #136	; 0x88
 80104bc:	005b      	lsls	r3, r3, #1
 80104be:	58d3      	ldr	r3, [r2, r3]
 80104c0:	493c      	ldr	r1, [pc, #240]	; (80105b4 <ScheduleTx+0x2bc>)
 80104c2:	22f1      	movs	r2, #241	; 0xf1
 80104c4:	0092      	lsls	r2, r2, #2
 80104c6:	588a      	ldr	r2, [r1, r2]
 80104c8:	1899      	adds	r1, r3, r2
 80104ca:	4a3a      	ldr	r2, [pc, #232]	; (80105b4 <ScheduleTx+0x2bc>)
 80104cc:	23ec      	movs	r3, #236	; 0xec
 80104ce:	009b      	lsls	r3, r3, #2
 80104d0:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80104d2:	4b38      	ldr	r3, [pc, #224]	; (80105b4 <ScheduleTx+0x2bc>)
 80104d4:	4a38      	ldr	r2, [pc, #224]	; (80105b8 <ScheduleTx+0x2c0>)
 80104d6:	589a      	ldr	r2, [r3, r2]
 80104d8:	238a      	movs	r3, #138	; 0x8a
 80104da:	005b      	lsls	r3, r3, #1
 80104dc:	58d3      	ldr	r3, [r2, r3]
 80104de:	4935      	ldr	r1, [pc, #212]	; (80105b4 <ScheduleTx+0x2bc>)
 80104e0:	22f6      	movs	r2, #246	; 0xf6
 80104e2:	0092      	lsls	r2, r2, #2
 80104e4:	588a      	ldr	r2, [r1, r2]
 80104e6:	1899      	adds	r1, r3, r2
 80104e8:	4a32      	ldr	r2, [pc, #200]	; (80105b4 <ScheduleTx+0x2bc>)
 80104ea:	23ed      	movs	r3, #237	; 0xed
 80104ec:	009b      	lsls	r3, r3, #2
 80104ee:	50d1      	str	r1, [r2, r3]
 80104f0:	e03c      	b.n	801056c <ScheduleTx+0x274>
    }
    else
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80104f2:	2308      	movs	r3, #8
 80104f4:	18fb      	adds	r3, r7, r3
 80104f6:	0018      	movs	r0, r3
 80104f8:	f003 f99c 	bl	8013834 <LoRaMacCommandsGetSizeSerializedCmds>
 80104fc:	1e03      	subs	r3, r0, #0
 80104fe:	d001      	beq.n	8010504 <ScheduleTx+0x20c>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010500:	2313      	movs	r3, #19
 8010502:	e052      	b.n	80105aa <ScheduleTx+0x2b2>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8010504:	4b2b      	ldr	r3, [pc, #172]	; (80105b4 <ScheduleTx+0x2bc>)
 8010506:	4a31      	ldr	r2, [pc, #196]	; (80105cc <ScheduleTx+0x2d4>)
 8010508:	5c98      	ldrb	r0, [r3, r2]
 801050a:	4b2a      	ldr	r3, [pc, #168]	; (80105b4 <ScheduleTx+0x2bc>)
 801050c:	4a2a      	ldr	r2, [pc, #168]	; (80105b8 <ScheduleTx+0x2c0>)
 801050e:	589b      	ldr	r3, [r3, r2]
 8010510:	22f9      	movs	r2, #249	; 0xf9
 8010512:	569b      	ldrsb	r3, [r3, r2]
 8010514:	68ba      	ldr	r2, [r7, #8]
 8010516:	b2d2      	uxtb	r2, r2
 8010518:	0019      	movs	r1, r3
 801051a:	f7fe ff4d 	bl	800f3b8 <ValidatePayloadLength>
 801051e:	0003      	movs	r3, r0
 8010520:	001a      	movs	r2, r3
 8010522:	2301      	movs	r3, #1
 8010524:	4053      	eors	r3, r2
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <ScheduleTx+0x238>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 801052c:	2308      	movs	r3, #8
 801052e:	e03c      	b.n	80105aa <ScheduleTx+0x2b2>
        }
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8010530:	4b20      	ldr	r3, [pc, #128]	; (80105b4 <ScheduleTx+0x2bc>)
 8010532:	4a21      	ldr	r2, [pc, #132]	; (80105b8 <ScheduleTx+0x2c0>)
 8010534:	589a      	ldr	r2, [r3, r2]
 8010536:	2384      	movs	r3, #132	; 0x84
 8010538:	005b      	lsls	r3, r3, #1
 801053a:	58d3      	ldr	r3, [r2, r3]
 801053c:	491d      	ldr	r1, [pc, #116]	; (80105b4 <ScheduleTx+0x2bc>)
 801053e:	22f1      	movs	r2, #241	; 0xf1
 8010540:	0092      	lsls	r2, r2, #2
 8010542:	588a      	ldr	r2, [r1, r2]
 8010544:	1899      	adds	r1, r3, r2
 8010546:	4a1b      	ldr	r2, [pc, #108]	; (80105b4 <ScheduleTx+0x2bc>)
 8010548:	23ec      	movs	r3, #236	; 0xec
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	50d1      	str	r1, [r2, r3]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801054e:	4b19      	ldr	r3, [pc, #100]	; (80105b4 <ScheduleTx+0x2bc>)
 8010550:	4a19      	ldr	r2, [pc, #100]	; (80105b8 <ScheduleTx+0x2c0>)
 8010552:	589a      	ldr	r2, [r3, r2]
 8010554:	2386      	movs	r3, #134	; 0x86
 8010556:	005b      	lsls	r3, r3, #1
 8010558:	58d3      	ldr	r3, [r2, r3]
 801055a:	4916      	ldr	r1, [pc, #88]	; (80105b4 <ScheduleTx+0x2bc>)
 801055c:	22f6      	movs	r2, #246	; 0xf6
 801055e:	0092      	lsls	r2, r2, #2
 8010560:	588a      	ldr	r2, [r1, r2]
 8010562:	1899      	adds	r1, r3, r2
 8010564:	4a13      	ldr	r2, [pc, #76]	; (80105b4 <ScheduleTx+0x2bc>)
 8010566:	23ed      	movs	r3, #237	; 0xed
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	50d1      	str	r1, [r2, r3]
    }

    // Secure frame
    LoRaMacStatus_t retval = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 801056c:	4b11      	ldr	r3, [pc, #68]	; (80105b4 <ScheduleTx+0x2bc>)
 801056e:	4a12      	ldr	r2, [pc, #72]	; (80105b8 <ScheduleTx+0x2c0>)
 8010570:	589b      	ldr	r3, [r3, r2]
 8010572:	22f9      	movs	r2, #249	; 0xf9
 8010574:	569b      	ldrsb	r3, [r3, r2]
 8010576:	b2d8      	uxtb	r0, r3
 8010578:	4b0e      	ldr	r3, [pc, #56]	; (80105b4 <ScheduleTx+0x2bc>)
 801057a:	4a15      	ldr	r2, [pc, #84]	; (80105d0 <ScheduleTx+0x2d8>)
 801057c:	5c9b      	ldrb	r3, [r3, r2]
 801057e:	251e      	movs	r5, #30
 8010580:	197c      	adds	r4, r7, r5
 8010582:	0019      	movs	r1, r3
 8010584:	f000 f826 	bl	80105d4 <SecureFrame>
 8010588:	0003      	movs	r3, r0
 801058a:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_STATUS_OK )
 801058c:	197b      	adds	r3, r7, r5
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d003      	beq.n	801059c <ScheduleTx+0x2a4>
    {
        return retval;
 8010594:	231e      	movs	r3, #30
 8010596:	18fb      	adds	r3, r7, r3
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	e006      	b.n	80105aa <ScheduleTx+0x2b2>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 801059c:	4b05      	ldr	r3, [pc, #20]	; (80105b4 <ScheduleTx+0x2bc>)
 801059e:	4a0c      	ldr	r2, [pc, #48]	; (80105d0 <ScheduleTx+0x2d8>)
 80105a0:	5c9b      	ldrb	r3, [r3, r2]
 80105a2:	0018      	movs	r0, r3
 80105a4:	f000 fbce 	bl	8010d44 <SendFrameOnChannel>
 80105a8:	0003      	movs	r3, r0
}
 80105aa:	0018      	movs	r0, r3
 80105ac:	46bd      	mov	sp, r7
 80105ae:	b009      	add	sp, #36	; 0x24
 80105b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105b2:	46c0      	nop			; (mov r8, r8)
 80105b4:	200008f0 	.word	0x200008f0
 80105b8:	00000484 	.word	0x00000484
 80105bc:	20000d05 	.word	0x20000d05
 80105c0:	20000c58 	.word	0x20000c58
 80105c4:	20000ca8 	.word	0x20000ca8
 80105c8:	20000cbc 	.word	0x20000cbc
 80105cc:	00000237 	.word	0x00000237
 80105d0:	00000415 	.word	0x00000415

080105d4 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80105d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	0002      	movs	r2, r0
 80105dc:	1dfb      	adds	r3, r7, #7
 80105de:	701a      	strb	r2, [r3, #0]
 80105e0:	1dbb      	adds	r3, r7, #6
 80105e2:	1c0a      	adds	r2, r1, #0
 80105e4:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80105e6:	230f      	movs	r3, #15
 80105e8:	18fb      	adds	r3, r7, r3
 80105ea:	2213      	movs	r2, #19
 80105ec:	701a      	strb	r2, [r3, #0]
    uint32_t fCntUp = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80105f2:	4a2c      	ldr	r2, [pc, #176]	; (80106a4 <SecureFrame+0xd0>)
 80105f4:	2382      	movs	r3, #130	; 0x82
 80105f6:	005b      	lsls	r3, r3, #1
 80105f8:	5cd3      	ldrb	r3, [r2, r3]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d002      	beq.n	8010604 <SecureFrame+0x30>
 80105fe:	2b04      	cmp	r3, #4
 8010600:	d016      	beq.n	8010630 <SecureFrame+0x5c>
 8010602:	e047      	b.n	8010694 <SecureFrame+0xc0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010604:	250f      	movs	r5, #15
 8010606:	197c      	adds	r4, r7, r5
 8010608:	4b27      	ldr	r3, [pc, #156]	; (80106a8 <SecureFrame+0xd4>)
 801060a:	0018      	movs	r0, r3
 801060c:	f004 f8ea 	bl	80147e4 <LoRaMacCryptoPrepareJoinRequest>
 8010610:	0003      	movs	r3, r0
 8010612:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010614:	197b      	adds	r3, r7, r5
 8010616:	781b      	ldrb	r3, [r3, #0]
 8010618:	2b00      	cmp	r3, #0
 801061a:	d001      	beq.n	8010620 <SecureFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801061c:	2311      	movs	r3, #17
 801061e:	e03c      	b.n	801069a <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8010620:	4a20      	ldr	r2, [pc, #128]	; (80106a4 <SecureFrame+0xd0>)
 8010622:	2386      	movs	r3, #134	; 0x86
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	5cd3      	ldrb	r3, [r2, r3]
 8010628:	b29a      	uxth	r2, r3
 801062a:	4b1e      	ldr	r3, [pc, #120]	; (80106a4 <SecureFrame+0xd0>)
 801062c:	801a      	strh	r2, [r3, #0]
            break;
 801062e:	e033      	b.n	8010698 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010630:	2308      	movs	r3, #8
 8010632:	18fb      	adds	r3, r7, r3
 8010634:	0018      	movs	r0, r3
 8010636:	f003 ffcd 	bl	80145d4 <LoRaMacCryptoGetFCntUp>
 801063a:	1e03      	subs	r3, r0, #0
 801063c:	d001      	beq.n	8010642 <SecureFrame+0x6e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801063e:	2312      	movs	r3, #18
 8010640:	e02b      	b.n	801069a <SecureFrame+0xc6>
            }

            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8010642:	4a18      	ldr	r2, [pc, #96]	; (80106a4 <SecureFrame+0xd0>)
 8010644:	2382      	movs	r3, #130	; 0x82
 8010646:	00db      	lsls	r3, r3, #3
 8010648:	5cd3      	ldrb	r3, [r2, r3]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d104      	bne.n	8010658 <SecureFrame+0x84>
 801064e:	4b15      	ldr	r3, [pc, #84]	; (80106a4 <SecureFrame+0xd0>)
 8010650:	4a16      	ldr	r2, [pc, #88]	; (80106ac <SecureFrame+0xd8>)
 8010652:	5c9b      	ldrb	r3, [r3, r2]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d902      	bls.n	801065e <SecureFrame+0x8a>
            {
                fCntUp -= 1;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	3b01      	subs	r3, #1
 801065c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 801065e:	68b8      	ldr	r0, [r7, #8]
 8010660:	260f      	movs	r6, #15
 8010662:	19bc      	adds	r4, r7, r6
 8010664:	4d10      	ldr	r5, [pc, #64]	; (80106a8 <SecureFrame+0xd4>)
 8010666:	1dbb      	adds	r3, r7, #6
 8010668:	781a      	ldrb	r2, [r3, #0]
 801066a:	1dfb      	adds	r3, r7, #7
 801066c:	7819      	ldrb	r1, [r3, #0]
 801066e:	002b      	movs	r3, r5
 8010670:	f004 fafe 	bl	8014c70 <LoRaMacCryptoSecureMessage>
 8010674:	0003      	movs	r3, r0
 8010676:	7023      	strb	r3, [r4, #0]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010678:	19bb      	adds	r3, r7, r6
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d001      	beq.n	8010684 <SecureFrame+0xb0>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010680:	2311      	movs	r3, #17
 8010682:	e00a      	b.n	801069a <SecureFrame+0xc6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8010684:	4a07      	ldr	r2, [pc, #28]	; (80106a4 <SecureFrame+0xd0>)
 8010686:	2386      	movs	r3, #134	; 0x86
 8010688:	005b      	lsls	r3, r3, #1
 801068a:	5cd3      	ldrb	r3, [r2, r3]
 801068c:	b29a      	uxth	r2, r3
 801068e:	4b05      	ldr	r3, [pc, #20]	; (80106a4 <SecureFrame+0xd0>)
 8010690:	801a      	strh	r2, [r3, #0]
            break;
 8010692:	e001      	b.n	8010698 <SecureFrame+0xc4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8010694:	2303      	movs	r3, #3
 8010696:	e000      	b.n	801069a <SecureFrame+0xc6>
    }
    return LORAMAC_STATUS_OK;
 8010698:	2300      	movs	r3, #0
}
 801069a:	0018      	movs	r0, r3
 801069c:	46bd      	mov	sp, r7
 801069e:	b005      	add	sp, #20
 80106a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106a2:	46c0      	nop			; (mov r8, r8)
 80106a4:	200008f0 	.word	0x200008f0
 80106a8:	200009f8 	.word	0x200009f8
 80106ac:	00000412 	.word	0x00000412

080106b0 <CalculateBackOff>:

static void CalculateBackOff( uint8_t channel )
{
 80106b0:	b590      	push	{r4, r7, lr}
 80106b2:	b087      	sub	sp, #28
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	0002      	movs	r2, r0
 80106b8:	1dfb      	adds	r3, r7, #7
 80106ba:	701a      	strb	r2, [r3, #0]
    CalcBackOffParams_t calcBackOff;

    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80106bc:	4b31      	ldr	r3, [pc, #196]	; (8010784 <CalculateBackOff+0xd4>)
 80106be:	4a32      	ldr	r2, [pc, #200]	; (8010788 <CalculateBackOff+0xd8>)
 80106c0:	589a      	ldr	r2, [r3, r2]
 80106c2:	23ea      	movs	r3, #234	; 0xea
 80106c4:	005b      	lsls	r3, r3, #1
 80106c6:	5cd3      	ldrb	r3, [r2, r3]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d104      	bne.n	80106d6 <CalculateBackOff+0x26>
    {
        calcBackOff.Joined = false;
 80106cc:	230c      	movs	r3, #12
 80106ce:	18fb      	adds	r3, r7, r3
 80106d0:	2200      	movs	r2, #0
 80106d2:	701a      	strb	r2, [r3, #0]
 80106d4:	e003      	b.n	80106de <CalculateBackOff+0x2e>
    }
    else
    {
        calcBackOff.Joined = true;
 80106d6:	230c      	movs	r3, #12
 80106d8:	18fb      	adds	r3, r7, r3
 80106da:	2201      	movs	r2, #1
 80106dc:	701a      	strb	r2, [r3, #0]
    }
    calcBackOff.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 80106de:	4b29      	ldr	r3, [pc, #164]	; (8010784 <CalculateBackOff+0xd4>)
 80106e0:	4a29      	ldr	r2, [pc, #164]	; (8010788 <CalculateBackOff+0xd8>)
 80106e2:	589a      	ldr	r2, [r3, r2]
 80106e4:	233e      	movs	r3, #62	; 0x3e
 80106e6:	33ff      	adds	r3, #255	; 0xff
 80106e8:	5cd2      	ldrb	r2, [r2, r3]
 80106ea:	240c      	movs	r4, #12
 80106ec:	193b      	adds	r3, r7, r4
 80106ee:	709a      	strb	r2, [r3, #2]
    calcBackOff.Channel = channel;
 80106f0:	193b      	adds	r3, r7, r4
 80106f2:	1dfa      	adds	r2, r7, #7
 80106f4:	7812      	ldrb	r2, [r2, #0]
 80106f6:	70da      	strb	r2, [r3, #3]
    calcBackOff.ElapsedTime = TimerGetElapsedTime( MacCtx.NvmCtx->InitializationTime );
 80106f8:	4b22      	ldr	r3, [pc, #136]	; (8010784 <CalculateBackOff+0xd4>)
 80106fa:	4a23      	ldr	r2, [pc, #140]	; (8010788 <CalculateBackOff+0xd8>)
 80106fc:	589a      	ldr	r2, [r3, r2]
 80106fe:	23e6      	movs	r3, #230	; 0xe6
 8010700:	005b      	lsls	r3, r3, #1
 8010702:	58d3      	ldr	r3, [r2, r3]
 8010704:	0018      	movs	r0, r3
 8010706:	f008 feda 	bl	80194be <TimerGetElapsedTime>
 801070a:	0002      	movs	r2, r0
 801070c:	193b      	adds	r3, r7, r4
 801070e:	605a      	str	r2, [r3, #4]
    calcBackOff.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010710:	4a1c      	ldr	r2, [pc, #112]	; (8010784 <CalculateBackOff+0xd4>)
 8010712:	2383      	movs	r3, #131	; 0x83
 8010714:	00db      	lsls	r3, r3, #3
 8010716:	58d2      	ldr	r2, [r2, r3]
 8010718:	193b      	adds	r3, r7, r4
 801071a:	609a      	str	r2, [r3, #8]
    calcBackOff.LastTxIsJoinRequest = false;
 801071c:	193b      	adds	r3, r7, r4
 801071e:	2200      	movs	r2, #0
 8010720:	705a      	strb	r2, [r3, #1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) && ( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true ) )
 8010722:	4b18      	ldr	r3, [pc, #96]	; (8010784 <CalculateBackOff+0xd4>)
 8010724:	4a19      	ldr	r2, [pc, #100]	; (801078c <CalculateBackOff+0xdc>)
 8010726:	5c9b      	ldrb	r3, [r3, r2]
 8010728:	2204      	movs	r2, #4
 801072a:	4013      	ands	r3, r2
 801072c:	b2db      	uxtb	r3, r3
 801072e:	2b00      	cmp	r3, #0
 8010730:	d008      	beq.n	8010744 <CalculateBackOff+0x94>
 8010732:	2000      	movs	r0, #0
 8010734:	f003 fa70 	bl	8013c18 <LoRaMacConfirmQueueIsCmdActive>
 8010738:	1e03      	subs	r3, r0, #0
 801073a:	d003      	beq.n	8010744 <CalculateBackOff+0x94>
    {
        calcBackOff.LastTxIsJoinRequest = true;
 801073c:	230c      	movs	r3, #12
 801073e:	18fb      	adds	r3, r7, r3
 8010740:	2201      	movs	r2, #1
 8010742:	705a      	strb	r2, [r3, #1]
    }

    // Update regional back-off
    RegionCalcBackOff( MacCtx.NvmCtx->Region, &calcBackOff );
 8010744:	4b0f      	ldr	r3, [pc, #60]	; (8010784 <CalculateBackOff+0xd4>)
 8010746:	4a10      	ldr	r2, [pc, #64]	; (8010788 <CalculateBackOff+0xd8>)
 8010748:	589b      	ldr	r3, [r3, r2]
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	220c      	movs	r2, #12
 801074e:	18ba      	adds	r2, r7, r2
 8010750:	0011      	movs	r1, r2
 8010752:	0018      	movs	r0, r3
 8010754:	f005 f9cd 	bl	8015af2 <RegionCalcBackOff>

    // Update aggregated time-off. This must be an assignment and no incremental
    // update as we do only calculate the time-off based on the last transmission
    MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010758:	4b0a      	ldr	r3, [pc, #40]	; (8010784 <CalculateBackOff+0xd4>)
 801075a:	4a0b      	ldr	r2, [pc, #44]	; (8010788 <CalculateBackOff+0xd8>)
 801075c:	589a      	ldr	r2, [r3, r2]
 801075e:	23e1      	movs	r3, #225	; 0xe1
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	5ad3      	ldrh	r3, [r2, r3]
 8010764:	3b01      	subs	r3, #1
 8010766:	4907      	ldr	r1, [pc, #28]	; (8010784 <CalculateBackOff+0xd4>)
 8010768:	2283      	movs	r2, #131	; 0x83
 801076a:	00d2      	lsls	r2, r2, #3
 801076c:	5889      	ldr	r1, [r1, r2]
 801076e:	4a05      	ldr	r2, [pc, #20]	; (8010784 <CalculateBackOff+0xd4>)
 8010770:	4805      	ldr	r0, [pc, #20]	; (8010788 <CalculateBackOff+0xd8>)
 8010772:	5812      	ldr	r2, [r2, r0]
 8010774:	4359      	muls	r1, r3
 8010776:	23e4      	movs	r3, #228	; 0xe4
 8010778:	005b      	lsls	r3, r3, #1
 801077a:	50d1      	str	r1, [r2, r3]
}
 801077c:	46c0      	nop			; (mov r8, r8)
 801077e:	46bd      	mov	sp, r7
 8010780:	b007      	add	sp, #28
 8010782:	bd90      	pop	{r4, r7, pc}
 8010784:	200008f0 	.word	0x200008f0
 8010788:	00000484 	.word	0x00000484
 801078c:	00000481 	.word	0x00000481

08010790 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
 8010796:	1d3b      	adds	r3, r7, #4
 8010798:	7019      	strb	r1, [r3, #0]
 801079a:	0011      	movs	r1, r2
 801079c:	1dfb      	adds	r3, r7, #7
 801079e:	1c02      	adds	r2, r0, #0
 80107a0:	701a      	strb	r2, [r3, #0]
 80107a2:	1dbb      	adds	r3, r7, #6
 80107a4:	1c0a      	adds	r2, r1, #0
 80107a6:	701a      	strb	r2, [r3, #0]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 80107a8:	1dfb      	adds	r3, r7, #7
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d003      	beq.n	80107b8 <RemoveMacCommands+0x28>
 80107b0:	1dfb      	adds	r3, r7, #7
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d10f      	bne.n	80107d8 <RemoveMacCommands+0x48>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80107b8:	1dbb      	adds	r3, r7, #6
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d109      	bne.n	80107d4 <RemoveMacCommands+0x44>
        {
            if( fCtrl.Bits.Ack == 1 )
 80107c0:	1d3b      	adds	r3, r7, #4
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	2220      	movs	r2, #32
 80107c6:	4013      	ands	r3, r2
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d004      	beq.n	80107d8 <RemoveMacCommands+0x48>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80107ce:	f003 f80d 	bl	80137ec <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80107d2:	e001      	b.n	80107d8 <RemoveMacCommands+0x48>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80107d4:	f003 f80a 	bl	80137ec <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80107d8:	46c0      	nop			; (mov r8, r8)
 80107da:	46bd      	mov	sp, r7
 80107dc:	b002      	add	sp, #8
 80107de:	bd80      	pop	{r7, pc}

080107e0 <ResetMacParameters>:


static void ResetMacParameters( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80107e6:	4b72      	ldr	r3, [pc, #456]	; (80109b0 <ResetMacParameters+0x1d0>)
 80107e8:	4a72      	ldr	r2, [pc, #456]	; (80109b4 <ResetMacParameters+0x1d4>)
 80107ea:	589a      	ldr	r2, [r3, r2]
 80107ec:	23ea      	movs	r3, #234	; 0xea
 80107ee:	005b      	lsls	r3, r3, #1
 80107f0:	2100      	movs	r1, #0
 80107f2:	54d1      	strb	r1, [r2, r3]

    // ADR counter
    MacCtx.NvmCtx->AdrAckCounter = 0;
 80107f4:	4b6e      	ldr	r3, [pc, #440]	; (80109b0 <ResetMacParameters+0x1d0>)
 80107f6:	4a6f      	ldr	r2, [pc, #444]	; (80109b4 <ResetMacParameters+0x1d4>)
 80107f8:	589b      	ldr	r3, [r3, r2]
 80107fa:	22f4      	movs	r2, #244	; 0xf4
 80107fc:	2100      	movs	r1, #0
 80107fe:	5099      	str	r1, [r3, r2]

    MacCtx.ChannelsNbTransCounter = 0;
 8010800:	4a6b      	ldr	r2, [pc, #428]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010802:	2382      	movs	r3, #130	; 0x82
 8010804:	00db      	lsls	r3, r3, #3
 8010806:	2100      	movs	r1, #0
 8010808:	54d1      	strb	r1, [r2, r3]
    MacCtx.AckTimeoutRetries = 1;
 801080a:	4b69      	ldr	r3, [pc, #420]	; (80109b0 <ResetMacParameters+0x1d0>)
 801080c:	4a6a      	ldr	r2, [pc, #424]	; (80109b8 <ResetMacParameters+0x1d8>)
 801080e:	2101      	movs	r1, #1
 8010810:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8010812:	4b67      	ldr	r3, [pc, #412]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010814:	4a69      	ldr	r2, [pc, #420]	; (80109bc <ResetMacParameters+0x1dc>)
 8010816:	2101      	movs	r1, #1
 8010818:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 801081a:	4b65      	ldr	r3, [pc, #404]	; (80109b0 <ResetMacParameters+0x1d0>)
 801081c:	4a68      	ldr	r2, [pc, #416]	; (80109c0 <ResetMacParameters+0x1e0>)
 801081e:	2100      	movs	r1, #0
 8010820:	5499      	strb	r1, [r3, r2]

    MacCtx.NvmCtx->MaxDCycle = 0;
 8010822:	4b63      	ldr	r3, [pc, #396]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010824:	4a63      	ldr	r2, [pc, #396]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010826:	589a      	ldr	r2, [r3, r2]
 8010828:	239e      	movs	r3, #158	; 0x9e
 801082a:	005b      	lsls	r3, r3, #1
 801082c:	2100      	movs	r1, #0
 801082e:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 8010830:	4b5f      	ldr	r3, [pc, #380]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010832:	4a60      	ldr	r2, [pc, #384]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010834:	589a      	ldr	r2, [r3, r2]
 8010836:	23e1      	movs	r3, #225	; 0xe1
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	2101      	movs	r1, #1
 801083c:	52d1      	strh	r1, [r2, r3]

    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 801083e:	4b5c      	ldr	r3, [pc, #368]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010840:	4a5c      	ldr	r2, [pc, #368]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010842:	589a      	ldr	r2, [r3, r2]
 8010844:	4b5a      	ldr	r3, [pc, #360]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010846:	495b      	ldr	r1, [pc, #364]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010848:	585b      	ldr	r3, [r3, r1]
 801084a:	2104      	movs	r1, #4
 801084c:	5651      	ldrsb	r1, [r2, r1]
 801084e:	22f8      	movs	r2, #248	; 0xf8
 8010850:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8010852:	4b57      	ldr	r3, [pc, #348]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010854:	4a57      	ldr	r2, [pc, #348]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010856:	589a      	ldr	r2, [r3, r2]
 8010858:	4b55      	ldr	r3, [pc, #340]	; (80109b0 <ResetMacParameters+0x1d0>)
 801085a:	4956      	ldr	r1, [pc, #344]	; (80109b4 <ResetMacParameters+0x1d4>)
 801085c:	585b      	ldr	r3, [r3, r1]
 801085e:	2105      	movs	r1, #5
 8010860:	5651      	ldrsb	r1, [r2, r1]
 8010862:	22f9      	movs	r2, #249	; 0xf9
 8010864:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 8010866:	4b52      	ldr	r3, [pc, #328]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010868:	4a52      	ldr	r2, [pc, #328]	; (80109b4 <ResetMacParameters+0x1d4>)
 801086a:	589b      	ldr	r3, [r3, r2]
 801086c:	4a50      	ldr	r2, [pc, #320]	; (80109b0 <ResetMacParameters+0x1d0>)
 801086e:	4951      	ldr	r1, [pc, #324]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010870:	5852      	ldr	r2, [r2, r1]
 8010872:	2125      	movs	r1, #37	; 0x25
 8010874:	5c59      	ldrb	r1, [r3, r1]
 8010876:	231a      	movs	r3, #26
 8010878:	33ff      	adds	r3, #255	; 0xff
 801087a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 801087c:	4b4c      	ldr	r3, [pc, #304]	; (80109b0 <ResetMacParameters+0x1d0>)
 801087e:	4a4d      	ldr	r2, [pc, #308]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010880:	589a      	ldr	r2, [r3, r2]
 8010882:	4b4b      	ldr	r3, [pc, #300]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010884:	494b      	ldr	r1, [pc, #300]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010886:	5859      	ldr	r1, [r3, r1]
 8010888:	238e      	movs	r3, #142	; 0x8e
 801088a:	005b      	lsls	r3, r3, #1
 801088c:	18cb      	adds	r3, r1, r3
 801088e:	3228      	adds	r2, #40	; 0x28
 8010890:	ca03      	ldmia	r2!, {r0, r1}
 8010892:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8010894:	4b46      	ldr	r3, [pc, #280]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010896:	4a47      	ldr	r2, [pc, #284]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010898:	589a      	ldr	r2, [r3, r2]
 801089a:	4b45      	ldr	r3, [pc, #276]	; (80109b0 <ResetMacParameters+0x1d0>)
 801089c:	4945      	ldr	r1, [pc, #276]	; (80109b4 <ResetMacParameters+0x1d4>)
 801089e:	5859      	ldr	r1, [r3, r1]
 80108a0:	2392      	movs	r3, #146	; 0x92
 80108a2:	005b      	lsls	r3, r3, #1
 80108a4:	18cb      	adds	r3, r1, r3
 80108a6:	3230      	adds	r2, #48	; 0x30
 80108a8:	ca03      	ldmia	r2!, {r0, r1}
 80108aa:	c303      	stmia	r3!, {r0, r1}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80108ac:	4b40      	ldr	r3, [pc, #256]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108ae:	4a41      	ldr	r2, [pc, #260]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108b0:	589b      	ldr	r3, [r3, r2]
 80108b2:	4a3f      	ldr	r2, [pc, #252]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108b4:	493f      	ldr	r1, [pc, #252]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108b6:	5852      	ldr	r2, [r2, r1]
 80108b8:	2138      	movs	r1, #56	; 0x38
 80108ba:	5c59      	ldrb	r1, [r3, r1]
 80108bc:	2396      	movs	r3, #150	; 0x96
 80108be:	005b      	lsls	r3, r3, #1
 80108c0:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime;
 80108c2:	4b3b      	ldr	r3, [pc, #236]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108c4:	4a3b      	ldr	r2, [pc, #236]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108c6:	589b      	ldr	r3, [r3, r2]
 80108c8:	4a39      	ldr	r2, [pc, #228]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108ca:	493a      	ldr	r1, [pc, #232]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108cc:	5852      	ldr	r2, [r2, r1]
 80108ce:	2139      	movs	r1, #57	; 0x39
 80108d0:	5c59      	ldrb	r1, [r3, r1]
 80108d2:	232e      	movs	r3, #46	; 0x2e
 80108d4:	33ff      	adds	r3, #255	; 0xff
 80108d6:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80108d8:	4b35      	ldr	r3, [pc, #212]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108da:	4a36      	ldr	r2, [pc, #216]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108dc:	589b      	ldr	r3, [r3, r2]
 80108de:	4a34      	ldr	r2, [pc, #208]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108e0:	4934      	ldr	r1, [pc, #208]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108e2:	5852      	ldr	r2, [r2, r1]
 80108e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80108e6:	2398      	movs	r3, #152	; 0x98
 80108e8:	005b      	lsls	r3, r3, #1
 80108ea:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80108ec:	4b30      	ldr	r3, [pc, #192]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108ee:	4a31      	ldr	r2, [pc, #196]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108f0:	589b      	ldr	r3, [r3, r2]
 80108f2:	4a2f      	ldr	r2, [pc, #188]	; (80109b0 <ResetMacParameters+0x1d0>)
 80108f4:	492f      	ldr	r1, [pc, #188]	; (80109b4 <ResetMacParameters+0x1d4>)
 80108f6:	5852      	ldr	r2, [r2, r1]
 80108f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80108fa:	239a      	movs	r3, #154	; 0x9a
 80108fc:	005b      	lsls	r3, r3, #1
 80108fe:	50d1      	str	r1, [r2, r3]

    MacCtx.NodeAckRequested = false;
 8010900:	4b2b      	ldr	r3, [pc, #172]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010902:	4a30      	ldr	r2, [pc, #192]	; (80109c4 <ResetMacParameters+0x1e4>)
 8010904:	2100      	movs	r1, #0
 8010906:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 8010908:	4b29      	ldr	r3, [pc, #164]	; (80109b0 <ResetMacParameters+0x1d0>)
 801090a:	4a2a      	ldr	r2, [pc, #168]	; (80109b4 <ResetMacParameters+0x1d4>)
 801090c:	589a      	ldr	r2, [r3, r2]
 801090e:	23e0      	movs	r3, #224	; 0xe0
 8010910:	005b      	lsls	r3, r3, #1
 8010912:	2100      	movs	r1, #0
 8010914:	54d1      	strb	r1, [r2, r3]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8010916:	003b      	movs	r3, r7
 8010918:	2201      	movs	r2, #1
 801091a:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 801091c:	003b      	movs	r3, r7
 801091e:	2200      	movs	r2, #0
 8010920:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8010922:	4b23      	ldr	r3, [pc, #140]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010924:	4a23      	ldr	r2, [pc, #140]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010926:	589b      	ldr	r3, [r3, r2]
 8010928:	781b      	ldrb	r3, [r3, #0]
 801092a:	003a      	movs	r2, r7
 801092c:	0011      	movs	r1, r2
 801092e:	0018      	movs	r0, r3
 8010930:	f004 ff7a 	bl	8015828 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8010934:	4b1e      	ldr	r3, [pc, #120]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010936:	4a24      	ldr	r2, [pc, #144]	; (80109c8 <ResetMacParameters+0x1e8>)
 8010938:	2100      	movs	r1, #0
 801093a:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->LastTxChannel = MacCtx.Channel;
 801093c:	4b1c      	ldr	r3, [pc, #112]	; (80109b0 <ResetMacParameters+0x1d0>)
 801093e:	4a1d      	ldr	r2, [pc, #116]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010940:	589a      	ldr	r2, [r3, r2]
 8010942:	4b1b      	ldr	r3, [pc, #108]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010944:	4920      	ldr	r1, [pc, #128]	; (80109c8 <ResetMacParameters+0x1e8>)
 8010946:	5c59      	ldrb	r1, [r3, r1]
 8010948:	239f      	movs	r3, #159	; 0x9f
 801094a:	005b      	lsls	r3, r3, #1
 801094c:	54d1      	strb	r1, [r2, r3]

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801094e:	4b18      	ldr	r3, [pc, #96]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010950:	4a1d      	ldr	r2, [pc, #116]	; (80109c8 <ResetMacParameters+0x1e8>)
 8010952:	5c99      	ldrb	r1, [r3, r2]
 8010954:	4a16      	ldr	r2, [pc, #88]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010956:	23f3      	movs	r3, #243	; 0xf3
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 801095c:	4b14      	ldr	r3, [pc, #80]	; (80109b0 <ResetMacParameters+0x1d0>)
 801095e:	4a15      	ldr	r2, [pc, #84]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010960:	589a      	ldr	r2, [r3, r2]
 8010962:	238e      	movs	r3, #142	; 0x8e
 8010964:	005b      	lsls	r3, r3, #1
 8010966:	58d1      	ldr	r1, [r2, r3]
 8010968:	4a11      	ldr	r2, [pc, #68]	; (80109b0 <ResetMacParameters+0x1d0>)
 801096a:	23f4      	movs	r3, #244	; 0xf4
 801096c:	009b      	lsls	r3, r3, #2
 801096e:	50d1      	str	r1, [r2, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8010970:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010972:	4a10      	ldr	r2, [pc, #64]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010974:	589a      	ldr	r2, [r3, r2]
 8010976:	232e      	movs	r3, #46	; 0x2e
 8010978:	33ff      	adds	r3, #255	; 0xff
 801097a:	5cd1      	ldrb	r1, [r2, r3]
 801097c:	4a0c      	ldr	r2, [pc, #48]	; (80109b0 <ResetMacParameters+0x1d0>)
 801097e:	23f7      	movs	r3, #247	; 0xf7
 8010980:	009b      	lsls	r3, r3, #2
 8010982:	54d1      	strb	r1, [r2, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8010984:	4b0a      	ldr	r3, [pc, #40]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010986:	4a0b      	ldr	r2, [pc, #44]	; (80109b4 <ResetMacParameters+0x1d4>)
 8010988:	589a      	ldr	r2, [r3, r2]
 801098a:	2340      	movs	r3, #64	; 0x40
 801098c:	33ff      	adds	r3, #255	; 0xff
 801098e:	5cd1      	ldrb	r1, [r2, r3]
 8010990:	4b07      	ldr	r3, [pc, #28]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010992:	4a0e      	ldr	r2, [pc, #56]	; (80109cc <ResetMacParameters+0x1ec>)
 8010994:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8010996:	4b06      	ldr	r3, [pc, #24]	; (80109b0 <ResetMacParameters+0x1d0>)
 8010998:	4a0d      	ldr	r2, [pc, #52]	; (80109d0 <ResetMacParameters+0x1f0>)
 801099a:	2100      	movs	r1, #0
 801099c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801099e:	4b04      	ldr	r3, [pc, #16]	; (80109b0 <ResetMacParameters+0x1d0>)
 80109a0:	4a0c      	ldr	r2, [pc, #48]	; (80109d4 <ResetMacParameters+0x1f4>)
 80109a2:	2101      	movs	r1, #1
 80109a4:	5499      	strb	r1, [r3, r2]
}
 80109a6:	46c0      	nop			; (mov r8, r8)
 80109a8:	46bd      	mov	sp, r7
 80109aa:	b002      	add	sp, #8
 80109ac:	bd80      	pop	{r7, pc}
 80109ae:	46c0      	nop			; (mov r8, r8)
 80109b0:	200008f0 	.word	0x200008f0
 80109b4:	00000484 	.word	0x00000484
 80109b8:	00000411 	.word	0x00000411
 80109bc:	00000412 	.word	0x00000412
 80109c0:	00000413 	.word	0x00000413
 80109c4:	00000414 	.word	0x00000414
 80109c8:	00000415 	.word	0x00000415
 80109cc:	000003dd 	.word	0x000003dd
 80109d0:	000003de 	.word	0x000003de
 80109d4:	000003df 	.word	0x000003df

080109d8 <RxWindowSetup>:
 *
 * \param [IN] rxTimer  Window timer to be topped.
 * \param [IN] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b082      	sub	sp, #8
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	0018      	movs	r0, r3
 80109e6:	f008 fcbb 	bl	8019360 <TimerStop>

    // Ensure the radio is Idle
    Radio.Standby( );
 80109ea:	4b11      	ldr	r3, [pc, #68]	; (8010a30 <RxWindowSetup+0x58>)
 80109ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ee:	4798      	blx	r3

    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80109f0:	4b10      	ldr	r3, [pc, #64]	; (8010a34 <RxWindowSetup+0x5c>)
 80109f2:	4a11      	ldr	r2, [pc, #68]	; (8010a38 <RxWindowSetup+0x60>)
 80109f4:	589b      	ldr	r3, [r3, r2]
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	4a10      	ldr	r2, [pc, #64]	; (8010a3c <RxWindowSetup+0x64>)
 80109fa:	6839      	ldr	r1, [r7, #0]
 80109fc:	0018      	movs	r0, r3
 80109fe:	f004 ffaa 	bl	8015956 <RegionRxConfig>
 8010a02:	1e03      	subs	r3, r0, #0
 8010a04:	d00f      	beq.n	8010a26 <RxWindowSetup+0x4e>
    {
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8010a06:	4b0a      	ldr	r3, [pc, #40]	; (8010a30 <RxWindowSetup+0x58>)
 8010a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a0a:	4a0a      	ldr	r2, [pc, #40]	; (8010a34 <RxWindowSetup+0x5c>)
 8010a0c:	490a      	ldr	r1, [pc, #40]	; (8010a38 <RxWindowSetup+0x60>)
 8010a0e:	5851      	ldr	r1, [r2, r1]
 8010a10:	2282      	movs	r2, #130	; 0x82
 8010a12:	0052      	lsls	r2, r2, #1
 8010a14:	588a      	ldr	r2, [r1, r2]
 8010a16:	0010      	movs	r0, r2
 8010a18:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	7cd9      	ldrb	r1, [r3, #19]
 8010a1e:	4a05      	ldr	r2, [pc, #20]	; (8010a34 <RxWindowSetup+0x5c>)
 8010a20:	2390      	movs	r3, #144	; 0x90
 8010a22:	00db      	lsls	r3, r3, #3
 8010a24:	54d1      	strb	r1, [r2, r3]
    }
}
 8010a26:	46c0      	nop			; (mov r8, r8)
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	b002      	add	sp, #8
 8010a2c:	bd80      	pop	{r7, pc}
 8010a2e:	46c0      	nop			; (mov r8, r8)
 8010a30:	0801acec 	.word	0x0801acec
 8010a34:	200008f0 	.word	0x200008f0
 8010a38:	00000484 	.word	0x00000484
 8010a3c:	20000d10 	.word	0x20000d10

08010a40 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	af00      	add	r7, sp, #0
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a44:	4b10      	ldr	r3, [pc, #64]	; (8010a88 <OpenContinuousRxCWindow+0x48>)
 8010a46:	4a11      	ldr	r2, [pc, #68]	; (8010a8c <OpenContinuousRxCWindow+0x4c>)
 8010a48:	2102      	movs	r1, #2
 8010a4a:	5499      	strb	r1, [r3, r2]
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a4c:	4b0e      	ldr	r3, [pc, #56]	; (8010a88 <OpenContinuousRxCWindow+0x48>)
 8010a4e:	4a10      	ldr	r2, [pc, #64]	; (8010a90 <OpenContinuousRxCWindow+0x50>)
 8010a50:	2101      	movs	r1, #1
 8010a52:	5499      	strb	r1, [r3, r2]

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8010a54:	4b0c      	ldr	r3, [pc, #48]	; (8010a88 <OpenContinuousRxCWindow+0x48>)
 8010a56:	4a0f      	ldr	r2, [pc, #60]	; (8010a94 <OpenContinuousRxCWindow+0x54>)
 8010a58:	589b      	ldr	r3, [r3, r2]
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	4a0e      	ldr	r2, [pc, #56]	; (8010a98 <OpenContinuousRxCWindow+0x58>)
 8010a5e:	490f      	ldr	r1, [pc, #60]	; (8010a9c <OpenContinuousRxCWindow+0x5c>)
 8010a60:	0018      	movs	r0, r3
 8010a62:	f004 ff78 	bl	8015956 <RegionRxConfig>
 8010a66:	1e03      	subs	r3, r0, #0
 8010a68:	d00a      	beq.n	8010a80 <OpenContinuousRxCWindow+0x40>
    {
        Radio.Rx( 0 ); // Continuous mode
 8010a6a:	4b0d      	ldr	r3, [pc, #52]	; (8010aa0 <OpenContinuousRxCWindow+0x60>)
 8010a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a6e:	2000      	movs	r0, #0
 8010a70:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010a72:	4b05      	ldr	r3, [pc, #20]	; (8010a88 <OpenContinuousRxCWindow+0x48>)
 8010a74:	4a05      	ldr	r2, [pc, #20]	; (8010a8c <OpenContinuousRxCWindow+0x4c>)
 8010a76:	5c99      	ldrb	r1, [r3, r2]
 8010a78:	4a03      	ldr	r2, [pc, #12]	; (8010a88 <OpenContinuousRxCWindow+0x48>)
 8010a7a:	2390      	movs	r3, #144	; 0x90
 8010a7c:	00db      	lsls	r3, r3, #3
 8010a7e:	54d1      	strb	r1, [r2, r3]
    }
}
 8010a80:	46c0      	nop			; (mov r8, r8)
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	46c0      	nop			; (mov r8, r8)
 8010a88:	200008f0 	.word	0x200008f0
 8010a8c:	000003f3 	.word	0x000003f3
 8010a90:	000003f2 	.word	0x000003f2
 8010a94:	00000484 	.word	0x00000484
 8010a98:	20000d10 	.word	0x20000d10
 8010a9c:	20000cd0 	.word	0x20000cd0
 8010aa0:	0801acec 	.word	0x0801acec

08010aa4 <PrepareFrame>:

LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010aa4:	b590      	push	{r4, r7, lr}
 8010aa6:	b089      	sub	sp, #36	; 0x24
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	603b      	str	r3, [r7, #0]
 8010ab0:	1dfb      	adds	r3, r7, #7
 8010ab2:	701a      	strb	r2, [r3, #0]
    MacCtx.PktBufferLen = 0;
 8010ab4:	4b9a      	ldr	r3, [pc, #616]	; (8010d20 <PrepareFrame+0x27c>)
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010aba:	4b99      	ldr	r3, [pc, #612]	; (8010d20 <PrepareFrame+0x27c>)
 8010abc:	4a99      	ldr	r2, [pc, #612]	; (8010d24 <PrepareFrame+0x280>)
 8010abe:	2100      	movs	r1, #0
 8010ac0:	5499      	strb	r1, [r3, r2]
    uint32_t fCntUp = 0;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8010aca:	231f      	movs	r3, #31
 8010acc:	18fb      	adds	r3, r7, r3
 8010ace:	2200      	movs	r2, #0
 8010ad0:	701a      	strb	r2, [r3, #0]

    if( fBuffer == NULL )
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d103      	bne.n	8010ae0 <PrepareFrame+0x3c>
    {
        fBufferSize = 0;
 8010ad8:	2330      	movs	r3, #48	; 0x30
 8010ada:	18fb      	adds	r3, r7, r3
 8010adc:	2200      	movs	r2, #0
 8010ade:	801a      	strh	r2, [r3, #0]
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8010ae0:	2430      	movs	r4, #48	; 0x30
 8010ae2:	193b      	adds	r3, r7, r4
 8010ae4:	881a      	ldrh	r2, [r3, #0]
 8010ae6:	6839      	ldr	r1, [r7, #0]
 8010ae8:	4b8f      	ldr	r3, [pc, #572]	; (8010d28 <PrepareFrame+0x284>)
 8010aea:	0018      	movs	r0, r3
 8010aec:	f008 feb0 	bl	8019850 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8010af0:	193b      	adds	r3, r7, r4
 8010af2:	881b      	ldrh	r3, [r3, #0]
 8010af4:	b2d9      	uxtb	r1, r3
 8010af6:	4b8a      	ldr	r3, [pc, #552]	; (8010d20 <PrepareFrame+0x27c>)
 8010af8:	4a8c      	ldr	r2, [pc, #560]	; (8010d2c <PrepareFrame+0x288>)
 8010afa:	5499      	strb	r1, [r3, r2]
    MacCtx.PktBuffer[0] = macHdr->Value;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	781a      	ldrb	r2, [r3, #0]
 8010b00:	4b87      	ldr	r3, [pc, #540]	; (8010d20 <PrepareFrame+0x27c>)
 8010b02:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	061b      	lsls	r3, r3, #24
 8010b0a:	0f5b      	lsrs	r3, r3, #29
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	2b04      	cmp	r3, #4
 8010b10:	d005      	beq.n	8010b1e <PrepareFrame+0x7a>
 8010b12:	2b07      	cmp	r3, #7
 8010b14:	d100      	bne.n	8010b18 <PrepareFrame+0x74>
 8010b16:	e0df      	b.n	8010cd8 <PrepareFrame+0x234>
 8010b18:	2b02      	cmp	r3, #2
 8010b1a:	d004      	beq.n	8010b26 <PrepareFrame+0x82>
 8010b1c:	e0f6      	b.n	8010d0c <PrepareFrame+0x268>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8010b1e:	4b80      	ldr	r3, [pc, #512]	; (8010d20 <PrepareFrame+0x27c>)
 8010b20:	4a80      	ldr	r2, [pc, #512]	; (8010d24 <PrepareFrame+0x280>)
 8010b22:	2101      	movs	r1, #1
 8010b24:	5499      	strb	r1, [r3, r2]
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8010b26:	4a7e      	ldr	r2, [pc, #504]	; (8010d20 <PrepareFrame+0x27c>)
 8010b28:	2382      	movs	r3, #130	; 0x82
 8010b2a:	005b      	lsls	r3, r3, #1
 8010b2c:	2104      	movs	r1, #4
 8010b2e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010b30:	4a7b      	ldr	r2, [pc, #492]	; (8010d20 <PrepareFrame+0x27c>)
 8010b32:	2384      	movs	r3, #132	; 0x84
 8010b34:	005b      	lsls	r3, r3, #1
 8010b36:	497e      	ldr	r1, [pc, #504]	; (8010d30 <PrepareFrame+0x28c>)
 8010b38:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8010b3a:	4a79      	ldr	r2, [pc, #484]	; (8010d20 <PrepareFrame+0x27c>)
 8010b3c:	2386      	movs	r3, #134	; 0x86
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	21ff      	movs	r1, #255	; 0xff
 8010b42:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	7819      	ldrb	r1, [r3, #0]
 8010b48:	4a75      	ldr	r2, [pc, #468]	; (8010d20 <PrepareFrame+0x27c>)
 8010b4a:	230e      	movs	r3, #14
 8010b4c:	33ff      	adds	r3, #255	; 0xff
 8010b4e:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 8010b50:	4a73      	ldr	r2, [pc, #460]	; (8010d20 <PrepareFrame+0x27c>)
 8010b52:	1df9      	adds	r1, r7, #7
 8010b54:	2394      	movs	r3, #148	; 0x94
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	7809      	ldrb	r1, [r1, #0]
 8010b5a:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 8010b5c:	4b70      	ldr	r3, [pc, #448]	; (8010d20 <PrepareFrame+0x27c>)
 8010b5e:	4a75      	ldr	r2, [pc, #468]	; (8010d34 <PrepareFrame+0x290>)
 8010b60:	589b      	ldr	r3, [r3, r2]
 8010b62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8010b64:	4a6e      	ldr	r2, [pc, #440]	; (8010d20 <PrepareFrame+0x27c>)
 8010b66:	2388      	movs	r3, #136	; 0x88
 8010b68:	005b      	lsls	r3, r3, #1
 8010b6a:	50d1      	str	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	7819      	ldrb	r1, [r3, #0]
 8010b70:	4a6b      	ldr	r2, [pc, #428]	; (8010d20 <PrepareFrame+0x27c>)
 8010b72:	238a      	movs	r3, #138	; 0x8a
 8010b74:	005b      	lsls	r3, r3, #1
 8010b76:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 8010b78:	4b69      	ldr	r3, [pc, #420]	; (8010d20 <PrepareFrame+0x27c>)
 8010b7a:	4a6c      	ldr	r2, [pc, #432]	; (8010d2c <PrepareFrame+0x288>)
 8010b7c:	5c99      	ldrb	r1, [r3, r2]
 8010b7e:	4a68      	ldr	r2, [pc, #416]	; (8010d20 <PrepareFrame+0x27c>)
 8010b80:	2398      	movs	r3, #152	; 0x98
 8010b82:	005b      	lsls	r3, r3, #1
 8010b84:	54d1      	strb	r1, [r2, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010b86:	4a66      	ldr	r2, [pc, #408]	; (8010d20 <PrepareFrame+0x27c>)
 8010b88:	2396      	movs	r3, #150	; 0x96
 8010b8a:	005b      	lsls	r3, r3, #1
 8010b8c:	4966      	ldr	r1, [pc, #408]	; (8010d28 <PrepareFrame+0x284>)
 8010b8e:	50d1      	str	r1, [r2, r3]

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8010b90:	2318      	movs	r3, #24
 8010b92:	18fb      	adds	r3, r7, r3
 8010b94:	0018      	movs	r0, r3
 8010b96:	f003 fd1d 	bl	80145d4 <LoRaMacCryptoGetFCntUp>
 8010b9a:	1e03      	subs	r3, r0, #0
 8010b9c:	d001      	beq.n	8010ba2 <PrepareFrame+0xfe>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8010b9e:	2312      	movs	r3, #18
 8010ba0:	e0ba      	b.n	8010d18 <PrepareFrame+0x274>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	b299      	uxth	r1, r3
 8010ba6:	4a5e      	ldr	r2, [pc, #376]	; (8010d20 <PrepareFrame+0x27c>)
 8010ba8:	238b      	movs	r3, #139	; 0x8b
 8010baa:	005b      	lsls	r3, r3, #1
 8010bac:	52d1      	strh	r1, [r2, r3]

            // Reset confirm parameters
            MacCtx.McpsConfirm.NbRetries = 0;
 8010bae:	4b5c      	ldr	r3, [pc, #368]	; (8010d20 <PrepareFrame+0x27c>)
 8010bb0:	4a61      	ldr	r2, [pc, #388]	; (8010d38 <PrepareFrame+0x294>)
 8010bb2:	2100      	movs	r1, #0
 8010bb4:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsConfirm.AckReceived = false;
 8010bb6:	4a5a      	ldr	r2, [pc, #360]	; (8010d20 <PrepareFrame+0x27c>)
 8010bb8:	2388      	movs	r3, #136	; 0x88
 8010bba:	00db      	lsls	r3, r3, #3
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	54d1      	strb	r1, [r2, r3]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8010bc0:	69b9      	ldr	r1, [r7, #24]
 8010bc2:	4a57      	ldr	r2, [pc, #348]	; (8010d20 <PrepareFrame+0x27c>)
 8010bc4:	2389      	movs	r3, #137	; 0x89
 8010bc6:	00db      	lsls	r3, r3, #3
 8010bc8:	50d1      	str	r1, [r2, r3]

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010bca:	2314      	movs	r3, #20
 8010bcc:	18fb      	adds	r3, r7, r3
 8010bce:	0018      	movs	r0, r3
 8010bd0:	f002 fe30 	bl	8013834 <LoRaMacCommandsGetSizeSerializedCmds>
 8010bd4:	1e03      	subs	r3, r0, #0
 8010bd6:	d001      	beq.n	8010bdc <PrepareFrame+0x138>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010bd8:	2313      	movs	r3, #19
 8010bda:	e09d      	b.n	8010d18 <PrepareFrame+0x274>
            }

            if( macCmdsSize > 0 )
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d100      	bne.n	8010be4 <PrepareFrame+0x140>
 8010be2:	e095      	b.n	8010d10 <PrepareFrame+0x26c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 8010be4:	4b4e      	ldr	r3, [pc, #312]	; (8010d20 <PrepareFrame+0x27c>)
 8010be6:	4a53      	ldr	r2, [pc, #332]	; (8010d34 <PrepareFrame+0x290>)
 8010be8:	589b      	ldr	r3, [r3, r2]
 8010bea:	22f9      	movs	r2, #249	; 0xf9
 8010bec:	569b      	ldrsb	r3, [r3, r2]
 8010bee:	221f      	movs	r2, #31
 8010bf0:	18bc      	adds	r4, r7, r2
 8010bf2:	0018      	movs	r0, r3
 8010bf4:	f7fe fba4 	bl	800f340 <GetMaxAppPayloadWithoutFOptsLength>
 8010bf8:	0003      	movs	r3, r0
 8010bfa:	7023      	strb	r3, [r4, #0]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010bfc:	4b48      	ldr	r3, [pc, #288]	; (8010d20 <PrepareFrame+0x27c>)
 8010bfe:	4a4b      	ldr	r2, [pc, #300]	; (8010d2c <PrepareFrame+0x288>)
 8010c00:	5c9b      	ldrb	r3, [r3, r2]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d024      	beq.n	8010c50 <PrepareFrame+0x1ac>
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b0f      	cmp	r3, #15
 8010c0a:	d821      	bhi.n	8010c50 <PrepareFrame+0x1ac>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8010c0c:	4a4b      	ldr	r2, [pc, #300]	; (8010d3c <PrepareFrame+0x298>)
 8010c0e:	2314      	movs	r3, #20
 8010c10:	18fb      	adds	r3, r7, r3
 8010c12:	0019      	movs	r1, r3
 8010c14:	200f      	movs	r0, #15
 8010c16:	f002 fe23 	bl	8013860 <LoRaMacCommandsSerializeCmds>
 8010c1a:	1e03      	subs	r3, r0, #0
 8010c1c:	d001      	beq.n	8010c22 <PrepareFrame+0x17e>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c1e:	2313      	movs	r3, #19
 8010c20:	e07a      	b.n	8010d18 <PrepareFrame+0x274>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	1c1a      	adds	r2, r3, #0
 8010c26:	230f      	movs	r3, #15
 8010c28:	4013      	ands	r3, r2
 8010c2a:	b2da      	uxtb	r2, r3
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	210f      	movs	r1, #15
 8010c30:	400a      	ands	r2, r1
 8010c32:	0010      	movs	r0, r2
 8010c34:	781a      	ldrb	r2, [r3, #0]
 8010c36:	210f      	movs	r1, #15
 8010c38:	438a      	bics	r2, r1
 8010c3a:	1c11      	adds	r1, r2, #0
 8010c3c:	1c02      	adds	r2, r0, #0
 8010c3e:	430a      	orrs	r2, r1
 8010c40:	701a      	strb	r2, [r3, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	7819      	ldrb	r1, [r3, #0]
 8010c46:	4a36      	ldr	r2, [pc, #216]	; (8010d20 <PrepareFrame+0x27c>)
 8010c48:	238a      	movs	r3, #138	; 0x8a
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8010c4e:	e05f      	b.n	8010d10 <PrepareFrame+0x26c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8010c50:	4b33      	ldr	r3, [pc, #204]	; (8010d20 <PrepareFrame+0x27c>)
 8010c52:	4a36      	ldr	r2, [pc, #216]	; (8010d2c <PrepareFrame+0x288>)
 8010c54:	5c9b      	ldrb	r3, [r3, r2]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d016      	beq.n	8010c88 <PrepareFrame+0x1e4>
 8010c5a:	697b      	ldr	r3, [r7, #20]
 8010c5c:	2b0f      	cmp	r3, #15
 8010c5e:	d913      	bls.n	8010c88 <PrepareFrame+0x1e4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010c60:	231f      	movs	r3, #31
 8010c62:	18fb      	adds	r3, r7, r3
 8010c64:	7818      	ldrb	r0, [r3, #0]
 8010c66:	4b2e      	ldr	r3, [pc, #184]	; (8010d20 <PrepareFrame+0x27c>)
 8010c68:	4a32      	ldr	r2, [pc, #200]	; (8010d34 <PrepareFrame+0x290>)
 8010c6a:	589b      	ldr	r3, [r3, r2]
 8010c6c:	3341      	adds	r3, #65	; 0x41
 8010c6e:	33ff      	adds	r3, #255	; 0xff
 8010c70:	001a      	movs	r2, r3
 8010c72:	2314      	movs	r3, #20
 8010c74:	18fb      	adds	r3, r7, r3
 8010c76:	0019      	movs	r1, r3
 8010c78:	f002 fdf2 	bl	8013860 <LoRaMacCommandsSerializeCmds>
 8010c7c:	1e03      	subs	r3, r0, #0
 8010c7e:	d001      	beq.n	8010c84 <PrepareFrame+0x1e0>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010c80:	2313      	movs	r3, #19
 8010c82:	e049      	b.n	8010d18 <PrepareFrame+0x274>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 8010c84:	230a      	movs	r3, #10
 8010c86:	e047      	b.n	8010d18 <PrepareFrame+0x274>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010c88:	231f      	movs	r3, #31
 8010c8a:	18fb      	adds	r3, r7, r3
 8010c8c:	7818      	ldrb	r0, [r3, #0]
 8010c8e:	4b24      	ldr	r3, [pc, #144]	; (8010d20 <PrepareFrame+0x27c>)
 8010c90:	4a28      	ldr	r2, [pc, #160]	; (8010d34 <PrepareFrame+0x290>)
 8010c92:	589b      	ldr	r3, [r3, r2]
 8010c94:	3341      	adds	r3, #65	; 0x41
 8010c96:	33ff      	adds	r3, #255	; 0xff
 8010c98:	001a      	movs	r2, r3
 8010c9a:	2314      	movs	r3, #20
 8010c9c:	18fb      	adds	r3, r7, r3
 8010c9e:	0019      	movs	r1, r3
 8010ca0:	f002 fdde 	bl	8013860 <LoRaMacCommandsSerializeCmds>
 8010ca4:	1e03      	subs	r3, r0, #0
 8010ca6:	d001      	beq.n	8010cac <PrepareFrame+0x208>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010ca8:	2313      	movs	r3, #19
 8010caa:	e035      	b.n	8010d18 <PrepareFrame+0x274>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010cac:	4a1c      	ldr	r2, [pc, #112]	; (8010d20 <PrepareFrame+0x27c>)
 8010cae:	2394      	movs	r3, #148	; 0x94
 8010cb0:	005b      	lsls	r3, r3, #1
 8010cb2:	2100      	movs	r1, #0
 8010cb4:	54d1      	strb	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 8010cb6:	4b1a      	ldr	r3, [pc, #104]	; (8010d20 <PrepareFrame+0x27c>)
 8010cb8:	4a1e      	ldr	r2, [pc, #120]	; (8010d34 <PrepareFrame+0x290>)
 8010cba:	589b      	ldr	r3, [r3, r2]
 8010cbc:	3341      	adds	r3, #65	; 0x41
 8010cbe:	33ff      	adds	r3, #255	; 0xff
 8010cc0:	0019      	movs	r1, r3
 8010cc2:	4a17      	ldr	r2, [pc, #92]	; (8010d20 <PrepareFrame+0x27c>)
 8010cc4:	2396      	movs	r3, #150	; 0x96
 8010cc6:	005b      	lsls	r3, r3, #1
 8010cc8:	50d1      	str	r1, [r2, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	b2d9      	uxtb	r1, r3
 8010cce:	4a14      	ldr	r2, [pc, #80]	; (8010d20 <PrepareFrame+0x27c>)
 8010cd0:	2398      	movs	r3, #152	; 0x98
 8010cd2:	005b      	lsls	r3, r3, #1
 8010cd4:	54d1      	strb	r1, [r2, r3]
            break;
 8010cd6:	e01b      	b.n	8010d10 <PrepareFrame+0x26c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d01a      	beq.n	8010d14 <PrepareFrame+0x270>
 8010cde:	4b10      	ldr	r3, [pc, #64]	; (8010d20 <PrepareFrame+0x27c>)
 8010ce0:	4a12      	ldr	r2, [pc, #72]	; (8010d2c <PrepareFrame+0x288>)
 8010ce2:	5c9b      	ldrb	r3, [r3, r2]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d015      	beq.n	8010d14 <PrepareFrame+0x270>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010ce8:	4815      	ldr	r0, [pc, #84]	; (8010d40 <PrepareFrame+0x29c>)
 8010cea:	4b0d      	ldr	r3, [pc, #52]	; (8010d20 <PrepareFrame+0x27c>)
 8010cec:	4a0f      	ldr	r2, [pc, #60]	; (8010d2c <PrepareFrame+0x288>)
 8010cee:	5c9b      	ldrb	r3, [r3, r2]
 8010cf0:	b29a      	uxth	r2, r3
 8010cf2:	683b      	ldr	r3, [r7, #0]
 8010cf4:	0019      	movs	r1, r3
 8010cf6:	f008 fdab 	bl	8019850 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010cfa:	4b09      	ldr	r3, [pc, #36]	; (8010d20 <PrepareFrame+0x27c>)
 8010cfc:	4a0b      	ldr	r2, [pc, #44]	; (8010d2c <PrepareFrame+0x288>)
 8010cfe:	5c9b      	ldrb	r3, [r3, r2]
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	3301      	adds	r3, #1
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	4b06      	ldr	r3, [pc, #24]	; (8010d20 <PrepareFrame+0x27c>)
 8010d08:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010d0a:	e003      	b.n	8010d14 <PrepareFrame+0x270>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010d0c:	2302      	movs	r3, #2
 8010d0e:	e003      	b.n	8010d18 <PrepareFrame+0x274>
            break;
 8010d10:	46c0      	nop			; (mov r8, r8)
 8010d12:	e000      	b.n	8010d16 <PrepareFrame+0x272>
            break;
 8010d14:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_STATUS_OK;
 8010d16:	2300      	movs	r3, #0
}
 8010d18:	0018      	movs	r0, r3
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	b009      	add	sp, #36	; 0x24
 8010d1e:	bd90      	pop	{r4, r7, pc}
 8010d20:	200008f0 	.word	0x200008f0
 8010d24:	00000414 	.word	0x00000414
 8010d28:	20000a28 	.word	0x20000a28
 8010d2c:	00000237 	.word	0x00000237
 8010d30:	200008f2 	.word	0x200008f2
 8010d34:	00000484 	.word	0x00000484
 8010d38:	00000441 	.word	0x00000441
 8010d3c:	20000a08 	.word	0x20000a08
 8010d40:	200008f3 	.word	0x200008f3

08010d44 <SendFrameOnChannel>:

LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b089      	sub	sp, #36	; 0x24
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	0002      	movs	r2, r0
 8010d4c:	1dfb      	adds	r3, r7, #7
 8010d4e:	701a      	strb	r2, [r3, #0]
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8010d50:	230b      	movs	r3, #11
 8010d52:	18fb      	adds	r3, r7, r3
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]

    txConfig.Channel = channel;
 8010d58:	210c      	movs	r1, #12
 8010d5a:	187b      	adds	r3, r7, r1
 8010d5c:	1dfa      	adds	r2, r7, #7
 8010d5e:	7812      	ldrb	r2, [r2, #0]
 8010d60:	701a      	strb	r2, [r3, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010d62:	4b56      	ldr	r3, [pc, #344]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010d64:	4a56      	ldr	r2, [pc, #344]	; (8010ec0 <SendFrameOnChannel+0x17c>)
 8010d66:	589b      	ldr	r3, [r3, r2]
 8010d68:	22f9      	movs	r2, #249	; 0xf9
 8010d6a:	569a      	ldrsb	r2, [r3, r2]
 8010d6c:	187b      	adds	r3, r7, r1
 8010d6e:	705a      	strb	r2, [r3, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010d70:	4b52      	ldr	r3, [pc, #328]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010d72:	4a53      	ldr	r2, [pc, #332]	; (8010ec0 <SendFrameOnChannel+0x17c>)
 8010d74:	589b      	ldr	r3, [r3, r2]
 8010d76:	22f8      	movs	r2, #248	; 0xf8
 8010d78:	569a      	ldrsb	r2, [r3, r2]
 8010d7a:	187b      	adds	r3, r7, r1
 8010d7c:	709a      	strb	r2, [r3, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8010d7e:	4b4f      	ldr	r3, [pc, #316]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010d80:	4a4f      	ldr	r2, [pc, #316]	; (8010ec0 <SendFrameOnChannel+0x17c>)
 8010d82:	589a      	ldr	r2, [r3, r2]
 8010d84:	2398      	movs	r3, #152	; 0x98
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	58d2      	ldr	r2, [r2, r3]
 8010d8a:	187b      	adds	r3, r7, r1
 8010d8c:	605a      	str	r2, [r3, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8010d8e:	4b4b      	ldr	r3, [pc, #300]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010d90:	4a4b      	ldr	r2, [pc, #300]	; (8010ec0 <SendFrameOnChannel+0x17c>)
 8010d92:	589a      	ldr	r2, [r3, r2]
 8010d94:	239a      	movs	r3, #154	; 0x9a
 8010d96:	005b      	lsls	r3, r3, #1
 8010d98:	58d2      	ldr	r2, [r2, r3]
 8010d9a:	187b      	adds	r3, r7, r1
 8010d9c:	609a      	str	r2, [r3, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8010d9e:	4b47      	ldr	r3, [pc, #284]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010da0:	881a      	ldrh	r2, [r3, #0]
 8010da2:	187b      	adds	r3, r7, r1
 8010da4:	819a      	strh	r2, [r3, #12]


    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8010da6:	f002 fa82 	bl	80132ae <LoRaMacClassBIsBeaconExpected>
 8010daa:	1e03      	subs	r3, r0, #0
 8010dac:	d001      	beq.n	8010db2 <SendFrameOnChannel+0x6e>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8010dae:	230e      	movs	r3, #14
 8010db0:	e07f      	b.n	8010eb2 <SendFrameOnChannel+0x16e>
    }

    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8010db2:	4b42      	ldr	r3, [pc, #264]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010db4:	4a42      	ldr	r2, [pc, #264]	; (8010ec0 <SendFrameOnChannel+0x17c>)
 8010db6:	589b      	ldr	r3, [r3, r2]
 8010db8:	22f0      	movs	r2, #240	; 0xf0
 8010dba:	5c9b      	ldrb	r3, [r3, r2]
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d10d      	bne.n	8010ddc <SendFrameOnChannel+0x98>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8010dc0:	f002 fa7b 	bl	80132ba <LoRaMacClassBIsPingExpected>
 8010dc4:	1e03      	subs	r3, r0, #0
 8010dc6:	d001      	beq.n	8010dcc <SendFrameOnChannel+0x88>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010dc8:	230f      	movs	r3, #15
 8010dca:	e072      	b.n	8010eb2 <SendFrameOnChannel+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8010dcc:	f002 fa7b 	bl	80132c6 <LoRaMacClassBIsMulticastExpected>
 8010dd0:	1e03      	subs	r3, r0, #0
 8010dd2:	d001      	beq.n	8010dd8 <SendFrameOnChannel+0x94>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8010dd4:	230f      	movs	r3, #15
 8010dd6:	e06c      	b.n	8010eb2 <SendFrameOnChannel+0x16e>
        }
        else
        {
            LoRaMacClassBStopRxSlots( );
 8010dd8:	f002 fae8 	bl	80133ac <LoRaMacClassBStopRxSlots>
        }
    }
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8010ddc:	4b37      	ldr	r3, [pc, #220]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010dde:	4a38      	ldr	r2, [pc, #224]	; (8010ec0 <SendFrameOnChannel+0x17c>)
 8010de0:	589b      	ldr	r3, [r3, r2]
 8010de2:	7818      	ldrb	r0, [r3, #0]
 8010de4:	4b37      	ldr	r3, [pc, #220]	; (8010ec4 <SendFrameOnChannel+0x180>)
 8010de6:	240b      	movs	r4, #11
 8010de8:	193a      	adds	r2, r7, r4
 8010dea:	210c      	movs	r1, #12
 8010dec:	1879      	adds	r1, r7, r1
 8010dee:	f004 fdcc 	bl	801598a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010df2:	4b32      	ldr	r3, [pc, #200]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010df4:	4a34      	ldr	r2, [pc, #208]	; (8010ec8 <SendFrameOnChannel+0x184>)
 8010df6:	2101      	movs	r1, #1
 8010df8:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010dfa:	4b30      	ldr	r3, [pc, #192]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010dfc:	4a30      	ldr	r2, [pc, #192]	; (8010ec0 <SendFrameOnChannel+0x17c>)
 8010dfe:	589b      	ldr	r3, [r3, r2]
 8010e00:	22f9      	movs	r2, #249	; 0xf9
 8010e02:	569b      	ldrsb	r3, [r3, r2]
 8010e04:	b2d9      	uxtb	r1, r3
 8010e06:	4b2d      	ldr	r3, [pc, #180]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e08:	4a30      	ldr	r2, [pc, #192]	; (8010ecc <SendFrameOnChannel+0x188>)
 8010e0a:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.TxPower = txPower;
 8010e0c:	193b      	adds	r3, r7, r4
 8010e0e:	2100      	movs	r1, #0
 8010e10:	5659      	ldrsb	r1, [r3, r1]
 8010e12:	4b2a      	ldr	r3, [pc, #168]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e14:	4a2e      	ldr	r2, [pc, #184]	; (8010ed0 <SendFrameOnChannel+0x18c>)
 8010e16:	5499      	strb	r1, [r3, r2]
    MacCtx.McpsConfirm.Channel = channel;
 8010e18:	1dfb      	adds	r3, r7, #7
 8010e1a:	781a      	ldrb	r2, [r3, #0]
 8010e1c:	4b27      	ldr	r3, [pc, #156]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e1e:	492d      	ldr	r1, [pc, #180]	; (8010ed4 <SendFrameOnChannel+0x190>)
 8010e20:	505a      	str	r2, [r3, r1]

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e22:	4a26      	ldr	r2, [pc, #152]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e24:	2383      	movs	r3, #131	; 0x83
 8010e26:	00db      	lsls	r3, r3, #3
 8010e28:	58d2      	ldr	r2, [r2, r3]
 8010e2a:	4b24      	ldr	r3, [pc, #144]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e2c:	492a      	ldr	r1, [pc, #168]	; (8010ed8 <SendFrameOnChannel+0x194>)
 8010e2e:	505a      	str	r2, [r3, r1]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010e30:	4a22      	ldr	r2, [pc, #136]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e32:	2383      	movs	r3, #131	; 0x83
 8010e34:	00db      	lsls	r3, r3, #3
 8010e36:	58d2      	ldr	r2, [r2, r3]
 8010e38:	4b20      	ldr	r3, [pc, #128]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e3a:	4928      	ldr	r1, [pc, #160]	; (8010edc <SendFrameOnChannel+0x198>)
 8010e3c:	505a      	str	r2, [r3, r1]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8010e3e:	f002 fa48 	bl	80132d2 <LoRaMacClassBIsBeaconModeActive>
 8010e42:	1e03      	subs	r3, r0, #0
 8010e44:	d00d      	beq.n	8010e62 <SendFrameOnChannel+0x11e>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010e46:	4a1d      	ldr	r2, [pc, #116]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e48:	2383      	movs	r3, #131	; 0x83
 8010e4a:	00db      	lsls	r3, r3, #3
 8010e4c:	58d3      	ldr	r3, [r2, r3]
 8010e4e:	0018      	movs	r0, r3
 8010e50:	f002 faa3 	bl	801339a <LoRaMacClassBIsUplinkCollision>
 8010e54:	0003      	movs	r3, r0
 8010e56:	61fb      	str	r3, [r7, #28]

        if( collisionTime > 0 )
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d001      	beq.n	8010e62 <SendFrameOnChannel+0x11e>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010e5e:	2310      	movs	r3, #16
 8010e60:	e027      	b.n	8010eb2 <SendFrameOnChannel+0x16e>
        }
    }

    LoRaMacClassBHaltBeaconing( );
 8010e62:	f002 fa46 	bl	80132f2 <LoRaMacClassBHaltBeaconing>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010e66:	4a15      	ldr	r2, [pc, #84]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e68:	23d0      	movs	r3, #208	; 0xd0
 8010e6a:	009b      	lsls	r3, r3, #2
 8010e6c:	58d3      	ldr	r3, [r2, r3]
 8010e6e:	2202      	movs	r2, #2
 8010e70:	431a      	orrs	r2, r3
 8010e72:	0011      	movs	r1, r2
 8010e74:	4a11      	ldr	r2, [pc, #68]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e76:	23d0      	movs	r3, #208	; 0xd0
 8010e78:	009b      	lsls	r3, r3, #2
 8010e7a:	50d1      	str	r1, [r2, r3]
    if( MacCtx.NodeAckRequested == false )
 8010e7c:	4b0f      	ldr	r3, [pc, #60]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e7e:	4a18      	ldr	r2, [pc, #96]	; (8010ee0 <SendFrameOnChannel+0x19c>)
 8010e80:	5c9b      	ldrb	r3, [r3, r2]
 8010e82:	2201      	movs	r2, #1
 8010e84:	4053      	eors	r3, r2
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d009      	beq.n	8010ea0 <SendFrameOnChannel+0x15c>
    {
        MacCtx.ChannelsNbTransCounter++;
 8010e8c:	4a0b      	ldr	r2, [pc, #44]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e8e:	2382      	movs	r3, #130	; 0x82
 8010e90:	00db      	lsls	r3, r3, #3
 8010e92:	5cd3      	ldrb	r3, [r2, r3]
 8010e94:	3301      	adds	r3, #1
 8010e96:	b2d9      	uxtb	r1, r3
 8010e98:	4a08      	ldr	r2, [pc, #32]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010e9a:	2382      	movs	r3, #130	; 0x82
 8010e9c:	00db      	lsls	r3, r3, #3
 8010e9e:	54d1      	strb	r1, [r2, r3]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8010ea0:	4b10      	ldr	r3, [pc, #64]	; (8010ee4 <SendFrameOnChannel+0x1a0>)
 8010ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ea4:	4a05      	ldr	r2, [pc, #20]	; (8010ebc <SendFrameOnChannel+0x178>)
 8010ea6:	8812      	ldrh	r2, [r2, #0]
 8010ea8:	b2d1      	uxtb	r1, r2
 8010eaa:	4a0f      	ldr	r2, [pc, #60]	; (8010ee8 <SendFrameOnChannel+0x1a4>)
 8010eac:	0010      	movs	r0, r2
 8010eae:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8010eb0:	2300      	movs	r3, #0
}
 8010eb2:	0018      	movs	r0, r3
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	b009      	add	sp, #36	; 0x24
 8010eb8:	bd90      	pop	{r4, r7, pc}
 8010eba:	46c0      	nop			; (mov r8, r8)
 8010ebc:	200008f0 	.word	0x200008f0
 8010ec0:	00000484 	.word	0x00000484
 8010ec4:	20000d08 	.word	0x20000d08
 8010ec8:	0000043d 	.word	0x0000043d
 8010ecc:	0000043e 	.word	0x0000043e
 8010ed0:	0000043f 	.word	0x0000043f
 8010ed4:	0000044c 	.word	0x0000044c
 8010ed8:	00000444 	.word	0x00000444
 8010edc:	00000454 	.word	0x00000454
 8010ee0:	00000414 	.word	0x00000414
 8010ee4:	0801acec 	.word	0x0801acec
 8010ee8:	200008f2 	.word	0x200008f2

08010eec <SetTxContinuousWave>:

LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	0002      	movs	r2, r0
 8010ef4:	1dbb      	adds	r3, r7, #6
 8010ef6:	801a      	strh	r2, [r3, #0]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8010ef8:	4b20      	ldr	r3, [pc, #128]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010efa:	4a21      	ldr	r2, [pc, #132]	; (8010f80 <SetTxContinuousWave+0x94>)
 8010efc:	5c9a      	ldrb	r2, [r3, r2]
 8010efe:	2108      	movs	r1, #8
 8010f00:	187b      	adds	r3, r7, r1
 8010f02:	701a      	strb	r2, [r3, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8010f04:	4b1d      	ldr	r3, [pc, #116]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010f06:	4a1f      	ldr	r2, [pc, #124]	; (8010f84 <SetTxContinuousWave+0x98>)
 8010f08:	589b      	ldr	r3, [r3, r2]
 8010f0a:	22f9      	movs	r2, #249	; 0xf9
 8010f0c:	569a      	ldrsb	r2, [r3, r2]
 8010f0e:	187b      	adds	r3, r7, r1
 8010f10:	705a      	strb	r2, [r3, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8010f12:	4b1a      	ldr	r3, [pc, #104]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010f14:	4a1b      	ldr	r2, [pc, #108]	; (8010f84 <SetTxContinuousWave+0x98>)
 8010f16:	589b      	ldr	r3, [r3, r2]
 8010f18:	22f8      	movs	r2, #248	; 0xf8
 8010f1a:	569a      	ldrsb	r2, [r3, r2]
 8010f1c:	187b      	adds	r3, r7, r1
 8010f1e:	709a      	strb	r2, [r3, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8010f20:	4b16      	ldr	r3, [pc, #88]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010f22:	4a18      	ldr	r2, [pc, #96]	; (8010f84 <SetTxContinuousWave+0x98>)
 8010f24:	589a      	ldr	r2, [r3, r2]
 8010f26:	2398      	movs	r3, #152	; 0x98
 8010f28:	005b      	lsls	r3, r3, #1
 8010f2a:	58d2      	ldr	r2, [r2, r3]
 8010f2c:	187b      	adds	r3, r7, r1
 8010f2e:	605a      	str	r2, [r3, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8010f30:	4b12      	ldr	r3, [pc, #72]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010f32:	4a14      	ldr	r2, [pc, #80]	; (8010f84 <SetTxContinuousWave+0x98>)
 8010f34:	589a      	ldr	r2, [r3, r2]
 8010f36:	239a      	movs	r3, #154	; 0x9a
 8010f38:	005b      	lsls	r3, r3, #1
 8010f3a:	58d2      	ldr	r2, [r2, r3]
 8010f3c:	187b      	adds	r3, r7, r1
 8010f3e:	609a      	str	r2, [r3, #8]
    continuousWave.Timeout = timeout;
 8010f40:	187b      	adds	r3, r7, r1
 8010f42:	1dba      	adds	r2, r7, #6
 8010f44:	8812      	ldrh	r2, [r2, #0]
 8010f46:	819a      	strh	r2, [r3, #12]

    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 8010f48:	4b0c      	ldr	r3, [pc, #48]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010f4a:	4a0e      	ldr	r2, [pc, #56]	; (8010f84 <SetTxContinuousWave+0x98>)
 8010f4c:	589b      	ldr	r3, [r3, r2]
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	187a      	adds	r2, r7, r1
 8010f52:	0011      	movs	r1, r2
 8010f54:	0018      	movs	r0, r3
 8010f56:	f004 fdfc 	bl	8015b52 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010f5a:	4a08      	ldr	r2, [pc, #32]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010f5c:	23d0      	movs	r3, #208	; 0xd0
 8010f5e:	009b      	lsls	r3, r3, #2
 8010f60:	58d3      	ldr	r3, [r2, r3]
 8010f62:	2202      	movs	r2, #2
 8010f64:	431a      	orrs	r2, r3
 8010f66:	0011      	movs	r1, r2
 8010f68:	4a04      	ldr	r2, [pc, #16]	; (8010f7c <SetTxContinuousWave+0x90>)
 8010f6a:	23d0      	movs	r3, #208	; 0xd0
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8010f70:	2300      	movs	r3, #0
}
 8010f72:	0018      	movs	r0, r3
 8010f74:	46bd      	mov	sp, r7
 8010f76:	b006      	add	sp, #24
 8010f78:	bd80      	pop	{r7, pc}
 8010f7a:	46c0      	nop			; (mov r8, r8)
 8010f7c:	200008f0 	.word	0x200008f0
 8010f80:	00000415 	.word	0x00000415
 8010f84:	00000484 	.word	0x00000484

08010f88 <SetTxContinuousWave1>:

LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6039      	str	r1, [r7, #0]
 8010f90:	0011      	movs	r1, r2
 8010f92:	1dbb      	adds	r3, r7, #6
 8010f94:	1c02      	adds	r2, r0, #0
 8010f96:	801a      	strh	r2, [r3, #0]
 8010f98:	1d7b      	adds	r3, r7, #5
 8010f9a:	1c0a      	adds	r2, r1, #0
 8010f9c:	701a      	strb	r2, [r3, #0]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8010f9e:	4b0c      	ldr	r3, [pc, #48]	; (8010fd0 <SetTxContinuousWave1+0x48>)
 8010fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fa2:	1d7a      	adds	r2, r7, #5
 8010fa4:	2100      	movs	r1, #0
 8010fa6:	5651      	ldrsb	r1, [r2, r1]
 8010fa8:	1dba      	adds	r2, r7, #6
 8010faa:	8812      	ldrh	r2, [r2, #0]
 8010fac:	6838      	ldr	r0, [r7, #0]
 8010fae:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8010fb0:	4a08      	ldr	r2, [pc, #32]	; (8010fd4 <SetTxContinuousWave1+0x4c>)
 8010fb2:	23d0      	movs	r3, #208	; 0xd0
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	58d3      	ldr	r3, [r2, r3]
 8010fb8:	2202      	movs	r2, #2
 8010fba:	431a      	orrs	r2, r3
 8010fbc:	0011      	movs	r1, r2
 8010fbe:	4a05      	ldr	r2, [pc, #20]	; (8010fd4 <SetTxContinuousWave1+0x4c>)
 8010fc0:	23d0      	movs	r3, #208	; 0xd0
 8010fc2:	009b      	lsls	r3, r3, #2
 8010fc4:	50d1      	str	r1, [r2, r3]

    return LORAMAC_STATUS_OK;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	0018      	movs	r0, r3
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	b002      	add	sp, #8
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	0801acec 	.word	0x0801acec
 8010fd4:	200008f0 	.word	0x200008f0

08010fd8 <GetCtxs>:

LoRaMacCtxs_t* GetCtxs( void )
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
    Contexts.MacNvmCtx = &NvmMacCtx;
 8010fde:	4b20      	ldr	r3, [pc, #128]	; (8011060 <GetCtxs+0x88>)
 8010fe0:	4a20      	ldr	r2, [pc, #128]	; (8011064 <GetCtxs+0x8c>)
 8010fe2:	601a      	str	r2, [r3, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 8010fe4:	4b1e      	ldr	r3, [pc, #120]	; (8011060 <GetCtxs+0x88>)
 8010fe6:	22ee      	movs	r2, #238	; 0xee
 8010fe8:	0052      	lsls	r2, r2, #1
 8010fea:	605a      	str	r2, [r3, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 8010fec:	4b1e      	ldr	r3, [pc, #120]	; (8011068 <GetCtxs+0x90>)
 8010fee:	0018      	movs	r0, r3
 8010ff0:	f003 fae2 	bl	80145b8 <LoRaMacCryptoGetNvmCtx>
 8010ff4:	0002      	movs	r2, r0
 8010ff6:	4b1a      	ldr	r3, [pc, #104]	; (8011060 <GetCtxs+0x88>)
 8010ff8:	611a      	str	r2, [r3, #16]
    GetNvmCtxParams_t params ={ 0 };
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	607b      	str	r3, [r7, #4]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 8010ffe:	4b1b      	ldr	r3, [pc, #108]	; (801106c <GetCtxs+0x94>)
 8011000:	4a1b      	ldr	r2, [pc, #108]	; (8011070 <GetCtxs+0x98>)
 8011002:	589b      	ldr	r3, [r3, r2]
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	1d3a      	adds	r2, r7, #4
 8011008:	0011      	movs	r1, r2
 801100a:	0018      	movs	r0, r3
 801100c:	f004 fc21 	bl	8015852 <RegionGetNvmCtx>
 8011010:	0002      	movs	r2, r0
 8011012:	4b13      	ldr	r3, [pc, #76]	; (8011060 <GetCtxs+0x88>)
 8011014:	609a      	str	r2, [r3, #8]
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	4b11      	ldr	r3, [pc, #68]	; (8011060 <GetCtxs+0x88>)
 801101a:	60da      	str	r2, [r3, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 801101c:	4b15      	ldr	r3, [pc, #84]	; (8011074 <GetCtxs+0x9c>)
 801101e:	0018      	movs	r0, r3
 8011020:	f7fc f9a0 	bl	800d364 <SecureElementGetNvmCtx>
 8011024:	0002      	movs	r2, r0
 8011026:	4b0e      	ldr	r3, [pc, #56]	; (8011060 <GetCtxs+0x88>)
 8011028:	619a      	str	r2, [r3, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 801102a:	4b13      	ldr	r3, [pc, #76]	; (8011078 <GetCtxs+0xa0>)
 801102c:	0018      	movs	r0, r3
 801102e:	f002 fb1d 	bl	801366c <LoRaMacCommandsGetNvmCtx>
 8011032:	0002      	movs	r2, r0
 8011034:	4b0a      	ldr	r3, [pc, #40]	; (8011060 <GetCtxs+0x88>)
 8011036:	621a      	str	r2, [r3, #32]
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 8011038:	4b10      	ldr	r3, [pc, #64]	; (801107c <GetCtxs+0xa4>)
 801103a:	0018      	movs	r0, r3
 801103c:	f002 f8e3 	bl	8013206 <LoRaMacClassBGetNvmCtx>
 8011040:	0002      	movs	r2, r0
 8011042:	4b07      	ldr	r3, [pc, #28]	; (8011060 <GetCtxs+0x88>)
 8011044:	629a      	str	r2, [r3, #40]	; 0x28
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 8011046:	4b0e      	ldr	r3, [pc, #56]	; (8011080 <GetCtxs+0xa8>)
 8011048:	0018      	movs	r0, r3
 801104a:	f002 fd01 	bl	8013a50 <LoRaMacConfirmQueueGetNvmCtx>
 801104e:	0002      	movs	r2, r0
 8011050:	4b03      	ldr	r3, [pc, #12]	; (8011060 <GetCtxs+0x88>)
 8011052:	631a      	str	r2, [r3, #48]	; 0x30
    return &Contexts;
 8011054:	4b02      	ldr	r3, [pc, #8]	; (8011060 <GetCtxs+0x88>)
}
 8011056:	0018      	movs	r0, r3
 8011058:	46bd      	mov	sp, r7
 801105a:	b002      	add	sp, #8
 801105c:	bd80      	pop	{r7, pc}
 801105e:	46c0      	nop			; (mov r8, r8)
 8011060:	20001658 	.word	0x20001658
 8011064:	20000d78 	.word	0x20000d78
 8011068:	2000166c 	.word	0x2000166c
 801106c:	200008f0 	.word	0x200008f0
 8011070:	00000484 	.word	0x00000484
 8011074:	20001674 	.word	0x20001674
 8011078:	2000167c 	.word	0x2000167c
 801107c:	20001684 	.word	0x20001684
 8011080:	2000168c 	.word	0x2000168c

08011084 <RestoreCtxs>:

LoRaMacStatus_t RestoreCtxs( LoRaMacCtxs_t* contexts )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
    if( contexts == NULL )
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d101      	bne.n	8011096 <RestoreCtxs+0x12>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011092:	2303      	movs	r3, #3
 8011094:	e05d      	b.n	8011152 <RestoreCtxs+0xce>
    }
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8011096:	4a31      	ldr	r2, [pc, #196]	; (801115c <RestoreCtxs+0xd8>)
 8011098:	23d0      	movs	r3, #208	; 0xd0
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	58d3      	ldr	r3, [r2, r3]
 801109e:	2b01      	cmp	r3, #1
 80110a0:	d001      	beq.n	80110a6 <RestoreCtxs+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 80110a2:	2301      	movs	r3, #1
 80110a4:	e055      	b.n	8011152 <RestoreCtxs+0xce>
    }

    if( contexts->MacNvmCtx != NULL )
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d008      	beq.n	80110c0 <RestoreCtxs+0x3c>
    {
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6819      	ldr	r1, [r3, #0]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	4b29      	ldr	r3, [pc, #164]	; (8011160 <RestoreCtxs+0xdc>)
 80110ba:	0018      	movs	r0, r3
 80110bc:	f008 fbc8 	bl	8019850 <memcpy1>
    }

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESTORE_CTX;
 80110c0:	2108      	movs	r1, #8
 80110c2:	187b      	adds	r3, r7, r1
 80110c4:	2202      	movs	r2, #2
 80110c6:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	689a      	ldr	r2, [r3, #8]
 80110cc:	187b      	adds	r3, r7, r1
 80110ce:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80110d0:	4b22      	ldr	r3, [pc, #136]	; (801115c <RestoreCtxs+0xd8>)
 80110d2:	4a24      	ldr	r2, [pc, #144]	; (8011164 <RestoreCtxs+0xe0>)
 80110d4:	589b      	ldr	r3, [r3, r2]
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	187a      	adds	r2, r7, r1
 80110da:	0011      	movs	r1, r2
 80110dc:	0018      	movs	r0, r3
 80110de:	f004 fba3 	bl	8015828 <RegionInitDefaults>

    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	699b      	ldr	r3, [r3, #24]
 80110e6:	0018      	movs	r0, r3
 80110e8:	f7fc f924 	bl	800d334 <SecureElementRestoreNvmCtx>
 80110ec:	1e03      	subs	r3, r0, #0
 80110ee:	d001      	beq.n	80110f4 <RestoreCtxs+0x70>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80110f0:	2311      	movs	r3, #17
 80110f2:	e02e      	b.n	8011152 <RestoreCtxs+0xce>
    }

    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	691b      	ldr	r3, [r3, #16]
 80110f8:	0018      	movs	r0, r3
 80110fa:	f003 fa47 	bl	801458c <LoRaMacCryptoRestoreNvmCtx>
 80110fe:	1e03      	subs	r3, r0, #0
 8011100:	d001      	beq.n	8011106 <RestoreCtxs+0x82>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011102:	2311      	movs	r3, #17
 8011104:	e025      	b.n	8011152 <RestoreCtxs+0xce>
    }

    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6a1b      	ldr	r3, [r3, #32]
 801110a:	0018      	movs	r0, r3
 801110c:	f002 fa98 	bl	8013640 <LoRaMacCommandsRestoreNvmCtx>
 8011110:	1e03      	subs	r3, r0, #0
 8011112:	d001      	beq.n	8011118 <RestoreCtxs+0x94>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011114:	2313      	movs	r3, #19
 8011116:	e01c      	b.n	8011152 <RestoreCtxs+0xce>
    }

    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801111c:	0018      	movs	r0, r3
 801111e:	f002 f869 	bl	80131f4 <LoRaMacClassBRestoreNvmCtx>
 8011122:	0003      	movs	r3, r0
 8011124:	001a      	movs	r2, r3
 8011126:	2301      	movs	r3, #1
 8011128:	4053      	eors	r3, r2
 801112a:	b2db      	uxtb	r3, r3
 801112c:	2b00      	cmp	r3, #0
 801112e:	d001      	beq.n	8011134 <RestoreCtxs+0xb0>
    {
        return LORAMAC_STATUS_CLASS_B_ERROR;
 8011130:	2314      	movs	r3, #20
 8011132:	e00e      	b.n	8011152 <RestoreCtxs+0xce>
    }

    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011138:	0018      	movs	r0, r3
 801113a:	f002 fc73 	bl	8013a24 <LoRaMacConfirmQueueRestoreNvmCtx>
 801113e:	0003      	movs	r3, r0
 8011140:	001a      	movs	r2, r3
 8011142:	2301      	movs	r3, #1
 8011144:	4053      	eors	r3, r2
 8011146:	b2db      	uxtb	r3, r3
 8011148:	2b00      	cmp	r3, #0
 801114a:	d001      	beq.n	8011150 <RestoreCtxs+0xcc>
    {
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 801114c:	2315      	movs	r3, #21
 801114e:	e000      	b.n	8011152 <RestoreCtxs+0xce>
    }

    return LORAMAC_STATUS_OK;
 8011150:	2300      	movs	r3, #0
}
 8011152:	0018      	movs	r0, r3
 8011154:	46bd      	mov	sp, r7
 8011156:	b004      	add	sp, #16
 8011158:	bd80      	pop	{r7, pc}
 801115a:	46c0      	nop			; (mov r8, r8)
 801115c:	200008f0 	.word	0x200008f0
 8011160:	20000d78 	.word	0x20000d78
 8011164:	00000484 	.word	0x00000484

08011168 <DetermineFrameType>:

LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b082      	sub	sp, #8
 801116c:	af00      	add	r7, sp, #0
 801116e:	6078      	str	r0, [r7, #4]
 8011170:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d002      	beq.n	801117e <DetermineFrameType+0x16>
 8011178:	683b      	ldr	r3, [r7, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d101      	bne.n	8011182 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801117e:	2303      	movs	r3, #3
 8011180:	e03b      	b.n	80111fa <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	7b1b      	ldrb	r3, [r3, #12]
 8011186:	220f      	movs	r2, #15
 8011188:	4013      	ands	r3, r2
 801118a:	b2db      	uxtb	r3, r3
 801118c:	2b00      	cmp	r3, #0
 801118e:	d008      	beq.n	80111a2 <DetermineFrameType+0x3a>
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2220      	movs	r2, #32
 8011194:	5c9b      	ldrb	r3, [r3, r2]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d003      	beq.n	80111a2 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	2200      	movs	r2, #0
 801119e:	701a      	strb	r2, [r3, #0]
 80111a0:	e02a      	b.n	80111f8 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2228      	movs	r2, #40	; 0x28
 80111a6:	5c9b      	ldrb	r3, [r3, r2]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d103      	bne.n	80111b4 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	2201      	movs	r2, #1
 80111b0:	701a      	strb	r2, [r3, #0]
 80111b2:	e021      	b.n	80111f8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	7b1b      	ldrb	r3, [r3, #12]
 80111b8:	220f      	movs	r2, #15
 80111ba:	4013      	ands	r3, r2
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d108      	bne.n	80111d4 <DetermineFrameType+0x6c>
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2220      	movs	r2, #32
 80111c6:	5c9b      	ldrb	r3, [r3, r2]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d103      	bne.n	80111d4 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	2202      	movs	r2, #2
 80111d0:	701a      	strb	r2, [r3, #0]
 80111d2:	e011      	b.n	80111f8 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	7b1b      	ldrb	r3, [r3, #12]
 80111d8:	220f      	movs	r2, #15
 80111da:	4013      	ands	r3, r2
 80111dc:	b2db      	uxtb	r3, r3
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d108      	bne.n	80111f4 <DetermineFrameType+0x8c>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2220      	movs	r2, #32
 80111e6:	5c9b      	ldrb	r3, [r3, r2]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d003      	beq.n	80111f4 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	2203      	movs	r2, #3
 80111f0:	701a      	strb	r2, [r3, #0]
 80111f2:	e001      	b.n	80111f8 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 80111f4:	2317      	movs	r3, #23
 80111f6:	e000      	b.n	80111fa <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	0018      	movs	r0, r3
 80111fc:	46bd      	mov	sp, r7
 80111fe:	b002      	add	sp, #8
 8011200:	bd80      	pop	{r7, pc}
	...

08011204 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8011204:	b580      	push	{r7, lr}
 8011206:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8011208:	4a14      	ldr	r2, [pc, #80]	; (801125c <CheckRetransUnconfirmedUplink+0x58>)
 801120a:	2382      	movs	r3, #130	; 0x82
 801120c:	00db      	lsls	r3, r3, #3
 801120e:	5cd2      	ldrb	r2, [r2, r3]
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 8011210:	4b12      	ldr	r3, [pc, #72]	; (801125c <CheckRetransUnconfirmedUplink+0x58>)
 8011212:	4913      	ldr	r1, [pc, #76]	; (8011260 <CheckRetransUnconfirmedUplink+0x5c>)
 8011214:	5859      	ldr	r1, [r3, r1]
 8011216:	238c      	movs	r3, #140	; 0x8c
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	5ccb      	ldrb	r3, [r1, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 801121c:	429a      	cmp	r2, r3
 801121e:	d301      	bcc.n	8011224 <CheckRetransUnconfirmedUplink+0x20>
    {
        return true;
 8011220:	2301      	movs	r3, #1
 8011222:	e018      	b.n	8011256 <CheckRetransUnconfirmedUplink+0x52>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011224:	4b0d      	ldr	r3, [pc, #52]	; (801125c <CheckRetransUnconfirmedUplink+0x58>)
 8011226:	4a0f      	ldr	r2, [pc, #60]	; (8011264 <CheckRetransUnconfirmedUplink+0x60>)
 8011228:	5c9b      	ldrb	r3, [r3, r2]
 801122a:	2202      	movs	r2, #2
 801122c:	4013      	ands	r3, r2
 801122e:	b2db      	uxtb	r3, r3
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00f      	beq.n	8011254 <CheckRetransUnconfirmedUplink+0x50>
    {
        // For Class A stop in each case
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8011234:	4b09      	ldr	r3, [pc, #36]	; (801125c <CheckRetransUnconfirmedUplink+0x58>)
 8011236:	4a0a      	ldr	r2, [pc, #40]	; (8011260 <CheckRetransUnconfirmedUplink+0x5c>)
 8011238:	589b      	ldr	r3, [r3, r2]
 801123a:	22f0      	movs	r2, #240	; 0xf0
 801123c:	5c9b      	ldrb	r3, [r3, r2]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d101      	bne.n	8011246 <CheckRetransUnconfirmedUplink+0x42>
        {
            return true;
 8011242:	2301      	movs	r3, #1
 8011244:	e007      	b.n	8011256 <CheckRetransUnconfirmedUplink+0x52>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 8011246:	4b05      	ldr	r3, [pc, #20]	; (801125c <CheckRetransUnconfirmedUplink+0x58>)
 8011248:	4a07      	ldr	r2, [pc, #28]	; (8011268 <CheckRetransUnconfirmedUplink+0x64>)
 801124a:	5c9b      	ldrb	r3, [r3, r2]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d101      	bne.n	8011254 <CheckRetransUnconfirmedUplink+0x50>
            {
                return true;
 8011250:	2301      	movs	r3, #1
 8011252:	e000      	b.n	8011256 <CheckRetransUnconfirmedUplink+0x52>
            }
        }
    }
    return false;
 8011254:	2300      	movs	r3, #0
}
 8011256:	0018      	movs	r0, r3
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	200008f0 	.word	0x200008f0
 8011260:	00000484 	.word	0x00000484
 8011264:	00000481 	.word	0x00000481
 8011268:	0000042d 	.word	0x0000042d

0801126c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8011270:	4b0e      	ldr	r3, [pc, #56]	; (80112ac <CheckRetransConfirmedUplink+0x40>)
 8011272:	4a0f      	ldr	r2, [pc, #60]	; (80112b0 <CheckRetransConfirmedUplink+0x44>)
 8011274:	5c9a      	ldrb	r2, [r3, r2]
        MacCtx.AckTimeoutRetries )
 8011276:	4b0d      	ldr	r3, [pc, #52]	; (80112ac <CheckRetransConfirmedUplink+0x40>)
 8011278:	490e      	ldr	r1, [pc, #56]	; (80112b4 <CheckRetransConfirmedUplink+0x48>)
 801127a:	5c5b      	ldrb	r3, [r3, r1]
    if( MacCtx.AckTimeoutRetriesCounter >=
 801127c:	429a      	cmp	r2, r3
 801127e:	d301      	bcc.n	8011284 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8011280:	2301      	movs	r3, #1
 8011282:	e010      	b.n	80112a6 <CheckRetransConfirmedUplink+0x3a>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011284:	4b09      	ldr	r3, [pc, #36]	; (80112ac <CheckRetransConfirmedUplink+0x40>)
 8011286:	4a0c      	ldr	r2, [pc, #48]	; (80112b8 <CheckRetransConfirmedUplink+0x4c>)
 8011288:	5c9b      	ldrb	r3, [r3, r2]
 801128a:	2202      	movs	r2, #2
 801128c:	4013      	ands	r3, r2
 801128e:	b2db      	uxtb	r3, r3
 8011290:	2b00      	cmp	r3, #0
 8011292:	d007      	beq.n	80112a4 <CheckRetransConfirmedUplink+0x38>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011294:	4a05      	ldr	r2, [pc, #20]	; (80112ac <CheckRetransConfirmedUplink+0x40>)
 8011296:	2388      	movs	r3, #136	; 0x88
 8011298:	00db      	lsls	r3, r3, #3
 801129a:	5cd3      	ldrb	r3, [r2, r3]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d001      	beq.n	80112a4 <CheckRetransConfirmedUplink+0x38>
        {
            return true;
 80112a0:	2301      	movs	r3, #1
 80112a2:	e000      	b.n	80112a6 <CheckRetransConfirmedUplink+0x3a>
        }
    }
    return false;
 80112a4:	2300      	movs	r3, #0
}
 80112a6:	0018      	movs	r0, r3
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	200008f0 	.word	0x200008f0
 80112b0:	00000412 	.word	0x00000412
 80112b4:	00000411 	.word	0x00000411
 80112b8:	00000481 	.word	0x00000481

080112bc <StopRetransmission>:

static bool StopRetransmission( void )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80112c0:	4b1e      	ldr	r3, [pc, #120]	; (801133c <StopRetransmission+0x80>)
 80112c2:	4a1f      	ldr	r2, [pc, #124]	; (8011340 <StopRetransmission+0x84>)
 80112c4:	5c9b      	ldrb	r3, [r3, r2]
 80112c6:	2202      	movs	r2, #2
 80112c8:	4013      	ands	r3, r2
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d009      	beq.n	80112e4 <StopRetransmission+0x28>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80112d0:	4b1a      	ldr	r3, [pc, #104]	; (801133c <StopRetransmission+0x80>)
 80112d2:	4a1c      	ldr	r2, [pc, #112]	; (8011344 <StopRetransmission+0x88>)
 80112d4:	5c9b      	ldrb	r3, [r3, r2]
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d013      	beq.n	8011302 <StopRetransmission+0x46>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
 80112da:	4b18      	ldr	r3, [pc, #96]	; (801133c <StopRetransmission+0x80>)
 80112dc:	4a19      	ldr	r2, [pc, #100]	; (8011344 <StopRetransmission+0x88>)
 80112de:	5c9b      	ldrb	r3, [r3, r2]
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 80112e0:	2b01      	cmp	r3, #1
 80112e2:	d00e      	beq.n	8011302 <StopRetransmission+0x46>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 80112e4:	4b15      	ldr	r3, [pc, #84]	; (801133c <StopRetransmission+0x80>)
 80112e6:	4a18      	ldr	r2, [pc, #96]	; (8011348 <StopRetransmission+0x8c>)
 80112e8:	589b      	ldr	r3, [r3, r2]
 80112ea:	22f2      	movs	r2, #242	; 0xf2
 80112ec:	5c9b      	ldrb	r3, [r3, r2]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d007      	beq.n	8011302 <StopRetransmission+0x46>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 80112f2:	4b12      	ldr	r3, [pc, #72]	; (801133c <StopRetransmission+0x80>)
 80112f4:	4a14      	ldr	r2, [pc, #80]	; (8011348 <StopRetransmission+0x8c>)
 80112f6:	589b      	ldr	r3, [r3, r2]
 80112f8:	22f4      	movs	r2, #244	; 0xf4
 80112fa:	589a      	ldr	r2, [r3, r2]
 80112fc:	3201      	adds	r2, #1
 80112fe:	21f4      	movs	r1, #244	; 0xf4
 8011300:	505a      	str	r2, [r3, r1]
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8011302:	4a0e      	ldr	r2, [pc, #56]	; (801133c <StopRetransmission+0x80>)
 8011304:	2382      	movs	r3, #130	; 0x82
 8011306:	00db      	lsls	r3, r3, #3
 8011308:	2100      	movs	r1, #0
 801130a:	54d1      	strb	r1, [r2, r3]
    MacCtx.NodeAckRequested = false;
 801130c:	4b0b      	ldr	r3, [pc, #44]	; (801133c <StopRetransmission+0x80>)
 801130e:	4a0f      	ldr	r2, [pc, #60]	; (801134c <StopRetransmission+0x90>)
 8011310:	2100      	movs	r1, #0
 8011312:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetry = false;
 8011314:	4b09      	ldr	r3, [pc, #36]	; (801133c <StopRetransmission+0x80>)
 8011316:	4a0e      	ldr	r2, [pc, #56]	; (8011350 <StopRetransmission+0x94>)
 8011318:	2100      	movs	r1, #0
 801131a:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801131c:	4a07      	ldr	r2, [pc, #28]	; (801133c <StopRetransmission+0x80>)
 801131e:	23d0      	movs	r3, #208	; 0xd0
 8011320:	009b      	lsls	r3, r3, #2
 8011322:	58d3      	ldr	r3, [r2, r3]
 8011324:	2202      	movs	r2, #2
 8011326:	4393      	bics	r3, r2
 8011328:	0019      	movs	r1, r3
 801132a:	4a04      	ldr	r2, [pc, #16]	; (801133c <StopRetransmission+0x80>)
 801132c:	23d0      	movs	r3, #208	; 0xd0
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	50d1      	str	r1, [r2, r3]

    return true;
 8011332:	2301      	movs	r3, #1
}
 8011334:	0018      	movs	r0, r3
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}
 801133a:	46c0      	nop			; (mov r8, r8)
 801133c:	200008f0 	.word	0x200008f0
 8011340:	00000481 	.word	0x00000481
 8011344:	0000042d 	.word	0x0000042d
 8011348:	00000484 	.word	0x00000484
 801134c:	00000414 	.word	0x00000414
 8011350:	00000413 	.word	0x00000413

08011354 <AckTimeoutRetriesProcess>:

static void AckTimeoutRetriesProcess( void )
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 801135a:	4b21      	ldr	r3, [pc, #132]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 801135c:	4a21      	ldr	r2, [pc, #132]	; (80113e4 <AckTimeoutRetriesProcess+0x90>)
 801135e:	5c9a      	ldrb	r2, [r3, r2]
 8011360:	4b1f      	ldr	r3, [pc, #124]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 8011362:	4921      	ldr	r1, [pc, #132]	; (80113e8 <AckTimeoutRetriesProcess+0x94>)
 8011364:	5c5b      	ldrb	r3, [r3, r1]
 8011366:	429a      	cmp	r2, r3
 8011368:	d236      	bcs.n	80113d8 <AckTimeoutRetriesProcess+0x84>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 801136a:	4b1d      	ldr	r3, [pc, #116]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 801136c:	4a1d      	ldr	r2, [pc, #116]	; (80113e4 <AckTimeoutRetriesProcess+0x90>)
 801136e:	5c9b      	ldrb	r3, [r3, r2]
 8011370:	3301      	adds	r3, #1
 8011372:	b2d9      	uxtb	r1, r3
 8011374:	4b1a      	ldr	r3, [pc, #104]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 8011376:	4a1b      	ldr	r2, [pc, #108]	; (80113e4 <AckTimeoutRetriesProcess+0x90>)
 8011378:	5499      	strb	r1, [r3, r2]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 801137a:	4b19      	ldr	r3, [pc, #100]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 801137c:	4a19      	ldr	r2, [pc, #100]	; (80113e4 <AckTimeoutRetriesProcess+0x90>)
 801137e:	5c9b      	ldrb	r3, [r3, r2]
 8011380:	2201      	movs	r2, #1
 8011382:	4013      	ands	r3, r2
 8011384:	b2db      	uxtb	r3, r3
 8011386:	2b00      	cmp	r3, #0
 8011388:	d026      	beq.n	80113d8 <AckTimeoutRetriesProcess+0x84>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801138a:	1d3b      	adds	r3, r7, #4
 801138c:	2222      	movs	r2, #34	; 0x22
 801138e:	701a      	strb	r2, [r3, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011390:	4b13      	ldr	r3, [pc, #76]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 8011392:	4a16      	ldr	r2, [pc, #88]	; (80113ec <AckTimeoutRetriesProcess+0x98>)
 8011394:	589a      	ldr	r2, [r3, r2]
 8011396:	2396      	movs	r3, #150	; 0x96
 8011398:	005b      	lsls	r3, r3, #1
 801139a:	5cd2      	ldrb	r2, [r2, r3]
 801139c:	1d3b      	adds	r3, r7, #4
 801139e:	709a      	strb	r2, [r3, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80113a0:	4b0f      	ldr	r3, [pc, #60]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 80113a2:	4a12      	ldr	r2, [pc, #72]	; (80113ec <AckTimeoutRetriesProcess+0x98>)
 80113a4:	589b      	ldr	r3, [r3, r2]
 80113a6:	22f9      	movs	r2, #249	; 0xf9
 80113a8:	569a      	ldrsb	r2, [r3, r2]
 80113aa:	1d3b      	adds	r3, r7, #4
 80113ac:	705a      	strb	r2, [r3, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80113ae:	4b0c      	ldr	r3, [pc, #48]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 80113b0:	4a0e      	ldr	r2, [pc, #56]	; (80113ec <AckTimeoutRetriesProcess+0x98>)
 80113b2:	589b      	ldr	r3, [r3, r2]
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	1d3a      	adds	r2, r7, #4
 80113b8:	0011      	movs	r1, r2
 80113ba:	0018      	movs	r0, r3
 80113bc:	f004 f9f8 	bl	80157b0 <RegionGetPhyParam>
 80113c0:	0003      	movs	r3, r0
 80113c2:	001a      	movs	r2, r3
 80113c4:	003b      	movs	r3, r7
 80113c6:	601a      	str	r2, [r3, #0]
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 80113c8:	003b      	movs	r3, r7
 80113ca:	6819      	ldr	r1, [r3, #0]
 80113cc:	4b04      	ldr	r3, [pc, #16]	; (80113e0 <AckTimeoutRetriesProcess+0x8c>)
 80113ce:	4a07      	ldr	r2, [pc, #28]	; (80113ec <AckTimeoutRetriesProcess+0x98>)
 80113d0:	589b      	ldr	r3, [r3, r2]
 80113d2:	b249      	sxtb	r1, r1
 80113d4:	22f9      	movs	r2, #249	; 0xf9
 80113d6:	5499      	strb	r1, [r3, r2]
        }
    }
}
 80113d8:	46c0      	nop			; (mov r8, r8)
 80113da:	46bd      	mov	sp, r7
 80113dc:	b002      	add	sp, #8
 80113de:	bd80      	pop	{r7, pc}
 80113e0:	200008f0 	.word	0x200008f0
 80113e4:	00000412 	.word	0x00000412
 80113e8:	00000411 	.word	0x00000411
 80113ec:	00000484 	.word	0x00000484

080113f0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 80113f6:	4a16      	ldr	r2, [pc, #88]	; (8011450 <AckTimeoutRetriesFinalize+0x60>)
 80113f8:	2388      	movs	r3, #136	; 0x88
 80113fa:	00db      	lsls	r3, r3, #3
 80113fc:	5cd3      	ldrb	r3, [r2, r3]
 80113fe:	2201      	movs	r2, #1
 8011400:	4053      	eors	r3, r2
 8011402:	b2db      	uxtb	r3, r3
 8011404:	2b00      	cmp	r3, #0
 8011406:	d018      	beq.n	801143a <AckTimeoutRetriesFinalize+0x4a>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8011408:	003b      	movs	r3, r7
 801140a:	2201      	movs	r2, #1
 801140c:	711a      	strb	r2, [r3, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 801140e:	4b11      	ldr	r3, [pc, #68]	; (8011454 <AckTimeoutRetriesFinalize+0x64>)
 8011410:	689a      	ldr	r2, [r3, #8]
 8011412:	003b      	movs	r3, r7
 8011414:	601a      	str	r2, [r3, #0]
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011416:	4b0e      	ldr	r3, [pc, #56]	; (8011450 <AckTimeoutRetriesFinalize+0x60>)
 8011418:	4a0f      	ldr	r2, [pc, #60]	; (8011458 <AckTimeoutRetriesFinalize+0x68>)
 801141a:	589b      	ldr	r3, [r3, r2]
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	003a      	movs	r2, r7
 8011420:	0011      	movs	r1, r2
 8011422:	0018      	movs	r0, r3
 8011424:	f004 fa00 	bl	8015828 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8011428:	4b09      	ldr	r3, [pc, #36]	; (8011450 <AckTimeoutRetriesFinalize+0x60>)
 801142a:	4a0c      	ldr	r2, [pc, #48]	; (801145c <AckTimeoutRetriesFinalize+0x6c>)
 801142c:	2100      	movs	r1, #0
 801142e:	5499      	strb	r1, [r3, r2]
        MacCtx.McpsConfirm.AckReceived = false;
 8011430:	4a07      	ldr	r2, [pc, #28]	; (8011450 <AckTimeoutRetriesFinalize+0x60>)
 8011432:	2388      	movs	r3, #136	; 0x88
 8011434:	00db      	lsls	r3, r3, #3
 8011436:	2100      	movs	r1, #0
 8011438:	54d1      	strb	r1, [r2, r3]
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 801143a:	4b05      	ldr	r3, [pc, #20]	; (8011450 <AckTimeoutRetriesFinalize+0x60>)
 801143c:	4a08      	ldr	r2, [pc, #32]	; (8011460 <AckTimeoutRetriesFinalize+0x70>)
 801143e:	5c99      	ldrb	r1, [r3, r2]
 8011440:	4b03      	ldr	r3, [pc, #12]	; (8011450 <AckTimeoutRetriesFinalize+0x60>)
 8011442:	4a08      	ldr	r2, [pc, #32]	; (8011464 <AckTimeoutRetriesFinalize+0x74>)
 8011444:	5499      	strb	r1, [r3, r2]
}
 8011446:	46c0      	nop			; (mov r8, r8)
 8011448:	46bd      	mov	sp, r7
 801144a:	b002      	add	sp, #8
 801144c:	bd80      	pop	{r7, pc}
 801144e:	46c0      	nop			; (mov r8, r8)
 8011450:	200008f0 	.word	0x200008f0
 8011454:	20001658 	.word	0x20001658
 8011458:	00000484 	.word	0x00000484
 801145c:	00000414 	.word	0x00000414
 8011460:	00000412 	.word	0x00000412
 8011464:	00000441 	.word	0x00000441

08011468 <CallNvmCtxCallback>:

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	0002      	movs	r2, r0
 8011470:	1dfb      	adds	r3, r7, #7
 8011472:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8011474:	4a0c      	ldr	r2, [pc, #48]	; (80114a8 <CallNvmCtxCallback+0x40>)
 8011476:	23d2      	movs	r3, #210	; 0xd2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	58d3      	ldr	r3, [r2, r3]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d00f      	beq.n	80114a0 <CallNvmCtxCallback+0x38>
 8011480:	4a09      	ldr	r2, [pc, #36]	; (80114a8 <CallNvmCtxCallback+0x40>)
 8011482:	23d2      	movs	r3, #210	; 0xd2
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	58d3      	ldr	r3, [r2, r3]
 8011488:	689b      	ldr	r3, [r3, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d008      	beq.n	80114a0 <CallNvmCtxCallback+0x38>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 801148e:	4a06      	ldr	r2, [pc, #24]	; (80114a8 <CallNvmCtxCallback+0x40>)
 8011490:	23d2      	movs	r3, #210	; 0xd2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	58d3      	ldr	r3, [r2, r3]
 8011496:	689b      	ldr	r3, [r3, #8]
 8011498:	1dfa      	adds	r2, r7, #7
 801149a:	7812      	ldrb	r2, [r2, #0]
 801149c:	0010      	movs	r0, r2
 801149e:	4798      	blx	r3
    }
}
 80114a0:	46c0      	nop			; (mov r8, r8)
 80114a2:	46bd      	mov	sp, r7
 80114a4:	b002      	add	sp, #8
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	200008f0 	.word	0x200008f0

080114ac <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80114b0:	2000      	movs	r0, #0
 80114b2:	f7ff ffd9 	bl	8011468 <CallNvmCtxCallback>
}
 80114b6:	46c0      	nop			; (mov r8, r8)
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 80114c0:	2001      	movs	r0, #1
 80114c2:	f7ff ffd1 	bl	8011468 <CallNvmCtxCallback>
}
 80114c6:	46c0      	nop			; (mov r8, r8)
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 80114d0:	2002      	movs	r0, #2
 80114d2:	f7ff ffc9 	bl	8011468 <CallNvmCtxCallback>
}
 80114d6:	46c0      	nop			; (mov r8, r8)
 80114d8:	46bd      	mov	sp, r7
 80114da:	bd80      	pop	{r7, pc}

080114dc <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 80114e0:	2003      	movs	r0, #3
 80114e2:	f7ff ffc1 	bl	8011468 <CallNvmCtxCallback>
}
 80114e6:	46c0      	nop			; (mov r8, r8)
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 80114f0:	2004      	movs	r0, #4
 80114f2:	f7ff ffb9 	bl	8011468 <CallNvmCtxCallback>
}
 80114f6:	46c0      	nop			; (mov r8, r8)
 80114f8:	46bd      	mov	sp, r7
 80114fa:	bd80      	pop	{r7, pc}

080114fc <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8011500:	2005      	movs	r0, #5
 8011502:	f7ff ffb1 	bl	8011468 <CallNvmCtxCallback>
}
 8011506:	46c0      	nop			; (mov r8, r8)
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 801150c:	b580      	push	{r7, lr}
 801150e:	af00      	add	r7, sp, #0
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8011510:	2006      	movs	r0, #6
 8011512:	f7ff ffa9 	bl	8011468 <CallNvmCtxCallback>
}
 8011516:	46c0      	nop			; (mov r8, r8)
 8011518:	46bd      	mov	sp, r7
 801151a:	bd80      	pop	{r7, pc}

0801151c <IsRequestPending>:

static uint8_t IsRequestPending( void )
{
 801151c:	b580      	push	{r7, lr}
 801151e:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8011520:	4b0a      	ldr	r3, [pc, #40]	; (801154c <IsRequestPending+0x30>)
 8011522:	4a0b      	ldr	r2, [pc, #44]	; (8011550 <IsRequestPending+0x34>)
 8011524:	5c9b      	ldrb	r3, [r3, r2]
 8011526:	2204      	movs	r2, #4
 8011528:	4013      	ands	r3, r2
 801152a:	b2db      	uxtb	r3, r3
 801152c:	2b00      	cmp	r3, #0
 801152e:	d107      	bne.n	8011540 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8011530:	4b06      	ldr	r3, [pc, #24]	; (801154c <IsRequestPending+0x30>)
 8011532:	4a07      	ldr	r2, [pc, #28]	; (8011550 <IsRequestPending+0x34>)
 8011534:	5c9b      	ldrb	r3, [r3, r2]
 8011536:	2201      	movs	r2, #1
 8011538:	4013      	ands	r3, r2
 801153a:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 801153c:	2b00      	cmp	r3, #0
 801153e:	d001      	beq.n	8011544 <IsRequestPending+0x28>
    {
        return 1;
 8011540:	2301      	movs	r3, #1
 8011542:	e000      	b.n	8011546 <IsRequestPending+0x2a>
    }
    return 0;
 8011544:	2300      	movs	r3, #0
}
 8011546:	0018      	movs	r0, r3
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}
 801154c:	200008f0 	.word	0x200008f0
 8011550:	00000481 	.word	0x00000481

08011554 <LoRaMacInitialization>:


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8011554:	b5b0      	push	{r4, r5, r7, lr}
 8011556:	b094      	sub	sp, #80	; 0x50
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	1dfb      	adds	r3, r7, #7
 8011560:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d002      	beq.n	801156e <LoRaMacInitialization+0x1a>
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d101      	bne.n	8011572 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801156e:	2303      	movs	r3, #3
 8011570:	e360      	b.n	8011c34 <LoRaMacInitialization+0x6e0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00b      	beq.n	8011592 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801157e:	2b00      	cmp	r3, #0
 8011580:	d007      	beq.n	8011592 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8011586:	2b00      	cmp	r3, #0
 8011588:	d003      	beq.n	8011592 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801158e:	2b00      	cmp	r3, #0
 8011590:	d101      	bne.n	8011596 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011592:	2303      	movs	r3, #3
 8011594:	e34e      	b.n	8011c34 <LoRaMacInitialization+0x6e0>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8011596:	1dfb      	adds	r3, r7, #7
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	0018      	movs	r0, r3
 801159c:	f004 f8f7 	bl	801578e <RegionIsActive>
 80115a0:	0003      	movs	r3, r0
 80115a2:	001a      	movs	r2, r3
 80115a4:	2301      	movs	r3, #1
 80115a6:	4053      	eors	r3, r2
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d001      	beq.n	80115b2 <LoRaMacInitialization+0x5e>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80115ae:	2309      	movs	r3, #9
 80115b0:	e340      	b.n	8011c34 <LoRaMacInitialization+0x6e0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 80115b2:	4afd      	ldr	r2, [pc, #1012]	; (80119a8 <LoRaMacInitialization+0x454>)
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	0011      	movs	r1, r2
 80115b8:	0018      	movs	r0, r3
 80115ba:	f002 fa03 	bl	80139c4 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 80115be:	23ee      	movs	r3, #238	; 0xee
 80115c0:	005a      	lsls	r2, r3, #1
 80115c2:	4bfa      	ldr	r3, [pc, #1000]	; (80119ac <LoRaMacInitialization+0x458>)
 80115c4:	2100      	movs	r1, #0
 80115c6:	0018      	movs	r0, r3
 80115c8:	f008 f97e 	bl	80198c8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 80115cc:	2391      	movs	r3, #145	; 0x91
 80115ce:	00da      	lsls	r2, r3, #3
 80115d0:	4bf7      	ldr	r3, [pc, #988]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80115d2:	2100      	movs	r1, #0
 80115d4:	0018      	movs	r0, r3
 80115d6:	f008 f977 	bl	80198c8 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;
 80115da:	4bf5      	ldr	r3, [pc, #980]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80115dc:	49f5      	ldr	r1, [pc, #980]	; (80119b4 <LoRaMacInitialization+0x460>)
 80115de:	4af3      	ldr	r2, [pc, #972]	; (80119ac <LoRaMacInitialization+0x458>)
 80115e0:	505a      	str	r2, [r3, r1]

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 80115e2:	4bf3      	ldr	r3, [pc, #972]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80115e4:	4af4      	ldr	r2, [pc, #976]	; (80119b8 <LoRaMacInitialization+0x464>)
 80115e6:	2101      	movs	r1, #1
 80115e8:	5499      	strb	r1, [r3, r2]
    MacCtx.AckTimeoutRetries = 1;
 80115ea:	4bf1      	ldr	r3, [pc, #964]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80115ec:	4af3      	ldr	r2, [pc, #972]	; (80119bc <LoRaMacInitialization+0x468>)
 80115ee:	2101      	movs	r1, #1
 80115f0:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->Region = region;
 80115f2:	4bef      	ldr	r3, [pc, #956]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80115f4:	4aef      	ldr	r2, [pc, #956]	; (80119b4 <LoRaMacInitialization+0x460>)
 80115f6:	589b      	ldr	r3, [r3, r2]
 80115f8:	1dfa      	adds	r2, r7, #7
 80115fa:	7812      	ldrb	r2, [r2, #0]
 80115fc:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 80115fe:	4bec      	ldr	r3, [pc, #944]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011600:	4aec      	ldr	r2, [pc, #944]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011602:	589b      	ldr	r3, [r3, r2]
 8011604:	22f0      	movs	r2, #240	; 0xf0
 8011606:	2100      	movs	r1, #0
 8011608:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->RepeaterSupport = false;
 801160a:	4be9      	ldr	r3, [pc, #932]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801160c:	4ae9      	ldr	r2, [pc, #932]	; (80119b4 <LoRaMacInitialization+0x460>)
 801160e:	589a      	ldr	r2, [r3, r2]
 8011610:	2340      	movs	r3, #64	; 0x40
 8011612:	33ff      	adds	r3, #255	; 0xff
 8011614:	2100      	movs	r1, #0
 8011616:	54d1      	strb	r1, [r2, r3]

    Version_t lrWanVersion;
    lrWanVersion.Fields.Major    = 1;
 8011618:	211c      	movs	r1, #28
 801161a:	187b      	adds	r3, r7, r1
 801161c:	2201      	movs	r2, #1
 801161e:	70da      	strb	r2, [r3, #3]
    lrWanVersion.Fields.Minor    = 0;
 8011620:	187b      	adds	r3, r7, r1
 8011622:	2200      	movs	r2, #0
 8011624:	709a      	strb	r2, [r3, #2]
    lrWanVersion.Fields.Revision = 3;
 8011626:	187b      	adds	r3, r7, r1
 8011628:	2203      	movs	r2, #3
 801162a:	705a      	strb	r2, [r3, #1]
    lrWanVersion.Fields.Rfu      = 0;
 801162c:	187b      	adds	r3, r7, r1
 801162e:	2200      	movs	r2, #0
 8011630:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->Version = lrWanVersion;
 8011632:	4bdf      	ldr	r3, [pc, #892]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011634:	4adf      	ldr	r2, [pc, #892]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011636:	589a      	ldr	r2, [r3, r2]
 8011638:	23e8      	movs	r3, #232	; 0xe8
 801163a:	005b      	lsls	r3, r3, #1
 801163c:	69f9      	ldr	r1, [r7, #28]
 801163e:	50d1      	str	r1, [r2, r3]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8011640:	254c      	movs	r5, #76	; 0x4c
 8011642:	197b      	adds	r3, r7, r5
 8011644:	220f      	movs	r2, #15
 8011646:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011648:	4bd9      	ldr	r3, [pc, #868]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801164a:	4ada      	ldr	r2, [pc, #872]	; (80119b4 <LoRaMacInitialization+0x460>)
 801164c:	589b      	ldr	r3, [r3, r2]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	197a      	adds	r2, r7, r5
 8011652:	0011      	movs	r1, r2
 8011654:	0018      	movs	r0, r3
 8011656:	f004 f8ab 	bl	80157b0 <RegionGetPhyParam>
 801165a:	0003      	movs	r3, r0
 801165c:	001a      	movs	r2, r3
 801165e:	2448      	movs	r4, #72	; 0x48
 8011660:	193b      	adds	r3, r7, r4
 8011662:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 8011664:	193b      	adds	r3, r7, r4
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	4ad1      	ldr	r2, [pc, #836]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801166a:	49d2      	ldr	r1, [pc, #840]	; (80119b4 <LoRaMacInitialization+0x460>)
 801166c:	5852      	ldr	r2, [r2, r1]
 801166e:	1e59      	subs	r1, r3, #1
 8011670:	418b      	sbcs	r3, r1
 8011672:	b2d9      	uxtb	r1, r3
 8011674:	233e      	movs	r3, #62	; 0x3e
 8011676:	33ff      	adds	r3, #255	; 0xff
 8011678:	54d1      	strb	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801167a:	197b      	adds	r3, r7, r5
 801167c:	220a      	movs	r2, #10
 801167e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011680:	4bcb      	ldr	r3, [pc, #812]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011682:	4acc      	ldr	r2, [pc, #816]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011684:	589b      	ldr	r3, [r3, r2]
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	197a      	adds	r2, r7, r5
 801168a:	0011      	movs	r1, r2
 801168c:	0018      	movs	r0, r3
 801168e:	f004 f88f 	bl	80157b0 <RegionGetPhyParam>
 8011692:	0003      	movs	r3, r0
 8011694:	001a      	movs	r2, r3
 8011696:	193b      	adds	r3, r7, r4
 8011698:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 801169a:	193b      	adds	r3, r7, r4
 801169c:	6819      	ldr	r1, [r3, #0]
 801169e:	4bc4      	ldr	r3, [pc, #784]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80116a0:	4ac4      	ldr	r2, [pc, #784]	; (80119b4 <LoRaMacInitialization+0x460>)
 80116a2:	589b      	ldr	r3, [r3, r2]
 80116a4:	b24a      	sxtb	r2, r1
 80116a6:	711a      	strb	r2, [r3, #4]

    getPhy.Attribute = PHY_DEF_TX_DR;
 80116a8:	197b      	adds	r3, r7, r5
 80116aa:	2206      	movs	r2, #6
 80116ac:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80116ae:	4bc0      	ldr	r3, [pc, #768]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80116b0:	4ac0      	ldr	r2, [pc, #768]	; (80119b4 <LoRaMacInitialization+0x460>)
 80116b2:	589b      	ldr	r3, [r3, r2]
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	197a      	adds	r2, r7, r5
 80116b8:	0011      	movs	r1, r2
 80116ba:	0018      	movs	r0, r3
 80116bc:	f004 f878 	bl	80157b0 <RegionGetPhyParam>
 80116c0:	0003      	movs	r3, r0
 80116c2:	001a      	movs	r2, r3
 80116c4:	193b      	adds	r3, r7, r4
 80116c6:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 80116c8:	193b      	adds	r3, r7, r4
 80116ca:	6819      	ldr	r1, [r3, #0]
 80116cc:	4bb8      	ldr	r3, [pc, #736]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80116ce:	4ab9      	ldr	r2, [pc, #740]	; (80119b4 <LoRaMacInitialization+0x460>)
 80116d0:	589b      	ldr	r3, [r3, r2]
 80116d2:	b24a      	sxtb	r2, r1
 80116d4:	715a      	strb	r2, [r3, #5]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80116d6:	197b      	adds	r3, r7, r5
 80116d8:	2210      	movs	r2, #16
 80116da:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80116dc:	4bb4      	ldr	r3, [pc, #720]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80116de:	4ab5      	ldr	r2, [pc, #724]	; (80119b4 <LoRaMacInitialization+0x460>)
 80116e0:	589b      	ldr	r3, [r3, r2]
 80116e2:	781b      	ldrb	r3, [r3, #0]
 80116e4:	197a      	adds	r2, r7, r5
 80116e6:	0011      	movs	r1, r2
 80116e8:	0018      	movs	r0, r3
 80116ea:	f004 f861 	bl	80157b0 <RegionGetPhyParam>
 80116ee:	0003      	movs	r3, r0
 80116f0:	001a      	movs	r2, r3
 80116f2:	193b      	adds	r3, r7, r4
 80116f4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80116f6:	4bae      	ldr	r3, [pc, #696]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80116f8:	4aae      	ldr	r2, [pc, #696]	; (80119b4 <LoRaMacInitialization+0x460>)
 80116fa:	589b      	ldr	r3, [r3, r2]
 80116fc:	193a      	adds	r2, r7, r4
 80116fe:	6812      	ldr	r2, [r2, #0]
 8011700:	611a      	str	r2, [r3, #16]

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8011702:	197b      	adds	r3, r7, r5
 8011704:	2211      	movs	r2, #17
 8011706:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011708:	4ba9      	ldr	r3, [pc, #676]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801170a:	4aaa      	ldr	r2, [pc, #680]	; (80119b4 <LoRaMacInitialization+0x460>)
 801170c:	589b      	ldr	r3, [r3, r2]
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	197a      	adds	r2, r7, r5
 8011712:	0011      	movs	r1, r2
 8011714:	0018      	movs	r0, r3
 8011716:	f004 f84b 	bl	80157b0 <RegionGetPhyParam>
 801171a:	0003      	movs	r3, r0
 801171c:	001a      	movs	r2, r3
 801171e:	193b      	adds	r3, r7, r4
 8011720:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8011722:	4ba3      	ldr	r3, [pc, #652]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011724:	4aa3      	ldr	r2, [pc, #652]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011726:	589b      	ldr	r3, [r3, r2]
 8011728:	193a      	adds	r2, r7, r4
 801172a:	6812      	ldr	r2, [r2, #0]
 801172c:	615a      	str	r2, [r3, #20]

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801172e:	197b      	adds	r3, r7, r5
 8011730:	2212      	movs	r2, #18
 8011732:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011734:	4b9e      	ldr	r3, [pc, #632]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011736:	4a9f      	ldr	r2, [pc, #636]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011738:	589b      	ldr	r3, [r3, r2]
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	197a      	adds	r2, r7, r5
 801173e:	0011      	movs	r1, r2
 8011740:	0018      	movs	r0, r3
 8011742:	f004 f835 	bl	80157b0 <RegionGetPhyParam>
 8011746:	0003      	movs	r3, r0
 8011748:	001a      	movs	r2, r3
 801174a:	193b      	adds	r3, r7, r4
 801174c:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801174e:	4b98      	ldr	r3, [pc, #608]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011750:	4a98      	ldr	r2, [pc, #608]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011752:	589b      	ldr	r3, [r3, r2]
 8011754:	193a      	adds	r2, r7, r4
 8011756:	6812      	ldr	r2, [r2, #0]
 8011758:	619a      	str	r2, [r3, #24]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801175a:	197b      	adds	r3, r7, r5
 801175c:	2213      	movs	r2, #19
 801175e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011760:	4b93      	ldr	r3, [pc, #588]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011762:	4a94      	ldr	r2, [pc, #592]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011764:	589b      	ldr	r3, [r3, r2]
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	197a      	adds	r2, r7, r5
 801176a:	0011      	movs	r1, r2
 801176c:	0018      	movs	r0, r3
 801176e:	f004 f81f 	bl	80157b0 <RegionGetPhyParam>
 8011772:	0003      	movs	r3, r0
 8011774:	001a      	movs	r2, r3
 8011776:	193b      	adds	r3, r7, r4
 8011778:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801177a:	4b8d      	ldr	r3, [pc, #564]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801177c:	4a8d      	ldr	r2, [pc, #564]	; (80119b4 <LoRaMacInitialization+0x460>)
 801177e:	589b      	ldr	r3, [r3, r2]
 8011780:	193a      	adds	r2, r7, r4
 8011782:	6812      	ldr	r2, [r2, #0]
 8011784:	61da      	str	r2, [r3, #28]

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8011786:	197b      	adds	r3, r7, r5
 8011788:	2214      	movs	r2, #20
 801178a:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 801178c:	4b88      	ldr	r3, [pc, #544]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801178e:	4a89      	ldr	r2, [pc, #548]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011790:	589b      	ldr	r3, [r3, r2]
 8011792:	781b      	ldrb	r3, [r3, #0]
 8011794:	197a      	adds	r2, r7, r5
 8011796:	0011      	movs	r1, r2
 8011798:	0018      	movs	r0, r3
 801179a:	f004 f809 	bl	80157b0 <RegionGetPhyParam>
 801179e:	0003      	movs	r3, r0
 80117a0:	001a      	movs	r2, r3
 80117a2:	193b      	adds	r3, r7, r4
 80117a4:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80117a6:	4b82      	ldr	r3, [pc, #520]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80117a8:	4a82      	ldr	r2, [pc, #520]	; (80119b4 <LoRaMacInitialization+0x460>)
 80117aa:	589b      	ldr	r3, [r3, r2]
 80117ac:	193a      	adds	r2, r7, r4
 80117ae:	6812      	ldr	r2, [r2, #0]
 80117b0:	621a      	str	r2, [r3, #32]

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80117b2:	197b      	adds	r3, r7, r5
 80117b4:	2217      	movs	r2, #23
 80117b6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80117b8:	4b7d      	ldr	r3, [pc, #500]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80117ba:	4a7e      	ldr	r2, [pc, #504]	; (80119b4 <LoRaMacInitialization+0x460>)
 80117bc:	589b      	ldr	r3, [r3, r2]
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	197a      	adds	r2, r7, r5
 80117c2:	0011      	movs	r1, r2
 80117c4:	0018      	movs	r0, r3
 80117c6:	f003 fff3 	bl	80157b0 <RegionGetPhyParam>
 80117ca:	0003      	movs	r3, r0
 80117cc:	001a      	movs	r2, r3
 80117ce:	193b      	adds	r3, r7, r4
 80117d0:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80117d2:	193b      	adds	r3, r7, r4
 80117d4:	6819      	ldr	r1, [r3, #0]
 80117d6:	4b76      	ldr	r3, [pc, #472]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80117d8:	4a76      	ldr	r2, [pc, #472]	; (80119b4 <LoRaMacInitialization+0x460>)
 80117da:	589b      	ldr	r3, [r3, r2]
 80117dc:	b2c9      	uxtb	r1, r1
 80117de:	2225      	movs	r2, #37	; 0x25
 80117e0:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80117e2:	197b      	adds	r3, r7, r5
 80117e4:	2218      	movs	r2, #24
 80117e6:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80117e8:	4b71      	ldr	r3, [pc, #452]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80117ea:	4a72      	ldr	r2, [pc, #456]	; (80119b4 <LoRaMacInitialization+0x460>)
 80117ec:	589b      	ldr	r3, [r3, r2]
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	197a      	adds	r2, r7, r5
 80117f2:	0011      	movs	r1, r2
 80117f4:	0018      	movs	r0, r3
 80117f6:	f003 ffdb 	bl	80157b0 <RegionGetPhyParam>
 80117fa:	0003      	movs	r3, r0
 80117fc:	001a      	movs	r2, r3
 80117fe:	193b      	adds	r3, r7, r4
 8011800:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8011802:	4b6b      	ldr	r3, [pc, #428]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011804:	4a6b      	ldr	r2, [pc, #428]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011806:	589b      	ldr	r3, [r3, r2]
 8011808:	193a      	adds	r2, r7, r4
 801180a:	6812      	ldr	r2, [r2, #0]
 801180c:	629a      	str	r2, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 801180e:	4b68      	ldr	r3, [pc, #416]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011810:	4a68      	ldr	r2, [pc, #416]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011812:	589b      	ldr	r3, [r3, r2]
 8011814:	193a      	adds	r2, r7, r4
 8011816:	6812      	ldr	r2, [r2, #0]
 8011818:	631a      	str	r2, [r3, #48]	; 0x30

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801181a:	197b      	adds	r3, r7, r5
 801181c:	2219      	movs	r2, #25
 801181e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011820:	4b63      	ldr	r3, [pc, #396]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011822:	4a64      	ldr	r2, [pc, #400]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011824:	589b      	ldr	r3, [r3, r2]
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	197a      	adds	r2, r7, r5
 801182a:	0011      	movs	r1, r2
 801182c:	0018      	movs	r0, r3
 801182e:	f003 ffbf 	bl	80157b0 <RegionGetPhyParam>
 8011832:	0003      	movs	r3, r0
 8011834:	001a      	movs	r2, r3
 8011836:	193b      	adds	r3, r7, r4
 8011838:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 801183a:	193b      	adds	r3, r7, r4
 801183c:	6819      	ldr	r1, [r3, #0]
 801183e:	4b5c      	ldr	r3, [pc, #368]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011840:	4a5c      	ldr	r2, [pc, #368]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011842:	589b      	ldr	r3, [r3, r2]
 8011844:	b2c9      	uxtb	r1, r1
 8011846:	222c      	movs	r2, #44	; 0x2c
 8011848:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 801184a:	193b      	adds	r3, r7, r4
 801184c:	6819      	ldr	r1, [r3, #0]
 801184e:	4b58      	ldr	r3, [pc, #352]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011850:	4a58      	ldr	r2, [pc, #352]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011852:	589b      	ldr	r3, [r3, r2]
 8011854:	b2c9      	uxtb	r1, r1
 8011856:	2234      	movs	r2, #52	; 0x34
 8011858:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801185a:	197b      	adds	r3, r7, r5
 801185c:	221e      	movs	r2, #30
 801185e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011860:	4b53      	ldr	r3, [pc, #332]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011862:	4a54      	ldr	r2, [pc, #336]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011864:	589b      	ldr	r3, [r3, r2]
 8011866:	781b      	ldrb	r3, [r3, #0]
 8011868:	197a      	adds	r2, r7, r5
 801186a:	0011      	movs	r1, r2
 801186c:	0018      	movs	r0, r3
 801186e:	f003 ff9f 	bl	80157b0 <RegionGetPhyParam>
 8011872:	0003      	movs	r3, r0
 8011874:	001a      	movs	r2, r3
 8011876:	193b      	adds	r3, r7, r4
 8011878:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 801187a:	193b      	adds	r3, r7, r4
 801187c:	6819      	ldr	r1, [r3, #0]
 801187e:	4b4c      	ldr	r3, [pc, #304]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011880:	4a4c      	ldr	r2, [pc, #304]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011882:	589b      	ldr	r3, [r3, r2]
 8011884:	b2c9      	uxtb	r1, r1
 8011886:	2238      	movs	r2, #56	; 0x38
 8011888:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 801188a:	197b      	adds	r3, r7, r5
 801188c:	221f      	movs	r2, #31
 801188e:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011890:	4b47      	ldr	r3, [pc, #284]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011892:	4a48      	ldr	r2, [pc, #288]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011894:	589b      	ldr	r3, [r3, r2]
 8011896:	781b      	ldrb	r3, [r3, #0]
 8011898:	197a      	adds	r2, r7, r5
 801189a:	0011      	movs	r1, r2
 801189c:	0018      	movs	r0, r3
 801189e:	f003 ff87 	bl	80157b0 <RegionGetPhyParam>
 80118a2:	0003      	movs	r3, r0
 80118a4:	001a      	movs	r2, r3
 80118a6:	193b      	adds	r3, r7, r4
 80118a8:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 80118aa:	193b      	adds	r3, r7, r4
 80118ac:	6819      	ldr	r1, [r3, #0]
 80118ae:	4b40      	ldr	r3, [pc, #256]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80118b0:	4a40      	ldr	r2, [pc, #256]	; (80119b4 <LoRaMacInitialization+0x460>)
 80118b2:	589b      	ldr	r3, [r3, r2]
 80118b4:	b2c9      	uxtb	r1, r1
 80118b6:	2239      	movs	r2, #57	; 0x39
 80118b8:	5499      	strb	r1, [r3, r2]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 80118ba:	197b      	adds	r3, r7, r5
 80118bc:	2220      	movs	r2, #32
 80118be:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80118c0:	4b3b      	ldr	r3, [pc, #236]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80118c2:	4a3c      	ldr	r2, [pc, #240]	; (80119b4 <LoRaMacInitialization+0x460>)
 80118c4:	589b      	ldr	r3, [r3, r2]
 80118c6:	781b      	ldrb	r3, [r3, #0]
 80118c8:	197a      	adds	r2, r7, r5
 80118ca:	0011      	movs	r1, r2
 80118cc:	0018      	movs	r0, r3
 80118ce:	f003 ff6f 	bl	80157b0 <RegionGetPhyParam>
 80118d2:	0003      	movs	r3, r0
 80118d4:	001a      	movs	r2, r3
 80118d6:	193b      	adds	r3, r7, r4
 80118d8:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 80118da:	4b35      	ldr	r3, [pc, #212]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80118dc:	4a35      	ldr	r2, [pc, #212]	; (80119b4 <LoRaMacInitialization+0x460>)
 80118de:	589b      	ldr	r3, [r3, r2]
 80118e0:	193a      	adds	r2, r7, r4
 80118e2:	6812      	ldr	r2, [r2, #0]
 80118e4:	63da      	str	r2, [r3, #60]	; 0x3c

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80118e6:	197b      	adds	r3, r7, r5
 80118e8:	2221      	movs	r2, #33	; 0x21
 80118ea:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 80118ec:	4b30      	ldr	r3, [pc, #192]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80118ee:	4a31      	ldr	r2, [pc, #196]	; (80119b4 <LoRaMacInitialization+0x460>)
 80118f0:	589b      	ldr	r3, [r3, r2]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	197a      	adds	r2, r7, r5
 80118f6:	0011      	movs	r1, r2
 80118f8:	0018      	movs	r0, r3
 80118fa:	f003 ff59 	bl	80157b0 <RegionGetPhyParam>
 80118fe:	0003      	movs	r3, r0
 8011900:	001a      	movs	r2, r3
 8011902:	193b      	adds	r3, r7, r4
 8011904:	601a      	str	r2, [r3, #0]
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 8011906:	4b2a      	ldr	r3, [pc, #168]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011908:	4a2a      	ldr	r2, [pc, #168]	; (80119b4 <LoRaMacInitialization+0x460>)
 801190a:	589b      	ldr	r3, [r3, r2]
 801190c:	193a      	adds	r2, r7, r4
 801190e:	6812      	ldr	r2, [r2, #0]
 8011910:	641a      	str	r2, [r3, #64]	; 0x40

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8011912:	197b      	adds	r3, r7, r5
 8011914:	220b      	movs	r2, #11
 8011916:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011918:	4b25      	ldr	r3, [pc, #148]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801191a:	4a26      	ldr	r2, [pc, #152]	; (80119b4 <LoRaMacInitialization+0x460>)
 801191c:	589b      	ldr	r3, [r3, r2]
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	197a      	adds	r2, r7, r5
 8011922:	0011      	movs	r1, r2
 8011924:	0018      	movs	r0, r3
 8011926:	f003 ff43 	bl	80157b0 <RegionGetPhyParam>
 801192a:	0003      	movs	r3, r0
 801192c:	001a      	movs	r2, r3
 801192e:	193b      	adds	r3, r7, r4
 8011930:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckLimit = phyParam.Value;
 8011932:	193b      	adds	r3, r7, r4
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	b299      	uxth	r1, r3
 8011938:	4a1d      	ldr	r2, [pc, #116]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801193a:	23fd      	movs	r3, #253	; 0xfd
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	52d1      	strh	r1, [r2, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011940:	197b      	adds	r3, r7, r5
 8011942:	220c      	movs	r2, #12
 8011944:	701a      	strb	r2, [r3, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011946:	4b1a      	ldr	r3, [pc, #104]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011948:	4a1a      	ldr	r2, [pc, #104]	; (80119b4 <LoRaMacInitialization+0x460>)
 801194a:	589b      	ldr	r3, [r3, r2]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	197a      	adds	r2, r7, r5
 8011950:	0011      	movs	r1, r2
 8011952:	0018      	movs	r0, r3
 8011954:	f003 ff2c 	bl	80157b0 <RegionGetPhyParam>
 8011958:	0003      	movs	r3, r0
 801195a:	001a      	movs	r2, r3
 801195c:	193b      	adds	r3, r7, r4
 801195e:	601a      	str	r2, [r3, #0]
    MacCtx.AdrAckDelay = phyParam.Value;
 8011960:	193b      	adds	r3, r7, r4
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	b299      	uxth	r1, r3
 8011966:	4b12      	ldr	r3, [pc, #72]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011968:	4a15      	ldr	r2, [pc, #84]	; (80119c0 <LoRaMacInitialization+0x46c>)
 801196a:	5299      	strh	r1, [r3, r2]

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 801196c:	4b10      	ldr	r3, [pc, #64]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801196e:	4a11      	ldr	r2, [pc, #68]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011970:	589b      	ldr	r3, [r3, r2]
 8011972:	2224      	movs	r2, #36	; 0x24
 8011974:	2101      	movs	r1, #1
 8011976:	5499      	strb	r1, [r3, r2]
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 20;
 8011978:	4b0d      	ldr	r3, [pc, #52]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801197a:	4a0e      	ldr	r2, [pc, #56]	; (80119b4 <LoRaMacInitialization+0x460>)
 801197c:	589b      	ldr	r3, [r3, r2]
 801197e:	2214      	movs	r2, #20
 8011980:	609a      	str	r2, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 8011982:	4b0b      	ldr	r3, [pc, #44]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011984:	4a0b      	ldr	r2, [pc, #44]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011986:	589b      	ldr	r3, [r3, r2]
 8011988:	2206      	movs	r2, #6
 801198a:	731a      	strb	r2, [r3, #12]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 801198c:	4b08      	ldr	r3, [pc, #32]	; (80119b0 <LoRaMacInitialization+0x45c>)
 801198e:	4a09      	ldr	r2, [pc, #36]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011990:	589b      	ldr	r3, [r3, r2]
 8011992:	4a07      	ldr	r2, [pc, #28]	; (80119b0 <LoRaMacInitialization+0x45c>)
 8011994:	4907      	ldr	r1, [pc, #28]	; (80119b4 <LoRaMacInitialization+0x460>)
 8011996:	5852      	ldr	r2, [r2, r1]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	21fc      	movs	r1, #252	; 0xfc
 801199c:	5053      	str	r3, [r2, r1]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 801199e:	4b04      	ldr	r3, [pc, #16]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80119a0:	4a04      	ldr	r2, [pc, #16]	; (80119b4 <LoRaMacInitialization+0x460>)
 80119a2:	589b      	ldr	r3, [r3, r2]
 80119a4:	4a02      	ldr	r2, [pc, #8]	; (80119b0 <LoRaMacInitialization+0x45c>)
 80119a6:	e00d      	b.n	80119c4 <LoRaMacInitialization+0x470>
 80119a8:	0801150d 	.word	0x0801150d
 80119ac:	20000d78 	.word	0x20000d78
 80119b0:	200008f0 	.word	0x200008f0
 80119b4:	00000484 	.word	0x00000484
 80119b8:	00000412 	.word	0x00000412
 80119bc:	00000411 	.word	0x00000411
 80119c0:	000003f6 	.word	0x000003f6
 80119c4:	499d      	ldr	r1, [pc, #628]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 80119c6:	5852      	ldr	r2, [r2, r1]
 80119c8:	7b19      	ldrb	r1, [r3, #12]
 80119ca:	2380      	movs	r3, #128	; 0x80
 80119cc:	005b      	lsls	r3, r3, #1
 80119ce:	54d1      	strb	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 80119d0:	4b9b      	ldr	r3, [pc, #620]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 80119d2:	4a9a      	ldr	r2, [pc, #616]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 80119d4:	589b      	ldr	r3, [r3, r2]
 80119d6:	4a9a      	ldr	r2, [pc, #616]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 80119d8:	4998      	ldr	r1, [pc, #608]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 80119da:	5852      	ldr	r2, [r2, r1]
 80119dc:	6919      	ldr	r1, [r3, #16]
 80119de:	2382      	movs	r3, #130	; 0x82
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 80119e4:	4b96      	ldr	r3, [pc, #600]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 80119e6:	4a95      	ldr	r2, [pc, #596]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 80119e8:	589b      	ldr	r3, [r3, r2]
 80119ea:	4a95      	ldr	r2, [pc, #596]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 80119ec:	4993      	ldr	r1, [pc, #588]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 80119ee:	5852      	ldr	r2, [r2, r1]
 80119f0:	6959      	ldr	r1, [r3, #20]
 80119f2:	2384      	movs	r3, #132	; 0x84
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 80119f8:	4b91      	ldr	r3, [pc, #580]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 80119fa:	4a90      	ldr	r2, [pc, #576]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 80119fc:	589b      	ldr	r3, [r3, r2]
 80119fe:	4a90      	ldr	r2, [pc, #576]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a00:	498e      	ldr	r1, [pc, #568]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a02:	5852      	ldr	r2, [r2, r1]
 8011a04:	6999      	ldr	r1, [r3, #24]
 8011a06:	2386      	movs	r3, #134	; 0x86
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 8011a0c:	4b8c      	ldr	r3, [pc, #560]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a0e:	4a8b      	ldr	r2, [pc, #556]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a10:	589b      	ldr	r3, [r3, r2]
 8011a12:	4a8b      	ldr	r2, [pc, #556]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a14:	4989      	ldr	r1, [pc, #548]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a16:	5852      	ldr	r2, [r2, r1]
 8011a18:	69d9      	ldr	r1, [r3, #28]
 8011a1a:	2388      	movs	r3, #136	; 0x88
 8011a1c:	005b      	lsls	r3, r3, #1
 8011a1e:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 8011a20:	4b87      	ldr	r3, [pc, #540]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a22:	4a86      	ldr	r2, [pc, #536]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a24:	589b      	ldr	r3, [r3, r2]
 8011a26:	4a86      	ldr	r2, [pc, #536]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a28:	4984      	ldr	r1, [pc, #528]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a2a:	5852      	ldr	r2, [r2, r1]
 8011a2c:	6a19      	ldr	r1, [r3, #32]
 8011a2e:	238a      	movs	r3, #138	; 0x8a
 8011a30:	005b      	lsls	r3, r3, #1
 8011a32:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 8011a34:	4b82      	ldr	r3, [pc, #520]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a36:	4a81      	ldr	r2, [pc, #516]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a38:	589b      	ldr	r3, [r3, r2]
 8011a3a:	4a81      	ldr	r2, [pc, #516]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a3c:	497f      	ldr	r1, [pc, #508]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a3e:	5852      	ldr	r2, [r2, r1]
 8011a40:	2124      	movs	r1, #36	; 0x24
 8011a42:	5c59      	ldrb	r1, [r3, r1]
 8011a44:	238c      	movs	r3, #140	; 0x8c
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	54d1      	strb	r1, [r2, r3]

    ResetMacParameters( );
 8011a4a:	f7fe fec9 	bl	80107e0 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 8011a4e:	4b7c      	ldr	r3, [pc, #496]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a50:	4a7a      	ldr	r2, [pc, #488]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a52:	589b      	ldr	r3, [r3, r2]
 8011a54:	22f1      	movs	r2, #241	; 0xf1
 8011a56:	2101      	movs	r1, #1
 8011a58:	5499      	strb	r1, [r3, r2]

    MacCtx.MacPrimitives = primitives;
 8011a5a:	4a79      	ldr	r2, [pc, #484]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a5c:	23d1      	movs	r3, #209	; 0xd1
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	68f9      	ldr	r1, [r7, #12]
 8011a62:	50d1      	str	r1, [r2, r3]
    MacCtx.MacCallbacks = callbacks;
 8011a64:	4a76      	ldr	r2, [pc, #472]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a66:	23d2      	movs	r3, #210	; 0xd2
 8011a68:	009b      	lsls	r3, r3, #2
 8011a6a:	68b9      	ldr	r1, [r7, #8]
 8011a6c:	50d1      	str	r1, [r2, r3]
    MacCtx.MacFlags.Value = 0;
 8011a6e:	4b74      	ldr	r3, [pc, #464]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a70:	4a74      	ldr	r2, [pc, #464]	; (8011c44 <LoRaMacInitialization+0x6f0>)
 8011a72:	2100      	movs	r1, #0
 8011a74:	5499      	strb	r1, [r3, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 8011a76:	4a72      	ldr	r2, [pc, #456]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a78:	23d0      	movs	r3, #208	; 0xd0
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	2101      	movs	r1, #1
 8011a7e:	50d1      	str	r1, [r2, r3]

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 8011a80:	4b6f      	ldr	r3, [pc, #444]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a82:	4a6e      	ldr	r2, [pc, #440]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a84:	589a      	ldr	r2, [r3, r2]
 8011a86:	23e2      	movs	r3, #226	; 0xe2
 8011a88:	005b      	lsls	r3, r3, #1
 8011a8a:	2100      	movs	r1, #0
 8011a8c:	50d1      	str	r1, [r2, r3]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 8011a8e:	4b6c      	ldr	r3, [pc, #432]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011a90:	4a6a      	ldr	r2, [pc, #424]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011a92:	589a      	ldr	r2, [r3, r2]
 8011a94:	23e4      	movs	r3, #228	; 0xe4
 8011a96:	005b      	lsls	r3, r3, #1
 8011a98:	2100      	movs	r1, #0
 8011a9a:	50d1      	str	r1, [r2, r3]

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011a9c:	4a6a      	ldr	r2, [pc, #424]	; (8011c48 <LoRaMacInitialization+0x6f4>)
 8011a9e:	4b6b      	ldr	r3, [pc, #428]	; (8011c4c <LoRaMacInitialization+0x6f8>)
 8011aa0:	0011      	movs	r1, r2
 8011aa2:	0018      	movs	r0, r3
 8011aa4:	f007 fb65 	bl	8019172 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011aa8:	4a69      	ldr	r2, [pc, #420]	; (8011c50 <LoRaMacInitialization+0x6fc>)
 8011aaa:	4b6a      	ldr	r3, [pc, #424]	; (8011c54 <LoRaMacInitialization+0x700>)
 8011aac:	0011      	movs	r1, r2
 8011aae:	0018      	movs	r0, r3
 8011ab0:	f007 fb5f 	bl	8019172 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011ab4:	4a68      	ldr	r2, [pc, #416]	; (8011c58 <LoRaMacInitialization+0x704>)
 8011ab6:	4b69      	ldr	r3, [pc, #420]	; (8011c5c <LoRaMacInitialization+0x708>)
 8011ab8:	0011      	movs	r1, r2
 8011aba:	0018      	movs	r0, r3
 8011abc:	f007 fb59 	bl	8019172 <TimerInit>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8011ac0:	4a67      	ldr	r2, [pc, #412]	; (8011c60 <LoRaMacInitialization+0x70c>)
 8011ac2:	4b68      	ldr	r3, [pc, #416]	; (8011c64 <LoRaMacInitialization+0x710>)
 8011ac4:	0011      	movs	r1, r2
 8011ac6:	0018      	movs	r0, r3
 8011ac8:	f007 fb53 	bl	8019172 <TimerInit>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = TimerGetCurrentTime( );
 8011acc:	4b5c      	ldr	r3, [pc, #368]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011ace:	4a5b      	ldr	r2, [pc, #364]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011ad0:	589c      	ldr	r4, [r3, r2]
 8011ad2:	f007 fce4 	bl	801949e <TimerGetCurrentTime>
 8011ad6:	0002      	movs	r2, r0
 8011ad8:	23e6      	movs	r3, #230	; 0xe6
 8011ada:	005b      	lsls	r3, r3, #1
 8011adc:	50e2      	str	r2, [r4, r3]

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011ade:	4a58      	ldr	r2, [pc, #352]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011ae0:	23d3      	movs	r3, #211	; 0xd3
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	4960      	ldr	r1, [pc, #384]	; (8011c68 <LoRaMacInitialization+0x714>)
 8011ae6:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 8011ae8:	4a55      	ldr	r2, [pc, #340]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011aea:	23d5      	movs	r3, #213	; 0xd5
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	495f      	ldr	r1, [pc, #380]	; (8011c6c <LoRaMacInitialization+0x718>)
 8011af0:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011af2:	4a53      	ldr	r2, [pc, #332]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011af4:	23d7      	movs	r3, #215	; 0xd7
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	495d      	ldr	r1, [pc, #372]	; (8011c70 <LoRaMacInitialization+0x71c>)
 8011afa:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8011afc:	4a50      	ldr	r2, [pc, #320]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011afe:	23d4      	movs	r3, #212	; 0xd4
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	495c      	ldr	r1, [pc, #368]	; (8011c74 <LoRaMacInitialization+0x720>)
 8011b04:	50d1      	str	r1, [r2, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011b06:	4a4e      	ldr	r2, [pc, #312]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011b08:	23d6      	movs	r3, #214	; 0xd6
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	495a      	ldr	r1, [pc, #360]	; (8011c78 <LoRaMacInitialization+0x724>)
 8011b0e:	50d1      	str	r1, [r2, r3]
    Radio.Init( &MacCtx.RadioEvents );
 8011b10:	4b5a      	ldr	r3, [pc, #360]	; (8011c7c <LoRaMacInitialization+0x728>)
 8011b12:	689b      	ldr	r3, [r3, #8]
 8011b14:	4a5a      	ldr	r2, [pc, #360]	; (8011c80 <LoRaMacInitialization+0x72c>)
 8011b16:	0010      	movs	r0, r2
 8011b18:	4798      	blx	r3

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_INIT;
 8011b1a:	2114      	movs	r1, #20
 8011b1c:	187b      	adds	r3, r7, r1
 8011b1e:	2200      	movs	r2, #0
 8011b20:	711a      	strb	r2, [r3, #4]
    params.NvmCtx = NULL;
 8011b22:	187b      	adds	r3, r7, r1
 8011b24:	2200      	movs	r2, #0
 8011b26:	601a      	str	r2, [r3, #0]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8011b28:	4b45      	ldr	r3, [pc, #276]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011b2a:	4a44      	ldr	r2, [pc, #272]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011b2c:	589b      	ldr	r3, [r3, r2]
 8011b2e:	781b      	ldrb	r3, [r3, #0]
 8011b30:	187a      	adds	r2, r7, r1
 8011b32:	0011      	movs	r1, r2
 8011b34:	0018      	movs	r0, r3
 8011b36:	f003 fe77 	bl	8015828 <RegionInitDefaults>

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 8011b3a:	4b52      	ldr	r3, [pc, #328]	; (8011c84 <LoRaMacInitialization+0x730>)
 8011b3c:	0018      	movs	r0, r3
 8011b3e:	f7fb fa39 	bl	800cfb4 <SecureElementInit>
 8011b42:	1e03      	subs	r3, r0, #0
 8011b44:	d001      	beq.n	8011b4a <LoRaMacInitialization+0x5f6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b46:	2311      	movs	r3, #17
 8011b48:	e074      	b.n	8011c34 <LoRaMacInitialization+0x6e0>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 8011b4a:	4b4f      	ldr	r3, [pc, #316]	; (8011c88 <LoRaMacInitialization+0x734>)
 8011b4c:	0018      	movs	r0, r3
 8011b4e:	f002 fcd7 	bl	8014500 <LoRaMacCryptoInit>
 8011b52:	1e03      	subs	r3, r0, #0
 8011b54:	d001      	beq.n	8011b5a <LoRaMacInitialization+0x606>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b56:	2311      	movs	r3, #17
 8011b58:	e06c      	b.n	8011c34 <LoRaMacInitialization+0x6e0>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 8011b5a:	4b4c      	ldr	r3, [pc, #304]	; (8011c8c <LoRaMacInitialization+0x738>)
 8011b5c:	0018      	movs	r0, r3
 8011b5e:	f001 fd55 	bl	801360c <LoRaMacCommandsInit>
 8011b62:	1e03      	subs	r3, r0, #0
 8011b64:	d001      	beq.n	8011b6a <LoRaMacInitialization+0x616>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011b66:	2313      	movs	r3, #19
 8011b68:	e064      	b.n	8011c34 <LoRaMacInitialization+0x6e0>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8011b6a:	4b35      	ldr	r3, [pc, #212]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011b6c:	4a33      	ldr	r2, [pc, #204]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011b6e:	589b      	ldr	r3, [r3, r2]
 8011b70:	3350      	adds	r3, #80	; 0x50
 8011b72:	0018      	movs	r0, r3
 8011b74:	f002 fdde 	bl	8014734 <LoRaMacCryptoSetMulticastReference>
 8011b78:	1e03      	subs	r3, r0, #0
 8011b7a:	d001      	beq.n	8011b80 <LoRaMacInitialization+0x62c>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8011b7c:	2311      	movs	r3, #17
 8011b7e:	e059      	b.n	8011c34 <LoRaMacInitialization+0x6e0>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8011b80:	4b3e      	ldr	r3, [pc, #248]	; (8011c7c <LoRaMacInitialization+0x728>)
 8011b82:	69db      	ldr	r3, [r3, #28]
 8011b84:	4798      	blx	r3
 8011b86:	0003      	movs	r3, r0
 8011b88:	0018      	movs	r0, r3
 8011b8a:	f007 fe3d 	bl	8019808 <srand1>

    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8011b8e:	4b3b      	ldr	r3, [pc, #236]	; (8011c7c <LoRaMacInitialization+0x728>)
 8011b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011b92:	4a2b      	ldr	r2, [pc, #172]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011b94:	4929      	ldr	r1, [pc, #164]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011b96:	5852      	ldr	r2, [r2, r1]
 8011b98:	21f1      	movs	r1, #241	; 0xf1
 8011b9a:	5c52      	ldrb	r2, [r2, r1]
 8011b9c:	0010      	movs	r0, r2
 8011b9e:	4798      	blx	r3
    Radio.Sleep( );
 8011ba0:	4b36      	ldr	r3, [pc, #216]	; (8011c7c <LoRaMacInitialization+0x728>)
 8011ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ba4:	4798      	blx	r3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8011ba6:	2140      	movs	r1, #64	; 0x40
 8011ba8:	187b      	adds	r3, r7, r1
 8011baa:	2200      	movs	r2, #0
 8011bac:	601a      	str	r2, [r3, #0]
    classBCallbacks.MacProcessNotify = NULL;
 8011bae:	187b      	adds	r3, r7, r1
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	605a      	str	r2, [r3, #4]
    if( callbacks != NULL )
 8011bb4:	68bb      	ldr	r3, [r7, #8]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d008      	beq.n	8011bcc <LoRaMacInitialization+0x678>
    {
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 8011bba:	68bb      	ldr	r3, [r7, #8]
 8011bbc:	685a      	ldr	r2, [r3, #4]
 8011bbe:	2140      	movs	r1, #64	; 0x40
 8011bc0:	187b      	adds	r3, r7, r1
 8011bc2:	601a      	str	r2, [r3, #0]
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 8011bc4:	68bb      	ldr	r3, [r7, #8]
 8011bc6:	68da      	ldr	r2, [r3, #12]
 8011bc8:	187b      	adds	r3, r7, r1
 8011bca:	605a      	str	r2, [r3, #4]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8011bcc:	2120      	movs	r1, #32
 8011bce:	187b      	adds	r3, r7, r1
 8011bd0:	4a2f      	ldr	r2, [pc, #188]	; (8011c90 <LoRaMacInitialization+0x73c>)
 8011bd2:	601a      	str	r2, [r3, #0]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8011bd4:	187b      	adds	r3, r7, r1
 8011bd6:	4a2f      	ldr	r2, [pc, #188]	; (8011c94 <LoRaMacInitialization+0x740>)
 8011bd8:	605a      	str	r2, [r3, #4]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8011bda:	187b      	adds	r3, r7, r1
 8011bdc:	4a2e      	ldr	r2, [pc, #184]	; (8011c98 <LoRaMacInitialization+0x744>)
 8011bde:	609a      	str	r2, [r3, #8]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8011be0:	187b      	adds	r3, r7, r1
 8011be2:	4a2e      	ldr	r2, [pc, #184]	; (8011c9c <LoRaMacInitialization+0x748>)
 8011be4:	60da      	str	r2, [r3, #12]
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 8011be6:	4b16      	ldr	r3, [pc, #88]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011be8:	4a14      	ldr	r2, [pc, #80]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011bea:	589b      	ldr	r3, [r3, r2]
 8011bec:	334c      	adds	r3, #76	; 0x4c
 8011bee:	001a      	movs	r2, r3
 8011bf0:	187b      	adds	r3, r7, r1
 8011bf2:	611a      	str	r2, [r3, #16]
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 8011bf4:	4b12      	ldr	r3, [pc, #72]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011bf6:	4a11      	ldr	r2, [pc, #68]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011bf8:	589b      	ldr	r3, [r3, r2]
 8011bfa:	001a      	movs	r2, r3
 8011bfc:	187b      	adds	r3, r7, r1
 8011bfe:	615a      	str	r2, [r3, #20]
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 8011c00:	4b0f      	ldr	r3, [pc, #60]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011c02:	4a0e      	ldr	r2, [pc, #56]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011c04:	589b      	ldr	r3, [r3, r2]
 8011c06:	33f8      	adds	r3, #248	; 0xf8
 8011c08:	001a      	movs	r2, r3
 8011c0a:	187b      	adds	r3, r7, r1
 8011c0c:	619a      	str	r2, [r3, #24]
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 8011c0e:	4b0c      	ldr	r3, [pc, #48]	; (8011c40 <LoRaMacInitialization+0x6ec>)
 8011c10:	4a0a      	ldr	r2, [pc, #40]	; (8011c3c <LoRaMacInitialization+0x6e8>)
 8011c12:	589b      	ldr	r3, [r3, r2]
 8011c14:	3350      	adds	r3, #80	; 0x50
 8011c16:	001a      	movs	r2, r3
 8011c18:	0008      	movs	r0, r1
 8011c1a:	187b      	adds	r3, r7, r1
 8011c1c:	61da      	str	r2, [r3, #28]

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 8011c1e:	4a20      	ldr	r2, [pc, #128]	; (8011ca0 <LoRaMacInitialization+0x74c>)
 8011c20:	2340      	movs	r3, #64	; 0x40
 8011c22:	18f9      	adds	r1, r7, r3
 8011c24:	183b      	adds	r3, r7, r0
 8011c26:	0018      	movs	r0, r3
 8011c28:	f001 fada 	bl	80131e0 <LoRaMacClassBInit>

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011c2c:	2001      	movs	r0, #1
 8011c2e:	f7fc fe6d 	bl	800e90c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011c32:	2300      	movs	r3, #0
}
 8011c34:	0018      	movs	r0, r3
 8011c36:	46bd      	mov	sp, r7
 8011c38:	b014      	add	sp, #80	; 0x50
 8011c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8011c3c:	00000484 	.word	0x00000484
 8011c40:	200008f0 	.word	0x200008f0
 8011c44:	00000481 	.word	0x00000481
 8011c48:	0800ed9d 	.word	0x0800ed9d
 8011c4c:	20000c58 	.word	0x20000c58
 8011c50:	0800ee29 	.word	0x0800ee29
 8011c54:	20000c70 	.word	0x20000c70
 8011c58:	0800eec1 	.word	0x0800eec1
 8011c5c:	20000c88 	.word	0x20000c88
 8011c60:	0800ef65 	.word	0x0800ef65
 8011c64:	20000ce8 	.word	0x20000ce8
 8011c68:	0800d7a9 	.word	0x0800d7a9
 8011c6c:	0800d845 	.word	0x0800d845
 8011c70:	0800d97d 	.word	0x0800d97d
 8011c74:	0800d909 	.word	0x0800d909
 8011c78:	0800d9c1 	.word	0x0800d9c1
 8011c7c:	0801acec 	.word	0x0801acec
 8011c80:	20000c3c 	.word	0x20000c3c
 8011c84:	080114dd 	.word	0x080114dd
 8011c88:	080114cd 	.word	0x080114cd
 8011c8c:	080114ed 	.word	0x080114ed
 8011c90:	20000d54 	.word	0x20000d54
 8011c94:	20000d0c 	.word	0x20000d0c
 8011c98:	20000d40 	.word	0x20000d40
 8011c9c:	20000d71 	.word	0x20000d71
 8011ca0:	080114fd 	.word	0x080114fd

08011ca4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011ca8:	4a04      	ldr	r2, [pc, #16]	; (8011cbc <LoRaMacStart+0x18>)
 8011caa:	23d0      	movs	r3, #208	; 0xd0
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	2100      	movs	r1, #0
 8011cb0:	50d1      	str	r1, [r2, r3]
    return LORAMAC_STATUS_OK;
 8011cb2:	2300      	movs	r3, #0
}
 8011cb4:	0018      	movs	r0, r3
 8011cb6:	46bd      	mov	sp, r7
 8011cb8:	bd80      	pop	{r7, pc}
 8011cba:	46c0      	nop			; (mov r8, r8)
 8011cbc:	200008f0 	.word	0x200008f0

08011cc0 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011cc0:	b590      	push	{r4, r7, lr}
 8011cc2:	b08b      	sub	sp, #44	; 0x2c
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	0002      	movs	r2, r0
 8011cc8:	6039      	str	r1, [r7, #0]
 8011cca:	1dfb      	adds	r3, r7, #7
 8011ccc:	701a      	strb	r2, [r3, #0]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011cce:	4b50      	ldr	r3, [pc, #320]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011cd0:	4a50      	ldr	r2, [pc, #320]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011cd2:	589b      	ldr	r3, [r3, r2]
 8011cd4:	22f4      	movs	r2, #244	; 0xf4
 8011cd6:	589b      	ldr	r3, [r3, r2]
 8011cd8:	613b      	str	r3, [r7, #16]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8011cda:	4b4d      	ldr	r3, [pc, #308]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011cdc:	4a4d      	ldr	r2, [pc, #308]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011cde:	589b      	ldr	r3, [r3, r2]
 8011ce0:	2205      	movs	r2, #5
 8011ce2:	569a      	ldrsb	r2, [r3, r2]
 8011ce4:	230f      	movs	r3, #15
 8011ce6:	18fb      	adds	r3, r7, r3
 8011ce8:	701a      	strb	r2, [r3, #0]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8011cea:	4b49      	ldr	r3, [pc, #292]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011cec:	4a49      	ldr	r2, [pc, #292]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011cee:	589b      	ldr	r3, [r3, r2]
 8011cf0:	2204      	movs	r2, #4
 8011cf2:	569a      	ldrsb	r2, [r3, r2]
 8011cf4:	230e      	movs	r3, #14
 8011cf6:	18fb      	adds	r3, r7, r3
 8011cf8:	701a      	strb	r2, [r3, #0]
    size_t macCmdsSize = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 8011cfe:	683b      	ldr	r3, [r7, #0]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d101      	bne.n	8011d08 <LoRaMacQueryTxPossible+0x48>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d04:	2303      	movs	r3, #3
 8011d06:	e07e      	b.n	8011e06 <LoRaMacQueryTxPossible+0x146>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 8011d08:	4b41      	ldr	r3, [pc, #260]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d0a:	4a42      	ldr	r2, [pc, #264]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011d0c:	5899      	ldr	r1, [r3, r2]
 8011d0e:	2014      	movs	r0, #20
 8011d10:	183b      	adds	r3, r7, r0
 8011d12:	22e8      	movs	r2, #232	; 0xe8
 8011d14:	0052      	lsls	r2, r2, #1
 8011d16:	588a      	ldr	r2, [r1, r2]
 8011d18:	601a      	str	r2, [r3, #0]
    adrNext.UpdateChanMask = false;
 8011d1a:	183b      	adds	r3, r7, r0
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	711a      	strb	r2, [r3, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 8011d20:	4b3b      	ldr	r3, [pc, #236]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d22:	4a3c      	ldr	r2, [pc, #240]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011d24:	589b      	ldr	r3, [r3, r2]
 8011d26:	22f2      	movs	r2, #242	; 0xf2
 8011d28:	5c9a      	ldrb	r2, [r3, r2]
 8011d2a:	183b      	adds	r3, r7, r0
 8011d2c:	715a      	strb	r2, [r3, #5]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 8011d2e:	4b38      	ldr	r3, [pc, #224]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d30:	4a38      	ldr	r2, [pc, #224]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011d32:	589b      	ldr	r3, [r3, r2]
 8011d34:	22f4      	movs	r2, #244	; 0xf4
 8011d36:	589a      	ldr	r2, [r3, r2]
 8011d38:	183b      	adds	r3, r7, r0
 8011d3a:	609a      	str	r2, [r3, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 8011d3c:	4a34      	ldr	r2, [pc, #208]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d3e:	23fd      	movs	r3, #253	; 0xfd
 8011d40:	009b      	lsls	r3, r3, #2
 8011d42:	5ad2      	ldrh	r2, [r2, r3]
 8011d44:	183b      	adds	r3, r7, r0
 8011d46:	819a      	strh	r2, [r3, #12]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011d48:	4b31      	ldr	r3, [pc, #196]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d4a:	4a33      	ldr	r2, [pc, #204]	; (8011e18 <LoRaMacQueryTxPossible+0x158>)
 8011d4c:	5a9a      	ldrh	r2, [r3, r2]
 8011d4e:	183b      	adds	r3, r7, r0
 8011d50:	81da      	strh	r2, [r3, #14]
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8011d52:	4b2f      	ldr	r3, [pc, #188]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d54:	4a2f      	ldr	r2, [pc, #188]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011d56:	589b      	ldr	r3, [r3, r2]
 8011d58:	22f9      	movs	r2, #249	; 0xf9
 8011d5a:	569a      	ldrsb	r2, [r3, r2]
 8011d5c:	183b      	adds	r3, r7, r0
 8011d5e:	741a      	strb	r2, [r3, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8011d60:	4b2b      	ldr	r3, [pc, #172]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d62:	4a2c      	ldr	r2, [pc, #176]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011d64:	589b      	ldr	r3, [r3, r2]
 8011d66:	22f8      	movs	r2, #248	; 0xf8
 8011d68:	569a      	ldrsb	r2, [r3, r2]
 8011d6a:	183b      	adds	r3, r7, r0
 8011d6c:	745a      	strb	r2, [r3, #17]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8011d6e:	4b28      	ldr	r3, [pc, #160]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d70:	4a28      	ldr	r2, [pc, #160]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011d72:	589a      	ldr	r2, [r3, r2]
 8011d74:	2396      	movs	r3, #150	; 0x96
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	5cd2      	ldrb	r2, [r2, r3]
 8011d7a:	183b      	adds	r3, r7, r0
 8011d7c:	749a      	strb	r2, [r3, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 8011d7e:	4b24      	ldr	r3, [pc, #144]	; (8011e10 <LoRaMacQueryTxPossible+0x150>)
 8011d80:	4a24      	ldr	r2, [pc, #144]	; (8011e14 <LoRaMacQueryTxPossible+0x154>)
 8011d82:	589b      	ldr	r3, [r3, r2]
 8011d84:	781a      	ldrb	r2, [r3, #0]
 8011d86:	183b      	adds	r3, r7, r0
 8011d88:	74da      	strb	r2, [r3, #19]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8011d8a:	2310      	movs	r3, #16
 8011d8c:	18fb      	adds	r3, r7, r3
 8011d8e:	220e      	movs	r2, #14
 8011d90:	18ba      	adds	r2, r7, r2
 8011d92:	240f      	movs	r4, #15
 8011d94:	1939      	adds	r1, r7, r4
 8011d96:	1838      	adds	r0, r7, r0
 8011d98:	f001 fa0a 	bl	80131b0 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8011d9c:	193b      	adds	r3, r7, r4
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	b25b      	sxtb	r3, r3
 8011da2:	0018      	movs	r0, r3
 8011da4:	f7fd facc 	bl	800f340 <GetMaxAppPayloadWithoutFOptsLength>
 8011da8:	0003      	movs	r3, r0
 8011daa:	001a      	movs	r2, r3
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8011db0:	2308      	movs	r3, #8
 8011db2:	18fb      	adds	r3, r7, r3
 8011db4:	0018      	movs	r0, r3
 8011db6:	f001 fd3d 	bl	8013834 <LoRaMacCommandsGetSizeSerializedCmds>
 8011dba:	1e03      	subs	r3, r0, #0
 8011dbc:	d001      	beq.n	8011dc2 <LoRaMacQueryTxPossible+0x102>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011dbe:	2313      	movs	r3, #19
 8011dc0:	e021      	b.n	8011e06 <LoRaMacQueryTxPossible+0x146>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8011dc2:	68bb      	ldr	r3, [r7, #8]
 8011dc4:	2b0f      	cmp	r3, #15
 8011dc6:	d81a      	bhi.n	8011dfe <LoRaMacQueryTxPossible+0x13e>
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	785b      	ldrb	r3, [r3, #1]
 8011dcc:	001a      	movs	r2, r3
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d314      	bcc.n	8011dfe <LoRaMacQueryTxPossible+0x13e>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	785a      	ldrb	r2, [r3, #1]
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	1ad3      	subs	r3, r2, r3
 8011dde:	b2da      	uxtb	r2, r3
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	785b      	ldrb	r3, [r3, #1]
 8011de8:	0019      	movs	r1, r3
 8011dea:	1dfb      	adds	r3, r7, #7
 8011dec:	781a      	ldrb	r2, [r3, #0]
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	18d3      	adds	r3, r2, r3
 8011df2:	4299      	cmp	r1, r3
 8011df4:	d301      	bcc.n	8011dfa <LoRaMacQueryTxPossible+0x13a>
        {
            return LORAMAC_STATUS_OK;
 8011df6:	2300      	movs	r3, #0
 8011df8:	e005      	b.n	8011e06 <LoRaMacQueryTxPossible+0x146>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011dfa:	2308      	movs	r3, #8
 8011dfc:	e003      	b.n	8011e06 <LoRaMacQueryTxPossible+0x146>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	2200      	movs	r2, #0
 8011e02:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8011e04:	2308      	movs	r3, #8
    }
}
 8011e06:	0018      	movs	r0, r3
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	b00b      	add	sp, #44	; 0x2c
 8011e0c:	bd90      	pop	{r4, r7, pc}
 8011e0e:	46c0      	nop			; (mov r8, r8)
 8011e10:	200008f0 	.word	0x200008f0
 8011e14:	00000484 	.word	0x00000484
 8011e18:	000003f6 	.word	0x000003f6

08011e1c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b087      	sub	sp, #28
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011e24:	2317      	movs	r3, #23
 8011e26:	18fb      	adds	r3, r7, r3
 8011e28:	2200      	movs	r2, #0
 8011e2a:	701a      	strb	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d101      	bne.n	8011e36 <LoRaMacMibGetRequestConfirm+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e32:	2303      	movs	r3, #3
 8011e34:	e143      	b.n	80120be <LoRaMacMibGetRequestConfirm+0x2a2>
    }

    switch( mibGet->Type )
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	2b34      	cmp	r3, #52	; 0x34
 8011e3c:	d900      	bls.n	8011e40 <LoRaMacMibGetRequestConfirm+0x24>
 8011e3e:	e132      	b.n	80120a6 <LoRaMacMibGetRequestConfirm+0x28a>
 8011e40:	009a      	lsls	r2, r3, #2
 8011e42:	4ba1      	ldr	r3, [pc, #644]	; (80120c8 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8011e44:	18d3      	adds	r3, r2, r3
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 8011e4a:	4ba0      	ldr	r3, [pc, #640]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011e4c:	4aa0      	ldr	r2, [pc, #640]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011e4e:	589b      	ldr	r3, [r3, r2]
 8011e50:	22f0      	movs	r2, #240	; 0xf0
 8011e52:	5c9a      	ldrb	r2, [r3, r2]
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	711a      	strb	r2, [r3, #4]
            break;
 8011e58:	e12e      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 8011e5a:	4b9c      	ldr	r3, [pc, #624]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011e5c:	4a9c      	ldr	r2, [pc, #624]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011e5e:	589a      	ldr	r2, [r3, r2]
 8011e60:	23ea      	movs	r3, #234	; 0xea
 8011e62:	005b      	lsls	r3, r3, #1
 8011e64:	5cd2      	ldrb	r2, [r2, r3]
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	711a      	strb	r2, [r3, #4]
            break;
 8011e6a:	e125      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011e6c:	f7fb fc70 	bl	800d750 <SecureElementGetDevEui>
 8011e70:	0002      	movs	r2, r0
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	605a      	str	r2, [r3, #4]
            break;
 8011e76:	e11f      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011e78:	f7fb fc8e 	bl	800d798 <SecureElementGetJoinEui>
 8011e7c:	0002      	movs	r2, r0
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	605a      	str	r2, [r3, #4]
            break;
 8011e82:	e119      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 8011e84:	4b91      	ldr	r3, [pc, #580]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011e86:	4a92      	ldr	r2, [pc, #584]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011e88:	589b      	ldr	r3, [r3, r2]
 8011e8a:	22f2      	movs	r2, #242	; 0xf2
 8011e8c:	5c9a      	ldrb	r2, [r3, r2]
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	711a      	strb	r2, [r3, #4]
            break;
 8011e92:	e111      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 8011e94:	4b8d      	ldr	r3, [pc, #564]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011e96:	4a8e      	ldr	r2, [pc, #568]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011e98:	589b      	ldr	r3, [r3, r2]
 8011e9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	605a      	str	r2, [r3, #4]
            break;
 8011ea0:	e10a      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 8011ea2:	4b8a      	ldr	r3, [pc, #552]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011ea4:	4a8a      	ldr	r2, [pc, #552]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011ea6:	589b      	ldr	r3, [r3, r2]
 8011ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	605a      	str	r2, [r3, #4]
            break;
 8011eae:	e103      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 8011eb0:	4b86      	ldr	r3, [pc, #536]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011eb2:	4a87      	ldr	r2, [pc, #540]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011eb4:	589b      	ldr	r3, [r3, r2]
 8011eb6:	22f1      	movs	r2, #241	; 0xf1
 8011eb8:	5c9a      	ldrb	r2, [r3, r2]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	711a      	strb	r2, [r3, #4]
            break;
 8011ebe:	e0fb      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8011ec0:	4b82      	ldr	r3, [pc, #520]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011ec2:	4a83      	ldr	r2, [pc, #524]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011ec4:	589a      	ldr	r2, [r3, r2]
 8011ec6:	2340      	movs	r3, #64	; 0x40
 8011ec8:	33ff      	adds	r3, #255	; 0xff
 8011eca:	5cd2      	ldrb	r2, [r2, r3]
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	711a      	strb	r2, [r3, #4]
            break;
 8011ed0:	e0f2      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8011ed2:	2110      	movs	r1, #16
 8011ed4:	187b      	adds	r3, r7, r1
 8011ed6:	221d      	movs	r2, #29
 8011ed8:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011eda:	4b7c      	ldr	r3, [pc, #496]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011edc:	4a7c      	ldr	r2, [pc, #496]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011ede:	589b      	ldr	r3, [r3, r2]
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	187a      	adds	r2, r7, r1
 8011ee4:	0011      	movs	r1, r2
 8011ee6:	0018      	movs	r0, r3
 8011ee8:	f003 fc62 	bl	80157b0 <RegionGetPhyParam>
 8011eec:	0003      	movs	r3, r0
 8011eee:	001a      	movs	r2, r3
 8011ef0:	210c      	movs	r1, #12
 8011ef2:	187b      	adds	r3, r7, r1
 8011ef4:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelList = phyParam.Channels;
 8011ef6:	187b      	adds	r3, r7, r1
 8011ef8:	681a      	ldr	r2, [r3, #0]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	605a      	str	r2, [r3, #4]
            break;
 8011efe:	e0db      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8011f00:	4b72      	ldr	r3, [pc, #456]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011f02:	4a73      	ldr	r2, [pc, #460]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011f04:	5899      	ldr	r1, [r3, r2]
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	228e      	movs	r2, #142	; 0x8e
 8011f0a:	0052      	lsls	r2, r2, #1
 8011f0c:	3304      	adds	r3, #4
 8011f0e:	188a      	adds	r2, r1, r2
 8011f10:	ca03      	ldmia	r2!, {r0, r1}
 8011f12:	c303      	stmia	r3!, {r0, r1}
            break;
 8011f14:	e0d0      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8011f16:	4b6d      	ldr	r3, [pc, #436]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011f18:	4a6d      	ldr	r2, [pc, #436]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011f1a:	589a      	ldr	r2, [r3, r2]
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	3304      	adds	r3, #4
 8011f20:	3228      	adds	r2, #40	; 0x28
 8011f22:	ca03      	ldmia	r2!, {r0, r1}
 8011f24:	c303      	stmia	r3!, {r0, r1}
            break;
 8011f26:	e0c7      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 8011f28:	4b68      	ldr	r3, [pc, #416]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011f2a:	4a69      	ldr	r2, [pc, #420]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011f2c:	5899      	ldr	r1, [r3, r2]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2292      	movs	r2, #146	; 0x92
 8011f32:	0052      	lsls	r2, r2, #1
 8011f34:	3304      	adds	r3, #4
 8011f36:	188a      	adds	r2, r1, r2
 8011f38:	ca03      	ldmia	r2!, {r0, r1}
 8011f3a:	c303      	stmia	r3!, {r0, r1}
            break;
 8011f3c:	e0bc      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8011f3e:	4b63      	ldr	r3, [pc, #396]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011f40:	4a63      	ldr	r2, [pc, #396]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011f42:	589a      	ldr	r2, [r3, r2]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	3304      	adds	r3, #4
 8011f48:	3230      	adds	r2, #48	; 0x30
 8011f4a:	ca03      	ldmia	r2!, {r0, r1}
 8011f4c:	c303      	stmia	r3!, {r0, r1}
            break;
 8011f4e:	e0b3      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011f50:	2110      	movs	r1, #16
 8011f52:	187b      	adds	r3, r7, r1
 8011f54:	221b      	movs	r2, #27
 8011f56:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011f58:	4b5c      	ldr	r3, [pc, #368]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011f5a:	4a5d      	ldr	r2, [pc, #372]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011f5c:	589b      	ldr	r3, [r3, r2]
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	187a      	adds	r2, r7, r1
 8011f62:	0011      	movs	r1, r2
 8011f64:	0018      	movs	r0, r3
 8011f66:	f003 fc23 	bl	80157b0 <RegionGetPhyParam>
 8011f6a:	0003      	movs	r3, r0
 8011f6c:	001a      	movs	r2, r3
 8011f6e:	210c      	movs	r1, #12
 8011f70:	187b      	adds	r3, r7, r1
 8011f72:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011f74:	187b      	adds	r3, r7, r1
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	605a      	str	r2, [r3, #4]
            break;
 8011f7c:	e09c      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011f7e:	2110      	movs	r1, #16
 8011f80:	187b      	adds	r3, r7, r1
 8011f82:	221a      	movs	r2, #26
 8011f84:	701a      	strb	r2, [r3, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8011f86:	4b51      	ldr	r3, [pc, #324]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011f88:	4a51      	ldr	r2, [pc, #324]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011f8a:	589b      	ldr	r3, [r3, r2]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	187a      	adds	r2, r7, r1
 8011f90:	0011      	movs	r1, r2
 8011f92:	0018      	movs	r0, r3
 8011f94:	f003 fc0c 	bl	80157b0 <RegionGetPhyParam>
 8011f98:	0003      	movs	r3, r0
 8011f9a:	001a      	movs	r2, r3
 8011f9c:	210c      	movs	r1, #12
 8011f9e:	187b      	adds	r3, r7, r1
 8011fa0:	601a      	str	r2, [r3, #0]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011fa2:	187b      	adds	r3, r7, r1
 8011fa4:	681a      	ldr	r2, [r3, #0]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	605a      	str	r2, [r3, #4]
            break;
 8011faa:	e085      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 8011fac:	4b47      	ldr	r3, [pc, #284]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011fae:	4a48      	ldr	r2, [pc, #288]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011fb0:	589a      	ldr	r2, [r3, r2]
 8011fb2:	238c      	movs	r3, #140	; 0x8c
 8011fb4:	005b      	lsls	r3, r3, #1
 8011fb6:	5cd2      	ldrb	r2, [r2, r3]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	711a      	strb	r2, [r3, #4]
            break;
 8011fbc:	e07c      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 8011fbe:	4b43      	ldr	r3, [pc, #268]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011fc0:	4a43      	ldr	r2, [pc, #268]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011fc2:	589a      	ldr	r2, [r3, r2]
 8011fc4:	2382      	movs	r3, #130	; 0x82
 8011fc6:	005b      	lsls	r3, r3, #1
 8011fc8:	58d2      	ldr	r2, [r2, r3]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	605a      	str	r2, [r3, #4]
            break;
 8011fce:	e073      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 8011fd0:	4b3e      	ldr	r3, [pc, #248]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011fd2:	4a3f      	ldr	r2, [pc, #252]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011fd4:	589a      	ldr	r2, [r3, r2]
 8011fd6:	2384      	movs	r3, #132	; 0x84
 8011fd8:	005b      	lsls	r3, r3, #1
 8011fda:	58d2      	ldr	r2, [r2, r3]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	605a      	str	r2, [r3, #4]
            break;
 8011fe0:	e06a      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 8011fe2:	4b3a      	ldr	r3, [pc, #232]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011fe4:	4a3a      	ldr	r2, [pc, #232]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011fe6:	589a      	ldr	r2, [r3, r2]
 8011fe8:	2386      	movs	r3, #134	; 0x86
 8011fea:	005b      	lsls	r3, r3, #1
 8011fec:	58d2      	ldr	r2, [r2, r3]
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	605a      	str	r2, [r3, #4]
            break;
 8011ff2:	e061      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 8011ff4:	4b35      	ldr	r3, [pc, #212]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8011ff6:	4a36      	ldr	r2, [pc, #216]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 8011ff8:	589a      	ldr	r2, [r3, r2]
 8011ffa:	2388      	movs	r3, #136	; 0x88
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	58d2      	ldr	r2, [r2, r3]
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	605a      	str	r2, [r3, #4]
            break;
 8012004:	e058      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 8012006:	4b31      	ldr	r3, [pc, #196]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 8012008:	4a31      	ldr	r2, [pc, #196]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801200a:	589a      	ldr	r2, [r3, r2]
 801200c:	238a      	movs	r3, #138	; 0x8a
 801200e:	005b      	lsls	r3, r3, #1
 8012010:	58d2      	ldr	r2, [r2, r3]
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	605a      	str	r2, [r3, #4]
            break;
 8012016:	e04f      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 8012018:	4b2c      	ldr	r3, [pc, #176]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801201a:	4a2d      	ldr	r2, [pc, #180]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801201c:	589b      	ldr	r3, [r3, r2]
 801201e:	2205      	movs	r2, #5
 8012020:	569a      	ldrsb	r2, [r3, r2]
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	711a      	strb	r2, [r3, #4]
            break;
 8012026:	e047      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8012028:	4b28      	ldr	r3, [pc, #160]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801202a:	4a29      	ldr	r2, [pc, #164]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801202c:	589b      	ldr	r3, [r3, r2]
 801202e:	22f9      	movs	r2, #249	; 0xf9
 8012030:	569a      	ldrsb	r2, [r3, r2]
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	711a      	strb	r2, [r3, #4]
            break;
 8012036:	e03f      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8012038:	4b24      	ldr	r3, [pc, #144]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801203a:	4a25      	ldr	r2, [pc, #148]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801203c:	589b      	ldr	r3, [r3, r2]
 801203e:	2204      	movs	r2, #4
 8012040:	569a      	ldrsb	r2, [r3, r2]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	711a      	strb	r2, [r3, #4]
            break;
 8012046:	e037      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8012048:	4b20      	ldr	r3, [pc, #128]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801204a:	4a21      	ldr	r2, [pc, #132]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801204c:	589b      	ldr	r3, [r3, r2]
 801204e:	22f8      	movs	r2, #248	; 0xf8
 8012050:	569a      	ldrsb	r2, [r3, r2]
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	711a      	strb	r2, [r3, #4]
            break;
 8012056:	e02f      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 8012058:	4b1c      	ldr	r3, [pc, #112]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801205a:	4a1d      	ldr	r2, [pc, #116]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801205c:	589b      	ldr	r3, [r3, r2]
 801205e:	22fc      	movs	r2, #252	; 0xfc
 8012060:	589a      	ldr	r2, [r3, r2]
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	605a      	str	r2, [r3, #4]
            break;
 8012066:	e027      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 8012068:	4b18      	ldr	r3, [pc, #96]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801206a:	4a19      	ldr	r2, [pc, #100]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801206c:	589a      	ldr	r2, [r3, r2]
 801206e:	2380      	movs	r3, #128	; 0x80
 8012070:	005b      	lsls	r3, r3, #1
 8012072:	5cd2      	ldrb	r2, [r2, r3]
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	711a      	strb	r2, [r3, #4]
            break;
 8012078:	e01e      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 801207a:	4b14      	ldr	r3, [pc, #80]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801207c:	4a14      	ldr	r2, [pc, #80]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801207e:	589a      	ldr	r2, [r3, r2]
 8012080:	239a      	movs	r3, #154	; 0x9a
 8012082:	005b      	lsls	r3, r3, #1
 8012084:	58d2      	ldr	r2, [r2, r3]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	605a      	str	r2, [r3, #4]
            break;
 801208a:	e015      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = GetCtxs( );
 801208c:	f7fe ffa4 	bl	8010fd8 <GetCtxs>
 8012090:	0002      	movs	r2, r0
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	605a      	str	r2, [r3, #4]
            break;
 8012096:	e00f      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8012098:	4b0c      	ldr	r3, [pc, #48]	; (80120cc <LoRaMacMibGetRequestConfirm+0x2b0>)
 801209a:	4a0d      	ldr	r2, [pc, #52]	; (80120d0 <LoRaMacMibGetRequestConfirm+0x2b4>)
 801209c:	589b      	ldr	r3, [r3, r2]
 801209e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	605a      	str	r2, [r3, #4]
            break;
 80120a4:	e008      	b.n	80120b8 <LoRaMacMibGetRequestConfirm+0x29c>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80120a6:	2317      	movs	r3, #23
 80120a8:	18fc      	adds	r4, r7, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	0018      	movs	r0, r3
 80120ae:	f001 f935 	bl	801331c <LoRaMacClassBMibGetRequestConfirm>
 80120b2:	0003      	movs	r3, r0
 80120b4:	7023      	strb	r3, [r4, #0]
            break;
 80120b6:	46c0      	nop			; (mov r8, r8)
        }
    }
    return status;
 80120b8:	2317      	movs	r3, #23
 80120ba:	18fb      	adds	r3, r7, r3
 80120bc:	781b      	ldrb	r3, [r3, #0]
}
 80120be:	0018      	movs	r0, r3
 80120c0:	46bd      	mov	sp, r7
 80120c2:	b007      	add	sp, #28
 80120c4:	bd90      	pop	{r4, r7, pc}
 80120c6:	46c0      	nop			; (mov r8, r8)
 80120c8:	0801b220 	.word	0x0801b220
 80120cc:	200008f0 	.word	0x200008f0
 80120d0:	00000484 	.word	0x00000484

080120d4 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 80120d4:	b590      	push	{r4, r7, lr}
 80120d6:	b089      	sub	sp, #36	; 0x24
 80120d8:	af02      	add	r7, sp, #8
 80120da:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80120dc:	2317      	movs	r3, #23
 80120de:	18fb      	adds	r3, r7, r3
 80120e0:	2200      	movs	r2, #0
 80120e2:	701a      	strb	r2, [r3, #0]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d102      	bne.n	80120f0 <LoRaMacMibSetRequestConfirm+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80120ea:	2303      	movs	r3, #3
 80120ec:	f000 fce4 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80120f0:	4adc      	ldr	r2, [pc, #880]	; (8012464 <LoRaMacMibSetRequestConfirm+0x390>)
 80120f2:	23d0      	movs	r3, #208	; 0xd0
 80120f4:	009b      	lsls	r3, r3, #2
 80120f6:	58d3      	ldr	r3, [r2, r3]
 80120f8:	2202      	movs	r2, #2
 80120fa:	4013      	ands	r3, r2
 80120fc:	d002      	beq.n	8012104 <LoRaMacMibSetRequestConfirm+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 80120fe:	2301      	movs	r3, #1
 8012100:	f000 fcda 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
    }

    switch( mibSet->Type )
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	2b35      	cmp	r3, #53	; 0x35
 801210a:	d901      	bls.n	8012110 <LoRaMacMibSetRequestConfirm+0x3c>
 801210c:	f000 fc8d 	bl	8012a2a <LoRaMacMibSetRequestConfirm+0x956>
 8012110:	009a      	lsls	r2, r3, #2
 8012112:	4bd5      	ldr	r3, [pc, #852]	; (8012468 <LoRaMacMibSetRequestConfirm+0x394>)
 8012114:	18d3      	adds	r3, r2, r3
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	469f      	mov	pc, r3
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	791b      	ldrb	r3, [r3, #4]
 801211e:	2217      	movs	r2, #23
 8012120:	18bc      	adds	r4, r7, r2
 8012122:	0018      	movs	r0, r3
 8012124:	f7fc ffc2 	bl	800f0ac <SwitchClass>
 8012128:	0003      	movs	r3, r0
 801212a:	7023      	strb	r3, [r4, #0]
            break;
 801212c:	f000 fcbd 	bl	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	791b      	ldrb	r3, [r3, #4]
 8012134:	2b02      	cmp	r3, #2
 8012136:	d009      	beq.n	801214c <LoRaMacMibSetRequestConfirm+0x78>
            {
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 8012138:	4bca      	ldr	r3, [pc, #808]	; (8012464 <LoRaMacMibSetRequestConfirm+0x390>)
 801213a:	4acc      	ldr	r2, [pc, #816]	; (801246c <LoRaMacMibSetRequestConfirm+0x398>)
 801213c:	589a      	ldr	r2, [r3, r2]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	7919      	ldrb	r1, [r3, #4]
 8012142:	23ea      	movs	r3, #234	; 0xea
 8012144:	005b      	lsls	r3, r3, #1
 8012146:	54d1      	strb	r1, [r2, r3]
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012148:	f000 fcaf 	bl	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801214c:	2317      	movs	r3, #23
 801214e:	18fb      	adds	r3, r7, r3
 8012150:	2203      	movs	r2, #3
 8012152:	701a      	strb	r2, [r3, #0]
            break;
 8012154:	f000 fca9 	bl	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	685b      	ldr	r3, [r3, #4]
 801215c:	0018      	movs	r0, r3
 801215e:	f7fb fadb 	bl	800d718 <SecureElementSetDevEui>
 8012162:	1e03      	subs	r3, r0, #0
 8012164:	d101      	bne.n	801216a <LoRaMacMibSetRequestConfirm+0x96>
 8012166:	f000 fc69 	bl	8012a3c <LoRaMacMibSetRequestConfirm+0x968>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801216a:	2317      	movs	r3, #23
 801216c:	18fb      	adds	r3, r7, r3
 801216e:	2203      	movs	r2, #3
 8012170:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012172:	f000 fc63 	bl	8012a3c <LoRaMacMibSetRequestConfirm+0x968>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	0018      	movs	r0, r3
 801217c:	f7fb faf0 	bl	800d760 <SecureElementSetJoinEui>
 8012180:	1e03      	subs	r3, r0, #0
 8012182:	d101      	bne.n	8012188 <LoRaMacMibSetRequestConfirm+0xb4>
 8012184:	f000 fc5c 	bl	8012a40 <LoRaMacMibSetRequestConfirm+0x96c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012188:	2317      	movs	r3, #23
 801218a:	18fb      	adds	r3, r7, r3
 801218c:	2203      	movs	r2, #3
 801218e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012190:	f000 fc56 	bl	8012a40 <LoRaMacMibSetRequestConfirm+0x96c>
        }
        case MIB_ADR:
        {
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 8012194:	4bb3      	ldr	r3, [pc, #716]	; (8012464 <LoRaMacMibSetRequestConfirm+0x390>)
 8012196:	4ab5      	ldr	r2, [pc, #724]	; (801246c <LoRaMacMibSetRequestConfirm+0x398>)
 8012198:	589b      	ldr	r3, [r3, r2]
 801219a:	687a      	ldr	r2, [r7, #4]
 801219c:	7911      	ldrb	r1, [r2, #4]
 801219e:	22f2      	movs	r2, #242	; 0xf2
 80121a0:	5499      	strb	r1, [r3, r2]
            break;
 80121a2:	f000 fc82 	bl	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NET_ID:
        {
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 80121a6:	4baf      	ldr	r3, [pc, #700]	; (8012464 <LoRaMacMibSetRequestConfirm+0x390>)
 80121a8:	4ab0      	ldr	r2, [pc, #704]	; (801246c <LoRaMacMibSetRequestConfirm+0x398>)
 80121aa:	589b      	ldr	r3, [r3, r2]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	6852      	ldr	r2, [r2, #4]
 80121b0:	649a      	str	r2, [r3, #72]	; 0x48
            break;
 80121b2:	f000 fc7a 	bl	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEV_ADDR:
        {
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 80121b6:	4bab      	ldr	r3, [pc, #684]	; (8012464 <LoRaMacMibSetRequestConfirm+0x390>)
 80121b8:	4aac      	ldr	r2, [pc, #688]	; (801246c <LoRaMacMibSetRequestConfirm+0x398>)
 80121ba:	589b      	ldr	r3, [r3, r2]
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	6852      	ldr	r2, [r2, #4]
 80121c0:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 80121c2:	f000 fc72 	bl	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_GEN_APP_KEY:
        {
            if( mibSet->Param.GenAppKey != NULL )
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	685b      	ldr	r3, [r3, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00c      	beq.n	80121e8 <LoRaMacMibSetRequestConfirm+0x114>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( GEN_APP_KEY, mibSet->Param.GenAppKey ) )
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685b      	ldr	r3, [r3, #4]
 80121d2:	0019      	movs	r1, r3
 80121d4:	2001      	movs	r0, #1
 80121d6:	f002 fad5 	bl	8014784 <LoRaMacCryptoSetKey>
 80121da:	1e03      	subs	r3, r0, #0
 80121dc:	d101      	bne.n	80121e2 <LoRaMacMibSetRequestConfirm+0x10e>
 80121de:	f000 fc31 	bl	8012a44 <LoRaMacMibSetRequestConfirm+0x970>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80121e2:	2311      	movs	r3, #17
 80121e4:	f000 fc68 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80121e8:	2317      	movs	r3, #23
 80121ea:	18fb      	adds	r3, r7, r3
 80121ec:	2203      	movs	r2, #3
 80121ee:	701a      	strb	r2, [r3, #0]
            }
            break;
 80121f0:	f000 fc28 	bl	8012a44 <LoRaMacMibSetRequestConfirm+0x970>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d00c      	beq.n	8012216 <LoRaMacMibSetRequestConfirm+0x142>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	685b      	ldr	r3, [r3, #4]
 8012200:	0019      	movs	r1, r3
 8012202:	2000      	movs	r0, #0
 8012204:	f002 fabe 	bl	8014784 <LoRaMacCryptoSetKey>
 8012208:	1e03      	subs	r3, r0, #0
 801220a:	d101      	bne.n	8012210 <LoRaMacMibSetRequestConfirm+0x13c>
 801220c:	f000 fc1c 	bl	8012a48 <LoRaMacMibSetRequestConfirm+0x974>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012210:	2311      	movs	r3, #17
 8012212:	f000 fc51 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012216:	2317      	movs	r3, #23
 8012218:	18fb      	adds	r3, r7, r3
 801221a:	2203      	movs	r2, #3
 801221c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801221e:	f000 fc13 	bl	8012a48 <LoRaMacMibSetRequestConfirm+0x974>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	685b      	ldr	r3, [r3, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d00c      	beq.n	8012244 <LoRaMacMibSetRequestConfirm+0x170>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	0019      	movs	r1, r3
 8012230:	2002      	movs	r0, #2
 8012232:	f002 faa7 	bl	8014784 <LoRaMacCryptoSetKey>
 8012236:	1e03      	subs	r3, r0, #0
 8012238:	d101      	bne.n	801223e <LoRaMacMibSetRequestConfirm+0x16a>
 801223a:	f000 fc07 	bl	8012a4c <LoRaMacMibSetRequestConfirm+0x978>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801223e:	2311      	movs	r3, #17
 8012240:	f000 fc3a 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012244:	2317      	movs	r3, #23
 8012246:	18fb      	adds	r3, r7, r3
 8012248:	2203      	movs	r2, #3
 801224a:	701a      	strb	r2, [r3, #0]
            }
            break;
 801224c:	f000 fbfe 	bl	8012a4c <LoRaMacMibSetRequestConfirm+0x978>
        }
        case MIB_J_S_INT_KEY:
        {
            if( mibSet->Param.JSIntKey != NULL )
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	685b      	ldr	r3, [r3, #4]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00c      	beq.n	8012272 <LoRaMacMibSetRequestConfirm+0x19e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	685b      	ldr	r3, [r3, #4]
 801225c:	0019      	movs	r1, r3
 801225e:	2003      	movs	r0, #3
 8012260:	f002 fa90 	bl	8014784 <LoRaMacCryptoSetKey>
 8012264:	1e03      	subs	r3, r0, #0
 8012266:	d101      	bne.n	801226c <LoRaMacMibSetRequestConfirm+0x198>
 8012268:	f000 fbf2 	bl	8012a50 <LoRaMacMibSetRequestConfirm+0x97c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801226c:	2311      	movs	r3, #17
 801226e:	f000 fc23 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012272:	2317      	movs	r3, #23
 8012274:	18fb      	adds	r3, r7, r3
 8012276:	2203      	movs	r2, #3
 8012278:	701a      	strb	r2, [r3, #0]
            }
            break;
 801227a:	f000 fbe9 	bl	8012a50 <LoRaMacMibSetRequestConfirm+0x97c>
        }
        case MIB_J_S_ENC_KEY:
        {
            if( mibSet->Param.JSEncKey != NULL )
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	685b      	ldr	r3, [r3, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d00c      	beq.n	80122a0 <LoRaMacMibSetRequestConfirm+0x1cc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	685b      	ldr	r3, [r3, #4]
 801228a:	0019      	movs	r1, r3
 801228c:	2004      	movs	r0, #4
 801228e:	f002 fa79 	bl	8014784 <LoRaMacCryptoSetKey>
 8012292:	1e03      	subs	r3, r0, #0
 8012294:	d101      	bne.n	801229a <LoRaMacMibSetRequestConfirm+0x1c6>
 8012296:	f000 fbdd 	bl	8012a54 <LoRaMacMibSetRequestConfirm+0x980>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801229a:	2311      	movs	r3, #17
 801229c:	f000 fc0c 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122a0:	2317      	movs	r3, #23
 80122a2:	18fb      	adds	r3, r7, r3
 80122a4:	2203      	movs	r2, #3
 80122a6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80122a8:	f000 fbd4 	bl	8012a54 <LoRaMacMibSetRequestConfirm+0x980>
        }
        case MIB_F_NWK_S_INT_KEY:
        {
            if( mibSet->Param.FNwkSIntKey != NULL )
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00c      	beq.n	80122ce <LoRaMacMibSetRequestConfirm+0x1fa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	0019      	movs	r1, r3
 80122ba:	2005      	movs	r0, #5
 80122bc:	f002 fa62 	bl	8014784 <LoRaMacCryptoSetKey>
 80122c0:	1e03      	subs	r3, r0, #0
 80122c2:	d101      	bne.n	80122c8 <LoRaMacMibSetRequestConfirm+0x1f4>
 80122c4:	f000 fbc8 	bl	8012a58 <LoRaMacMibSetRequestConfirm+0x984>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80122c8:	2311      	movs	r3, #17
 80122ca:	f000 fbf5 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122ce:	2317      	movs	r3, #23
 80122d0:	18fb      	adds	r3, r7, r3
 80122d2:	2203      	movs	r2, #3
 80122d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80122d6:	f000 fbbf 	bl	8012a58 <LoRaMacMibSetRequestConfirm+0x984>
        }
        case MIB_S_NWK_S_INT_KEY:
        {
            if( mibSet->Param.SNwkSIntKey != NULL )
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d00c      	beq.n	80122fc <LoRaMacMibSetRequestConfirm+0x228>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	685b      	ldr	r3, [r3, #4]
 80122e6:	0019      	movs	r1, r3
 80122e8:	2006      	movs	r0, #6
 80122ea:	f002 fa4b 	bl	8014784 <LoRaMacCryptoSetKey>
 80122ee:	1e03      	subs	r3, r0, #0
 80122f0:	d101      	bne.n	80122f6 <LoRaMacMibSetRequestConfirm+0x222>
 80122f2:	f000 fbb3 	bl	8012a5c <LoRaMacMibSetRequestConfirm+0x988>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80122f6:	2311      	movs	r3, #17
 80122f8:	f000 fbde 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80122fc:	2317      	movs	r3, #23
 80122fe:	18fb      	adds	r3, r7, r3
 8012300:	2203      	movs	r2, #3
 8012302:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012304:	f000 fbaa 	bl	8012a5c <LoRaMacMibSetRequestConfirm+0x988>
        }
        case MIB_NWK_S_ENC_KEY:
        {
            if( mibSet->Param.NwkSEncKey != NULL )
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00c      	beq.n	801232a <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	0019      	movs	r1, r3
 8012316:	2007      	movs	r0, #7
 8012318:	f002 fa34 	bl	8014784 <LoRaMacCryptoSetKey>
 801231c:	1e03      	subs	r3, r0, #0
 801231e:	d101      	bne.n	8012324 <LoRaMacMibSetRequestConfirm+0x250>
 8012320:	f000 fb9e 	bl	8012a60 <LoRaMacMibSetRequestConfirm+0x98c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012324:	2311      	movs	r3, #17
 8012326:	f000 fbc7 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801232a:	2317      	movs	r3, #23
 801232c:	18fb      	adds	r3, r7, r3
 801232e:	2203      	movs	r2, #3
 8012330:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012332:	f000 fb95 	bl	8012a60 <LoRaMacMibSetRequestConfirm+0x98c>
        }
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00c      	beq.n	8012358 <LoRaMacMibSetRequestConfirm+0x284>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	0019      	movs	r1, r3
 8012344:	2008      	movs	r0, #8
 8012346:	f002 fa1d 	bl	8014784 <LoRaMacCryptoSetKey>
 801234a:	1e03      	subs	r3, r0, #0
 801234c:	d101      	bne.n	8012352 <LoRaMacMibSetRequestConfirm+0x27e>
 801234e:	f000 fb89 	bl	8012a64 <LoRaMacMibSetRequestConfirm+0x990>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012352:	2311      	movs	r3, #17
 8012354:	f000 fbb0 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012358:	2317      	movs	r3, #23
 801235a:	18fb      	adds	r3, r7, r3
 801235c:	2203      	movs	r2, #3
 801235e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012360:	f000 fb80 	bl	8012a64 <LoRaMacMibSetRequestConfirm+0x990>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d00c      	beq.n	8012386 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	685b      	ldr	r3, [r3, #4]
 8012370:	0019      	movs	r1, r3
 8012372:	207f      	movs	r0, #127	; 0x7f
 8012374:	f002 fa06 	bl	8014784 <LoRaMacCryptoSetKey>
 8012378:	1e03      	subs	r3, r0, #0
 801237a:	d101      	bne.n	8012380 <LoRaMacMibSetRequestConfirm+0x2ac>
 801237c:	f000 fb74 	bl	8012a68 <LoRaMacMibSetRequestConfirm+0x994>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012380:	2311      	movs	r3, #17
 8012382:	f000 fb99 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012386:	2317      	movs	r3, #23
 8012388:	18fb      	adds	r3, r7, r3
 801238a:	2203      	movs	r2, #3
 801238c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801238e:	f000 fb6b 	bl	8012a68 <LoRaMacMibSetRequestConfirm+0x994>
        }
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d00c      	beq.n	80123b4 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	0019      	movs	r1, r3
 80123a0:	2080      	movs	r0, #128	; 0x80
 80123a2:	f002 f9ef 	bl	8014784 <LoRaMacCryptoSetKey>
 80123a6:	1e03      	subs	r3, r0, #0
 80123a8:	d101      	bne.n	80123ae <LoRaMacMibSetRequestConfirm+0x2da>
 80123aa:	f000 fb5f 	bl	8012a6c <LoRaMacMibSetRequestConfirm+0x998>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80123ae:	2311      	movs	r3, #17
 80123b0:	f000 fb82 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123b4:	2317      	movs	r3, #23
 80123b6:	18fb      	adds	r3, r7, r3
 80123b8:	2203      	movs	r2, #3
 80123ba:	701a      	strb	r2, [r3, #0]
            }
            break;
 80123bc:	e356      	b.n	8012a6c <LoRaMacMibSetRequestConfirm+0x998>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d00b      	beq.n	80123de <LoRaMacMibSetRequestConfirm+0x30a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	685b      	ldr	r3, [r3, #4]
 80123ca:	0019      	movs	r1, r3
 80123cc:	2081      	movs	r0, #129	; 0x81
 80123ce:	f002 f9d9 	bl	8014784 <LoRaMacCryptoSetKey>
 80123d2:	1e03      	subs	r3, r0, #0
 80123d4:	d100      	bne.n	80123d8 <LoRaMacMibSetRequestConfirm+0x304>
 80123d6:	e34b      	b.n	8012a70 <LoRaMacMibSetRequestConfirm+0x99c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80123d8:	2311      	movs	r3, #17
 80123da:	f000 fb6d 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80123de:	2317      	movs	r3, #23
 80123e0:	18fb      	adds	r3, r7, r3
 80123e2:	2203      	movs	r2, #3
 80123e4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80123e6:	e343      	b.n	8012a70 <LoRaMacMibSetRequestConfirm+0x99c>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d00b      	beq.n	8012408 <LoRaMacMibSetRequestConfirm+0x334>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	685b      	ldr	r3, [r3, #4]
 80123f4:	0019      	movs	r1, r3
 80123f6:	2082      	movs	r0, #130	; 0x82
 80123f8:	f002 f9c4 	bl	8014784 <LoRaMacCryptoSetKey>
 80123fc:	1e03      	subs	r3, r0, #0
 80123fe:	d100      	bne.n	8012402 <LoRaMacMibSetRequestConfirm+0x32e>
 8012400:	e338      	b.n	8012a74 <LoRaMacMibSetRequestConfirm+0x9a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012402:	2311      	movs	r3, #17
 8012404:	f000 fb58 	bl	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012408:	2317      	movs	r3, #23
 801240a:	18fb      	adds	r3, r7, r3
 801240c:	2203      	movs	r2, #3
 801240e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012410:	e330      	b.n	8012a74 <LoRaMacMibSetRequestConfirm+0x9a0>
        }
        case MIB_MC_KEY_1:
        {
            if( mibSet->Param.McKey1 != NULL )
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00a      	beq.n	8012430 <LoRaMacMibSetRequestConfirm+0x35c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	0019      	movs	r1, r3
 8012420:	2083      	movs	r0, #131	; 0x83
 8012422:	f002 f9af 	bl	8014784 <LoRaMacCryptoSetKey>
 8012426:	1e03      	subs	r3, r0, #0
 8012428:	d100      	bne.n	801242c <LoRaMacMibSetRequestConfirm+0x358>
 801242a:	e325      	b.n	8012a78 <LoRaMacMibSetRequestConfirm+0x9a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801242c:	2311      	movs	r3, #17
 801242e:	e343      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012430:	2317      	movs	r3, #23
 8012432:	18fb      	adds	r3, r7, r3
 8012434:	2203      	movs	r2, #3
 8012436:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012438:	e31e      	b.n	8012a78 <LoRaMacMibSetRequestConfirm+0x9a4>
        }
        case MIB_MC_APP_S_KEY_1:
        {
            if( mibSet->Param.McAppSKey1 != NULL )
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	685b      	ldr	r3, [r3, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d00a      	beq.n	8012458 <LoRaMacMibSetRequestConfirm+0x384>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	0019      	movs	r1, r3
 8012448:	2084      	movs	r0, #132	; 0x84
 801244a:	f002 f99b 	bl	8014784 <LoRaMacCryptoSetKey>
 801244e:	1e03      	subs	r3, r0, #0
 8012450:	d100      	bne.n	8012454 <LoRaMacMibSetRequestConfirm+0x380>
 8012452:	e313      	b.n	8012a7c <LoRaMacMibSetRequestConfirm+0x9a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012454:	2311      	movs	r3, #17
 8012456:	e32f      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012458:	2317      	movs	r3, #23
 801245a:	18fb      	adds	r3, r7, r3
 801245c:	2203      	movs	r2, #3
 801245e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012460:	e30c      	b.n	8012a7c <LoRaMacMibSetRequestConfirm+0x9a8>
 8012462:	46c0      	nop			; (mov r8, r8)
 8012464:	200008f0 	.word	0x200008f0
 8012468:	0801b2f4 	.word	0x0801b2f4
 801246c:	00000484 	.word	0x00000484
        }
        case MIB_MC_NWK_S_KEY_1:
        {
            if( mibSet->Param.McNwkSKey1 != NULL )
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	685b      	ldr	r3, [r3, #4]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00a      	beq.n	801248e <LoRaMacMibSetRequestConfirm+0x3ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	685b      	ldr	r3, [r3, #4]
 801247c:	0019      	movs	r1, r3
 801247e:	2085      	movs	r0, #133	; 0x85
 8012480:	f002 f980 	bl	8014784 <LoRaMacCryptoSetKey>
 8012484:	1e03      	subs	r3, r0, #0
 8012486:	d100      	bne.n	801248a <LoRaMacMibSetRequestConfirm+0x3b6>
 8012488:	e2fa      	b.n	8012a80 <LoRaMacMibSetRequestConfirm+0x9ac>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801248a:	2311      	movs	r3, #17
 801248c:	e314      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801248e:	2317      	movs	r3, #23
 8012490:	18fb      	adds	r3, r7, r3
 8012492:	2203      	movs	r2, #3
 8012494:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012496:	e2f3      	b.n	8012a80 <LoRaMacMibSetRequestConfirm+0x9ac>
        }
        case MIB_MC_KEY_2:
        {
            if( mibSet->Param.McKey2 != NULL )
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d00a      	beq.n	80124b6 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	685b      	ldr	r3, [r3, #4]
 80124a4:	0019      	movs	r1, r3
 80124a6:	2086      	movs	r0, #134	; 0x86
 80124a8:	f002 f96c 	bl	8014784 <LoRaMacCryptoSetKey>
 80124ac:	1e03      	subs	r3, r0, #0
 80124ae:	d100      	bne.n	80124b2 <LoRaMacMibSetRequestConfirm+0x3de>
 80124b0:	e2e8      	b.n	8012a84 <LoRaMacMibSetRequestConfirm+0x9b0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80124b2:	2311      	movs	r3, #17
 80124b4:	e300      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124b6:	2317      	movs	r3, #23
 80124b8:	18fb      	adds	r3, r7, r3
 80124ba:	2203      	movs	r2, #3
 80124bc:	701a      	strb	r2, [r3, #0]
            }
            break;
 80124be:	e2e1      	b.n	8012a84 <LoRaMacMibSetRequestConfirm+0x9b0>
        }
        case MIB_MC_APP_S_KEY_2:
        {
            if( mibSet->Param.McAppSKey2 != NULL )
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00a      	beq.n	80124de <LoRaMacMibSetRequestConfirm+0x40a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	685b      	ldr	r3, [r3, #4]
 80124cc:	0019      	movs	r1, r3
 80124ce:	2087      	movs	r0, #135	; 0x87
 80124d0:	f002 f958 	bl	8014784 <LoRaMacCryptoSetKey>
 80124d4:	1e03      	subs	r3, r0, #0
 80124d6:	d100      	bne.n	80124da <LoRaMacMibSetRequestConfirm+0x406>
 80124d8:	e2d6      	b.n	8012a88 <LoRaMacMibSetRequestConfirm+0x9b4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80124da:	2311      	movs	r3, #17
 80124dc:	e2ec      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80124de:	2317      	movs	r3, #23
 80124e0:	18fb      	adds	r3, r7, r3
 80124e2:	2203      	movs	r2, #3
 80124e4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80124e6:	e2cf      	b.n	8012a88 <LoRaMacMibSetRequestConfirm+0x9b4>
        }
        case MIB_MC_NWK_S_KEY_2:
        {
            if( mibSet->Param.McNwkSKey2 != NULL )
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	685b      	ldr	r3, [r3, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d00a      	beq.n	8012506 <LoRaMacMibSetRequestConfirm+0x432>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	685b      	ldr	r3, [r3, #4]
 80124f4:	0019      	movs	r1, r3
 80124f6:	2088      	movs	r0, #136	; 0x88
 80124f8:	f002 f944 	bl	8014784 <LoRaMacCryptoSetKey>
 80124fc:	1e03      	subs	r3, r0, #0
 80124fe:	d100      	bne.n	8012502 <LoRaMacMibSetRequestConfirm+0x42e>
 8012500:	e2c4      	b.n	8012a8c <LoRaMacMibSetRequestConfirm+0x9b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012502:	2311      	movs	r3, #17
 8012504:	e2d8      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012506:	2317      	movs	r3, #23
 8012508:	18fb      	adds	r3, r7, r3
 801250a:	2203      	movs	r2, #3
 801250c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801250e:	e2bd      	b.n	8012a8c <LoRaMacMibSetRequestConfirm+0x9b8>
        }
        case MIB_MC_KEY_3:
        {
            if( mibSet->Param.McKey3 != NULL )
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	685b      	ldr	r3, [r3, #4]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d00a      	beq.n	801252e <LoRaMacMibSetRequestConfirm+0x45a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	685b      	ldr	r3, [r3, #4]
 801251c:	0019      	movs	r1, r3
 801251e:	2089      	movs	r0, #137	; 0x89
 8012520:	f002 f930 	bl	8014784 <LoRaMacCryptoSetKey>
 8012524:	1e03      	subs	r3, r0, #0
 8012526:	d100      	bne.n	801252a <LoRaMacMibSetRequestConfirm+0x456>
 8012528:	e2b2      	b.n	8012a90 <LoRaMacMibSetRequestConfirm+0x9bc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801252a:	2311      	movs	r3, #17
 801252c:	e2c4      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801252e:	2317      	movs	r3, #23
 8012530:	18fb      	adds	r3, r7, r3
 8012532:	2203      	movs	r2, #3
 8012534:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012536:	e2ab      	b.n	8012a90 <LoRaMacMibSetRequestConfirm+0x9bc>
        }
        case MIB_MC_APP_S_KEY_3:
        {
            if( mibSet->Param.McAppSKey3 != NULL )
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00a      	beq.n	8012556 <LoRaMacMibSetRequestConfirm+0x482>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	0019      	movs	r1, r3
 8012546:	208a      	movs	r0, #138	; 0x8a
 8012548:	f002 f91c 	bl	8014784 <LoRaMacCryptoSetKey>
 801254c:	1e03      	subs	r3, r0, #0
 801254e:	d100      	bne.n	8012552 <LoRaMacMibSetRequestConfirm+0x47e>
 8012550:	e2a0      	b.n	8012a94 <LoRaMacMibSetRequestConfirm+0x9c0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012552:	2311      	movs	r3, #17
 8012554:	e2b0      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012556:	2317      	movs	r3, #23
 8012558:	18fb      	adds	r3, r7, r3
 801255a:	2203      	movs	r2, #3
 801255c:	701a      	strb	r2, [r3, #0]
            }
            break;
 801255e:	e299      	b.n	8012a94 <LoRaMacMibSetRequestConfirm+0x9c0>
        }
        case MIB_MC_NWK_S_KEY_3:
        {
            if( mibSet->Param.McNwkSKey3 != NULL )
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00a      	beq.n	801257e <LoRaMacMibSetRequestConfirm+0x4aa>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	0019      	movs	r1, r3
 801256e:	208b      	movs	r0, #139	; 0x8b
 8012570:	f002 f908 	bl	8014784 <LoRaMacCryptoSetKey>
 8012574:	1e03      	subs	r3, r0, #0
 8012576:	d100      	bne.n	801257a <LoRaMacMibSetRequestConfirm+0x4a6>
 8012578:	e28e      	b.n	8012a98 <LoRaMacMibSetRequestConfirm+0x9c4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801257a:	2311      	movs	r3, #17
 801257c:	e29c      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801257e:	2317      	movs	r3, #23
 8012580:	18fb      	adds	r3, r7, r3
 8012582:	2203      	movs	r2, #3
 8012584:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012586:	e287      	b.n	8012a98 <LoRaMacMibSetRequestConfirm+0x9c4>
        }
        case MIB_PUBLIC_NETWORK:
        {
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8012588:	4bd8      	ldr	r3, [pc, #864]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801258a:	4ad9      	ldr	r2, [pc, #868]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801258c:	589b      	ldr	r3, [r3, r2]
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	7911      	ldrb	r1, [r2, #4]
 8012592:	22f1      	movs	r2, #241	; 0xf1
 8012594:	5499      	strb	r1, [r3, r2]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 8012596:	4bd7      	ldr	r3, [pc, #860]	; (80128f4 <LoRaMacMibSetRequestConfirm+0x820>)
 8012598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801259a:	4ad4      	ldr	r2, [pc, #848]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801259c:	49d4      	ldr	r1, [pc, #848]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801259e:	5852      	ldr	r2, [r2, r1]
 80125a0:	21f1      	movs	r1, #241	; 0xf1
 80125a2:	5c52      	ldrb	r2, [r2, r1]
 80125a4:	0010      	movs	r0, r2
 80125a6:	4798      	blx	r3
            break;
 80125a8:	e27f      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_REPEATER_SUPPORT:
        {
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 80125aa:	4bd0      	ldr	r3, [pc, #832]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80125ac:	4ad0      	ldr	r2, [pc, #832]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80125ae:	589a      	ldr	r2, [r3, r2]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	7919      	ldrb	r1, [r3, #4]
 80125b4:	2340      	movs	r3, #64	; 0x40
 80125b6:	33ff      	adds	r3, #255	; 0xff
 80125b8:	54d1      	strb	r1, [r2, r3]
            break;
 80125ba:	e276      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	7a1b      	ldrb	r3, [r3, #8]
 80125c0:	b25a      	sxtb	r2, r3
 80125c2:	2108      	movs	r1, #8
 80125c4:	187b      	adds	r3, r7, r1
 80125c6:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80125c8:	4bc8      	ldr	r3, [pc, #800]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80125ca:	4ac9      	ldr	r2, [pc, #804]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80125cc:	589a      	ldr	r2, [r3, r2]
 80125ce:	232e      	movs	r3, #46	; 0x2e
 80125d0:	33ff      	adds	r3, #255	; 0xff
 80125d2:	5cd2      	ldrb	r2, [r2, r3]
 80125d4:	187b      	adds	r3, r7, r1
 80125d6:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 80125d8:	4bc4      	ldr	r3, [pc, #784]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80125da:	4ac5      	ldr	r2, [pc, #788]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80125dc:	589b      	ldr	r3, [r3, r2]
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	1879      	adds	r1, r7, r1
 80125e2:	2207      	movs	r2, #7
 80125e4:	0018      	movs	r0, r3
 80125e6:	f003 f94a 	bl	801587e <RegionVerify>
 80125ea:	1e03      	subs	r3, r0, #0
 80125ec:	d00a      	beq.n	8012604 <LoRaMacMibSetRequestConfirm+0x530>
            {
                MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80125ee:	4bbf      	ldr	r3, [pc, #764]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80125f0:	4abf      	ldr	r2, [pc, #764]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80125f2:	5899      	ldr	r1, [r3, r2]
 80125f4:	238e      	movs	r3, #142	; 0x8e
 80125f6:	005b      	lsls	r3, r3, #1
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	18cb      	adds	r3, r1, r3
 80125fc:	3204      	adds	r2, #4
 80125fe:	ca03      	ldmia	r2!, {r0, r1}
 8012600:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012602:	e252      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012604:	2317      	movs	r3, #23
 8012606:	18fb      	adds	r3, r7, r3
 8012608:	2203      	movs	r2, #3
 801260a:	701a      	strb	r2, [r3, #0]
            break;
 801260c:	e24d      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	7a1b      	ldrb	r3, [r3, #8]
 8012612:	b25a      	sxtb	r2, r3
 8012614:	2108      	movs	r1, #8
 8012616:	187b      	adds	r3, r7, r1
 8012618:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801261a:	4bb4      	ldr	r3, [pc, #720]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801261c:	4ab4      	ldr	r2, [pc, #720]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801261e:	589a      	ldr	r2, [r3, r2]
 8012620:	232e      	movs	r3, #46	; 0x2e
 8012622:	33ff      	adds	r3, #255	; 0xff
 8012624:	5cd2      	ldrb	r2, [r2, r3]
 8012626:	187b      	adds	r3, r7, r1
 8012628:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801262a:	4bb0      	ldr	r3, [pc, #704]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801262c:	4ab0      	ldr	r2, [pc, #704]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801262e:	589b      	ldr	r3, [r3, r2]
 8012630:	781b      	ldrb	r3, [r3, #0]
 8012632:	1879      	adds	r1, r7, r1
 8012634:	2207      	movs	r2, #7
 8012636:	0018      	movs	r0, r3
 8012638:	f003 f921 	bl	801587e <RegionVerify>
 801263c:	1e03      	subs	r3, r0, #0
 801263e:	d008      	beq.n	8012652 <LoRaMacMibSetRequestConfirm+0x57e>
            {
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8012640:	4baa      	ldr	r3, [pc, #680]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012642:	4aab      	ldr	r2, [pc, #684]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012644:	589b      	ldr	r3, [r3, r2]
 8012646:	687a      	ldr	r2, [r7, #4]
 8012648:	3328      	adds	r3, #40	; 0x28
 801264a:	3204      	adds	r2, #4
 801264c:	ca03      	ldmia	r2!, {r0, r1}
 801264e:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012650:	e22b      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012652:	2317      	movs	r3, #23
 8012654:	18fb      	adds	r3, r7, r3
 8012656:	2203      	movs	r2, #3
 8012658:	701a      	strb	r2, [r3, #0]
            break;
 801265a:	e226      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	7a1b      	ldrb	r3, [r3, #8]
 8012660:	b25a      	sxtb	r2, r3
 8012662:	2108      	movs	r1, #8
 8012664:	187b      	adds	r3, r7, r1
 8012666:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8012668:	4ba0      	ldr	r3, [pc, #640]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801266a:	4aa1      	ldr	r2, [pc, #644]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801266c:	589a      	ldr	r2, [r3, r2]
 801266e:	232e      	movs	r3, #46	; 0x2e
 8012670:	33ff      	adds	r3, #255	; 0xff
 8012672:	5cd2      	ldrb	r2, [r2, r3]
 8012674:	187b      	adds	r3, r7, r1
 8012676:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 8012678:	4b9c      	ldr	r3, [pc, #624]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801267a:	4a9d      	ldr	r2, [pc, #628]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801267c:	589b      	ldr	r3, [r3, r2]
 801267e:	781b      	ldrb	r3, [r3, #0]
 8012680:	1879      	adds	r1, r7, r1
 8012682:	2207      	movs	r2, #7
 8012684:	0018      	movs	r0, r3
 8012686:	f003 f8fa 	bl	801587e <RegionVerify>
 801268a:	1e03      	subs	r3, r0, #0
 801268c:	d03c      	beq.n	8012708 <LoRaMacMibSetRequestConfirm+0x634>
            {
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 801268e:	4b97      	ldr	r3, [pc, #604]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012690:	4a97      	ldr	r2, [pc, #604]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012692:	5899      	ldr	r1, [r3, r2]
 8012694:	2392      	movs	r3, #146	; 0x92
 8012696:	005b      	lsls	r3, r3, #1
 8012698:	687a      	ldr	r2, [r7, #4]
 801269a:	18cb      	adds	r3, r1, r3
 801269c:	3204      	adds	r2, #4
 801269e:	ca03      	ldmia	r2!, {r0, r1}
 80126a0:	c303      	stmia	r3!, {r0, r1}

                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80126a2:	4b92      	ldr	r3, [pc, #584]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80126a4:	4a92      	ldr	r2, [pc, #584]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80126a6:	589b      	ldr	r3, [r3, r2]
 80126a8:	22f0      	movs	r2, #240	; 0xf0
 80126aa:	5c9b      	ldrb	r3, [r3, r2]
 80126ac:	2b02      	cmp	r3, #2
 80126ae:	d000      	beq.n	80126b2 <LoRaMacMibSetRequestConfirm+0x5de>
 80126b0:	e1f4      	b.n	8012a9c <LoRaMacMibSetRequestConfirm+0x9c8>
 80126b2:	4b8e      	ldr	r3, [pc, #568]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80126b4:	4a8e      	ldr	r2, [pc, #568]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80126b6:	589a      	ldr	r2, [r3, r2]
 80126b8:	23ea      	movs	r3, #234	; 0xea
 80126ba:	005b      	lsls	r3, r3, #1
 80126bc:	5cd3      	ldrb	r3, [r2, r3]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d100      	bne.n	80126c4 <LoRaMacMibSetRequestConfirm+0x5f0>
 80126c2:	e1eb      	b.n	8012a9c <LoRaMacMibSetRequestConfirm+0x9c8>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80126c4:	4b8b      	ldr	r3, [pc, #556]	; (80128f4 <LoRaMacMibSetRequestConfirm+0x820>)
 80126c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126c8:	4798      	blx	r3
                    // Compute RxC windows parameters
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80126ca:	4b88      	ldr	r3, [pc, #544]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80126cc:	4a88      	ldr	r2, [pc, #544]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80126ce:	589b      	ldr	r3, [r3, r2]
 80126d0:	7818      	ldrb	r0, [r3, #0]
                                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80126d2:	4b86      	ldr	r3, [pc, #536]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80126d4:	4a86      	ldr	r2, [pc, #536]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80126d6:	589a      	ldr	r2, [r3, r2]
 80126d8:	2394      	movs	r3, #148	; 0x94
 80126da:	005b      	lsls	r3, r3, #1
 80126dc:	5cd3      	ldrb	r3, [r2, r3]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80126de:	b259      	sxtb	r1, r3
                                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 80126e0:	4b82      	ldr	r3, [pc, #520]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80126e2:	4a83      	ldr	r2, [pc, #524]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80126e4:	589a      	ldr	r2, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80126e6:	2380      	movs	r3, #128	; 0x80
 80126e8:	005b      	lsls	r3, r3, #1
 80126ea:	5cd4      	ldrb	r4, [r2, r3]
                                                     MacCtx.NvmCtx->MacParams.SystemMaxRxError,
 80126ec:	4b7f      	ldr	r3, [pc, #508]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80126ee:	4a80      	ldr	r2, [pc, #512]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80126f0:	589b      	ldr	r3, [r3, r2]
                    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80126f2:	22fc      	movs	r2, #252	; 0xfc
 80126f4:	589a      	ldr	r2, [r3, r2]
 80126f6:	4b80      	ldr	r3, [pc, #512]	; (80128f8 <LoRaMacMibSetRequestConfirm+0x824>)
 80126f8:	9300      	str	r3, [sp, #0]
 80126fa:	0013      	movs	r3, r2
 80126fc:	0022      	movs	r2, r4
 80126fe:	f003 f906 	bl	801590e <RegionComputeRxWindowParameters>
                                                     &MacCtx.RxWindowCConfig );
                    OpenContinuousRxCWindow( );
 8012702:	f7fe f99d 	bl	8010a40 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012706:	e1c9      	b.n	8012a9c <LoRaMacMibSetRequestConfirm+0x9c8>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012708:	2317      	movs	r3, #23
 801270a:	18fb      	adds	r3, r7, r3
 801270c:	2203      	movs	r2, #3
 801270e:	701a      	strb	r2, [r3, #0]
            break;
 8012710:	e1c4      	b.n	8012a9c <LoRaMacMibSetRequestConfirm+0x9c8>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	7a1b      	ldrb	r3, [r3, #8]
 8012716:	b25a      	sxtb	r2, r3
 8012718:	2108      	movs	r1, #8
 801271a:	187b      	adds	r3, r7, r1
 801271c:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 801271e:	4b73      	ldr	r3, [pc, #460]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012720:	4a73      	ldr	r2, [pc, #460]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012722:	589a      	ldr	r2, [r3, r2]
 8012724:	232e      	movs	r3, #46	; 0x2e
 8012726:	33ff      	adds	r3, #255	; 0xff
 8012728:	5cd2      	ldrb	r2, [r2, r3]
 801272a:	187b      	adds	r3, r7, r1
 801272c:	705a      	strb	r2, [r3, #1]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 801272e:	4b6f      	ldr	r3, [pc, #444]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012730:	4a6f      	ldr	r2, [pc, #444]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012732:	589b      	ldr	r3, [r3, r2]
 8012734:	781b      	ldrb	r3, [r3, #0]
 8012736:	1879      	adds	r1, r7, r1
 8012738:	2207      	movs	r2, #7
 801273a:	0018      	movs	r0, r3
 801273c:	f003 f89f 	bl	801587e <RegionVerify>
 8012740:	1e03      	subs	r3, r0, #0
 8012742:	d008      	beq.n	8012756 <LoRaMacMibSetRequestConfirm+0x682>
            {
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8012744:	4b69      	ldr	r3, [pc, #420]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012746:	4a6a      	ldr	r2, [pc, #424]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012748:	589b      	ldr	r3, [r3, r2]
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	3330      	adds	r3, #48	; 0x30
 801274e:	3204      	adds	r2, #4
 8012750:	ca03      	ldmia	r2!, {r0, r1}
 8012752:	c303      	stmia	r3!, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012754:	e1a9      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012756:	2317      	movs	r3, #23
 8012758:	18fb      	adds	r3, r7, r3
 801275a:	2203      	movs	r2, #3
 801275c:	701a      	strb	r2, [r3, #0]
            break;
 801275e:	e1a4      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	685a      	ldr	r2, [r3, #4]
 8012764:	210c      	movs	r1, #12
 8012766:	187b      	adds	r3, r7, r1
 8012768:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801276a:	187b      	adds	r3, r7, r1
 801276c:	2201      	movs	r2, #1
 801276e:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 8012770:	4b5e      	ldr	r3, [pc, #376]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012772:	4a5f      	ldr	r2, [pc, #380]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012774:	589b      	ldr	r3, [r3, r2]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	187a      	adds	r2, r7, r1
 801277a:	0011      	movs	r1, r2
 801277c:	0018      	movs	r0, r3
 801277e:	f003 f8b0 	bl	80158e2 <RegionChanMaskSet>
 8012782:	0003      	movs	r3, r0
 8012784:	001a      	movs	r2, r3
 8012786:	2301      	movs	r3, #1
 8012788:	4053      	eors	r3, r2
 801278a:	b2db      	uxtb	r3, r3
 801278c:	2b00      	cmp	r3, #0
 801278e:	d100      	bne.n	8012792 <LoRaMacMibSetRequestConfirm+0x6be>
 8012790:	e186      	b.n	8012aa0 <LoRaMacMibSetRequestConfirm+0x9cc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012792:	2317      	movs	r3, #23
 8012794:	18fb      	adds	r3, r7, r3
 8012796:	2203      	movs	r2, #3
 8012798:	701a      	strb	r2, [r3, #0]
            }
            break;
 801279a:	e181      	b.n	8012aa0 <LoRaMacMibSetRequestConfirm+0x9cc>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	685a      	ldr	r2, [r3, #4]
 80127a0:	210c      	movs	r1, #12
 80127a2:	187b      	adds	r3, r7, r1
 80127a4:	601a      	str	r2, [r3, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80127a6:	187b      	adds	r3, r7, r1
 80127a8:	2200      	movs	r2, #0
 80127aa:	711a      	strb	r2, [r3, #4]

            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 80127ac:	4b4f      	ldr	r3, [pc, #316]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80127ae:	4a50      	ldr	r2, [pc, #320]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80127b0:	589b      	ldr	r3, [r3, r2]
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	187a      	adds	r2, r7, r1
 80127b6:	0011      	movs	r1, r2
 80127b8:	0018      	movs	r0, r3
 80127ba:	f003 f892 	bl	80158e2 <RegionChanMaskSet>
 80127be:	0003      	movs	r3, r0
 80127c0:	001a      	movs	r2, r3
 80127c2:	2301      	movs	r3, #1
 80127c4:	4053      	eors	r3, r2
 80127c6:	b2db      	uxtb	r3, r3
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d100      	bne.n	80127ce <LoRaMacMibSetRequestConfirm+0x6fa>
 80127cc:	e16a      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x9d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127ce:	2317      	movs	r3, #23
 80127d0:	18fb      	adds	r3, r7, r3
 80127d2:	2203      	movs	r2, #3
 80127d4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80127d6:	e165      	b.n	8012aa4 <LoRaMacMibSetRequestConfirm+0x9d0>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	791b      	ldrb	r3, [r3, #4]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d00c      	beq.n	80127fa <LoRaMacMibSetRequestConfirm+0x726>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80127e4:	2b0f      	cmp	r3, #15
 80127e6:	d808      	bhi.n	80127fa <LoRaMacMibSetRequestConfirm+0x726>
            {
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80127e8:	4b40      	ldr	r3, [pc, #256]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80127ea:	4a41      	ldr	r2, [pc, #260]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80127ec:	589a      	ldr	r2, [r3, r2]
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	7919      	ldrb	r1, [r3, #4]
 80127f2:	238c      	movs	r3, #140	; 0x8c
 80127f4:	005b      	lsls	r3, r3, #1
 80127f6:	54d1      	strb	r1, [r2, r3]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80127f8:	e157      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80127fa:	2317      	movs	r3, #23
 80127fc:	18fb      	adds	r3, r7, r3
 80127fe:	2203      	movs	r2, #3
 8012800:	701a      	strb	r2, [r3, #0]
            break;
 8012802:	e152      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8012804:	4b39      	ldr	r3, [pc, #228]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012806:	4a3a      	ldr	r2, [pc, #232]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012808:	589a      	ldr	r2, [r3, r2]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6859      	ldr	r1, [r3, #4]
 801280e:	2382      	movs	r3, #130	; 0x82
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	50d1      	str	r1, [r2, r3]
            break;
 8012814:	e149      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8012816:	4b35      	ldr	r3, [pc, #212]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012818:	4a35      	ldr	r2, [pc, #212]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801281a:	589a      	ldr	r2, [r3, r2]
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6859      	ldr	r1, [r3, #4]
 8012820:	2384      	movs	r3, #132	; 0x84
 8012822:	005b      	lsls	r3, r3, #1
 8012824:	50d1      	str	r1, [r2, r3]
            break;
 8012826:	e140      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8012828:	4b30      	ldr	r3, [pc, #192]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801282a:	4a31      	ldr	r2, [pc, #196]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801282c:	589a      	ldr	r2, [r3, r2]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	6859      	ldr	r1, [r3, #4]
 8012832:	2386      	movs	r3, #134	; 0x86
 8012834:	005b      	lsls	r3, r3, #1
 8012836:	50d1      	str	r1, [r2, r3]
            break;
 8012838:	e137      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 801283a:	4b2c      	ldr	r3, [pc, #176]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801283c:	4a2c      	ldr	r2, [pc, #176]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801283e:	589a      	ldr	r2, [r3, r2]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6859      	ldr	r1, [r3, #4]
 8012844:	2388      	movs	r3, #136	; 0x88
 8012846:	005b      	lsls	r3, r3, #1
 8012848:	50d1      	str	r1, [r2, r3]
            break;
 801284a:	e12e      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 801284c:	4b27      	ldr	r3, [pc, #156]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801284e:	4a28      	ldr	r2, [pc, #160]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012850:	589a      	ldr	r2, [r3, r2]
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6859      	ldr	r1, [r3, #4]
 8012856:	238a      	movs	r3, #138	; 0x8a
 8012858:	005b      	lsls	r3, r3, #1
 801285a:	50d1      	str	r1, [r2, r3]
            break;
 801285c:	e125      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2204      	movs	r2, #4
 8012862:	569a      	ldrsb	r2, [r3, r2]
 8012864:	2108      	movs	r1, #8
 8012866:	187b      	adds	r3, r7, r1
 8012868:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 801286a:	4b20      	ldr	r3, [pc, #128]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 801286c:	4a20      	ldr	r2, [pc, #128]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 801286e:	589b      	ldr	r3, [r3, r2]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	1879      	adds	r1, r7, r1
 8012874:	2206      	movs	r2, #6
 8012876:	0018      	movs	r0, r3
 8012878:	f003 f801 	bl	801587e <RegionVerify>
 801287c:	1e03      	subs	r3, r0, #0
 801287e:	d008      	beq.n	8012892 <LoRaMacMibSetRequestConfirm+0x7be>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012880:	4b1a      	ldr	r3, [pc, #104]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 8012882:	4a1b      	ldr	r2, [pc, #108]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 8012884:	589b      	ldr	r3, [r3, r2]
 8012886:	2208      	movs	r2, #8
 8012888:	18ba      	adds	r2, r7, r2
 801288a:	7812      	ldrb	r2, [r2, #0]
 801288c:	b252      	sxtb	r2, r2
 801288e:	715a      	strb	r2, [r3, #5]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8012890:	e10b      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012892:	2317      	movs	r3, #23
 8012894:	18fb      	adds	r3, r7, r3
 8012896:	2203      	movs	r2, #3
 8012898:	701a      	strb	r2, [r3, #0]
            break;
 801289a:	e106      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	2204      	movs	r2, #4
 80128a0:	569a      	ldrsb	r2, [r3, r2]
 80128a2:	2108      	movs	r1, #8
 80128a4:	187b      	adds	r3, r7, r1
 80128a6:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80128a8:	4b10      	ldr	r3, [pc, #64]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80128aa:	4a11      	ldr	r2, [pc, #68]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80128ac:	589a      	ldr	r2, [r3, r2]
 80128ae:	2396      	movs	r3, #150	; 0x96
 80128b0:	005b      	lsls	r3, r3, #1
 80128b2:	5cd2      	ldrb	r2, [r2, r3]
 80128b4:	187b      	adds	r3, r7, r1
 80128b6:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 80128b8:	4b0c      	ldr	r3, [pc, #48]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80128ba:	4a0d      	ldr	r2, [pc, #52]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80128bc:	589b      	ldr	r3, [r3, r2]
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	1879      	adds	r1, r7, r1
 80128c2:	2205      	movs	r2, #5
 80128c4:	0018      	movs	r0, r3
 80128c6:	f002 ffda 	bl	801587e <RegionVerify>
 80128ca:	1e03      	subs	r3, r0, #0
 80128cc:	d009      	beq.n	80128e2 <LoRaMacMibSetRequestConfirm+0x80e>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 80128ce:	4b07      	ldr	r3, [pc, #28]	; (80128ec <LoRaMacMibSetRequestConfirm+0x818>)
 80128d0:	4a07      	ldr	r2, [pc, #28]	; (80128f0 <LoRaMacMibSetRequestConfirm+0x81c>)
 80128d2:	589b      	ldr	r3, [r3, r2]
 80128d4:	2208      	movs	r2, #8
 80128d6:	18ba      	adds	r2, r7, r2
 80128d8:	2100      	movs	r1, #0
 80128da:	5651      	ldrsb	r1, [r2, r1]
 80128dc:	22f9      	movs	r2, #249	; 0xf9
 80128de:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80128e0:	e0e3      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80128e2:	2317      	movs	r3, #23
 80128e4:	18fb      	adds	r3, r7, r3
 80128e6:	2203      	movs	r2, #3
 80128e8:	701a      	strb	r2, [r3, #0]
            break;
 80128ea:	e0de      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
 80128ec:	200008f0 	.word	0x200008f0
 80128f0:	00000484 	.word	0x00000484
 80128f4:	0801acec 	.word	0x0801acec
 80128f8:	20000cd0 	.word	0x20000cd0
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2204      	movs	r2, #4
 8012900:	569a      	ldrsb	r2, [r3, r2]
 8012902:	2108      	movs	r1, #8
 8012904:	187b      	adds	r3, r7, r1
 8012906:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 8012908:	4b6d      	ldr	r3, [pc, #436]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801290a:	4a6e      	ldr	r2, [pc, #440]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801290c:	589b      	ldr	r3, [r3, r2]
 801290e:	781b      	ldrb	r3, [r3, #0]
 8012910:	1879      	adds	r1, r7, r1
 8012912:	220a      	movs	r2, #10
 8012914:	0018      	movs	r0, r3
 8012916:	f002 ffb2 	bl	801587e <RegionVerify>
 801291a:	1e03      	subs	r3, r0, #0
 801291c:	d008      	beq.n	8012930 <LoRaMacMibSetRequestConfirm+0x85c>
            {
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 801291e:	4b68      	ldr	r3, [pc, #416]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8012920:	4a68      	ldr	r2, [pc, #416]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8012922:	589b      	ldr	r3, [r3, r2]
 8012924:	2208      	movs	r2, #8
 8012926:	18ba      	adds	r2, r7, r2
 8012928:	7812      	ldrb	r2, [r2, #0]
 801292a:	b252      	sxtb	r2, r2
 801292c:	711a      	strb	r2, [r3, #4]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801292e:	e0bc      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012930:	2317      	movs	r3, #23
 8012932:	18fb      	adds	r3, r7, r3
 8012934:	2203      	movs	r2, #3
 8012936:	701a      	strb	r2, [r3, #0]
            break;
 8012938:	e0b7      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2204      	movs	r2, #4
 801293e:	569a      	ldrsb	r2, [r3, r2]
 8012940:	2108      	movs	r1, #8
 8012942:	187b      	adds	r3, r7, r1
 8012944:	701a      	strb	r2, [r3, #0]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 8012946:	4b5e      	ldr	r3, [pc, #376]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8012948:	4a5e      	ldr	r2, [pc, #376]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801294a:	589b      	ldr	r3, [r3, r2]
 801294c:	781b      	ldrb	r3, [r3, #0]
 801294e:	1879      	adds	r1, r7, r1
 8012950:	2209      	movs	r2, #9
 8012952:	0018      	movs	r0, r3
 8012954:	f002 ff93 	bl	801587e <RegionVerify>
 8012958:	1e03      	subs	r3, r0, #0
 801295a:	d009      	beq.n	8012970 <LoRaMacMibSetRequestConfirm+0x89c>
            {
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 801295c:	4b58      	ldr	r3, [pc, #352]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801295e:	4a59      	ldr	r2, [pc, #356]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8012960:	589b      	ldr	r3, [r3, r2]
 8012962:	2208      	movs	r2, #8
 8012964:	18ba      	adds	r2, r7, r2
 8012966:	2100      	movs	r1, #0
 8012968:	5651      	ldrsb	r1, [r2, r1]
 801296a:	22f8      	movs	r2, #248	; 0xf8
 801296c:	5499      	strb	r1, [r3, r2]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801296e:	e09c      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012970:	2317      	movs	r3, #23
 8012972:	18fb      	adds	r3, r7, r3
 8012974:	2203      	movs	r2, #3
 8012976:	701a      	strb	r2, [r3, #0]
            break;
 8012978:	e097      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801297a:	4b51      	ldr	r3, [pc, #324]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 801297c:	4a51      	ldr	r2, [pc, #324]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801297e:	589b      	ldr	r3, [r3, r2]
 8012980:	687a      	ldr	r2, [r7, #4]
 8012982:	6852      	ldr	r2, [r2, #4]
 8012984:	609a      	str	r2, [r3, #8]
 8012986:	4a4e      	ldr	r2, [pc, #312]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8012988:	494e      	ldr	r1, [pc, #312]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 801298a:	5852      	ldr	r2, [r2, r1]
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	21fc      	movs	r1, #252	; 0xfc
 8012990:	5053      	str	r3, [r2, r1]
            break;
 8012992:	e08a      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8012994:	4b4a      	ldr	r3, [pc, #296]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8012996:	4a4b      	ldr	r2, [pc, #300]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8012998:	589b      	ldr	r3, [r3, r2]
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	7912      	ldrb	r2, [r2, #4]
 801299e:	731a      	strb	r2, [r3, #12]
 80129a0:	4a47      	ldr	r2, [pc, #284]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80129a2:	4948      	ldr	r1, [pc, #288]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80129a4:	5852      	ldr	r2, [r2, r1]
 80129a6:	7b19      	ldrb	r1, [r3, #12]
 80129a8:	2380      	movs	r3, #128	; 0x80
 80129aa:	005b      	lsls	r3, r3, #1
 80129ac:	54d1      	strb	r1, [r2, r3]
            break;
 80129ae:	e07c      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80129b0:	4b43      	ldr	r3, [pc, #268]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80129b2:	4a44      	ldr	r2, [pc, #272]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80129b4:	589a      	ldr	r2, [r3, r2]
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6859      	ldr	r1, [r3, #4]
 80129ba:	239a      	movs	r3, #154	; 0x9a
 80129bc:	005b      	lsls	r3, r3, #1
 80129be:	50d1      	str	r1, [r2, r3]
            break;
 80129c0:	e073      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 80129c2:	4b3f      	ldr	r3, [pc, #252]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 80129c4:	4a3f      	ldr	r2, [pc, #252]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 80129c6:	589b      	ldr	r3, [r3, r2]
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	6852      	ldr	r2, [r2, #4]
 80129cc:	641a      	str	r2, [r3, #64]	; 0x40
            break;
 80129ce:	e06c      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_NVM_CTXS:
        {
            if( mibSet->Param.Contexts != 0 )
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d009      	beq.n	80129ec <LoRaMacMibSetRequestConfirm+0x918>
            {
                status = RestoreCtxs( mibSet->Param.Contexts );
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	685b      	ldr	r3, [r3, #4]
 80129dc:	2217      	movs	r2, #23
 80129de:	18bc      	adds	r4, r7, r2
 80129e0:	0018      	movs	r0, r3
 80129e2:	f7fe fb4f 	bl	8011084 <RestoreCtxs>
 80129e6:	0003      	movs	r3, r0
 80129e8:	7023      	strb	r3, [r4, #0]
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80129ea:	e05e      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80129ec:	2317      	movs	r3, #23
 80129ee:	18fb      	adds	r3, r7, r3
 80129f0:	2203      	movs	r2, #3
 80129f2:	701a      	strb	r2, [r3, #0]
            break;
 80129f4:	e059      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	799b      	ldrb	r3, [r3, #6]
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d810      	bhi.n	8012a20 <LoRaMacMibSetRequestConfirm+0x94c>
            {
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 80129fe:	4b30      	ldr	r3, [pc, #192]	; (8012ac0 <LoRaMacMibSetRequestConfirm+0x9ec>)
 8012a00:	4a30      	ldr	r2, [pc, #192]	; (8012ac4 <LoRaMacMibSetRequestConfirm+0x9f0>)
 8012a02:	5899      	ldr	r1, [r3, r2]
 8012a04:	23e8      	movs	r3, #232	; 0xe8
 8012a06:	005a      	lsls	r2, r3, #1
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	508b      	str	r3, [r1, r2]

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	0018      	movs	r0, r3
 8012a14:	f001 fdaa 	bl	801456c <LoRaMacCryptoSetLrWanVersion>
 8012a18:	1e03      	subs	r3, r0, #0
 8012a1a:	d045      	beq.n	8012aa8 <LoRaMacMibSetRequestConfirm+0x9d4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8012a1c:	2311      	movs	r3, #17
 8012a1e:	e04b      	b.n	8012ab8 <LoRaMacMibSetRequestConfirm+0x9e4>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012a20:	2317      	movs	r3, #23
 8012a22:	18fb      	adds	r3, r7, r3
 8012a24:	2203      	movs	r2, #3
 8012a26:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012a28:	e03e      	b.n	8012aa8 <LoRaMacMibSetRequestConfirm+0x9d4>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8012a2a:	2317      	movs	r3, #23
 8012a2c:	18fc      	adds	r4, r7, r3
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	0018      	movs	r0, r3
 8012a32:	f000 fc7c 	bl	801332e <LoRaMacMibClassBSetRequestConfirm>
 8012a36:	0003      	movs	r3, r0
 8012a38:	7023      	strb	r3, [r4, #0]
            break;
 8012a3a:	e036      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a3c:	46c0      	nop			; (mov r8, r8)
 8012a3e:	e034      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a40:	46c0      	nop			; (mov r8, r8)
 8012a42:	e032      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a44:	46c0      	nop			; (mov r8, r8)
 8012a46:	e030      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a48:	46c0      	nop			; (mov r8, r8)
 8012a4a:	e02e      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a4c:	46c0      	nop			; (mov r8, r8)
 8012a4e:	e02c      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a50:	46c0      	nop			; (mov r8, r8)
 8012a52:	e02a      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a54:	46c0      	nop			; (mov r8, r8)
 8012a56:	e028      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a58:	46c0      	nop			; (mov r8, r8)
 8012a5a:	e026      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a5c:	46c0      	nop			; (mov r8, r8)
 8012a5e:	e024      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a60:	46c0      	nop			; (mov r8, r8)
 8012a62:	e022      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a64:	46c0      	nop			; (mov r8, r8)
 8012a66:	e020      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a68:	46c0      	nop			; (mov r8, r8)
 8012a6a:	e01e      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a6c:	46c0      	nop			; (mov r8, r8)
 8012a6e:	e01c      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a70:	46c0      	nop			; (mov r8, r8)
 8012a72:	e01a      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a74:	46c0      	nop			; (mov r8, r8)
 8012a76:	e018      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a78:	46c0      	nop			; (mov r8, r8)
 8012a7a:	e016      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a7c:	46c0      	nop			; (mov r8, r8)
 8012a7e:	e014      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a80:	46c0      	nop			; (mov r8, r8)
 8012a82:	e012      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a84:	46c0      	nop			; (mov r8, r8)
 8012a86:	e010      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a88:	46c0      	nop			; (mov r8, r8)
 8012a8a:	e00e      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a8c:	46c0      	nop			; (mov r8, r8)
 8012a8e:	e00c      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a90:	46c0      	nop			; (mov r8, r8)
 8012a92:	e00a      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a94:	46c0      	nop			; (mov r8, r8)
 8012a96:	e008      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a98:	46c0      	nop			; (mov r8, r8)
 8012a9a:	e006      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012a9c:	46c0      	nop			; (mov r8, r8)
 8012a9e:	e004      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012aa0:	46c0      	nop			; (mov r8, r8)
 8012aa2:	e002      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012aa4:	46c0      	nop			; (mov r8, r8)
 8012aa6:	e000      	b.n	8012aaa <LoRaMacMibSetRequestConfirm+0x9d6>
            break;
 8012aa8:	46c0      	nop			; (mov r8, r8)
        }
    }
    EventRegionNvmCtxChanged( );
 8012aaa:	f7fe fd07 	bl	80114bc <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 8012aae:	f7fe fcfd 	bl	80114ac <EventMacNvmCtxChanged>
    return status;
 8012ab2:	2317      	movs	r3, #23
 8012ab4:	18fb      	adds	r3, r7, r3
 8012ab6:	781b      	ldrb	r3, [r3, #0]
}
 8012ab8:	0018      	movs	r0, r3
 8012aba:	46bd      	mov	sp, r7
 8012abc:	b007      	add	sp, #28
 8012abe:	bd90      	pop	{r4, r7, pc}
 8012ac0:	200008f0 	.word	0x200008f0
 8012ac4:	00000484 	.word	0x00000484

08012ac8 <LoRaMacMlmeRequest>:
    EventRegionNvmCtxChanged( );
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8012ac8:	b5b0      	push	{r4, r5, r7, lr}
 8012aca:	b086      	sub	sp, #24
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012ad0:	2317      	movs	r3, #23
 8012ad2:	18fb      	adds	r3, r7, r3
 8012ad4:	2202      	movs	r2, #2
 8012ad6:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012ad8:	210c      	movs	r1, #12
 8012ada:	187b      	adds	r3, r7, r1
 8012adc:	2200      	movs	r2, #0
 8012ade:	701a      	strb	r2, [r3, #0]
 8012ae0:	187b      	adds	r3, r7, r1
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	705a      	strb	r2, [r3, #1]

    if( mlmeRequest == NULL )
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d101      	bne.n	8012af0 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012aec:	2303      	movs	r3, #3
 8012aee:	e131      	b.n	8012d54 <LoRaMacMlmeRequest+0x28c>
    }
    if( LoRaMacIsBusy( ) == true )
 8012af0:	f7fb fef4 	bl	800e8dc <LoRaMacIsBusy>
 8012af4:	1e03      	subs	r3, r0, #0
 8012af6:	d001      	beq.n	8012afc <LoRaMacMlmeRequest+0x34>
    {
        return LORAMAC_STATUS_BUSY;
 8012af8:	2301      	movs	r3, #1
 8012afa:	e12b      	b.n	8012d54 <LoRaMacMlmeRequest+0x28c>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8012afc:	f001 f912 	bl	8013d24 <LoRaMacConfirmQueueIsFull>
 8012b00:	1e03      	subs	r3, r0, #0
 8012b02:	d001      	beq.n	8012b08 <LoRaMacMlmeRequest+0x40>
    {
        return LORAMAC_STATUS_BUSY;
 8012b04:	2301      	movs	r3, #1
 8012b06:	e125      	b.n	8012d54 <LoRaMacMlmeRequest+0x28c>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012b08:	f001 f902 	bl	8013d10 <LoRaMacConfirmQueueGetCnt>
 8012b0c:	1e03      	subs	r3, r0, #0
 8012b0e:	d105      	bne.n	8012b1c <LoRaMacMlmeRequest+0x54>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8012b10:	4b92      	ldr	r3, [pc, #584]	; (8012d5c <LoRaMacMlmeRequest+0x294>)
 8012b12:	2214      	movs	r2, #20
 8012b14:	2100      	movs	r1, #0
 8012b16:	0018      	movs	r0, r3
 8012b18:	f006 fed6 	bl	80198c8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b1c:	4b90      	ldr	r3, [pc, #576]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012b1e:	4a91      	ldr	r2, [pc, #580]	; (8012d64 <LoRaMacMlmeRequest+0x29c>)
 8012b20:	2101      	movs	r1, #1
 8012b22:	5499      	strb	r1, [r3, r2]

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8012b24:	4b8e      	ldr	r3, [pc, #568]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012b26:	4a90      	ldr	r2, [pc, #576]	; (8012d68 <LoRaMacMlmeRequest+0x2a0>)
 8012b28:	5c99      	ldrb	r1, [r3, r2]
 8012b2a:	2004      	movs	r0, #4
 8012b2c:	4301      	orrs	r1, r0
 8012b2e:	5499      	strb	r1, [r3, r2]
    queueElement.Request = mlmeRequest->Type;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	781a      	ldrb	r2, [r3, #0]
 8012b34:	2110      	movs	r1, #16
 8012b36:	187b      	adds	r3, r7, r1
 8012b38:	701a      	strb	r2, [r3, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012b3a:	187b      	adds	r3, r7, r1
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8012b40:	187b      	adds	r3, r7, r1
 8012b42:	2200      	movs	r2, #0
 8012b44:	70da      	strb	r2, [r3, #3]

    switch( mlmeRequest->Type )
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	2b0d      	cmp	r3, #13
 8012b4c:	d900      	bls.n	8012b50 <LoRaMacMlmeRequest+0x88>
 8012b4e:	e0d8      	b.n	8012d02 <LoRaMacMlmeRequest+0x23a>
 8012b50:	009a      	lsls	r2, r3, #2
 8012b52:	4b86      	ldr	r3, [pc, #536]	; (8012d6c <LoRaMacMlmeRequest+0x2a4>)
 8012b54:	18d3      	adds	r3, r2, r3
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	469f      	mov	pc, r3
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8012b5a:	4a81      	ldr	r2, [pc, #516]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012b5c:	23d0      	movs	r3, #208	; 0xd0
 8012b5e:	009b      	lsls	r3, r3, #2
 8012b60:	58d3      	ldr	r3, [r2, r3]
 8012b62:	2220      	movs	r2, #32
 8012b64:	4013      	ands	r3, r2
 8012b66:	d001      	beq.n	8012b6c <LoRaMacMlmeRequest+0xa4>
            {
                return LORAMAC_STATUS_BUSY;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e0f3      	b.n	8012d54 <LoRaMacMlmeRequest+0x28c>
            }

            ResetMacParameters( );
 8012b6c:	f7fd fe38 	bl	80107e0 <ResetMacParameters>

            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8012b70:	4b7b      	ldr	r3, [pc, #492]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012b72:	4a7f      	ldr	r2, [pc, #508]	; (8012d70 <LoRaMacMlmeRequest+0x2a8>)
 8012b74:	589b      	ldr	r3, [r3, r2]
 8012b76:	7818      	ldrb	r0, [r3, #0]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	791b      	ldrb	r3, [r3, #4]
 8012b7c:	b259      	sxtb	r1, r3
 8012b7e:	4b78      	ldr	r3, [pc, #480]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012b80:	4a7b      	ldr	r2, [pc, #492]	; (8012d70 <LoRaMacMlmeRequest+0x2a8>)
 8012b82:	589c      	ldr	r4, [r3, r2]
 8012b84:	2200      	movs	r2, #0
 8012b86:	f002 ff91 	bl	8015aac <RegionAlternateDr>
 8012b8a:	0003      	movs	r3, r0
 8012b8c:	001a      	movs	r2, r3
 8012b8e:	23f9      	movs	r3, #249	; 0xf9
 8012b90:	54e2      	strb	r2, [r4, r3]

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8012b92:	2310      	movs	r3, #16
 8012b94:	18fb      	adds	r3, r7, r3
 8012b96:	2207      	movs	r2, #7
 8012b98:	705a      	strb	r2, [r3, #1]

            status = SendReJoinReq( JOIN_REQ );
 8012b9a:	2517      	movs	r5, #23
 8012b9c:	197c      	adds	r4, r7, r5
 8012b9e:	20ff      	movs	r0, #255	; 0xff
 8012ba0:	f7fd fb44 	bl	801022c <SendReJoinReq>
 8012ba4:	0003      	movs	r3, r0
 8012ba6:	7023      	strb	r3, [r4, #0]

            if( status != LORAMAC_STATUS_OK )
 8012ba8:	197b      	adds	r3, r7, r5
 8012baa:	781b      	ldrb	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d100      	bne.n	8012bb2 <LoRaMacMlmeRequest+0xea>
 8012bb0:	e0a9      	b.n	8012d06 <LoRaMacMlmeRequest+0x23e>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8012bb2:	4b6b      	ldr	r3, [pc, #428]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012bb4:	4a6e      	ldr	r2, [pc, #440]	; (8012d70 <LoRaMacMlmeRequest+0x2a8>)
 8012bb6:	589b      	ldr	r3, [r3, r2]
 8012bb8:	7818      	ldrb	r0, [r3, #0]
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	791b      	ldrb	r3, [r3, #4]
 8012bbe:	b259      	sxtb	r1, r3
 8012bc0:	4b67      	ldr	r3, [pc, #412]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012bc2:	4a6b      	ldr	r2, [pc, #428]	; (8012d70 <LoRaMacMlmeRequest+0x2a8>)
 8012bc4:	589c      	ldr	r4, [r3, r2]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	f002 ff70 	bl	8015aac <RegionAlternateDr>
 8012bcc:	0003      	movs	r3, r0
 8012bce:	001a      	movs	r2, r3
 8012bd0:	23f9      	movs	r3, #249	; 0xf9
 8012bd2:	54e2      	strb	r2, [r4, r3]
            }
            break;
 8012bd4:	e097      	b.n	8012d06 <LoRaMacMlmeRequest+0x23e>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012bd6:	2317      	movs	r3, #23
 8012bd8:	18fb      	adds	r3, r7, r3
 8012bda:	2200      	movs	r2, #0
 8012bdc:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012bde:	230c      	movs	r3, #12
 8012be0:	18fb      	adds	r3, r7, r3
 8012be2:	2200      	movs	r2, #0
 8012be4:	0019      	movs	r1, r3
 8012be6:	2002      	movs	r0, #2
 8012be8:	f000 fd4e 	bl	8013688 <LoRaMacCommandsAddCmd>
 8012bec:	1e03      	subs	r3, r0, #0
 8012bee:	d100      	bne.n	8012bf2 <LoRaMacMlmeRequest+0x12a>
 8012bf0:	e08b      	b.n	8012d0a <LoRaMacMlmeRequest+0x242>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012bf2:	2317      	movs	r3, #23
 8012bf4:	18fb      	adds	r3, r7, r3
 8012bf6:	2213      	movs	r2, #19
 8012bf8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012bfa:	e086      	b.n	8012d0a <LoRaMacMlmeRequest+0x242>
        }
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	889b      	ldrh	r3, [r3, #4]
 8012c00:	2217      	movs	r2, #23
 8012c02:	18bc      	adds	r4, r7, r2
 8012c04:	0018      	movs	r0, r3
 8012c06:	f7fe f971 	bl	8010eec <SetTxContinuousWave>
 8012c0a:	0003      	movs	r3, r0
 8012c0c:	7023      	strb	r3, [r4, #0]
            break;
 8012c0e:	e083      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	8898      	ldrh	r0, [r3, #4]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	6899      	ldr	r1, [r3, #8]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	7b1b      	ldrb	r3, [r3, #12]
 8012c1c:	2217      	movs	r2, #23
 8012c1e:	18bc      	adds	r4, r7, r2
 8012c20:	001a      	movs	r2, r3
 8012c22:	f7fe f9b1 	bl	8010f88 <SetTxContinuousWave1>
 8012c26:	0003      	movs	r3, r0
 8012c28:	7023      	strb	r3, [r4, #0]
            break;
 8012c2a:	e075      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012c2c:	2317      	movs	r3, #23
 8012c2e:	18fb      	adds	r3, r7, r3
 8012c30:	2200      	movs	r2, #0
 8012c32:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012c34:	230c      	movs	r3, #12
 8012c36:	18fb      	adds	r3, r7, r3
 8012c38:	2200      	movs	r2, #0
 8012c3a:	0019      	movs	r1, r3
 8012c3c:	200d      	movs	r0, #13
 8012c3e:	f000 fd23 	bl	8013688 <LoRaMacCommandsAddCmd>
 8012c42:	1e03      	subs	r3, r0, #0
 8012c44:	d063      	beq.n	8012d0e <LoRaMacMlmeRequest+0x246>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c46:	2317      	movs	r3, #23
 8012c48:	18fb      	adds	r3, r7, r3
 8012c4a:	2213      	movs	r2, #19
 8012c4c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012c4e:	e05e      	b.n	8012d0e <LoRaMacMlmeRequest+0x246>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 8012c50:	4b43      	ldr	r3, [pc, #268]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012c52:	4a47      	ldr	r2, [pc, #284]	; (8012d70 <LoRaMacMlmeRequest+0x2a8>)
 8012c54:	589b      	ldr	r3, [r3, r2]
 8012c56:	22f0      	movs	r2, #240	; 0xf0
 8012c58:	5c9b      	ldrb	r3, [r3, r2]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d159      	bne.n	8012d12 <LoRaMacMlmeRequest+0x24a>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012c5e:	2416      	movs	r4, #22
 8012c60:	193b      	adds	r3, r7, r4
 8012c62:	687a      	ldr	r2, [r7, #4]
 8012c64:	7912      	ldrb	r2, [r2, #4]
 8012c66:	701a      	strb	r2, [r3, #0]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	791b      	ldrb	r3, [r3, #4]
 8012c6c:	075b      	lsls	r3, r3, #29
 8012c6e:	0f5b      	lsrs	r3, r3, #29
 8012c70:	b2db      	uxtb	r3, r3
 8012c72:	0018      	movs	r0, r3
 8012c74:	f000 fb33 	bl	80132de <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8012c78:	210c      	movs	r1, #12
 8012c7a:	187b      	adds	r3, r7, r1
 8012c7c:	193a      	adds	r2, r7, r4
 8012c7e:	7812      	ldrb	r2, [r2, #0]
 8012c80:	701a      	strb	r2, [r3, #0]
                status = LORAMAC_STATUS_OK;
 8012c82:	2317      	movs	r3, #23
 8012c84:	18fb      	adds	r3, r7, r3
 8012c86:	2200      	movs	r2, #0
 8012c88:	701a      	strb	r2, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8012c8a:	187b      	adds	r3, r7, r1
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	0019      	movs	r1, r3
 8012c90:	2010      	movs	r0, #16
 8012c92:	f000 fcf9 	bl	8013688 <LoRaMacCommandsAddCmd>
 8012c96:	1e03      	subs	r3, r0, #0
 8012c98:	d03b      	beq.n	8012d12 <LoRaMacMlmeRequest+0x24a>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012c9a:	2317      	movs	r3, #23
 8012c9c:	18fb      	adds	r3, r7, r3
 8012c9e:	2213      	movs	r2, #19
 8012ca0:	701a      	strb	r2, [r3, #0]
                }
            }
            break;
 8012ca2:	e036      	b.n	8012d12 <LoRaMacMlmeRequest+0x24a>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8012ca4:	2317      	movs	r3, #23
 8012ca6:	18fb      	adds	r3, r7, r3
 8012ca8:	2200      	movs	r2, #0
 8012caa:	701a      	strb	r2, [r3, #0]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012cac:	230c      	movs	r3, #12
 8012cae:	18fb      	adds	r3, r7, r3
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	0019      	movs	r1, r3
 8012cb4:	2012      	movs	r0, #18
 8012cb6:	f000 fce7 	bl	8013688 <LoRaMacCommandsAddCmd>
 8012cba:	1e03      	subs	r3, r0, #0
 8012cbc:	d02b      	beq.n	8012d16 <LoRaMacMlmeRequest+0x24e>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012cbe:	2317      	movs	r3, #23
 8012cc0:	18fb      	adds	r3, r7, r3
 8012cc2:	2213      	movs	r2, #19
 8012cc4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8012cc6:	e026      	b.n	8012d16 <LoRaMacMlmeRequest+0x24e>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8012cc8:	2310      	movs	r3, #16
 8012cca:	18fb      	adds	r3, r7, r3
 8012ccc:	2201      	movs	r2, #1
 8012cce:	70da      	strb	r2, [r3, #3]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8012cd0:	f000 fac3 	bl	801325a <LoRaMacClassBIsAcquisitionInProgress>
 8012cd4:	0003      	movs	r3, r0
 8012cd6:	001a      	movs	r2, r3
 8012cd8:	2301      	movs	r3, #1
 8012cda:	4053      	eors	r3, r2
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00a      	beq.n	8012cf8 <LoRaMacMlmeRequest+0x230>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	f000 fa9b 	bl	801321e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8012ce8:	2000      	movs	r0, #0
 8012cea:	f000 fabc 	bl	8013266 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8012cee:	2317      	movs	r3, #23
 8012cf0:	18fb      	adds	r3, r7, r3
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	701a      	strb	r2, [r3, #0]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012cf6:	e00f      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
                status = LORAMAC_STATUS_BUSY;
 8012cf8:	2317      	movs	r3, #23
 8012cfa:	18fb      	adds	r3, r7, r3
 8012cfc:	2201      	movs	r2, #1
 8012cfe:	701a      	strb	r2, [r3, #0]
            break;
 8012d00:	e00a      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
        }
        default:
            break;
 8012d02:	46c0      	nop			; (mov r8, r8)
 8012d04:	e008      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
            break;
 8012d06:	46c0      	nop			; (mov r8, r8)
 8012d08:	e006      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
            break;
 8012d0a:	46c0      	nop			; (mov r8, r8)
 8012d0c:	e004      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
            break;
 8012d0e:	46c0      	nop			; (mov r8, r8)
 8012d10:	e002      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
            break;
 8012d12:	46c0      	nop			; (mov r8, r8)
 8012d14:	e000      	b.n	8012d18 <LoRaMacMlmeRequest+0x250>
            break;
 8012d16:	46c0      	nop			; (mov r8, r8)
    }

    if( status != LORAMAC_STATUS_OK )
 8012d18:	2317      	movs	r3, #23
 8012d1a:	18fb      	adds	r3, r7, r3
 8012d1c:	781b      	ldrb	r3, [r3, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d00e      	beq.n	8012d40 <LoRaMacMlmeRequest+0x278>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012d22:	f000 fff5 	bl	8013d10 <LoRaMacConfirmQueueGetCnt>
 8012d26:	1e03      	subs	r3, r0, #0
 8012d28:	d111      	bne.n	8012d4e <LoRaMacMlmeRequest+0x286>
        {
            MacCtx.NodeAckRequested = false;
 8012d2a:	4b0d      	ldr	r3, [pc, #52]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012d2c:	4a11      	ldr	r2, [pc, #68]	; (8012d74 <LoRaMacMlmeRequest+0x2ac>)
 8012d2e:	2100      	movs	r1, #0
 8012d30:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012d32:	4b0b      	ldr	r3, [pc, #44]	; (8012d60 <LoRaMacMlmeRequest+0x298>)
 8012d34:	4a0c      	ldr	r2, [pc, #48]	; (8012d68 <LoRaMacMlmeRequest+0x2a0>)
 8012d36:	5c99      	ldrb	r1, [r3, r2]
 8012d38:	2004      	movs	r0, #4
 8012d3a:	4381      	bics	r1, r0
 8012d3c:	5499      	strb	r1, [r3, r2]
 8012d3e:	e006      	b.n	8012d4e <LoRaMacMlmeRequest+0x286>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012d40:	2310      	movs	r3, #16
 8012d42:	18fb      	adds	r3, r7, r3
 8012d44:	0018      	movs	r0, r3
 8012d46:	f000 fe91 	bl	8013a6c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 8012d4a:	f7fe fbaf 	bl	80114ac <EventMacNvmCtxChanged>
    }
    return status;
 8012d4e:	2317      	movs	r3, #23
 8012d50:	18fb      	adds	r3, r7, r3
 8012d52:	781b      	ldrb	r3, [r3, #0]
}
 8012d54:	0018      	movs	r0, r3
 8012d56:	46bd      	mov	sp, r7
 8012d58:	b006      	add	sp, #24
 8012d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8012d5c:	20000d40 	.word	0x20000d40
 8012d60:	200008f0 	.word	0x200008f0
 8012d64:	00000451 	.word	0x00000451
 8012d68:	00000481 	.word	0x00000481
 8012d6c:	0801b3cc 	.word	0x0801b3cc
 8012d70:	00000484 	.word	0x00000484
 8012d74:	00000414 	.word	0x00000414

08012d78 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest )
{
 8012d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d7a:	b08b      	sub	sp, #44	; 0x2c
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012d80:	2327      	movs	r3, #39	; 0x27
 8012d82:	18fb      	adds	r3, r7, r3
 8012d84:	2202      	movs	r2, #2
 8012d86:	701a      	strb	r2, [r3, #0]
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 8012d88:	2326      	movs	r3, #38	; 0x26
 8012d8a:	18fb      	adds	r3, r7, r3
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	701a      	strb	r2, [r3, #0]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012d90:	231d      	movs	r3, #29
 8012d92:	18fb      	adds	r3, r7, r3
 8012d94:	2200      	movs	r2, #0
 8012d96:	701a      	strb	r2, [r3, #0]
    bool readyToSend = false;
 8012d98:	231c      	movs	r3, #28
 8012d9a:	18fb      	adds	r3, r7, r3
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	701a      	strb	r2, [r3, #0]

    if( mcpsRequest == NULL )
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d101      	bne.n	8012daa <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012da6:	2303      	movs	r3, #3
 8012da8:	e113      	b.n	8012fd2 <LoRaMacMcpsRequest+0x25a>
    }
    if( LoRaMacIsBusy( ) == true )
 8012daa:	f7fb fd97 	bl	800e8dc <LoRaMacIsBusy>
 8012dae:	1e03      	subs	r3, r0, #0
 8012db0:	d001      	beq.n	8012db6 <LoRaMacMcpsRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8012db2:	2301      	movs	r3, #1
 8012db4:	e10d      	b.n	8012fd2 <LoRaMacMcpsRequest+0x25a>
    }

    macHdr.Value = 0;
 8012db6:	2310      	movs	r3, #16
 8012db8:	18fb      	adds	r3, r7, r3
 8012dba:	2200      	movs	r2, #0
 8012dbc:	701a      	strb	r2, [r3, #0]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8012dbe:	4b87      	ldr	r3, [pc, #540]	; (8012fdc <LoRaMacMcpsRequest+0x264>)
 8012dc0:	2214      	movs	r2, #20
 8012dc2:	2100      	movs	r1, #0
 8012dc4:	0018      	movs	r0, r3
 8012dc6:	f006 fd7f 	bl	80198c8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012dca:	4b85      	ldr	r3, [pc, #532]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012dcc:	4a85      	ldr	r2, [pc, #532]	; (8012fe4 <LoRaMacMcpsRequest+0x26c>)
 8012dce:	2101      	movs	r1, #1
 8012dd0:	5499      	strb	r1, [r3, r2]

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8012dd2:	4b83      	ldr	r3, [pc, #524]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012dd4:	4a84      	ldr	r2, [pc, #528]	; (8012fe8 <LoRaMacMcpsRequest+0x270>)
 8012dd6:	2101      	movs	r1, #1
 8012dd8:	5499      	strb	r1, [r3, r2]

    switch( mcpsRequest->Type )
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	2b01      	cmp	r3, #1
 8012de0:	d028      	beq.n	8012e34 <LoRaMacMcpsRequest+0xbc>
 8012de2:	2b03      	cmp	r3, #3
 8012de4:	d053      	beq.n	8012e8e <LoRaMacMcpsRequest+0x116>
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d000      	beq.n	8012dec <LoRaMacMcpsRequest+0x74>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012dea:	e06d      	b.n	8012ec8 <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8012dec:	231c      	movs	r3, #28
 8012dee:	18fb      	adds	r3, r7, r3
 8012df0:	2201      	movs	r2, #1
 8012df2:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8012df4:	4b7a      	ldr	r3, [pc, #488]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012df6:	4a7d      	ldr	r2, [pc, #500]	; (8012fec <LoRaMacMcpsRequest+0x274>)
 8012df8:	2101      	movs	r1, #1
 8012dfa:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8012dfc:	2310      	movs	r3, #16
 8012dfe:	18fb      	adds	r3, r7, r3
 8012e00:	781a      	ldrb	r2, [r3, #0]
 8012e02:	211f      	movs	r1, #31
 8012e04:	400a      	ands	r2, r1
 8012e06:	1c11      	adds	r1, r2, #0
 8012e08:	2240      	movs	r2, #64	; 0x40
 8012e0a:	430a      	orrs	r2, r1
 8012e0c:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8012e0e:	2326      	movs	r3, #38	; 0x26
 8012e10:	18fb      	adds	r3, r7, r3
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	7912      	ldrb	r2, [r2, #4]
 8012e16:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	689b      	ldr	r3, [r3, #8]
 8012e1c:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8012e1e:	231e      	movs	r3, #30
 8012e20:	18fb      	adds	r3, r7, r3
 8012e22:	687a      	ldr	r2, [r7, #4]
 8012e24:	8992      	ldrh	r2, [r2, #12]
 8012e26:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8012e28:	231d      	movs	r3, #29
 8012e2a:	18fb      	adds	r3, r7, r3
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	7b92      	ldrb	r2, [r2, #14]
 8012e30:	701a      	strb	r2, [r3, #0]
            break;
 8012e32:	e049      	b.n	8012ec8 <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8012e34:	231c      	movs	r3, #28
 8012e36:	18fb      	adds	r3, r7, r3
 8012e38:	2201      	movs	r2, #1
 8012e3a:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	7bdb      	ldrb	r3, [r3, #15]
 8012e40:	1c1a      	adds	r2, r3, #0
 8012e42:	b2d3      	uxtb	r3, r2
 8012e44:	2b08      	cmp	r3, #8
 8012e46:	d901      	bls.n	8012e4c <LoRaMacMcpsRequest+0xd4>
 8012e48:	2308      	movs	r3, #8
 8012e4a:	1c1a      	adds	r2, r3, #0
 8012e4c:	b2d1      	uxtb	r1, r2
 8012e4e:	4b64      	ldr	r3, [pc, #400]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012e50:	4a66      	ldr	r2, [pc, #408]	; (8012fec <LoRaMacMcpsRequest+0x274>)
 8012e52:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012e54:	2310      	movs	r3, #16
 8012e56:	18fb      	adds	r3, r7, r3
 8012e58:	781a      	ldrb	r2, [r3, #0]
 8012e5a:	211f      	movs	r1, #31
 8012e5c:	400a      	ands	r2, r1
 8012e5e:	1c11      	adds	r1, r2, #0
 8012e60:	2280      	movs	r2, #128	; 0x80
 8012e62:	4252      	negs	r2, r2
 8012e64:	430a      	orrs	r2, r1
 8012e66:	701a      	strb	r2, [r3, #0]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8012e68:	2326      	movs	r3, #38	; 0x26
 8012e6a:	18fb      	adds	r3, r7, r3
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	7912      	ldrb	r2, [r2, #4]
 8012e70:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	689b      	ldr	r3, [r3, #8]
 8012e76:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 8012e78:	231e      	movs	r3, #30
 8012e7a:	18fb      	adds	r3, r7, r3
 8012e7c:	687a      	ldr	r2, [r7, #4]
 8012e7e:	8992      	ldrh	r2, [r2, #12]
 8012e80:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8012e82:	231d      	movs	r3, #29
 8012e84:	18fb      	adds	r3, r7, r3
 8012e86:	687a      	ldr	r2, [r7, #4]
 8012e88:	7b92      	ldrb	r2, [r2, #14]
 8012e8a:	701a      	strb	r2, [r3, #0]
            break;
 8012e8c:	e01c      	b.n	8012ec8 <LoRaMacMcpsRequest+0x150>
            readyToSend = true;
 8012e8e:	231c      	movs	r3, #28
 8012e90:	18fb      	adds	r3, r7, r3
 8012e92:	2201      	movs	r2, #1
 8012e94:	701a      	strb	r2, [r3, #0]
            MacCtx.AckTimeoutRetries = 1;
 8012e96:	4b52      	ldr	r3, [pc, #328]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012e98:	4a54      	ldr	r2, [pc, #336]	; (8012fec <LoRaMacMcpsRequest+0x274>)
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	5499      	strb	r1, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012e9e:	2310      	movs	r3, #16
 8012ea0:	18fb      	adds	r3, r7, r3
 8012ea2:	781a      	ldrb	r2, [r3, #0]
 8012ea4:	2120      	movs	r1, #32
 8012ea6:	4249      	negs	r1, r1
 8012ea8:	430a      	orrs	r2, r1
 8012eaa:	701a      	strb	r2, [r3, #0]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8012eb2:	231e      	movs	r3, #30
 8012eb4:	18fb      	adds	r3, r7, r3
 8012eb6:	687a      	ldr	r2, [r7, #4]
 8012eb8:	8912      	ldrh	r2, [r2, #8]
 8012eba:	801a      	strh	r2, [r3, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 8012ebc:	231d      	movs	r3, #29
 8012ebe:	18fb      	adds	r3, r7, r3
 8012ec0:	687a      	ldr	r2, [r7, #4]
 8012ec2:	7a92      	ldrb	r2, [r2, #10]
 8012ec4:	701a      	strb	r2, [r3, #0]
            break;
 8012ec6:	46c0      	nop			; (mov r8, r8)
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012ec8:	2118      	movs	r1, #24
 8012eca:	187b      	adds	r3, r7, r1
 8012ecc:	2202      	movs	r2, #2
 8012ece:	701a      	strb	r2, [r3, #0]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012ed0:	4b43      	ldr	r3, [pc, #268]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012ed2:	4a47      	ldr	r2, [pc, #284]	; (8012ff0 <LoRaMacMcpsRequest+0x278>)
 8012ed4:	589a      	ldr	r2, [r3, r2]
 8012ed6:	2396      	movs	r3, #150	; 0x96
 8012ed8:	005b      	lsls	r3, r3, #1
 8012eda:	5cd2      	ldrb	r2, [r2, r3]
 8012edc:	187b      	adds	r3, r7, r1
 8012ede:	709a      	strb	r2, [r3, #2]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8012ee0:	4b3f      	ldr	r3, [pc, #252]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012ee2:	4a43      	ldr	r2, [pc, #268]	; (8012ff0 <LoRaMacMcpsRequest+0x278>)
 8012ee4:	589b      	ldr	r3, [r3, r2]
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	187a      	adds	r2, r7, r1
 8012eea:	0011      	movs	r1, r2
 8012eec:	0018      	movs	r0, r3
 8012eee:	f002 fc5f 	bl	80157b0 <RegionGetPhyParam>
 8012ef2:	0003      	movs	r3, r0
 8012ef4:	001a      	movs	r2, r3
 8012ef6:	2114      	movs	r1, #20
 8012ef8:	187b      	adds	r3, r7, r1
 8012efa:	601a      	str	r2, [r3, #0]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8012efc:	187b      	adds	r3, r7, r1
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	b259      	sxtb	r1, r3
 8012f02:	231d      	movs	r3, #29
 8012f04:	18fa      	adds	r2, r7, r3
 8012f06:	18fb      	adds	r3, r7, r3
 8012f08:	1c0c      	adds	r4, r1, #0
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	b258      	sxtb	r0, r3
 8012f0e:	b261      	sxtb	r1, r4
 8012f10:	4288      	cmp	r0, r1
 8012f12:	da00      	bge.n	8012f16 <LoRaMacMcpsRequest+0x19e>
 8012f14:	1c23      	adds	r3, r4, #0
 8012f16:	7013      	strb	r3, [r2, #0]

    if( readyToSend == true )
 8012f18:	231c      	movs	r3, #28
 8012f1a:	18fb      	adds	r3, r7, r3
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d052      	beq.n	8012fc8 <LoRaMacMcpsRequest+0x250>
    {
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 8012f22:	4b2f      	ldr	r3, [pc, #188]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012f24:	4a32      	ldr	r2, [pc, #200]	; (8012ff0 <LoRaMacMcpsRequest+0x278>)
 8012f26:	589b      	ldr	r3, [r3, r2]
 8012f28:	22f2      	movs	r2, #242	; 0xf2
 8012f2a:	5c9b      	ldrb	r3, [r3, r2]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	4053      	eors	r3, r2
 8012f30:	b2db      	uxtb	r3, r3
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d024      	beq.n	8012f80 <LoRaMacMcpsRequest+0x208>
        {
            verify.DatarateParams.Datarate = datarate;
 8012f36:	210c      	movs	r1, #12
 8012f38:	187b      	adds	r3, r7, r1
 8012f3a:	221d      	movs	r2, #29
 8012f3c:	18ba      	adds	r2, r7, r2
 8012f3e:	7812      	ldrb	r2, [r2, #0]
 8012f40:	701a      	strb	r2, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8012f42:	4b27      	ldr	r3, [pc, #156]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012f44:	4a2a      	ldr	r2, [pc, #168]	; (8012ff0 <LoRaMacMcpsRequest+0x278>)
 8012f46:	589a      	ldr	r2, [r3, r2]
 8012f48:	2396      	movs	r3, #150	; 0x96
 8012f4a:	005b      	lsls	r3, r3, #1
 8012f4c:	5cd2      	ldrb	r2, [r2, r3]
 8012f4e:	187b      	adds	r3, r7, r1
 8012f50:	709a      	strb	r2, [r3, #2]

            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 8012f52:	4b23      	ldr	r3, [pc, #140]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012f54:	4a26      	ldr	r2, [pc, #152]	; (8012ff0 <LoRaMacMcpsRequest+0x278>)
 8012f56:	589b      	ldr	r3, [r3, r2]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	1879      	adds	r1, r7, r1
 8012f5c:	2205      	movs	r2, #5
 8012f5e:	0018      	movs	r0, r3
 8012f60:	f002 fc8d 	bl	801587e <RegionVerify>
 8012f64:	1e03      	subs	r3, r0, #0
 8012f66:	d009      	beq.n	8012f7c <LoRaMacMcpsRequest+0x204>
            {
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 8012f68:	4b1d      	ldr	r3, [pc, #116]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012f6a:	4a21      	ldr	r2, [pc, #132]	; (8012ff0 <LoRaMacMcpsRequest+0x278>)
 8012f6c:	589b      	ldr	r3, [r3, r2]
 8012f6e:	220c      	movs	r2, #12
 8012f70:	18ba      	adds	r2, r7, r2
 8012f72:	2100      	movs	r1, #0
 8012f74:	5651      	ldrsb	r1, [r2, r1]
 8012f76:	22f9      	movs	r2, #249	; 0xf9
 8012f78:	5499      	strb	r1, [r3, r2]
 8012f7a:	e001      	b.n	8012f80 <LoRaMacMcpsRequest+0x208>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012f7c:	2303      	movs	r3, #3
 8012f7e:	e028      	b.n	8012fd2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 8012f80:	2627      	movs	r6, #39	; 0x27
 8012f82:	19bc      	adds	r4, r7, r6
 8012f84:	231e      	movs	r3, #30
 8012f86:	18fb      	adds	r3, r7, r3
 8012f88:	881d      	ldrh	r5, [r3, #0]
 8012f8a:	6a3a      	ldr	r2, [r7, #32]
 8012f8c:	2326      	movs	r3, #38	; 0x26
 8012f8e:	18fb      	adds	r3, r7, r3
 8012f90:	7819      	ldrb	r1, [r3, #0]
 8012f92:	2310      	movs	r3, #16
 8012f94:	18f8      	adds	r0, r7, r3
 8012f96:	002b      	movs	r3, r5
 8012f98:	f7fd f810 	bl	800ffbc <Send>
 8012f9c:	0003      	movs	r3, r0
 8012f9e:	7023      	strb	r3, [r4, #0]
        if( status == LORAMAC_STATUS_OK )
 8012fa0:	19bb      	adds	r3, r7, r6
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10b      	bne.n	8012fc0 <LoRaMacMcpsRequest+0x248>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	7819      	ldrb	r1, [r3, #0]
 8012fac:	4b0c      	ldr	r3, [pc, #48]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012fae:	4a11      	ldr	r2, [pc, #68]	; (8012ff4 <LoRaMacMcpsRequest+0x27c>)
 8012fb0:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8012fb2:	4b0b      	ldr	r3, [pc, #44]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012fb4:	4a10      	ldr	r2, [pc, #64]	; (8012ff8 <LoRaMacMcpsRequest+0x280>)
 8012fb6:	5c99      	ldrb	r1, [r3, r2]
 8012fb8:	2001      	movs	r0, #1
 8012fba:	4301      	orrs	r1, r0
 8012fbc:	5499      	strb	r1, [r3, r2]
 8012fbe:	e003      	b.n	8012fc8 <LoRaMacMcpsRequest+0x250>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8012fc0:	4b07      	ldr	r3, [pc, #28]	; (8012fe0 <LoRaMacMcpsRequest+0x268>)
 8012fc2:	4a0e      	ldr	r2, [pc, #56]	; (8012ffc <LoRaMacMcpsRequest+0x284>)
 8012fc4:	2100      	movs	r1, #0
 8012fc6:	5499      	strb	r1, [r3, r2]
        }
    }

    EventMacNvmCtxChanged( );
 8012fc8:	f7fe fa70 	bl	80114ac <EventMacNvmCtxChanged>
    return status;
 8012fcc:	2327      	movs	r3, #39	; 0x27
 8012fce:	18fb      	adds	r3, r7, r3
 8012fd0:	781b      	ldrb	r3, [r3, #0]
}
 8012fd2:	0018      	movs	r0, r3
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	b00b      	add	sp, #44	; 0x2c
 8012fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012fda:	46c0      	nop			; (mov r8, r8)
 8012fdc:	20000d2c 	.word	0x20000d2c
 8012fe0:	200008f0 	.word	0x200008f0
 8012fe4:	0000043d 	.word	0x0000043d
 8012fe8:	00000412 	.word	0x00000412
 8012fec:	00000411 	.word	0x00000411
 8012ff0:	00000484 	.word	0x00000484
 8012ff4:	0000043c 	.word	0x0000043c
 8012ff8:	00000481 	.word	0x00000481
 8012ffc:	00000414 	.word	0x00000414

08013000 <CalcNextV10X>:

#include "region/Region.h"
#include "LoRaMacAdr.h"

static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8013000:	b590      	push	{r4, r7, lr}
 8013002:	b08b      	sub	sp, #44	; 0x2c
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801300e:	2327      	movs	r3, #39	; 0x27
 8013010:	18fb      	adds	r3, r7, r3
 8013012:	2200      	movs	r2, #0
 8013014:	701a      	strb	r2, [r3, #0]
    int8_t datarate = adrNext->Datarate;
 8013016:	2326      	movs	r3, #38	; 0x26
 8013018:	18fb      	adds	r3, r7, r3
 801301a:	68fa      	ldr	r2, [r7, #12]
 801301c:	7c12      	ldrb	r2, [r2, #16]
 801301e:	701a      	strb	r2, [r3, #0]
    int8_t txPower = adrNext->TxPower;
 8013020:	2325      	movs	r3, #37	; 0x25
 8013022:	18fb      	adds	r3, r7, r3
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	7c52      	ldrb	r2, [r2, #17]
 8013028:	701a      	strb	r2, [r3, #0]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	689a      	ldr	r2, [r3, #8]
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	795b      	ldrb	r3, [r3, #5]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d100      	bne.n	801303c <CalcNextV10X+0x3c>
 801303a:	e0a8      	b.n	801318e <CalcNextV10X+0x18e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801303c:	2120      	movs	r1, #32
 801303e:	187b      	adds	r3, r7, r1
 8013040:	2202      	movs	r2, #2
 8013042:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	7c9a      	ldrb	r2, [r3, #18]
 8013048:	187b      	adds	r3, r7, r1
 801304a:	709a      	strb	r2, [r3, #2]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	7cdb      	ldrb	r3, [r3, #19]
 8013050:	187a      	adds	r2, r7, r1
 8013052:	0011      	movs	r1, r2
 8013054:	0018      	movs	r0, r3
 8013056:	f002 fbab 	bl	80157b0 <RegionGetPhyParam>
 801305a:	0003      	movs	r3, r0
 801305c:	001a      	movs	r2, r3
 801305e:	211c      	movs	r1, #28
 8013060:	187b      	adds	r3, r7, r1
 8013062:	601a      	str	r2, [r3, #0]
        minTxDatarate = phyParam.Value;
 8013064:	187b      	adds	r3, r7, r1
 8013066:	681a      	ldr	r2, [r3, #0]
 8013068:	2124      	movs	r1, #36	; 0x24
 801306a:	187b      	adds	r3, r7, r1
 801306c:	701a      	strb	r2, [r3, #0]
        datarate = MAX( datarate, minTxDatarate );
 801306e:	2026      	movs	r0, #38	; 0x26
 8013070:	183a      	adds	r2, r7, r0
 8013072:	187b      	adds	r3, r7, r1
 8013074:	1839      	adds	r1, r7, r0
 8013076:	780c      	ldrb	r4, [r1, #0]
 8013078:	781b      	ldrb	r3, [r3, #0]
 801307a:	b258      	sxtb	r0, r3
 801307c:	b261      	sxtb	r1, r4
 801307e:	4288      	cmp	r0, r1
 8013080:	da00      	bge.n	8013084 <CalcNextV10X+0x84>
 8013082:	1c23      	adds	r3, r4, #0
 8013084:	7013      	strb	r3, [r2, #0]

        if( datarate == minTxDatarate )
 8013086:	2326      	movs	r3, #38	; 0x26
 8013088:	18fa      	adds	r2, r7, r3
 801308a:	2324      	movs	r3, #36	; 0x24
 801308c:	18fb      	adds	r3, r7, r3
 801308e:	7812      	ldrb	r2, [r2, #0]
 8013090:	b252      	sxtb	r2, r2
 8013092:	781b      	ldrb	r3, [r3, #0]
 8013094:	b25b      	sxtb	r3, r3
 8013096:	429a      	cmp	r2, r3
 8013098:	d107      	bne.n	80130aa <CalcNextV10X+0xaa>
        {
            *adrAckCounter = 0;
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	2200      	movs	r2, #0
 801309e:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80130a0:	2327      	movs	r3, #39	; 0x27
 80130a2:	18fb      	adds	r3, r7, r3
 80130a4:	2200      	movs	r2, #0
 80130a6:	701a      	strb	r2, [r3, #0]
 80130a8:	e071      	b.n	801318e <CalcNextV10X+0x18e>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	689b      	ldr	r3, [r3, #8]
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	8992      	ldrh	r2, [r2, #12]
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d304      	bcc.n	80130c0 <CalcNextV10X+0xc0>
            {
                adrAckReq = true;
 80130b6:	2327      	movs	r3, #39	; 0x27
 80130b8:	18fb      	adds	r3, r7, r3
 80130ba:	2201      	movs	r2, #1
 80130bc:	701a      	strb	r2, [r3, #0]
 80130be:	e003      	b.n	80130c8 <CalcNextV10X+0xc8>
            }
            else
            {
                adrAckReq = false;
 80130c0:	2327      	movs	r3, #39	; 0x27
 80130c2:	18fb      	adds	r3, r7, r3
 80130c4:	2200      	movs	r2, #0
 80130c6:	701a      	strb	r2, [r3, #0]
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	689b      	ldr	r3, [r3, #8]
 80130cc:	68fa      	ldr	r2, [r7, #12]
 80130ce:	8992      	ldrh	r2, [r2, #12]
 80130d0:	0011      	movs	r1, r2
 80130d2:	68fa      	ldr	r2, [r7, #12]
 80130d4:	89d2      	ldrh	r2, [r2, #14]
 80130d6:	188a      	adds	r2, r1, r2
 80130d8:	4293      	cmp	r3, r2
 80130da:	d358      	bcc.n	801318e <CalcNextV10X+0x18e>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80130dc:	2120      	movs	r1, #32
 80130de:	187b      	adds	r3, r7, r1
 80130e0:	2208      	movs	r2, #8
 80130e2:	701a      	strb	r2, [r3, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	7cdb      	ldrb	r3, [r3, #19]
 80130e8:	187a      	adds	r2, r7, r1
 80130ea:	0011      	movs	r1, r2
 80130ec:	0018      	movs	r0, r3
 80130ee:	f002 fb5f 	bl	80157b0 <RegionGetPhyParam>
 80130f2:	0003      	movs	r3, r0
 80130f4:	001a      	movs	r2, r3
 80130f6:	211c      	movs	r1, #28
 80130f8:	187b      	adds	r3, r7, r1
 80130fa:	601a      	str	r2, [r3, #0]
                txPower = phyParam.Value;
 80130fc:	187b      	adds	r3, r7, r1
 80130fe:	681a      	ldr	r2, [r3, #0]
 8013100:	2325      	movs	r3, #37	; 0x25
 8013102:	18fb      	adds	r3, r7, r3
 8013104:	701a      	strb	r2, [r3, #0]

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	689a      	ldr	r2, [r3, #8]
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	89db      	ldrh	r3, [r3, #14]
 801310e:	0019      	movs	r1, r3
 8013110:	0010      	movs	r0, r2
 8013112:	f7ed f87f 	bl	8000214 <__aeabi_uidivmod>
 8013116:	000b      	movs	r3, r1
 8013118:	2b01      	cmp	r3, #1
 801311a:	d138      	bne.n	801318e <CalcNextV10X+0x18e>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801311c:	2120      	movs	r1, #32
 801311e:	187b      	adds	r3, r7, r1
 8013120:	2222      	movs	r2, #34	; 0x22
 8013122:	701a      	strb	r2, [r3, #0]
                    getPhy.Datarate = datarate;
 8013124:	187b      	adds	r3, r7, r1
 8013126:	2426      	movs	r4, #38	; 0x26
 8013128:	193a      	adds	r2, r7, r4
 801312a:	7812      	ldrb	r2, [r2, #0]
 801312c:	705a      	strb	r2, [r3, #1]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	7c9a      	ldrb	r2, [r3, #18]
 8013132:	187b      	adds	r3, r7, r1
 8013134:	709a      	strb	r2, [r3, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	7cdb      	ldrb	r3, [r3, #19]
 801313a:	187a      	adds	r2, r7, r1
 801313c:	0011      	movs	r1, r2
 801313e:	0018      	movs	r0, r3
 8013140:	f002 fb36 	bl	80157b0 <RegionGetPhyParam>
 8013144:	0003      	movs	r3, r0
 8013146:	001a      	movs	r2, r3
 8013148:	211c      	movs	r1, #28
 801314a:	187b      	adds	r3, r7, r1
 801314c:	601a      	str	r2, [r3, #0]
                    datarate = phyParam.Value;
 801314e:	187b      	adds	r3, r7, r1
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	193b      	adds	r3, r7, r4
 8013154:	701a      	strb	r2, [r3, #0]

                    if( datarate == minTxDatarate )
 8013156:	193a      	adds	r2, r7, r4
 8013158:	2324      	movs	r3, #36	; 0x24
 801315a:	18fb      	adds	r3, r7, r3
 801315c:	7812      	ldrb	r2, [r2, #0]
 801315e:	b252      	sxtb	r2, r2
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	b25b      	sxtb	r3, r3
 8013164:	429a      	cmp	r2, r3
 8013166:	d112      	bne.n	801318e <CalcNextV10X+0x18e>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8013168:	2327      	movs	r3, #39	; 0x27
 801316a:	18fb      	adds	r3, r7, r3
 801316c:	2200      	movs	r2, #0
 801316e:	701a      	strb	r2, [r3, #0]
                        if( adrNext->UpdateChanMask == true )
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	791b      	ldrb	r3, [r3, #4]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d00a      	beq.n	801318e <CalcNextV10X+0x18e>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_RESTORE_DEFAULT_CHANNELS;
 8013178:	2114      	movs	r1, #20
 801317a:	187b      	adds	r3, r7, r1
 801317c:	2201      	movs	r2, #1
 801317e:	711a      	strb	r2, [r3, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	7cdb      	ldrb	r3, [r3, #19]
 8013184:	187a      	adds	r2, r7, r1
 8013186:	0011      	movs	r1, r2
 8013188:	0018      	movs	r0, r3
 801318a:	f002 fb4d 	bl	8015828 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 801318e:	68bb      	ldr	r3, [r7, #8]
 8013190:	2226      	movs	r2, #38	; 0x26
 8013192:	18ba      	adds	r2, r7, r2
 8013194:	7812      	ldrb	r2, [r2, #0]
 8013196:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2225      	movs	r2, #37	; 0x25
 801319c:	18ba      	adds	r2, r7, r2
 801319e:	7812      	ldrb	r2, [r2, #0]
 80131a0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80131a2:	2327      	movs	r3, #39	; 0x27
 80131a4:	18fb      	adds	r3, r7, r3
 80131a6:	781b      	ldrb	r3, [r3, #0]
}
 80131a8:	0018      	movs	r0, r3
 80131aa:	46bd      	mov	sp, r7
 80131ac:	b00b      	add	sp, #44	; 0x2c
 80131ae:	bd90      	pop	{r4, r7, pc}

080131b0 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	60f8      	str	r0, [r7, #12]
 80131b8:	60b9      	str	r1, [r7, #8]
 80131ba:	607a      	str	r2, [r7, #4]
 80131bc:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	789b      	ldrb	r3, [r3, #2]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d107      	bne.n	80131d6 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80131c6:	683b      	ldr	r3, [r7, #0]
 80131c8:	687a      	ldr	r2, [r7, #4]
 80131ca:	68b9      	ldr	r1, [r7, #8]
 80131cc:	68f8      	ldr	r0, [r7, #12]
 80131ce:	f7ff ff17 	bl	8013000 <CalcNextV10X>
 80131d2:	0003      	movs	r3, r0
 80131d4:	e000      	b.n	80131d8 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80131d6:	2300      	movs	r3, #0
}
 80131d8:	0018      	movs	r0, r3
 80131da:	46bd      	mov	sp, r7
 80131dc:	b004      	add	sp, #16
 80131de:	bd80      	pop	{r7, pc}

080131e0 <LoRaMacClassBInit>:
}

#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmEvent classBNvmCtxChanged )
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b084      	sub	sp, #16
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	60f8      	str	r0, [r7, #12]
 80131e8:	60b9      	str	r1, [r7, #8]
 80131ea:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80131ec:	46c0      	nop			; (mov r8, r8)
 80131ee:	46bd      	mov	sp, r7
 80131f0:	b004      	add	sp, #16
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <LoRaMacClassBRestoreNvmCtx>:

bool LoRaMacClassBRestoreNvmCtx( void* classBNvmCtx )
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
    else
    {
        return false;
    }
#else
    return true;
 80131fc:	2301      	movs	r3, #1
#endif // LORAMAC_CLASSB_ENABLED
}
 80131fe:	0018      	movs	r0, r3
 8013200:	46bd      	mov	sp, r7
 8013202:	b002      	add	sp, #8
 8013204:	bd80      	pop	{r7, pc}

08013206 <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 8013206:	b580      	push	{r7, lr}
 8013208:	b082      	sub	sp, #8
 801320a:	af00      	add	r7, sp, #0
 801320c:	6078      	str	r0, [r7, #4]
#ifdef LORAMAC_CLASSB_ENABLED
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	2200      	movs	r2, #0
 8013212:	601a      	str	r2, [r3, #0]
    return NULL;
 8013214:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013216:	0018      	movs	r0, r3
 8013218:	46bd      	mov	sp, r7
 801321a:	b002      	add	sp, #8
 801321c:	bd80      	pop	{r7, pc}

0801321e <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801321e:	b580      	push	{r7, lr}
 8013220:	b082      	sub	sp, #8
 8013222:	af00      	add	r7, sp, #0
 8013224:	0002      	movs	r2, r0
 8013226:	1dfb      	adds	r3, r7, #7
 8013228:	701a      	strb	r2, [r3, #0]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801322a:	46c0      	nop			; (mov r8, r8)
 801322c:	46bd      	mov	sp, r7
 801322e:	b002      	add	sp, #8
 8013230:	bd80      	pop	{r7, pc}

08013232 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8013232:	b580      	push	{r7, lr}
 8013234:	b082      	sub	sp, #8
 8013236:	af00      	add	r7, sp, #0
 8013238:	0002      	movs	r2, r0
 801323a:	1dfb      	adds	r3, r7, #7
 801323c:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 801323e:	46c0      	nop			; (mov r8, r8)
 8013240:	46bd      	mov	sp, r7
 8013242:	b002      	add	sp, #8
 8013244:	bd80      	pop	{r7, pc}

08013246 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8013246:	b580      	push	{r7, lr}
 8013248:	b082      	sub	sp, #8
 801324a:	af00      	add	r7, sp, #0
 801324c:	0002      	movs	r2, r0
 801324e:	1dfb      	adds	r3, r7, #7
 8013250:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 8013252:	46c0      	nop			; (mov r8, r8)
 8013254:	46bd      	mov	sp, r7
 8013256:	b002      	add	sp, #8
 8013258:	bd80      	pop	{r7, pc}

0801325a <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801325a:	b580      	push	{r7, lr}
 801325c:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801325e:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013260:	0018      	movs	r0, r3
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8013266:	b580      	push	{r7, lr}
 8013268:	b082      	sub	sp, #8
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801326e:	46c0      	nop			; (mov r8, r8)
 8013270:	46bd      	mov	sp, r7
 8013272:	b002      	add	sp, #8
 8013274:	bd80      	pop	{r7, pc}

08013276 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b082      	sub	sp, #8
 801327a:	af00      	add	r7, sp, #0
 801327c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801327e:	46c0      	nop			; (mov r8, r8)
 8013280:	46bd      	mov	sp, r7
 8013282:	b002      	add	sp, #8
 8013284:	bd80      	pop	{r7, pc}

08013286 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8013286:	b580      	push	{r7, lr}
 8013288:	b082      	sub	sp, #8
 801328a:	af00      	add	r7, sp, #0
 801328c:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 801328e:	46c0      	nop			; (mov r8, r8)
 8013290:	46bd      	mov	sp, r7
 8013292:	b002      	add	sp, #8
 8013294:	bd80      	pop	{r7, pc}

08013296 <LoRaMacClassBRxBeacon>:
    }
}
#endif // LORAMAC_CLASSB_ENABLED

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8013296:	b580      	push	{r7, lr}
 8013298:	b082      	sub	sp, #8
 801329a:	af00      	add	r7, sp, #0
 801329c:	6078      	str	r0, [r7, #4]
 801329e:	000a      	movs	r2, r1
 80132a0:	1cbb      	adds	r3, r7, #2
 80132a2:	801a      	strh	r2, [r3, #0]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80132a4:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80132a6:	0018      	movs	r0, r3
 80132a8:	46bd      	mov	sp, r7
 80132aa:	b002      	add	sp, #8
 80132ac:	bd80      	pop	{r7, pc}

080132ae <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80132b2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80132b4:	0018      	movs	r0, r3
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}

080132ba <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80132ba:	b580      	push	{r7, lr}
 80132bc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80132be:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80132c0:	0018      	movs	r0, r3
 80132c2:	46bd      	mov	sp, r7
 80132c4:	bd80      	pop	{r7, pc}

080132c6 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80132c6:	b580      	push	{r7, lr}
 80132c8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80132ca:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80132cc:	0018      	movs	r0, r3
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80132d2:	b580      	push	{r7, lr}
 80132d4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80132d6:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80132d8:	0018      	movs	r0, r3
 80132da:	46bd      	mov	sp, r7
 80132dc:	bd80      	pop	{r7, pc}

080132de <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80132de:	b580      	push	{r7, lr}
 80132e0:	b082      	sub	sp, #8
 80132e2:	af00      	add	r7, sp, #0
 80132e4:	0002      	movs	r2, r0
 80132e6:	1dfb      	adds	r3, r7, #7
 80132e8:	701a      	strb	r2, [r3, #0]
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.NvmCtx->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    Ctx.NvmCtx->PingSlotCtx.PingPeriod = CalcPingPeriod( Ctx.NvmCtx->PingSlotCtx.PingNb );
    NvmContextChange( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80132ea:	46c0      	nop			; (mov r8, r8)
 80132ec:	46bd      	mov	sp, r7
 80132ee:	b002      	add	sp, #8
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80132f2:	b580      	push	{r7, lr}
 80132f4:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80132f6:	46c0      	nop			; (mov r8, r8)
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bd80      	pop	{r7, pc}

080132fc <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013300:	46c0      	nop			; (mov r8, r8)
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}

08013306 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8013306:	b580      	push	{r7, lr}
 8013308:	b082      	sub	sp, #8
 801330a:	af00      	add	r7, sp, #0
 801330c:	0002      	movs	r2, r0
 801330e:	1dfb      	adds	r3, r7, #7
 8013310:	701a      	strb	r2, [r3, #0]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013312:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013314:	0018      	movs	r0, r3
 8013316:	46bd      	mov	sp, r7
 8013318:	b002      	add	sp, #8
 801331a:	bd80      	pop	{r7, pc}

0801331c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b082      	sub	sp, #8
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013324:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013326:	0018      	movs	r0, r3
 8013328:	46bd      	mov	sp, r7
 801332a:	b002      	add	sp, #8
 801332c:	bd80      	pop	{r7, pc}

0801332e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801332e:	b580      	push	{r7, lr}
 8013330:	b082      	sub	sp, #8
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013336:	2302      	movs	r3, #2
#endif // LORAMAC_CLASSB_ENABLED
}
 8013338:	0018      	movs	r0, r3
 801333a:	46bd      	mov	sp, r7
 801333c:	b002      	add	sp, #8
 801333e:	bd80      	pop	{r7, pc}

08013340 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8013340:	b580      	push	{r7, lr}
 8013342:	af00      	add	r7, sp, #0
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        Ctx.NvmCtx->PingSlotCtx.Ctrl.Assigned = 1;
        NvmContextChange( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013344:	46c0      	nop			; (mov r8, r8)
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}

0801334a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801334a:	b580      	push	{r7, lr}
 801334c:	b082      	sub	sp, #8
 801334e:	af00      	add	r7, sp, #0
 8013350:	0002      	movs	r2, r0
 8013352:	6039      	str	r1, [r7, #0]
 8013354:	1dfb      	adds	r3, r7, #7
 8013356:	701a      	strb	r2, [r3, #0]
        NvmContextChange( );
    }

    return status;
#else
    return 0;
 8013358:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 801335a:	0018      	movs	r0, r3
 801335c:	46bd      	mov	sp, r7
 801335e:	b002      	add	sp, #8
 8013360:	bd80      	pop	{r7, pc}

08013362 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8013362:	b580      	push	{r7, lr}
 8013364:	b082      	sub	sp, #8
 8013366:	af00      	add	r7, sp, #0
 8013368:	603a      	str	r2, [r7, #0]
 801336a:	1dbb      	adds	r3, r7, #6
 801336c:	1c02      	adds	r2, r0, #0
 801336e:	801a      	strh	r2, [r3, #0]
 8013370:	1d7b      	adds	r3, r7, #5
 8013372:	1c0a      	adds	r2, r1, #0
 8013374:	701a      	strb	r2, [r3, #0]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013376:	46c0      	nop			; (mov r8, r8)
 8013378:	46bd      	mov	sp, r7
 801337a:	b002      	add	sp, #8
 801337c:	bd80      	pop	{r7, pc}

0801337e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801337e:	b580      	push	{r7, lr}
 8013380:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 8013382:	46c0      	nop			; (mov r8, r8)
 8013384:	46bd      	mov	sp, r7
 8013386:	bd80      	pop	{r7, pc}

08013388 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
        NvmContextChange( );
        return true;
    }
    return false;
#else
    return false;
 8013390:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 8013392:	0018      	movs	r0, r3
 8013394:	46bd      	mov	sp, r7
 8013396:	b002      	add	sp, #8
 8013398:	bd80      	pop	{r7, pc}

0801339a <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801339a:	b580      	push	{r7, lr}
 801339c:	b082      	sub	sp, #8
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80133a2:	2300      	movs	r3, #0
#endif // LORAMAC_CLASSB_ENABLED
}
 80133a4:	0018      	movs	r0, r3
 80133a6:	46bd      	mov	sp, r7
 80133a8:	b002      	add	sp, #8
 80133aa:	bd80      	pop	{r7, pc}

080133ac <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80133b0:	46c0      	nop			; (mov r8, r8)
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}

080133b6 <LoRaMacClassBProcess>:
    }
#endif // LORAMAC_CLASSB_ENABLED
}

void LoRaMacClassBProcess( void )
{
 80133b6:	b580      	push	{r7, lr}
 80133b8:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80133ba:	46c0      	nop			; (mov r8, r8)
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <IsSlotFree>:
 *
 * \param[IN]     slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80133cc:	230e      	movs	r3, #14
 80133ce:	18fb      	adds	r3, r7, r3
 80133d0:	2200      	movs	r2, #0
 80133d2:	801a      	strh	r2, [r3, #0]
 80133d4:	e00f      	b.n	80133f6 <IsSlotFree+0x36>
    {
        if( mem[size] != 0x00 )
 80133d6:	230e      	movs	r3, #14
 80133d8:	18fb      	adds	r3, r7, r3
 80133da:	881b      	ldrh	r3, [r3, #0]
 80133dc:	68ba      	ldr	r2, [r7, #8]
 80133de:	18d3      	adds	r3, r2, r3
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d001      	beq.n	80133ea <IsSlotFree+0x2a>
        {
            return false;
 80133e6:	2300      	movs	r3, #0
 80133e8:	e00b      	b.n	8013402 <IsSlotFree+0x42>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80133ea:	210e      	movs	r1, #14
 80133ec:	187b      	adds	r3, r7, r1
 80133ee:	881a      	ldrh	r2, [r3, #0]
 80133f0:	187b      	adds	r3, r7, r1
 80133f2:	3201      	adds	r2, #1
 80133f4:	801a      	strh	r2, [r3, #0]
 80133f6:	230e      	movs	r3, #14
 80133f8:	18fb      	adds	r3, r7, r3
 80133fa:	881b      	ldrh	r3, [r3, #0]
 80133fc:	2b0f      	cmp	r3, #15
 80133fe:	d9ea      	bls.n	80133d6 <IsSlotFree+0x16>
        }
    }
    return true;
 8013400:	2301      	movs	r3, #1
}
 8013402:	0018      	movs	r0, r3
 8013404:	46bd      	mov	sp, r7
 8013406:	b004      	add	sp, #16
 8013408:	bd80      	pop	{r7, pc}
	...

0801340c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b082      	sub	sp, #8
 8013410:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8013412:	1dfb      	adds	r3, r7, #7
 8013414:	2200      	movs	r2, #0
 8013416:	701a      	strb	r2, [r3, #0]

    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013418:	e00a      	b.n	8013430 <MallocNewMacCommandSlot+0x24>
    {
        itr++;
 801341a:	1dfb      	adds	r3, r7, #7
 801341c:	781a      	ldrb	r2, [r3, #0]
 801341e:	1dfb      	adds	r3, r7, #7
 8013420:	3201      	adds	r2, #1
 8013422:	701a      	strb	r2, [r3, #0]
        if( itr == NUM_OF_MAC_COMMANDS )
 8013424:	1dfb      	adds	r3, r7, #7
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	2b0f      	cmp	r3, #15
 801342a:	d101      	bne.n	8013430 <MallocNewMacCommandSlot+0x24>
        {
            return 0;
 801342c:	2300      	movs	r3, #0
 801342e:	e017      	b.n	8013460 <MallocNewMacCommandSlot+0x54>
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 8013430:	1dfb      	adds	r3, r7, #7
 8013432:	781b      	ldrb	r3, [r3, #0]
 8013434:	011b      	lsls	r3, r3, #4
 8013436:	3308      	adds	r3, #8
 8013438:	001a      	movs	r2, r3
 801343a:	4b0b      	ldr	r3, [pc, #44]	; (8013468 <MallocNewMacCommandSlot+0x5c>)
 801343c:	18d3      	adds	r3, r2, r3
 801343e:	0018      	movs	r0, r3
 8013440:	f7ff ffbe 	bl	80133c0 <IsSlotFree>
 8013444:	0003      	movs	r3, r0
 8013446:	001a      	movs	r2, r3
 8013448:	2301      	movs	r3, #1
 801344a:	4053      	eors	r3, r2
 801344c:	b2db      	uxtb	r3, r3
 801344e:	2b00      	cmp	r3, #0
 8013450:	d1e3      	bne.n	801341a <MallocNewMacCommandSlot+0xe>
        }
    }

    return &NvmCtx.MacCommandSlots[itr];
 8013452:	1dfb      	adds	r3, r7, #7
 8013454:	781b      	ldrb	r3, [r3, #0]
 8013456:	011b      	lsls	r3, r3, #4
 8013458:	3308      	adds	r3, #8
 801345a:	001a      	movs	r2, r3
 801345c:	4b02      	ldr	r3, [pc, #8]	; (8013468 <MallocNewMacCommandSlot+0x5c>)
 801345e:	18d3      	adds	r3, r2, r3
}
 8013460:	0018      	movs	r0, r3
 8013462:	46bd      	mov	sp, r7
 8013464:	b002      	add	sp, #8
 8013466:	bd80      	pop	{r7, pc}
 8013468:	20000f5c 	.word	0x20000f5c

0801346c <FreeMacCommandSlot>:
 * \param[IN]     slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	6078      	str	r0, [r7, #4]
    if( slot == 0 )
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d101      	bne.n	801347e <FreeMacCommandSlot+0x12>
    {
        return false;
 801347a:	2300      	movs	r3, #0
 801347c:	e006      	b.n	801348c <FreeMacCommandSlot+0x20>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	2210      	movs	r2, #16
 8013482:	2100      	movs	r1, #0
 8013484:	0018      	movs	r0, r3
 8013486:	f006 fa1f 	bl	80198c8 <memset1>

    return true;
 801348a:	2301      	movs	r3, #1
}
 801348c:	0018      	movs	r0, r3
 801348e:	46bd      	mov	sp, r7
 8013490:	b002      	add	sp, #8
 8013492:	bd80      	pop	{r7, pc}

08013494 <LinkedListInit>:
 *
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
    if( list == 0 )
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d101      	bne.n	80134a6 <LinkedListInit+0x12>
    {
        return false;
 80134a2:	2300      	movs	r3, #0
 80134a4:	e006      	b.n	80134b4 <LinkedListInit+0x20>
    }

    list->First = 0;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2200      	movs	r2, #0
 80134aa:	601a      	str	r2, [r3, #0]
    list->Last = 0;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2200      	movs	r2, #0
 80134b0:	605a      	str	r2, [r3, #4]

    return true;
 80134b2:	2301      	movs	r3, #1
}
 80134b4:	0018      	movs	r0, r3
 80134b6:	46bd      	mov	sp, r7
 80134b8:	b002      	add	sp, #8
 80134ba:	bd80      	pop	{r7, pc}

080134bc <LinkedListAdd>:
 * \param[IN]     list           - List where the element shall be added.
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b082      	sub	sp, #8
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	6078      	str	r0, [r7, #4]
 80134c4:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d104      	bne.n	80134d6 <LinkedListAdd+0x1a>
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d101      	bne.n	80134d6 <LinkedListAdd+0x1a>
    {
        return false;
 80134d2:	2300      	movs	r3, #0
 80134d4:	e015      	b.n	8013502 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == 0 )
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d102      	bne.n	80134e4 <LinkedListAdd+0x28>
    {
        list->First = element;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	683a      	ldr	r2, [r7, #0]
 80134e2:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	685b      	ldr	r3, [r3, #4]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d003      	beq.n	80134f4 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	683a      	ldr	r2, [r7, #0]
 80134f2:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = 0;
 80134f4:	683b      	ldr	r3, [r7, #0]
 80134f6:	2200      	movs	r2, #0
 80134f8:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	683a      	ldr	r2, [r7, #0]
 80134fe:	605a      	str	r2, [r3, #4]

    return true;
 8013500:	2301      	movs	r3, #1
}
 8013502:	0018      	movs	r0, r3
 8013504:	46bd      	mov	sp, r7
 8013506:	b002      	add	sp, #8
 8013508:	bd80      	pop	{r7, pc}

0801350a <LinkedListGetPrevious>:
 * \param[IN]     list           - List
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b084      	sub	sp, #16
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
 8013512:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2b00      	cmp	r3, #0
 8013518:	d104      	bne.n	8013524 <LinkedListGetPrevious+0x1a>
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d101      	bne.n	8013524 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8013520:	2300      	movs	r3, #0
 8013522:	e016      	b.n	8013552 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 801352a:	683a      	ldr	r2, [r7, #0]
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	429a      	cmp	r2, r3
 8013530:	d00c      	beq.n	801354c <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8013532:	e002      	b.n	801353a <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d007      	beq.n	8013550 <LinkedListGetPrevious+0x46>
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	683a      	ldr	r2, [r7, #0]
 8013546:	429a      	cmp	r2, r3
 8013548:	d1f4      	bne.n	8013534 <LinkedListGetPrevious+0x2a>
 801354a:	e001      	b.n	8013550 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801354c:	2300      	movs	r3, #0
 801354e:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8013550:	68fb      	ldr	r3, [r7, #12]
}
 8013552:	0018      	movs	r0, r3
 8013554:	46bd      	mov	sp, r7
 8013556:	b004      	add	sp, #16
 8013558:	bd80      	pop	{r7, pc}

0801355a <LinkedListRemove>:
 * \param[IN]     list           - List where the element shall be removed from.
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801355a:	b580      	push	{r7, lr}
 801355c:	b084      	sub	sp, #16
 801355e:	af00      	add	r7, sp, #0
 8013560:	6078      	str	r0, [r7, #4]
 8013562:	6039      	str	r1, [r7, #0]
    if( ( list == 0 ) && ( element == 0 ) )
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d104      	bne.n	8013574 <LinkedListRemove+0x1a>
 801356a:	683b      	ldr	r3, [r7, #0]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d101      	bne.n	8013574 <LinkedListRemove+0x1a>
    {
        return false;
 8013570:	2300      	movs	r3, #0
 8013572:	e023      	b.n	80135bc <LinkedListRemove+0x62>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8013574:	683a      	ldr	r2, [r7, #0]
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	0011      	movs	r1, r2
 801357a:	0018      	movs	r0, r3
 801357c:	f7ff ffc5 	bl	801350a <LinkedListGetPrevious>
 8013580:	0003      	movs	r3, r0
 8013582:	60fb      	str	r3, [r7, #12]

    if( list->First == element )
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	683a      	ldr	r2, [r7, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d103      	bne.n	8013596 <LinkedListRemove+0x3c>
    {
        list->First = element->Next;
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	683a      	ldr	r2, [r7, #0]
 801359c:	429a      	cmp	r2, r3
 801359e:	d102      	bne.n	80135a6 <LinkedListRemove+0x4c>
    {
        list->Last = PrevElement;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	68fa      	ldr	r2, [r7, #12]
 80135a4:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d003      	beq.n	80135b4 <LinkedListRemove+0x5a>
    {
        PrevElement->Next = element->Next;
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	681a      	ldr	r2, [r3, #0]
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	2200      	movs	r2, #0
 80135b8:	601a      	str	r2, [r3, #0]

    return true;
 80135ba:	2301      	movs	r3, #1
}
 80135bc:	0018      	movs	r0, r3
 80135be:	46bd      	mov	sp, r7
 80135c0:	b004      	add	sp, #16
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <IsSticky>:
 * \param[IN]   cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	0002      	movs	r2, r0
 80135cc:	1dfb      	adds	r3, r7, #7
 80135ce:	701a      	strb	r2, [r3, #0]
    switch( cid )
 80135d0:	1dfb      	adds	r3, r7, #7
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	2b08      	cmp	r3, #8
 80135d6:	d003      	beq.n	80135e0 <IsSticky+0x1c>
 80135d8:	2b0a      	cmp	r3, #10
 80135da:	d001      	beq.n	80135e0 <IsSticky+0x1c>
 80135dc:	2b05      	cmp	r3, #5
 80135de:	d101      	bne.n	80135e4 <IsSticky+0x20>
    {
        case MOTE_MAC_DL_CHANNEL_ANS:
        case MOTE_MAC_RX_PARAM_SETUP_ANS:
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
            return true;
 80135e0:	2301      	movs	r3, #1
 80135e2:	e000      	b.n	80135e6 <IsSticky+0x22>
        default:
            return false;
 80135e4:	2300      	movs	r3, #0
    }
}
 80135e6:	0018      	movs	r0, r3
 80135e8:	46bd      	mov	sp, r7
 80135ea:	b002      	add	sp, #8
 80135ec:	bd80      	pop	{r7, pc}
	...

080135f0 <NvmCtxCallback>:

/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	af00      	add	r7, sp, #0
    if( CommandsNvmCtxChanged != NULL )
 80135f4:	4b04      	ldr	r3, [pc, #16]	; (8013608 <NvmCtxCallback+0x18>)
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d002      	beq.n	8013602 <NvmCtxCallback+0x12>
    {
        CommandsNvmCtxChanged( );
 80135fc:	4b02      	ldr	r3, [pc, #8]	; (8013608 <NvmCtxCallback+0x18>)
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	4798      	blx	r3
    }
}
 8013602:	46c0      	nop			; (mov r8, r8)
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	20000f58 	.word	0x20000f58

0801360c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 8013614:	4b08      	ldr	r3, [pc, #32]	; (8013638 <LoRaMacCommandsInit+0x2c>)
 8013616:	22fc      	movs	r2, #252	; 0xfc
 8013618:	2100      	movs	r1, #0
 801361a:	0018      	movs	r0, r3
 801361c:	f006 f954 	bl	80198c8 <memset1>

    LinkedListInit( &NvmCtx.MacCommandList );
 8013620:	4b05      	ldr	r3, [pc, #20]	; (8013638 <LoRaMacCommandsInit+0x2c>)
 8013622:	0018      	movs	r0, r3
 8013624:	f7ff ff36 	bl	8013494 <LinkedListInit>

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 8013628:	4b04      	ldr	r3, [pc, #16]	; (801363c <LoRaMacCommandsInit+0x30>)
 801362a:	687a      	ldr	r2, [r7, #4]
 801362c:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
 801362e:	2300      	movs	r3, #0
}
 8013630:	0018      	movs	r0, r3
 8013632:	46bd      	mov	sp, r7
 8013634:	b002      	add	sp, #8
 8013636:	bd80      	pop	{r7, pc}
 8013638:	20000f5c 	.word	0x20000f5c
 801363c:	20000f58 	.word	0x20000f58

08013640 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 8013640:	b580      	push	{r7, lr}
 8013642:	b082      	sub	sp, #8
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( commandsNvmCtx != NULL )
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d007      	beq.n	801365e <LoRaMacCommandsRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 801364e:	6879      	ldr	r1, [r7, #4]
 8013650:	4b05      	ldr	r3, [pc, #20]	; (8013668 <LoRaMacCommandsRestoreNvmCtx+0x28>)
 8013652:	22fc      	movs	r2, #252	; 0xfc
 8013654:	0018      	movs	r0, r3
 8013656:	f006 f8fb 	bl	8019850 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 801365a:	2300      	movs	r3, #0
 801365c:	e000      	b.n	8013660 <LoRaMacCommandsRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801365e:	2301      	movs	r3, #1
    }
}
 8013660:	0018      	movs	r0, r3
 8013662:	46bd      	mov	sp, r7
 8013664:	b002      	add	sp, #8
 8013666:	bd80      	pop	{r7, pc}
 8013668:	20000f5c 	.word	0x20000f5c

0801366c <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
    *commandsNvmCtxSize = sizeof( NvmCtx );
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	22fc      	movs	r2, #252	; 0xfc
 8013678:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 801367a:	4b02      	ldr	r3, [pc, #8]	; (8013684 <LoRaMacCommandsGetNvmCtx+0x18>)
}
 801367c:	0018      	movs	r0, r3
 801367e:	46bd      	mov	sp, r7
 8013680:	b002      	add	sp, #8
 8013682:	bd80      	pop	{r7, pc}
 8013684:	20000f5c 	.word	0x20000f5c

08013688 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8013688:	b590      	push	{r4, r7, lr}
 801368a:	b087      	sub	sp, #28
 801368c:	af00      	add	r7, sp, #0
 801368e:	60b9      	str	r1, [r7, #8]
 8013690:	607a      	str	r2, [r7, #4]
 8013692:	230f      	movs	r3, #15
 8013694:	18fb      	adds	r3, r7, r3
 8013696:	1c02      	adds	r2, r0, #0
 8013698:	701a      	strb	r2, [r3, #0]
    if( payload == 0 )
 801369a:	68bb      	ldr	r3, [r7, #8]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d101      	bne.n	80136a4 <LoRaMacCommandsAddCmd+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80136a0:	2301      	movs	r3, #1
 80136a2:	e03c      	b.n	801371e <LoRaMacCommandsAddCmd+0x96>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80136a4:	f7ff feb2 	bl	801340c <MallocNewMacCommandSlot>
 80136a8:	0003      	movs	r3, r0
 80136aa:	617b      	str	r3, [r7, #20]

    if( newCmd == 0 )
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d101      	bne.n	80136b6 <LoRaMacCommandsAddCmd+0x2e>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80136b2:	2302      	movs	r3, #2
 80136b4:	e033      	b.n	801371e <LoRaMacCommandsAddCmd+0x96>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &NvmCtx.MacCommandList, newCmd ) == false )
 80136b6:	697a      	ldr	r2, [r7, #20]
 80136b8:	4b1b      	ldr	r3, [pc, #108]	; (8013728 <LoRaMacCommandsAddCmd+0xa0>)
 80136ba:	0011      	movs	r1, r2
 80136bc:	0018      	movs	r0, r3
 80136be:	f7ff fefd 	bl	80134bc <LinkedListAdd>
 80136c2:	0003      	movs	r3, r0
 80136c4:	001a      	movs	r2, r3
 80136c6:	2301      	movs	r3, #1
 80136c8:	4053      	eors	r3, r2
 80136ca:	b2db      	uxtb	r3, r3
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d001      	beq.n	80136d4 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
 80136d0:	2305      	movs	r3, #5
 80136d2:	e024      	b.n	801371e <LoRaMacCommandsAddCmd+0x96>
    }

    // Set Values
    newCmd->CID = cid;
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	240f      	movs	r4, #15
 80136d8:	193a      	adds	r2, r7, r4
 80136da:	7812      	ldrb	r2, [r2, #0]
 80136dc:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	687a      	ldr	r2, [r7, #4]
 80136e2:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	3305      	adds	r3, #5
 80136e8:	687a      	ldr	r2, [r7, #4]
 80136ea:	b292      	uxth	r2, r2
 80136ec:	68b9      	ldr	r1, [r7, #8]
 80136ee:	0018      	movs	r0, r3
 80136f0:	f006 f8ae 	bl	8019850 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80136f4:	193b      	adds	r3, r7, r4
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	0018      	movs	r0, r3
 80136fa:	f7ff ff63 	bl	80135c4 <IsSticky>
 80136fe:	0003      	movs	r3, r0
 8013700:	001a      	movs	r2, r3
 8013702:	697b      	ldr	r3, [r7, #20]
 8013704:	731a      	strb	r2, [r3, #12]

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8013706:	4b08      	ldr	r3, [pc, #32]	; (8013728 <LoRaMacCommandsAddCmd+0xa0>)
 8013708:	22f8      	movs	r2, #248	; 0xf8
 801370a:	589a      	ldr	r2, [r3, r2]
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	18d3      	adds	r3, r2, r3
 8013710:	1c5a      	adds	r2, r3, #1
 8013712:	4b05      	ldr	r3, [pc, #20]	; (8013728 <LoRaMacCommandsAddCmd+0xa0>)
 8013714:	21f8      	movs	r1, #248	; 0xf8
 8013716:	505a      	str	r2, [r3, r1]

    NvmCtxCallback( );
 8013718:	f7ff ff6a 	bl	80135f0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801371c:	2300      	movs	r3, #0
}
 801371e:	0018      	movs	r0, r3
 8013720:	46bd      	mov	sp, r7
 8013722:	b007      	add	sp, #28
 8013724:	bd90      	pop	{r4, r7, pc}
 8013726:	46c0      	nop			; (mov r8, r8)
 8013728:	20000f5c 	.word	0x20000f5c

0801372c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b082      	sub	sp, #8
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d101      	bne.n	801373e <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801373a:	2301      	movs	r3, #1
 801373c:	e028      	b.n	8013790 <LoRaMacCommandsRemoveCmd+0x64>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	4b15      	ldr	r3, [pc, #84]	; (8013798 <LoRaMacCommandsRemoveCmd+0x6c>)
 8013742:	0011      	movs	r1, r2
 8013744:	0018      	movs	r0, r3
 8013746:	f7ff ff08 	bl	801355a <LinkedListRemove>
 801374a:	0003      	movs	r3, r0
 801374c:	001a      	movs	r2, r3
 801374e:	2301      	movs	r3, #1
 8013750:	4053      	eors	r3, r2
 8013752:	b2db      	uxtb	r3, r3
 8013754:	2b00      	cmp	r3, #0
 8013756:	d001      	beq.n	801375c <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8013758:	2303      	movs	r3, #3
 801375a:	e019      	b.n	8013790 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 801375c:	4b0e      	ldr	r3, [pc, #56]	; (8013798 <LoRaMacCommandsRemoveCmd+0x6c>)
 801375e:	22f8      	movs	r2, #248	; 0xf8
 8013760:	589a      	ldr	r2, [r3, r2]
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	689b      	ldr	r3, [r3, #8]
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	1e5a      	subs	r2, r3, #1
 801376a:	4b0b      	ldr	r3, [pc, #44]	; (8013798 <LoRaMacCommandsRemoveCmd+0x6c>)
 801376c:	21f8      	movs	r1, #248	; 0xf8
 801376e:	505a      	str	r2, [r3, r1]

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	0018      	movs	r0, r3
 8013774:	f7ff fe7a 	bl	801346c <FreeMacCommandSlot>
 8013778:	0003      	movs	r3, r0
 801377a:	001a      	movs	r2, r3
 801377c:	2301      	movs	r3, #1
 801377e:	4053      	eors	r3, r2
 8013780:	b2db      	uxtb	r3, r3
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <LoRaMacCommandsRemoveCmd+0x5e>
    {
        return LORAMAC_COMMANDS_ERROR;
 8013786:	2305      	movs	r3, #5
 8013788:	e002      	b.n	8013790 <LoRaMacCommandsRemoveCmd+0x64>
    }

    NvmCtxCallback( );
 801378a:	f7ff ff31 	bl	80135f0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 801378e:	2300      	movs	r3, #0
}
 8013790:	0018      	movs	r0, r3
 8013792:	46bd      	mov	sp, r7
 8013794:	b002      	add	sp, #8
 8013796:	bd80      	pop	{r7, pc}
 8013798:	20000f5c 	.word	0x20000f5c

0801379c <LoRaMacCommandsRemoveNoneStickyCmds>:

    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b082      	sub	sp, #8
 80137a0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 80137a2:	4b11      	ldr	r3, [pc, #68]	; (80137e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4c>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80137a8:	e013      	b.n	80137d2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
    {
        if( curElement->IsSticky == false )
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	7b1b      	ldrb	r3, [r3, #12]
 80137ae:	2201      	movs	r2, #1
 80137b0:	4053      	eors	r3, r2
 80137b2:	b2db      	uxtb	r3, r3
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d009      	beq.n	80137cc <LoRaMacCommandsRemoveNoneStickyCmds+0x30>
        {
            nexElement = curElement->Next;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	0018      	movs	r0, r3
 80137c2:	f7ff ffb3 	bl	801372c <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	607b      	str	r3, [r7, #4]
 80137ca:	e002      	b.n	80137d2 <LoRaMacCommandsRemoveNoneStickyCmds+0x36>
        }
        else
        {
            curElement = curElement->Next;
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d1e8      	bne.n	80137aa <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    NvmCtxCallback( );
 80137d8:	f7ff ff0a 	bl	80135f0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 80137dc:	2300      	movs	r3, #0
}
 80137de:	0018      	movs	r0, r3
 80137e0:	46bd      	mov	sp, r7
 80137e2:	b002      	add	sp, #8
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	46c0      	nop			; (mov r8, r8)
 80137e8:	20000f5c 	.word	0x20000f5c

080137ec <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b082      	sub	sp, #8
 80137f0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 80137f2:	4b0f      	ldr	r3, [pc, #60]	; (8013830 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 80137f8:	e00f      	b.n	801381a <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	791b      	ldrb	r3, [r3, #4]
 8013804:	0018      	movs	r0, r3
 8013806:	f7ff fedd 	bl	80135c4 <IsSticky>
 801380a:	1e03      	subs	r3, r0, #0
 801380c:	d003      	beq.n	8013816 <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	0018      	movs	r0, r3
 8013812:	f7ff ff8b 	bl	801372c <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d1ec      	bne.n	80137fa <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    NvmCtxCallback( );
 8013820:	f7ff fee6 	bl	80135f0 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
 8013824:	2300      	movs	r3, #0
}
 8013826:	0018      	movs	r0, r3
 8013828:	46bd      	mov	sp, r7
 801382a:	b002      	add	sp, #8
 801382c:	bd80      	pop	{r7, pc}
 801382e:	46c0      	nop			; (mov r8, r8)
 8013830:	20000f5c 	.word	0x20000f5c

08013834 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d101      	bne.n	8013846 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013842:	2301      	movs	r3, #1
 8013844:	e005      	b.n	8013852 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = NvmCtx.SerializedCmdsSize;
 8013846:	4b05      	ldr	r3, [pc, #20]	; (801385c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8013848:	22f8      	movs	r2, #248	; 0xf8
 801384a:	589a      	ldr	r2, [r3, r2]
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8013850:	2300      	movs	r3, #0
}
 8013852:	0018      	movs	r0, r3
 8013854:	46bd      	mov	sp, r7
 8013856:	b002      	add	sp, #8
 8013858:	bd80      	pop	{r7, pc}
 801385a:	46c0      	nop			; (mov r8, r8)
 801385c:	20000f5c 	.word	0x20000f5c

08013860 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8013860:	b590      	push	{r4, r7, lr}
 8013862:	b087      	sub	sp, #28
 8013864:	af00      	add	r7, sp, #0
 8013866:	60f8      	str	r0, [r7, #12]
 8013868:	60b9      	str	r1, [r7, #8]
 801386a:	607a      	str	r2, [r7, #4]
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d002      	beq.n	8013878 <LoRaMacCommandsSerializeCmds+0x18>
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d101      	bne.n	801387c <LoRaMacCommandsSerializeCmds+0x1c>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8013878:	2301      	movs	r3, #1
 801387a:	e03a      	b.n	80138f2 <LoRaMacCommandsSerializeCmds+0x92>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 801387c:	4b1f      	ldr	r3, [pc, #124]	; (80138fc <LoRaMacCommandsSerializeCmds+0x9c>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	617b      	str	r3, [r7, #20]
    uint8_t itr = 0;
 8013882:	2313      	movs	r3, #19
 8013884:	18fb      	adds	r3, r7, r3
 8013886:	2200      	movs	r2, #0
 8013888:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801388a:	e02c      	b.n	80138e6 <LoRaMacCommandsSerializeCmds+0x86>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 801388c:	2313      	movs	r3, #19
 801388e:	18fb      	adds	r3, r7, r3
 8013890:	781b      	ldrb	r3, [r3, #0]
 8013892:	68fa      	ldr	r2, [r7, #12]
 8013894:	1ad2      	subs	r2, r2, r3
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	689b      	ldr	r3, [r3, #8]
 801389a:	3301      	adds	r3, #1
 801389c:	429a      	cmp	r2, r3
 801389e:	d326      	bcc.n	80138ee <LoRaMacCommandsSerializeCmds+0x8e>
        {
            buffer[itr++] = curElement->CID;
 80138a0:	2413      	movs	r4, #19
 80138a2:	193b      	adds	r3, r7, r4
 80138a4:	781b      	ldrb	r3, [r3, #0]
 80138a6:	193a      	adds	r2, r7, r4
 80138a8:	1c59      	adds	r1, r3, #1
 80138aa:	7011      	strb	r1, [r2, #0]
 80138ac:	001a      	movs	r2, r3
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	189b      	adds	r3, r3, r2
 80138b2:	697a      	ldr	r2, [r7, #20]
 80138b4:	7912      	ldrb	r2, [r2, #4]
 80138b6:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 80138b8:	193b      	adds	r3, r7, r4
 80138ba:	781b      	ldrb	r3, [r3, #0]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	18d0      	adds	r0, r2, r3
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	1d59      	adds	r1, r3, #5
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	689b      	ldr	r3, [r3, #8]
 80138c8:	b29b      	uxth	r3, r3
 80138ca:	001a      	movs	r2, r3
 80138cc:	f005 ffc0 	bl	8019850 <memcpy1>
            itr = itr + curElement->PayloadSize;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	689b      	ldr	r3, [r3, #8]
 80138d4:	b2d9      	uxtb	r1, r3
 80138d6:	193b      	adds	r3, r7, r4
 80138d8:	193a      	adds	r2, r7, r4
 80138da:	7812      	ldrb	r2, [r2, #0]
 80138dc:	188a      	adds	r2, r1, r2
 80138de:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	617b      	str	r3, [r7, #20]
    while( curElement != NULL )
 80138e6:	697b      	ldr	r3, [r7, #20]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d1cf      	bne.n	801388c <LoRaMacCommandsSerializeCmds+0x2c>
 80138ec:	e000      	b.n	80138f0 <LoRaMacCommandsSerializeCmds+0x90>
            break;
 80138ee:	46c0      	nop			; (mov r8, r8)
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80138f0:	2300      	movs	r3, #0
}
 80138f2:	0018      	movs	r0, r3
 80138f4:	46bd      	mov	sp, r7
 80138f6:	b007      	add	sp, #28
 80138f8:	bd90      	pop	{r4, r7, pc}
 80138fa:	46c0      	nop			; (mov r8, r8)
 80138fc:	20000f5c 	.word	0x20000f5c

08013900 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b084      	sub	sp, #16
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d101      	bne.n	8013912 <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 801390e:	2301      	movs	r3, #1
 8013910:	e016      	b.n	8013940 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 8013912:	4b0d      	ldr	r3, [pc, #52]	; (8013948 <LoRaMacCommandsStickyCmdsPending+0x48>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	2200      	movs	r2, #0
 801391c:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 801391e:	e00b      	b.n	8013938 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	7b1b      	ldrb	r3, [r3, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d004      	beq.n	8013932 <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2201      	movs	r2, #1
 801392c:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 801392e:	2300      	movs	r3, #0
 8013930:	e006      	b.n	8013940 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1f0      	bne.n	8013920 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801393e:	2300      	movs	r3, #0
}
 8013940:	0018      	movs	r0, r3
 8013942:	46bd      	mov	sp, r7
 8013944:	b004      	add	sp, #16
 8013946:	bd80      	pop	{r7, pc}
 8013948:	20000f5c 	.word	0x20000f5c

0801394c <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 801394c:	b580      	push	{r7, lr}
 801394e:	b082      	sub	sp, #8
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8013954:	4b08      	ldr	r3, [pc, #32]	; (8013978 <IncreaseBufferPointer+0x2c>)
 8013956:	691b      	ldr	r3, [r3, #16]
 8013958:	3310      	adds	r3, #16
 801395a:	687a      	ldr	r2, [r7, #4]
 801395c:	429a      	cmp	r2, r3
 801395e:	d103      	bne.n	8013968 <IncreaseBufferPointer+0x1c>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 8013960:	4b05      	ldr	r3, [pc, #20]	; (8013978 <IncreaseBufferPointer+0x2c>)
 8013962:	691b      	ldr	r3, [r3, #16]
 8013964:	607b      	str	r3, [r7, #4]
 8013966:	e002      	b.n	801396e <IncreaseBufferPointer+0x22>
    }
    else
    {
        // Increase
        bufferPointer++;
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	3304      	adds	r3, #4
 801396c:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 801396e:	687b      	ldr	r3, [r7, #4]
}
 8013970:	0018      	movs	r0, r3
 8013972:	46bd      	mov	sp, r7
 8013974:	b002      	add	sp, #8
 8013976:	bd80      	pop	{r7, pc}
 8013978:	20001070 	.word	0x20001070

0801397c <GetElement>:
    }
    return bufferPointer;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b086      	sub	sp, #24
 8013980:	af00      	add	r7, sp, #0
 8013982:	60b9      	str	r1, [r7, #8]
 8013984:	607a      	str	r2, [r7, #4]
 8013986:	230f      	movs	r3, #15
 8013988:	18fb      	adds	r3, r7, r3
 801398a:	1c02      	adds	r2, r0, #0
 801398c:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = bufferStart;
 801398e:	68bb      	ldr	r3, [r7, #8]
 8013990:	617b      	str	r3, [r7, #20]

    while( element != bufferEnd )
 8013992:	e00e      	b.n	80139b2 <GetElement+0x36>
    {
        if( element->Request == request )
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	781b      	ldrb	r3, [r3, #0]
 8013998:	220f      	movs	r2, #15
 801399a:	18ba      	adds	r2, r7, r2
 801399c:	7812      	ldrb	r2, [r2, #0]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d101      	bne.n	80139a6 <GetElement+0x2a>
        {
            // We have found the element
            return element;
 80139a2:	697b      	ldr	r3, [r7, #20]
 80139a4:	e00a      	b.n	80139bc <GetElement+0x40>
        }
        else
        {
            element = IncreaseBufferPointer( element );
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	0018      	movs	r0, r3
 80139aa:	f7ff ffcf 	bl	801394c <IncreaseBufferPointer>
 80139ae:	0003      	movs	r3, r0
 80139b0:	617b      	str	r3, [r7, #20]
    while( element != bufferEnd )
 80139b2:	697a      	ldr	r2, [r7, #20]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d1ec      	bne.n	8013994 <GetElement+0x18>
        }
    }
    return NULL;
 80139ba:	2300      	movs	r3, #0
}
 80139bc:	0018      	movs	r0, r3
 80139be:	46bd      	mov	sp, r7
 80139c0:	b006      	add	sp, #24
 80139c2:	bd80      	pop	{r7, pc}

080139c4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b082      	sub	sp, #8
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
 80139cc:	6039      	str	r1, [r7, #0]
    ConfirmQueueCtx.Primitives = primitives;
 80139ce:	4b13      	ldr	r3, [pc, #76]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	601a      	str	r2, [r3, #0]

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 80139d4:	4b11      	ldr	r3, [pc, #68]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139d6:	4a12      	ldr	r2, [pc, #72]	; (8013a20 <LoRaMacConfirmQueueInit+0x5c>)
 80139d8:	611a      	str	r2, [r3, #16]

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 80139da:	4b10      	ldr	r3, [pc, #64]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139dc:	691b      	ldr	r3, [r3, #16]
 80139de:	2200      	movs	r2, #0
 80139e0:	751a      	strb	r2, [r3, #20]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80139e2:	4b0e      	ldr	r3, [pc, #56]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139e4:	691b      	ldr	r3, [r3, #16]
 80139e6:	001a      	movs	r2, r3
 80139e8:	4b0c      	ldr	r3, [pc, #48]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139ea:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 80139ec:	4b0b      	ldr	r3, [pc, #44]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139ee:	691b      	ldr	r3, [r3, #16]
 80139f0:	001a      	movs	r2, r3
 80139f2:	4b0a      	ldr	r3, [pc, #40]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139f4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 80139f6:	4b09      	ldr	r3, [pc, #36]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 80139f8:	691b      	ldr	r3, [r3, #16]
 80139fa:	2214      	movs	r2, #20
 80139fc:	21ff      	movs	r1, #255	; 0xff
 80139fe:	0018      	movs	r0, r3
 8013a00:	f005 ff62 	bl	80198c8 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a04:	4b05      	ldr	r3, [pc, #20]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 8013a06:	691b      	ldr	r3, [r3, #16]
 8013a08:	2201      	movs	r2, #1
 8013a0a:	755a      	strb	r2, [r3, #21]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 8013a0c:	4b03      	ldr	r3, [pc, #12]	; (8013a1c <LoRaMacConfirmQueueInit+0x58>)
 8013a0e:	683a      	ldr	r2, [r7, #0]
 8013a10:	60da      	str	r2, [r3, #12]
}
 8013a12:	46c0      	nop			; (mov r8, r8)
 8013a14:	46bd      	mov	sp, r7
 8013a16:	b002      	add	sp, #8
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	46c0      	nop			; (mov r8, r8)
 8013a1c:	20001070 	.word	0x20001070
 8013a20:	20001058 	.word	0x20001058

08013a24 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 8013a24:	b580      	push	{r7, lr}
 8013a26:	b082      	sub	sp, #8
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( confirmQueueNvmCtx != NULL )
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d007      	beq.n	8013a42 <LoRaMacConfirmQueueRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 8013a32:	6879      	ldr	r1, [r7, #4]
 8013a34:	4b05      	ldr	r3, [pc, #20]	; (8013a4c <LoRaMacConfirmQueueRestoreNvmCtx+0x28>)
 8013a36:	2216      	movs	r2, #22
 8013a38:	0018      	movs	r0, r3
 8013a3a:	f005 ff09 	bl	8019850 <memcpy1>
        return true;
 8013a3e:	2301      	movs	r3, #1
 8013a40:	e000      	b.n	8013a44 <LoRaMacConfirmQueueRestoreNvmCtx+0x20>
    }
    else
    {
        return false;
 8013a42:	2300      	movs	r3, #0
    }
}
 8013a44:	0018      	movs	r0, r3
 8013a46:	46bd      	mov	sp, r7
 8013a48:	b002      	add	sp, #8
 8013a4a:	bd80      	pop	{r7, pc}
 8013a4c:	20001058 	.word	0x20001058

08013a50 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2216      	movs	r2, #22
 8013a5c:	601a      	str	r2, [r3, #0]
    return &ConfirmQueueNvmCtx;
 8013a5e:	4b02      	ldr	r3, [pc, #8]	; (8013a68 <LoRaMacConfirmQueueGetNvmCtx+0x18>)
}
 8013a60:	0018      	movs	r0, r3
 8013a62:	46bd      	mov	sp, r7
 8013a64:	b002      	add	sp, #8
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	20001058 	.word	0x20001058

08013a6c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013a74:	4b16      	ldr	r3, [pc, #88]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013a76:	691b      	ldr	r3, [r3, #16]
 8013a78:	7d1b      	ldrb	r3, [r3, #20]
 8013a7a:	2b04      	cmp	r3, #4
 8013a7c:	d901      	bls.n	8013a82 <LoRaMacConfirmQueueAdd+0x16>
    {
        // Protect the buffer against overwrites
        return false;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	e021      	b.n	8013ac6 <LoRaMacConfirmQueueAdd+0x5a>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8013a82:	4b13      	ldr	r3, [pc, #76]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013a84:	689b      	ldr	r3, [r3, #8]
 8013a86:	687a      	ldr	r2, [r7, #4]
 8013a88:	7812      	ldrb	r2, [r2, #0]
 8013a8a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8013a8c:	4b10      	ldr	r3, [pc, #64]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013a8e:	689b      	ldr	r3, [r3, #8]
 8013a90:	687a      	ldr	r2, [r7, #4]
 8013a92:	7852      	ldrb	r2, [r2, #1]
 8013a94:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8013a96:	4b0e      	ldr	r3, [pc, #56]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	687a      	ldr	r2, [r7, #4]
 8013a9c:	78d2      	ldrb	r2, [r2, #3]
 8013a9e:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8013aa0:	4b0b      	ldr	r3, [pc, #44]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013aa2:	689b      	ldr	r3, [r3, #8]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 8013aa8:	4b09      	ldr	r3, [pc, #36]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013aaa:	691b      	ldr	r3, [r3, #16]
 8013aac:	7d1a      	ldrb	r2, [r3, #20]
 8013aae:	3201      	adds	r2, #1
 8013ab0:	b2d2      	uxtb	r2, r2
 8013ab2:	751a      	strb	r2, [r3, #20]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8013ab4:	4b06      	ldr	r3, [pc, #24]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013ab6:	689b      	ldr	r3, [r3, #8]
 8013ab8:	0018      	movs	r0, r3
 8013aba:	f7ff ff47 	bl	801394c <IncreaseBufferPointer>
 8013abe:	0002      	movs	r2, r0
 8013ac0:	4b03      	ldr	r3, [pc, #12]	; (8013ad0 <LoRaMacConfirmQueueAdd+0x64>)
 8013ac2:	609a      	str	r2, [r3, #8]

    return true;
 8013ac4:	2301      	movs	r3, #1
}
 8013ac6:	0018      	movs	r0, r3
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	b002      	add	sp, #8
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	46c0      	nop			; (mov r8, r8)
 8013ad0:	20001070 	.word	0x20001070

08013ad4 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt == 0 )
 8013ad8:	4b0c      	ldr	r3, [pc, #48]	; (8013b0c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8013ada:	691b      	ldr	r3, [r3, #16]
 8013adc:	7d1b      	ldrb	r3, [r3, #20]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d101      	bne.n	8013ae6 <LoRaMacConfirmQueueRemoveFirst+0x12>
    {
        return false;
 8013ae2:	2300      	movs	r3, #0
 8013ae4:	e00e      	b.n	8013b04 <LoRaMacConfirmQueueRemoveFirst+0x30>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 8013ae6:	4b09      	ldr	r3, [pc, #36]	; (8013b0c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8013ae8:	691b      	ldr	r3, [r3, #16]
 8013aea:	7d1a      	ldrb	r2, [r3, #20]
 8013aec:	3a01      	subs	r2, #1
 8013aee:	b2d2      	uxtb	r2, r2
 8013af0:	751a      	strb	r2, [r3, #20]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8013af2:	4b06      	ldr	r3, [pc, #24]	; (8013b0c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	0018      	movs	r0, r3
 8013af8:	f7ff ff28 	bl	801394c <IncreaseBufferPointer>
 8013afc:	0002      	movs	r2, r0
 8013afe:	4b03      	ldr	r3, [pc, #12]	; (8013b0c <LoRaMacConfirmQueueRemoveFirst+0x38>)
 8013b00:	605a      	str	r2, [r3, #4]

    return true;
 8013b02:	2301      	movs	r3, #1
}
 8013b04:	0018      	movs	r0, r3
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	46c0      	nop			; (mov r8, r8)
 8013b0c:	20001070 	.word	0x20001070

08013b10 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b084      	sub	sp, #16
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	0002      	movs	r2, r0
 8013b18:	1dfb      	adds	r3, r7, #7
 8013b1a:	701a      	strb	r2, [r3, #0]
 8013b1c:	1dbb      	adds	r3, r7, #6
 8013b1e:	1c0a      	adds	r2, r1, #0
 8013b20:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8013b22:	2300      	movs	r3, #0
 8013b24:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8013b26:	4b0f      	ldr	r3, [pc, #60]	; (8013b64 <LoRaMacConfirmQueueSetStatus+0x54>)
 8013b28:	691b      	ldr	r3, [r3, #16]
 8013b2a:	7d1b      	ldrb	r3, [r3, #20]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d014      	beq.n	8013b5a <LoRaMacConfirmQueueSetStatus+0x4a>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013b30:	4b0c      	ldr	r3, [pc, #48]	; (8013b64 <LoRaMacConfirmQueueSetStatus+0x54>)
 8013b32:	6859      	ldr	r1, [r3, #4]
 8013b34:	4b0b      	ldr	r3, [pc, #44]	; (8013b64 <LoRaMacConfirmQueueSetStatus+0x54>)
 8013b36:	689a      	ldr	r2, [r3, #8]
 8013b38:	1dbb      	adds	r3, r7, #6
 8013b3a:	781b      	ldrb	r3, [r3, #0]
 8013b3c:	0018      	movs	r0, r3
 8013b3e:	f7ff ff1d 	bl	801397c <GetElement>
 8013b42:	0003      	movs	r3, r0
 8013b44:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d006      	beq.n	8013b5a <LoRaMacConfirmQueueSetStatus+0x4a>
        {
            element->Status = status;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	1dfa      	adds	r2, r7, #7
 8013b50:	7812      	ldrb	r2, [r2, #0]
 8013b52:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	2201      	movs	r2, #1
 8013b58:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8013b5a:	46c0      	nop			; (mov r8, r8)
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	b004      	add	sp, #16
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	46c0      	nop			; (mov r8, r8)
 8013b64:	20001070 	.word	0x20001070

08013b68 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b084      	sub	sp, #16
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	0002      	movs	r2, r0
 8013b70:	1dfb      	adds	r3, r7, #7
 8013b72:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = NULL;
 8013b74:	2300      	movs	r3, #0
 8013b76:	60fb      	str	r3, [r7, #12]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8013b78:	4b0d      	ldr	r3, [pc, #52]	; (8013bb0 <LoRaMacConfirmQueueGetStatus+0x48>)
 8013b7a:	691b      	ldr	r3, [r3, #16]
 8013b7c:	7d1b      	ldrb	r3, [r3, #20]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d010      	beq.n	8013ba4 <LoRaMacConfirmQueueGetStatus+0x3c>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8013b82:	4b0b      	ldr	r3, [pc, #44]	; (8013bb0 <LoRaMacConfirmQueueGetStatus+0x48>)
 8013b84:	6859      	ldr	r1, [r3, #4]
 8013b86:	4b0a      	ldr	r3, [pc, #40]	; (8013bb0 <LoRaMacConfirmQueueGetStatus+0x48>)
 8013b88:	689a      	ldr	r2, [r3, #8]
 8013b8a:	1dfb      	adds	r3, r7, #7
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	0018      	movs	r0, r3
 8013b90:	f7ff fef4 	bl	801397c <GetElement>
 8013b94:	0003      	movs	r3, r0
 8013b96:	60fb      	str	r3, [r7, #12]
        if( element != NULL )
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d002      	beq.n	8013ba4 <LoRaMacConfirmQueueGetStatus+0x3c>
        {
            return element->Status;
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	785b      	ldrb	r3, [r3, #1]
 8013ba2:	e000      	b.n	8013ba6 <LoRaMacConfirmQueueGetStatus+0x3e>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013ba4:	2301      	movs	r3, #1
}
 8013ba6:	0018      	movs	r0, r3
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	b004      	add	sp, #16
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	46c0      	nop			; (mov r8, r8)
 8013bb0:	20001070 	.word	0x20001070

08013bb4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b084      	sub	sp, #16
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	0002      	movs	r2, r0
 8013bbc:	1dfb      	adds	r3, r7, #7
 8013bbe:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8013bc0:	4b14      	ldr	r3, [pc, #80]	; (8013c14 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 8013bc6:	4b13      	ldr	r3, [pc, #76]	; (8013c14 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8013bc8:	691b      	ldr	r3, [r3, #16]
 8013bca:	1dfa      	adds	r2, r7, #7
 8013bcc:	7812      	ldrb	r2, [r2, #0]
 8013bce:	755a      	strb	r2, [r3, #21]

    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt > 0 )
 8013bd0:	4b10      	ldr	r3, [pc, #64]	; (8013c14 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8013bd2:	691b      	ldr	r3, [r3, #16]
 8013bd4:	7d1b      	ldrb	r3, [r3, #20]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d018      	beq.n	8013c0c <LoRaMacConfirmQueueSetStatusCmn+0x58>
    {
        do
        {
            element->Status = status;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	1dfa      	adds	r2, r7, #7
 8013bde:	7812      	ldrb	r2, [r2, #0]
 8013be0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	78db      	ldrb	r3, [r3, #3]
 8013be6:	2201      	movs	r2, #1
 8013be8:	4053      	eors	r3, r2
 8013bea:	b2db      	uxtb	r3, r3
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <LoRaMacConfirmQueueSetStatusCmn+0x42>
            {
                element->ReadyToHandle = true;
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2201      	movs	r2, #1
 8013bf4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	0018      	movs	r0, r3
 8013bfa:	f7ff fea7 	bl	801394c <IncreaseBufferPointer>
 8013bfe:	0003      	movs	r3, r0
 8013c00:	60fb      	str	r3, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013c02:	4b04      	ldr	r3, [pc, #16]	; (8013c14 <LoRaMacConfirmQueueSetStatusCmn+0x60>)
 8013c04:	689b      	ldr	r3, [r3, #8]
 8013c06:	68fa      	ldr	r2, [r7, #12]
 8013c08:	429a      	cmp	r2, r3
 8013c0a:	d1e6      	bne.n	8013bda <LoRaMacConfirmQueueSetStatusCmn+0x26>
    }
}
 8013c0c:	46c0      	nop			; (mov r8, r8)
 8013c0e:	46bd      	mov	sp, r7
 8013c10:	b004      	add	sp, #16
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	20001070 	.word	0x20001070

08013c18 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	0002      	movs	r2, r0
 8013c20:	1dfb      	adds	r3, r7, #7
 8013c22:	701a      	strb	r2, [r3, #0]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013c24:	4b08      	ldr	r3, [pc, #32]	; (8013c48 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013c26:	6859      	ldr	r1, [r3, #4]
 8013c28:	4b07      	ldr	r3, [pc, #28]	; (8013c48 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013c2a:	689a      	ldr	r2, [r3, #8]
 8013c2c:	1dfb      	adds	r3, r7, #7
 8013c2e:	781b      	ldrb	r3, [r3, #0]
 8013c30:	0018      	movs	r0, r3
 8013c32:	f7ff fea3 	bl	801397c <GetElement>
 8013c36:	1e03      	subs	r3, r0, #0
 8013c38:	d001      	beq.n	8013c3e <LoRaMacConfirmQueueIsCmdActive+0x26>
    {
        return true;
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	e000      	b.n	8013c40 <LoRaMacConfirmQueueIsCmdActive+0x28>
    }
    return false;
 8013c3e:	2300      	movs	r3, #0
}
 8013c40:	0018      	movs	r0, r3
 8013c42:	46bd      	mov	sp, r7
 8013c44:	b002      	add	sp, #8
 8013c46:	bd80      	pop	{r7, pc}
 8013c48:	20001070 	.word	0x20001070

08013c4c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8013c54:	4b2d      	ldr	r3, [pc, #180]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013c56:	691a      	ldr	r2, [r3, #16]
 8013c58:	230e      	movs	r3, #14
 8013c5a:	18fb      	adds	r3, r7, r3
 8013c5c:	7d12      	ldrb	r2, [r2, #20]
 8013c5e:	701a      	strb	r2, [r3, #0]
    bool readyToHandle = false;
 8013c60:	230d      	movs	r3, #13
 8013c62:	18fb      	adds	r3, r7, r3
 8013c64:	2200      	movs	r2, #0
 8013c66:	701a      	strb	r2, [r3, #0]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 8013c68:	230f      	movs	r3, #15
 8013c6a:	18fb      	adds	r3, r7, r3
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	701a      	strb	r2, [r3, #0]
 8013c70:	e03f      	b.n	8013cf2 <LoRaMacConfirmQueueHandleCb+0xa6>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8013c72:	4b26      	ldr	r3, [pc, #152]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013c74:	685b      	ldr	r3, [r3, #4]
 8013c76:	781a      	ldrb	r2, [r3, #0]
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8013c7c:	4b23      	ldr	r3, [pc, #140]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	785a      	ldrb	r2, [r3, #1]
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8013c86:	4b21      	ldr	r3, [pc, #132]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013c88:	685a      	ldr	r2, [r3, #4]
 8013c8a:	210d      	movs	r1, #13
 8013c8c:	187b      	adds	r3, r7, r1
 8013c8e:	7892      	ldrb	r2, [r2, #2]
 8013c90:	701a      	strb	r2, [r3, #0]

        if( readyToHandle == true )
 8013c92:	187b      	adds	r3, r7, r1
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d006      	beq.n	8013ca8 <LoRaMacConfirmQueueHandleCb+0x5c>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8013c9a:	4b1c      	ldr	r3, [pc, #112]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	689b      	ldr	r3, [r3, #8]
 8013ca0:	687a      	ldr	r2, [r7, #4]
 8013ca2:	0010      	movs	r0, r2
 8013ca4:	4798      	blx	r3
 8013ca6:	e00f      	b.n	8013cc8 <LoRaMacConfirmQueueHandleCb+0x7c>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8013ca8:	4b18      	ldr	r3, [pc, #96]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	781a      	ldrb	r2, [r3, #0]
 8013cae:	2108      	movs	r1, #8
 8013cb0:	187b      	adds	r3, r7, r1
 8013cb2:	701a      	strb	r2, [r3, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8013cb4:	4b15      	ldr	r3, [pc, #84]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	785a      	ldrb	r2, [r3, #1]
 8013cba:	187b      	adds	r3, r7, r1
 8013cbc:	705a      	strb	r2, [r3, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8013cbe:	4b13      	ldr	r3, [pc, #76]	; (8013d0c <LoRaMacConfirmQueueHandleCb+0xc0>)
 8013cc0:	685b      	ldr	r3, [r3, #4]
 8013cc2:	78da      	ldrb	r2, [r3, #3]
 8013cc4:	187b      	adds	r3, r7, r1
 8013cc6:	70da      	strb	r2, [r3, #3]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8013cc8:	f7ff ff04 	bl	8013ad4 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013ccc:	230d      	movs	r3, #13
 8013cce:	18fb      	adds	r3, r7, r3
 8013cd0:	781b      	ldrb	r3, [r3, #0]
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	4053      	eors	r3, r2
 8013cd6:	b2db      	uxtb	r3, r3
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d004      	beq.n	8013ce6 <LoRaMacConfirmQueueHandleCb+0x9a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8013cdc:	2308      	movs	r3, #8
 8013cde:	18fb      	adds	r3, r7, r3
 8013ce0:	0018      	movs	r0, r3
 8013ce2:	f7ff fec3 	bl	8013a6c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013ce6:	210f      	movs	r1, #15
 8013ce8:	187b      	adds	r3, r7, r1
 8013cea:	781a      	ldrb	r2, [r3, #0]
 8013cec:	187b      	adds	r3, r7, r1
 8013cee:	3201      	adds	r2, #1
 8013cf0:	701a      	strb	r2, [r3, #0]
 8013cf2:	230f      	movs	r3, #15
 8013cf4:	18fa      	adds	r2, r7, r3
 8013cf6:	230e      	movs	r3, #14
 8013cf8:	18fb      	adds	r3, r7, r3
 8013cfa:	7812      	ldrb	r2, [r2, #0]
 8013cfc:	781b      	ldrb	r3, [r3, #0]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d3b7      	bcc.n	8013c72 <LoRaMacConfirmQueueHandleCb+0x26>
        }
    }
}
 8013d02:	46c0      	nop			; (mov r8, r8)
 8013d04:	46bd      	mov	sp, r7
 8013d06:	b004      	add	sp, #16
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	46c0      	nop			; (mov r8, r8)
 8013d0c:	20001070 	.word	0x20001070

08013d10 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 8013d14:	4b02      	ldr	r3, [pc, #8]	; (8013d20 <LoRaMacConfirmQueueGetCnt+0x10>)
 8013d16:	691b      	ldr	r3, [r3, #16]
 8013d18:	7d1b      	ldrb	r3, [r3, #20]
}
 8013d1a:	0018      	movs	r0, r3
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	bd80      	pop	{r7, pc}
 8013d20:	20001070 	.word	0x20001070

08013d24 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	af00      	add	r7, sp, #0
    if( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8013d28:	4b05      	ldr	r3, [pc, #20]	; (8013d40 <LoRaMacConfirmQueueIsFull+0x1c>)
 8013d2a:	691b      	ldr	r3, [r3, #16]
 8013d2c:	7d1b      	ldrb	r3, [r3, #20]
 8013d2e:	2b04      	cmp	r3, #4
 8013d30:	d901      	bls.n	8013d36 <LoRaMacConfirmQueueIsFull+0x12>
    {
        return true;
 8013d32:	2301      	movs	r3, #1
 8013d34:	e000      	b.n	8013d38 <LoRaMacConfirmQueueIsFull+0x14>
    }
    else
    {
        return false;
 8013d36:	2300      	movs	r3, #0
    }
}
 8013d38:	0018      	movs	r0, r3
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
 8013d3e:	46c0      	nop			; (mov r8, r8)
 8013d40:	20001070 	.word	0x20001070

08013d44 <PayloadEncrypt>:
 * \param[IN]  size             - Size of data
 * \param[IN/OUT]  buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013d44:	b590      	push	{r4, r7, lr}
 8013d46:	b08f      	sub	sp, #60	; 0x3c
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	60f8      	str	r0, [r7, #12]
 8013d4c:	0008      	movs	r0, r1
 8013d4e:	0011      	movs	r1, r2
 8013d50:	607b      	str	r3, [r7, #4]
 8013d52:	230a      	movs	r3, #10
 8013d54:	18fb      	adds	r3, r7, r3
 8013d56:	1c02      	adds	r2, r0, #0
 8013d58:	801a      	strh	r2, [r3, #0]
 8013d5a:	2309      	movs	r3, #9
 8013d5c:	18fb      	adds	r3, r7, r3
 8013d5e:	1c0a      	adds	r2, r1, #0
 8013d60:	701a      	strb	r2, [r3, #0]
    if( buffer == 0 )
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d101      	bne.n	8013d6c <PayloadEncrypt+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013d68:	230a      	movs	r3, #10
 8013d6a:	e0ab      	b.n	8013ec4 <PayloadEncrypt+0x180>
    }

    uint8_t bufferIndex = 0;
 8013d6c:	2337      	movs	r3, #55	; 0x37
 8013d6e:	18fb      	adds	r3, r7, r3
 8013d70:	2200      	movs	r2, #0
 8013d72:	701a      	strb	r2, [r3, #0]
    uint16_t ctr = 1;
 8013d74:	2334      	movs	r3, #52	; 0x34
 8013d76:	18fb      	adds	r3, r7, r3
 8013d78:	2201      	movs	r2, #1
 8013d7a:	801a      	strh	r2, [r3, #0]
    uint8_t sBlock[16] = { 0 };
 8013d7c:	2320      	movs	r3, #32
 8013d7e:	18fb      	adds	r3, r7, r3
 8013d80:	0018      	movs	r0, r3
 8013d82:	2310      	movs	r3, #16
 8013d84:	001a      	movs	r2, r3
 8013d86:	2100      	movs	r1, #0
 8013d88:	f005 fde6 	bl	8019958 <memset>
    uint8_t aBlock[16] = { 0 };
 8013d8c:	2110      	movs	r1, #16
 8013d8e:	000c      	movs	r4, r1
 8013d90:	187b      	adds	r3, r7, r1
 8013d92:	0018      	movs	r0, r3
 8013d94:	2310      	movs	r3, #16
 8013d96:	001a      	movs	r2, r3
 8013d98:	2100      	movs	r1, #0
 8013d9a:	f005 fddd 	bl	8019958 <memset>

    aBlock[0] = 0x01;
 8013d9e:	0021      	movs	r1, r4
 8013da0:	187b      	adds	r3, r7, r1
 8013da2:	2201      	movs	r2, #1
 8013da4:	701a      	strb	r2, [r3, #0]

    aBlock[5] = dir;
 8013da6:	187b      	adds	r3, r7, r1
 8013da8:	2240      	movs	r2, #64	; 0x40
 8013daa:	2008      	movs	r0, #8
 8013dac:	4684      	mov	ip, r0
 8013dae:	44bc      	add	ip, r7
 8013db0:	4462      	add	r2, ip
 8013db2:	7812      	ldrb	r2, [r2, #0]
 8013db4:	715a      	strb	r2, [r3, #5]

    aBlock[6] = address & 0xFF;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	b2da      	uxtb	r2, r3
 8013dba:	187b      	adds	r3, r7, r1
 8013dbc:	719a      	strb	r2, [r3, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	0a1b      	lsrs	r3, r3, #8
 8013dc2:	b2da      	uxtb	r2, r3
 8013dc4:	187b      	adds	r3, r7, r1
 8013dc6:	71da      	strb	r2, [r3, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	0c1b      	lsrs	r3, r3, #16
 8013dcc:	b2da      	uxtb	r2, r3
 8013dce:	187b      	adds	r3, r7, r1
 8013dd0:	721a      	strb	r2, [r3, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	0e1b      	lsrs	r3, r3, #24
 8013dd6:	b2da      	uxtb	r2, r3
 8013dd8:	187b      	adds	r3, r7, r1
 8013dda:	725a      	strb	r2, [r3, #9]

    aBlock[10] = frameCounter & 0xFF;
 8013ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dde:	b2da      	uxtb	r2, r3
 8013de0:	187b      	adds	r3, r7, r1
 8013de2:	729a      	strb	r2, [r3, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8013de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013de6:	0a1b      	lsrs	r3, r3, #8
 8013de8:	b2da      	uxtb	r2, r3
 8013dea:	187b      	adds	r3, r7, r1
 8013dec:	72da      	strb	r2, [r3, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8013dee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013df0:	0c1b      	lsrs	r3, r3, #16
 8013df2:	b2da      	uxtb	r2, r3
 8013df4:	187b      	adds	r3, r7, r1
 8013df6:	731a      	strb	r2, [r3, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8013df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dfa:	0e1b      	lsrs	r3, r3, #24
 8013dfc:	b2da      	uxtb	r2, r3
 8013dfe:	187b      	adds	r3, r7, r1
 8013e00:	735a      	strb	r2, [r3, #13]

    while( size > 0 )
 8013e02:	e058      	b.n	8013eb6 <PayloadEncrypt+0x172>
    {
        aBlock[15] = ctr & 0xFF;
 8013e04:	2134      	movs	r1, #52	; 0x34
 8013e06:	187b      	adds	r3, r7, r1
 8013e08:	881b      	ldrh	r3, [r3, #0]
 8013e0a:	b2da      	uxtb	r2, r3
 8013e0c:	2010      	movs	r0, #16
 8013e0e:	183b      	adds	r3, r7, r0
 8013e10:	73da      	strb	r2, [r3, #15]
        ctr++;
 8013e12:	187b      	adds	r3, r7, r1
 8013e14:	881a      	ldrh	r2, [r3, #0]
 8013e16:	187b      	adds	r3, r7, r1
 8013e18:	3201      	adds	r2, #1
 8013e1a:	801a      	strh	r2, [r3, #0]
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8013e1c:	2320      	movs	r3, #32
 8013e1e:	18f9      	adds	r1, r7, r3
 8013e20:	2309      	movs	r3, #9
 8013e22:	18fb      	adds	r3, r7, r3
 8013e24:	781a      	ldrb	r2, [r3, #0]
 8013e26:	1838      	adds	r0, r7, r0
 8013e28:	000b      	movs	r3, r1
 8013e2a:	2110      	movs	r1, #16
 8013e2c:	f7f9 fb96 	bl	800d55c <SecureElementAesEncrypt>
 8013e30:	1e03      	subs	r3, r0, #0
 8013e32:	d001      	beq.n	8013e38 <PayloadEncrypt+0xf4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e34:	230f      	movs	r3, #15
 8013e36:	e045      	b.n	8013ec4 <PayloadEncrypt+0x180>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013e38:	2333      	movs	r3, #51	; 0x33
 8013e3a:	18fb      	adds	r3, r7, r3
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	701a      	strb	r2, [r3, #0]
 8013e40:	e01f      	b.n	8013e82 <PayloadEncrypt+0x13e>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8013e42:	2037      	movs	r0, #55	; 0x37
 8013e44:	183b      	adds	r3, r7, r0
 8013e46:	781a      	ldrb	r2, [r3, #0]
 8013e48:	2433      	movs	r4, #51	; 0x33
 8013e4a:	193b      	adds	r3, r7, r4
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	18d3      	adds	r3, r2, r3
 8013e50:	001a      	movs	r2, r3
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	189b      	adds	r3, r3, r2
 8013e56:	7819      	ldrb	r1, [r3, #0]
 8013e58:	193b      	adds	r3, r7, r4
 8013e5a:	781b      	ldrb	r3, [r3, #0]
 8013e5c:	2220      	movs	r2, #32
 8013e5e:	18ba      	adds	r2, r7, r2
 8013e60:	5cd2      	ldrb	r2, [r2, r3]
 8013e62:	183b      	adds	r3, r7, r0
 8013e64:	7818      	ldrb	r0, [r3, #0]
 8013e66:	193b      	adds	r3, r7, r4
 8013e68:	781b      	ldrb	r3, [r3, #0]
 8013e6a:	18c3      	adds	r3, r0, r3
 8013e6c:	0018      	movs	r0, r3
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	181b      	adds	r3, r3, r0
 8013e72:	404a      	eors	r2, r1
 8013e74:	b2d2      	uxtb	r2, r2
 8013e76:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013e78:	193b      	adds	r3, r7, r4
 8013e7a:	781a      	ldrb	r2, [r3, #0]
 8013e7c:	193b      	adds	r3, r7, r4
 8013e7e:	3201      	adds	r2, #1
 8013e80:	701a      	strb	r2, [r3, #0]
 8013e82:	2333      	movs	r3, #51	; 0x33
 8013e84:	18fb      	adds	r3, r7, r3
 8013e86:	781a      	ldrb	r2, [r3, #0]
 8013e88:	230a      	movs	r3, #10
 8013e8a:	18fb      	adds	r3, r7, r3
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	b219      	sxth	r1, r3
 8013e90:	2910      	cmp	r1, #16
 8013e92:	dd00      	ble.n	8013e96 <PayloadEncrypt+0x152>
 8013e94:	2310      	movs	r3, #16
 8013e96:	b21b      	sxth	r3, r3
 8013e98:	429a      	cmp	r2, r3
 8013e9a:	dbd2      	blt.n	8013e42 <PayloadEncrypt+0xfe>
        }
        size -= 16;
 8013e9c:	210a      	movs	r1, #10
 8013e9e:	187b      	adds	r3, r7, r1
 8013ea0:	881b      	ldrh	r3, [r3, #0]
 8013ea2:	3b10      	subs	r3, #16
 8013ea4:	b29a      	uxth	r2, r3
 8013ea6:	187b      	adds	r3, r7, r1
 8013ea8:	801a      	strh	r2, [r3, #0]
        bufferIndex += 16;
 8013eaa:	2237      	movs	r2, #55	; 0x37
 8013eac:	18bb      	adds	r3, r7, r2
 8013eae:	18ba      	adds	r2, r7, r2
 8013eb0:	7812      	ldrb	r2, [r2, #0]
 8013eb2:	3210      	adds	r2, #16
 8013eb4:	701a      	strb	r2, [r3, #0]
    while( size > 0 )
 8013eb6:	230a      	movs	r3, #10
 8013eb8:	18fb      	adds	r3, r7, r3
 8013eba:	2200      	movs	r2, #0
 8013ebc:	5e9b      	ldrsh	r3, [r3, r2]
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	dca0      	bgt.n	8013e04 <PayloadEncrypt+0xc0>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013ec2:	2300      	movs	r3, #0
}
 8013ec4:	0018      	movs	r0, r3
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	b00f      	add	sp, #60	; 0x3c
 8013eca:	bd90      	pop	{r4, r7, pc}

08013ecc <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8013ecc:	b5b0      	push	{r4, r5, r7, lr}
 8013ece:	b084      	sub	sp, #16
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	0005      	movs	r5, r0
 8013ed4:	000c      	movs	r4, r1
 8013ed6:	0010      	movs	r0, r2
 8013ed8:	0019      	movs	r1, r3
 8013eda:	1dbb      	adds	r3, r7, #6
 8013edc:	1c2a      	adds	r2, r5, #0
 8013ede:	801a      	strh	r2, [r3, #0]
 8013ee0:	1d7b      	adds	r3, r7, #5
 8013ee2:	1c22      	adds	r2, r4, #0
 8013ee4:	701a      	strb	r2, [r3, #0]
 8013ee6:	1d3b      	adds	r3, r7, #4
 8013ee8:	1c02      	adds	r2, r0, #0
 8013eea:	701a      	strb	r2, [r3, #0]
 8013eec:	1cfb      	adds	r3, r7, #3
 8013eee:	1c0a      	adds	r2, r1, #0
 8013ef0:	701a      	strb	r2, [r3, #0]
    if( b0 == 0 )
 8013ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d101      	bne.n	8013efc <PrepareB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013ef8:	230a      	movs	r3, #10
 8013efa:	e070      	b.n	8013fde <PrepareB0+0x112>
    }

    b0[0] = 0x49;
 8013efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013efe:	2249      	movs	r2, #73	; 0x49
 8013f00:	701a      	strb	r2, [r3, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8013f02:	1d3b      	adds	r3, r7, #4
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d01b      	beq.n	8013f42 <PrepareB0+0x76>
 8013f0a:	1cfb      	adds	r3, r7, #3
 8013f0c:	781b      	ldrb	r3, [r3, #0]
 8013f0e:	2b01      	cmp	r3, #1
 8013f10:	d117      	bne.n	8013f42 <PrepareB0+0x76>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink or downlink frame that is being acknowledged
        uint16_t confFCnt = 0;
 8013f12:	210e      	movs	r1, #14
 8013f14:	187b      	adds	r3, r7, r1
 8013f16:	2200      	movs	r2, #0
 8013f18:	801a      	strh	r2, [r3, #0]

        confFCnt = ( uint16_t )( CryptoCtx.NvmCtx->FCntList.FCntUp % 65536 );
 8013f1a:	4b33      	ldr	r3, [pc, #204]	; (8013fe8 <PrepareB0+0x11c>)
 8013f1c:	685b      	ldr	r3, [r3, #4]
 8013f1e:	68da      	ldr	r2, [r3, #12]
 8013f20:	187b      	adds	r3, r7, r1
 8013f22:	801a      	strh	r2, [r3, #0]

        b0[1] = confFCnt & 0xFF;
 8013f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f26:	3301      	adds	r3, #1
 8013f28:	187a      	adds	r2, r7, r1
 8013f2a:	8812      	ldrh	r2, [r2, #0]
 8013f2c:	b2d2      	uxtb	r2, r2
 8013f2e:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 8013f30:	187b      	adds	r3, r7, r1
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	0a1b      	lsrs	r3, r3, #8
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f3a:	3302      	adds	r3, #2
 8013f3c:	b2d2      	uxtb	r2, r2
 8013f3e:	701a      	strb	r2, [r3, #0]
    {
 8013f40:	e007      	b.n	8013f52 <PrepareB0+0x86>
    }
    else
    {
        b0[1] = 0x00;
 8013f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f44:	3301      	adds	r3, #1
 8013f46:	2200      	movs	r2, #0
 8013f48:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8013f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4c:	3302      	adds	r3, #2
 8013f4e:	2200      	movs	r2, #0
 8013f50:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8013f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f54:	3303      	adds	r3, #3
 8013f56:	2200      	movs	r2, #0
 8013f58:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8013f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5c:	3304      	adds	r3, #4
 8013f5e:	2200      	movs	r2, #0
 8013f60:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8013f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f64:	3305      	adds	r3, #5
 8013f66:	1cfa      	adds	r2, r7, #3
 8013f68:	7812      	ldrb	r2, [r2, #0]
 8013f6a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8013f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f6e:	3306      	adds	r3, #6
 8013f70:	6a3a      	ldr	r2, [r7, #32]
 8013f72:	b2d2      	uxtb	r2, r2
 8013f74:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013f76:	6a3b      	ldr	r3, [r7, #32]
 8013f78:	0a1a      	lsrs	r2, r3, #8
 8013f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f7c:	3307      	adds	r3, #7
 8013f7e:	b2d2      	uxtb	r2, r2
 8013f80:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8013f82:	6a3b      	ldr	r3, [r7, #32]
 8013f84:	0c1a      	lsrs	r2, r3, #16
 8013f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f88:	3308      	adds	r3, #8
 8013f8a:	b2d2      	uxtb	r2, r2
 8013f8c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8013f8e:	6a3b      	ldr	r3, [r7, #32]
 8013f90:	0e1a      	lsrs	r2, r3, #24
 8013f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f94:	3309      	adds	r3, #9
 8013f96:	b2d2      	uxtb	r2, r2
 8013f98:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9c:	330a      	adds	r3, #10
 8013f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013fa0:	b2d2      	uxtb	r2, r2
 8013fa2:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	0a1a      	lsrs	r2, r3, #8
 8013fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013faa:	330b      	adds	r3, #11
 8013fac:	b2d2      	uxtb	r2, r2
 8013fae:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8013fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fb2:	0c1a      	lsrs	r2, r3, #16
 8013fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb6:	330c      	adds	r3, #12
 8013fb8:	b2d2      	uxtb	r2, r2
 8013fba:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fbe:	0e1a      	lsrs	r2, r3, #24
 8013fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fc2:	330d      	adds	r3, #13
 8013fc4:	b2d2      	uxtb	r2, r2
 8013fc6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fca:	330e      	adds	r3, #14
 8013fcc:	2200      	movs	r2, #0
 8013fce:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8013fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd2:	330f      	adds	r3, #15
 8013fd4:	1dba      	adds	r2, r7, #6
 8013fd6:	8812      	ldrh	r2, [r2, #0]
 8013fd8:	b2d2      	uxtb	r2, r2
 8013fda:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013fdc:	2300      	movs	r3, #0
}
 8013fde:	0018      	movs	r0, r3
 8013fe0:	46bd      	mov	sp, r7
 8013fe2:	b004      	add	sp, #16
 8013fe4:	bdb0      	pop	{r4, r5, r7, pc}
 8013fe6:	46c0      	nop			; (mov r8, r8)
 8013fe8:	20001084 	.word	0x20001084

08013fec <ComputeCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013fec:	b5b0      	push	{r4, r5, r7, lr}
 8013fee:	b08a      	sub	sp, #40	; 0x28
 8013ff0:	af04      	add	r7, sp, #16
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	000c      	movs	r4, r1
 8013ff6:	0010      	movs	r0, r2
 8013ff8:	0019      	movs	r1, r3
 8013ffa:	1cbb      	adds	r3, r7, #2
 8013ffc:	1c22      	adds	r2, r4, #0
 8013ffe:	801a      	strh	r2, [r3, #0]
 8014000:	1c7b      	adds	r3, r7, #1
 8014002:	1c02      	adds	r2, r0, #0
 8014004:	701a      	strb	r2, [r3, #0]
 8014006:	003b      	movs	r3, r7
 8014008:	1c0a      	adds	r2, r1, #0
 801400a:	701a      	strb	r2, [r3, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d002      	beq.n	8014018 <ComputeCmacB0+0x2c>
 8014012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014014:	2b00      	cmp	r3, #0
 8014016:	d101      	bne.n	801401c <ComputeCmacB0+0x30>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014018:	230a      	movs	r3, #10
 801401a:	e02a      	b.n	8014072 <ComputeCmacB0+0x86>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801401c:	1cbb      	adds	r3, r7, #2
 801401e:	881a      	ldrh	r2, [r3, #0]
 8014020:	2380      	movs	r3, #128	; 0x80
 8014022:	005b      	lsls	r3, r3, #1
 8014024:	429a      	cmp	r2, r3
 8014026:	d901      	bls.n	801402c <ComputeCmacB0+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8014028:	230e      	movs	r3, #14
 801402a:	e022      	b.n	8014072 <ComputeCmacB0+0x86>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801402c:	2328      	movs	r3, #40	; 0x28
 801402e:	18fb      	adds	r3, r7, r3
 8014030:	781c      	ldrb	r4, [r3, #0]
 8014032:	003b      	movs	r3, r7
 8014034:	781a      	ldrb	r2, [r3, #0]
 8014036:	1c7b      	adds	r3, r7, #1
 8014038:	7819      	ldrb	r1, [r3, #0]
 801403a:	1cbb      	adds	r3, r7, #2
 801403c:	8818      	ldrh	r0, [r3, #0]
 801403e:	2508      	movs	r5, #8
 8014040:	197b      	adds	r3, r7, r5
 8014042:	9302      	str	r3, [sp, #8]
 8014044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014046:	9301      	str	r3, [sp, #4]
 8014048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801404a:	9300      	str	r3, [sp, #0]
 801404c:	0023      	movs	r3, r4
 801404e:	f7ff ff3d 	bl	8013ecc <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8014052:	1c7b      	adds	r3, r7, #1
 8014054:	781c      	ldrb	r4, [r3, #0]
 8014056:	1cbb      	adds	r3, r7, #2
 8014058:	881a      	ldrh	r2, [r3, #0]
 801405a:	6879      	ldr	r1, [r7, #4]
 801405c:	1978      	adds	r0, r7, r5
 801405e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014060:	9300      	str	r3, [sp, #0]
 8014062:	0023      	movs	r3, r4
 8014064:	f7f9 fa16 	bl	800d494 <SecureElementComputeAesCmac>
 8014068:	1e03      	subs	r3, r0, #0
 801406a:	d001      	beq.n	8014070 <ComputeCmacB0+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801406c:	230f      	movs	r3, #15
 801406e:	e000      	b.n	8014072 <ComputeCmacB0+0x86>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8014070:	2300      	movs	r3, #0
}
 8014072:	0018      	movs	r0, r3
 8014074:	46bd      	mov	sp, r7
 8014076:	b006      	add	sp, #24
 8014078:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801407c <VerifyCmacB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[in]  expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801407c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801407e:	b0cd      	sub	sp, #308	; 0x134
 8014080:	af04      	add	r7, sp, #16
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	000c      	movs	r4, r1
 8014086:	0010      	movs	r0, r2
 8014088:	0019      	movs	r1, r3
 801408a:	4b52      	ldr	r3, [pc, #328]	; (80141d4 <VerifyCmacB0+0x158>)
 801408c:	2290      	movs	r2, #144	; 0x90
 801408e:	0052      	lsls	r2, r2, #1
 8014090:	4694      	mov	ip, r2
 8014092:	44bc      	add	ip, r7
 8014094:	4463      	add	r3, ip
 8014096:	1c22      	adds	r2, r4, #0
 8014098:	801a      	strh	r2, [r3, #0]
 801409a:	4b4f      	ldr	r3, [pc, #316]	; (80141d8 <VerifyCmacB0+0x15c>)
 801409c:	2290      	movs	r2, #144	; 0x90
 801409e:	0052      	lsls	r2, r2, #1
 80140a0:	4694      	mov	ip, r2
 80140a2:	44bc      	add	ip, r7
 80140a4:	4463      	add	r3, ip
 80140a6:	1c02      	adds	r2, r0, #0
 80140a8:	701a      	strb	r2, [r3, #0]
 80140aa:	4b4c      	ldr	r3, [pc, #304]	; (80141dc <VerifyCmacB0+0x160>)
 80140ac:	2290      	movs	r2, #144	; 0x90
 80140ae:	0052      	lsls	r2, r2, #1
 80140b0:	4694      	mov	ip, r2
 80140b2:	44bc      	add	ip, r7
 80140b4:	4463      	add	r3, ip
 80140b6:	1c0a      	adds	r2, r1, #0
 80140b8:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d101      	bne.n	80140c4 <VerifyCmacB0+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80140c0:	230a      	movs	r3, #10
 80140c2:	e083      	b.n	80141cc <VerifyCmacB0+0x150>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80140c4:	4b43      	ldr	r3, [pc, #268]	; (80141d4 <VerifyCmacB0+0x158>)
 80140c6:	2290      	movs	r2, #144	; 0x90
 80140c8:	0052      	lsls	r2, r2, #1
 80140ca:	4694      	mov	ip, r2
 80140cc:	44bc      	add	ip, r7
 80140ce:	4463      	add	r3, ip
 80140d0:	881a      	ldrh	r2, [r3, #0]
 80140d2:	2380      	movs	r3, #128	; 0x80
 80140d4:	005b      	lsls	r3, r3, #1
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d901      	bls.n	80140de <VerifyCmacB0+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80140da:	230e      	movs	r3, #14
 80140dc:	e076      	b.n	80141cc <VerifyCmacB0+0x150>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80140de:	2388      	movs	r3, #136	; 0x88
 80140e0:	005a      	lsls	r2, r3, #1
 80140e2:	250c      	movs	r5, #12
 80140e4:	197b      	adds	r3, r7, r5
 80140e6:	2100      	movs	r1, #0
 80140e8:	0018      	movs	r0, r3
 80140ea:	f005 fbed 	bl	80198c8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80140ee:	2398      	movs	r3, #152	; 0x98
 80140f0:	005b      	lsls	r3, r3, #1
 80140f2:	2208      	movs	r2, #8
 80140f4:	4694      	mov	ip, r2
 80140f6:	44bc      	add	ip, r7
 80140f8:	4463      	add	r3, ip
 80140fa:	781c      	ldrb	r4, [r3, #0]
 80140fc:	4b37      	ldr	r3, [pc, #220]	; (80141dc <VerifyCmacB0+0x160>)
 80140fe:	2290      	movs	r2, #144	; 0x90
 8014100:	0052      	lsls	r2, r2, #1
 8014102:	4694      	mov	ip, r2
 8014104:	44bc      	add	ip, r7
 8014106:	4463      	add	r3, ip
 8014108:	781a      	ldrb	r2, [r3, #0]
 801410a:	4b33      	ldr	r3, [pc, #204]	; (80141d8 <VerifyCmacB0+0x15c>)
 801410c:	2190      	movs	r1, #144	; 0x90
 801410e:	0049      	lsls	r1, r1, #1
 8014110:	468c      	mov	ip, r1
 8014112:	44bc      	add	ip, r7
 8014114:	4463      	add	r3, ip
 8014116:	7819      	ldrb	r1, [r3, #0]
 8014118:	4b2e      	ldr	r3, [pc, #184]	; (80141d4 <VerifyCmacB0+0x158>)
 801411a:	2090      	movs	r0, #144	; 0x90
 801411c:	0040      	lsls	r0, r0, #1
 801411e:	4684      	mov	ip, r0
 8014120:	44bc      	add	ip, r7
 8014122:	4463      	add	r3, ip
 8014124:	8818      	ldrh	r0, [r3, #0]
 8014126:	197b      	adds	r3, r7, r5
 8014128:	9302      	str	r3, [sp, #8]
 801412a:	239c      	movs	r3, #156	; 0x9c
 801412c:	005b      	lsls	r3, r3, #1
 801412e:	2608      	movs	r6, #8
 8014130:	46b4      	mov	ip, r6
 8014132:	44bc      	add	ip, r7
 8014134:	4463      	add	r3, ip
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	9301      	str	r3, [sp, #4]
 801413a:	239a      	movs	r3, #154	; 0x9a
 801413c:	005b      	lsls	r3, r3, #1
 801413e:	2608      	movs	r6, #8
 8014140:	46b4      	mov	ip, r6
 8014142:	44bc      	add	ip, r7
 8014144:	4463      	add	r3, ip
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	9300      	str	r3, [sp, #0]
 801414a:	0023      	movs	r3, r4
 801414c:	f7ff febe 	bl	8013ecc <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8014150:	197b      	adds	r3, r7, r5
 8014152:	3310      	adds	r3, #16
 8014154:	4a1f      	ldr	r2, [pc, #124]	; (80141d4 <VerifyCmacB0+0x158>)
 8014156:	2190      	movs	r1, #144	; 0x90
 8014158:	0049      	lsls	r1, r1, #1
 801415a:	468c      	mov	ip, r1
 801415c:	44bc      	add	ip, r7
 801415e:	4462      	add	r2, ip
 8014160:	8812      	ldrh	r2, [r2, #0]
 8014162:	6879      	ldr	r1, [r7, #4]
 8014164:	0018      	movs	r0, r3
 8014166:	f005 fb73 	bl	8019850 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801416a:	2620      	movs	r6, #32
 801416c:	36ff      	adds	r6, #255	; 0xff
 801416e:	19bb      	adds	r3, r7, r6
 8014170:	2206      	movs	r2, #6
 8014172:	701a      	strb	r2, [r3, #0]
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8014174:	4b17      	ldr	r3, [pc, #92]	; (80141d4 <VerifyCmacB0+0x158>)
 8014176:	2290      	movs	r2, #144	; 0x90
 8014178:	0052      	lsls	r2, r2, #1
 801417a:	4694      	mov	ip, r2
 801417c:	44bc      	add	ip, r7
 801417e:	4463      	add	r3, ip
 8014180:	881b      	ldrh	r3, [r3, #0]
 8014182:	3310      	adds	r3, #16
 8014184:	b299      	uxth	r1, r3
 8014186:	19bc      	adds	r4, r7, r6
 8014188:	4b13      	ldr	r3, [pc, #76]	; (80141d8 <VerifyCmacB0+0x15c>)
 801418a:	2290      	movs	r2, #144	; 0x90
 801418c:	0052      	lsls	r2, r2, #1
 801418e:	4694      	mov	ip, r2
 8014190:	44bc      	add	ip, r7
 8014192:	4463      	add	r3, ip
 8014194:	781b      	ldrb	r3, [r3, #0]
 8014196:	229e      	movs	r2, #158	; 0x9e
 8014198:	0052      	lsls	r2, r2, #1
 801419a:	2008      	movs	r0, #8
 801419c:	4684      	mov	ip, r0
 801419e:	44bc      	add	ip, r7
 80141a0:	4462      	add	r2, ip
 80141a2:	6812      	ldr	r2, [r2, #0]
 80141a4:	1978      	adds	r0, r7, r5
 80141a6:	f7f9 f996 	bl	800d4d6 <SecureElementVerifyAesCmac>
 80141aa:	0003      	movs	r3, r0
 80141ac:	7023      	strb	r3, [r4, #0]

    if( retval == SECURE_ELEMENT_SUCCESS )
 80141ae:	19bb      	adds	r3, r7, r6
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d101      	bne.n	80141ba <VerifyCmacB0+0x13e>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80141b6:	2300      	movs	r3, #0
 80141b8:	e008      	b.n	80141cc <VerifyCmacB0+0x150>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80141ba:	2320      	movs	r3, #32
 80141bc:	33ff      	adds	r3, #255	; 0xff
 80141be:	18fb      	adds	r3, r7, r3
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	2b01      	cmp	r3, #1
 80141c4:	d101      	bne.n	80141ca <VerifyCmacB0+0x14e>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80141c6:	2301      	movs	r3, #1
 80141c8:	e000      	b.n	80141cc <VerifyCmacB0+0x150>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80141ca:	230f      	movs	r3, #15
}
 80141cc:	0018      	movs	r0, r3
 80141ce:	46bd      	mov	sp, r7
 80141d0:	b049      	add	sp, #292	; 0x124
 80141d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141d4:	fffffee2 	.word	0xfffffee2
 80141d8:	fffffee1 	.word	0xfffffee1
 80141dc:	fffffee0 	.word	0xfffffee0

080141e0 <GetKeyAddrItem>:
 * \param[IN]  addrID          - Address identifier
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b084      	sub	sp, #16
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	0002      	movs	r2, r0
 80141e8:	6039      	str	r1, [r7, #0]
 80141ea:	1dfb      	adds	r3, r7, #7
 80141ec:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80141ee:	230f      	movs	r3, #15
 80141f0:	18fb      	adds	r3, r7, r3
 80141f2:	2200      	movs	r2, #0
 80141f4:	701a      	strb	r2, [r3, #0]
 80141f6:	e019      	b.n	801422c <GetKeyAddrItem+0x4c>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80141f8:	230f      	movs	r3, #15
 80141fa:	18fb      	adds	r3, r7, r3
 80141fc:	781a      	ldrb	r2, [r3, #0]
 80141fe:	4b10      	ldr	r3, [pc, #64]	; (8014240 <GetKeyAddrItem+0x60>)
 8014200:	0092      	lsls	r2, r2, #2
 8014202:	5cd3      	ldrb	r3, [r2, r3]
 8014204:	1dfa      	adds	r2, r7, #7
 8014206:	7812      	ldrb	r2, [r2, #0]
 8014208:	429a      	cmp	r2, r3
 801420a:	d109      	bne.n	8014220 <GetKeyAddrItem+0x40>
        {
            *item = &( KeyAddrList[i] );
 801420c:	230f      	movs	r3, #15
 801420e:	18fb      	adds	r3, r7, r3
 8014210:	781b      	ldrb	r3, [r3, #0]
 8014212:	009a      	lsls	r2, r3, #2
 8014214:	4b0a      	ldr	r3, [pc, #40]	; (8014240 <GetKeyAddrItem+0x60>)
 8014216:	18d2      	adds	r2, r2, r3
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801421c:	2300      	movs	r3, #0
 801421e:	e00b      	b.n	8014238 <GetKeyAddrItem+0x58>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8014220:	210f      	movs	r1, #15
 8014222:	187b      	adds	r3, r7, r1
 8014224:	781a      	ldrb	r2, [r3, #0]
 8014226:	187b      	adds	r3, r7, r1
 8014228:	3201      	adds	r2, #1
 801422a:	701a      	strb	r2, [r3, #0]
 801422c:	230f      	movs	r3, #15
 801422e:	18fb      	adds	r3, r7, r3
 8014230:	781b      	ldrb	r3, [r3, #0]
 8014232:	2b04      	cmp	r3, #4
 8014234:	d9e0      	bls.n	80141f8 <GetKeyAddrItem+0x18>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8014236:	230c      	movs	r3, #12
}
 8014238:	0018      	movs	r0, r3
 801423a:	46bd      	mov	sp, r7
 801423c:	b004      	add	sp, #16
 801423e:	bd80      	pop	{r7, pc}
 8014240:	20000074 	.word	0x20000074

08014244 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint8_t* joinNonce, uint8_t* netID, uint8_t* devNonce )
{
 8014244:	b590      	push	{r4, r7, lr}
 8014246:	b089      	sub	sp, #36	; 0x24
 8014248:	af00      	add	r7, sp, #0
 801424a:	60b9      	str	r1, [r7, #8]
 801424c:	607a      	str	r2, [r7, #4]
 801424e:	603b      	str	r3, [r7, #0]
 8014250:	230f      	movs	r3, #15
 8014252:	18fb      	adds	r3, r7, r3
 8014254:	1c02      	adds	r2, r0, #0
 8014256:	701a      	strb	r2, [r3, #0]
    if( ( joinNonce == 0 ) || ( netID == 0 ) || ( devNonce == 0 ) )
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d005      	beq.n	801426a <DeriveSessionKey10x+0x26>
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d002      	beq.n	801426a <DeriveSessionKey10x+0x26>
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d101      	bne.n	801426e <DeriveSessionKey10x+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801426a:	230a      	movs	r3, #10
 801426c:	e043      	b.n	80142f6 <DeriveSessionKey10x+0xb2>
    }

    uint8_t compBase[16] = { 0 };
 801426e:	2310      	movs	r3, #16
 8014270:	18fb      	adds	r3, r7, r3
 8014272:	0018      	movs	r0, r3
 8014274:	2310      	movs	r3, #16
 8014276:	001a      	movs	r2, r3
 8014278:	2100      	movs	r1, #0
 801427a:	f005 fb6d 	bl	8019958 <memset>

    switch( keyID )
 801427e:	230f      	movs	r3, #15
 8014280:	18fb      	adds	r3, r7, r3
 8014282:	781b      	ldrb	r3, [r3, #0]
 8014284:	2b05      	cmp	r3, #5
 8014286:	db0e      	blt.n	80142a6 <DeriveSessionKey10x+0x62>
 8014288:	2b07      	cmp	r3, #7
 801428a:	dd02      	ble.n	8014292 <DeriveSessionKey10x+0x4e>
 801428c:	2b08      	cmp	r3, #8
 801428e:	d005      	beq.n	801429c <DeriveSessionKey10x+0x58>
 8014290:	e009      	b.n	80142a6 <DeriveSessionKey10x+0x62>
    {
        case F_NWK_S_INT_KEY:
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
            compBase[0] = 0x01;
 8014292:	2310      	movs	r3, #16
 8014294:	18fb      	adds	r3, r7, r3
 8014296:	2201      	movs	r2, #1
 8014298:	701a      	strb	r2, [r3, #0]
            break;
 801429a:	e006      	b.n	80142aa <DeriveSessionKey10x+0x66>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801429c:	2310      	movs	r3, #16
 801429e:	18fb      	adds	r3, r7, r3
 80142a0:	2202      	movs	r2, #2
 80142a2:	701a      	strb	r2, [r3, #0]
            break;
 80142a4:	e001      	b.n	80142aa <DeriveSessionKey10x+0x66>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80142a6:	230b      	movs	r3, #11
 80142a8:	e025      	b.n	80142f6 <DeriveSessionKey10x+0xb2>
    }

    memcpy1( compBase + 1, joinNonce, 3 );
 80142aa:	2410      	movs	r4, #16
 80142ac:	193b      	adds	r3, r7, r4
 80142ae:	3301      	adds	r3, #1
 80142b0:	68b9      	ldr	r1, [r7, #8]
 80142b2:	2203      	movs	r2, #3
 80142b4:	0018      	movs	r0, r3
 80142b6:	f005 facb 	bl	8019850 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 80142ba:	193b      	adds	r3, r7, r4
 80142bc:	3304      	adds	r3, #4
 80142be:	6879      	ldr	r1, [r7, #4]
 80142c0:	2203      	movs	r2, #3
 80142c2:	0018      	movs	r0, r3
 80142c4:	f005 fac4 	bl	8019850 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 80142c8:	193b      	adds	r3, r7, r4
 80142ca:	3307      	adds	r3, #7
 80142cc:	6839      	ldr	r1, [r7, #0]
 80142ce:	2202      	movs	r2, #2
 80142d0:	0018      	movs	r0, r3
 80142d2:	f005 fabd 	bl	8019850 <memcpy1>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80142d6:	4b0a      	ldr	r3, [pc, #40]	; (8014300 <DeriveSessionKey10x+0xbc>)
 80142d8:	685b      	ldr	r3, [r3, #4]
 80142da:	220f      	movs	r2, #15
 80142dc:	18ba      	adds	r2, r7, r2
 80142de:	7812      	ldrb	r2, [r2, #0]
 80142e0:	1939      	adds	r1, r7, r4
 80142e2:	6818      	ldr	r0, [r3, #0]
 80142e4:	0013      	movs	r3, r2
 80142e6:	2202      	movs	r2, #2
 80142e8:	f7f9 f9a2 	bl	800d630 <SecureElementDeriveAndStoreKey>
 80142ec:	1e03      	subs	r3, r0, #0
 80142ee:	d001      	beq.n	80142f4 <DeriveSessionKey10x+0xb0>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80142f0:	230f      	movs	r3, #15
 80142f2:	e000      	b.n	80142f6 <DeriveSessionKey10x+0xb2>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80142f4:	2300      	movs	r3, #0
}
 80142f6:	0018      	movs	r0, r3
 80142f8:	46bd      	mov	sp, r7
 80142fa:	b009      	add	sp, #36	; 0x24
 80142fc:	bd90      	pop	{r4, r7, pc}
 80142fe:	46c0      	nop			; (mov r8, r8)
 8014300:	20001084 	.word	0x20001084

08014304 <GetLastFcntDown>:
 * \param[IN]     lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	0002      	movs	r2, r0
 801430c:	6039      	str	r1, [r7, #0]
 801430e:	1dfb      	adds	r3, r7, #7
 8014310:	701a      	strb	r2, [r3, #0]
    if( lastDown == NULL )
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d101      	bne.n	801431c <GetLastFcntDown+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014318:	230a      	movs	r3, #10
 801431a:	e047      	b.n	80143ac <GetLastFcntDown+0xa8>
    }
    switch( fCntID )
 801431c:	1dfb      	adds	r3, r7, #7
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	2b07      	cmp	r3, #7
 8014322:	d840      	bhi.n	80143a6 <GetLastFcntDown+0xa2>
 8014324:	009a      	lsls	r2, r3, #2
 8014326:	4b23      	ldr	r3, [pc, #140]	; (80143b4 <GetLastFcntDown+0xb0>)
 8014328:	18d3      	adds	r3, r2, r3
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 801432e:	4b22      	ldr	r3, [pc, #136]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	691a      	ldr	r2, [r3, #16]
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 8014338:	4b1f      	ldr	r3, [pc, #124]	; (80143b8 <GetLastFcntDown+0xb4>)
 801433a:	685a      	ldr	r2, [r3, #4]
 801433c:	4b1e      	ldr	r3, [pc, #120]	; (80143b8 <GetLastFcntDown+0xb4>)
 801433e:	685b      	ldr	r3, [r3, #4]
 8014340:	3210      	adds	r2, #16
 8014342:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 8014344:	e031      	b.n	80143aa <GetLastFcntDown+0xa6>
        case A_FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8014346:	4b1c      	ldr	r3, [pc, #112]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014348:	685b      	ldr	r3, [r3, #4]
 801434a:	695a      	ldr	r2, [r3, #20]
 801434c:	683b      	ldr	r3, [r7, #0]
 801434e:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 8014350:	4b19      	ldr	r3, [pc, #100]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014352:	685a      	ldr	r2, [r3, #4]
 8014354:	4b18      	ldr	r3, [pc, #96]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014356:	685b      	ldr	r3, [r3, #4]
 8014358:	3214      	adds	r2, #20
 801435a:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 801435c:	e025      	b.n	80143aa <GetLastFcntDown+0xa6>
        case FCNT_DOWN:
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 801435e:	4b16      	ldr	r3, [pc, #88]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	699a      	ldr	r2, [r3, #24]
 8014364:	683b      	ldr	r3, [r7, #0]
 8014366:	601a      	str	r2, [r3, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 8014368:	4b13      	ldr	r3, [pc, #76]	; (80143b8 <GetLastFcntDown+0xb4>)
 801436a:	685a      	ldr	r2, [r3, #4]
 801436c:	4b12      	ldr	r3, [pc, #72]	; (80143b8 <GetLastFcntDown+0xb4>)
 801436e:	685b      	ldr	r3, [r3, #4]
 8014370:	3218      	adds	r2, #24
 8014372:	631a      	str	r2, [r3, #48]	; 0x30
            break;
 8014374:	e019      	b.n	80143aa <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8014376:	4b10      	ldr	r3, [pc, #64]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014378:	685b      	ldr	r3, [r3, #4]
 801437a:	69da      	ldr	r2, [r3, #28]
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	601a      	str	r2, [r3, #0]
            break;
 8014380:	e013      	b.n	80143aa <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_1:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8014382:	4b0d      	ldr	r3, [pc, #52]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014384:	685b      	ldr	r3, [r3, #4]
 8014386:	6a1a      	ldr	r2, [r3, #32]
 8014388:	683b      	ldr	r3, [r7, #0]
 801438a:	601a      	str	r2, [r3, #0]
            break;
 801438c:	e00d      	b.n	80143aa <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_2:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 801438e:	4b0a      	ldr	r3, [pc, #40]	; (80143b8 <GetLastFcntDown+0xb4>)
 8014390:	685b      	ldr	r3, [r3, #4]
 8014392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	601a      	str	r2, [r3, #0]
            break;
 8014398:	e007      	b.n	80143aa <GetLastFcntDown+0xa6>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 801439a:	4b07      	ldr	r3, [pc, #28]	; (80143b8 <GetLastFcntDown+0xb4>)
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	601a      	str	r2, [r3, #0]
            break;
 80143a4:	e001      	b.n	80143aa <GetLastFcntDown+0xa6>
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80143a6:	2305      	movs	r3, #5
 80143a8:	e000      	b.n	80143ac <GetLastFcntDown+0xa8>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80143aa:	2300      	movs	r3, #0
}
 80143ac:	0018      	movs	r0, r3
 80143ae:	46bd      	mov	sp, r7
 80143b0:	b002      	add	sp, #8
 80143b2:	bd80      	pop	{r7, pc}
 80143b4:	0801b404 	.word	0x0801b404
 80143b8:	20001084 	.word	0x20001084

080143bc <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	0002      	movs	r2, r0
 80143c4:	6039      	str	r1, [r7, #0]
 80143c6:	1dfb      	adds	r3, r7, #7
 80143c8:	701a      	strb	r2, [r3, #0]
    uint32_t lastDown = 0;
 80143ca:	2300      	movs	r3, #0
 80143cc:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80143ce:	230c      	movs	r3, #12
 80143d0:	18fa      	adds	r2, r7, r3
 80143d2:	1dfb      	adds	r3, r7, #7
 80143d4:	781b      	ldrb	r3, [r3, #0]
 80143d6:	0011      	movs	r1, r2
 80143d8:	0018      	movs	r0, r3
 80143da:	f7ff ff93 	bl	8014304 <GetLastFcntDown>
 80143de:	1e03      	subs	r3, r0, #0
 80143e0:	d001      	beq.n	80143e6 <CheckFCntDown+0x2a>
    {
        return false;
 80143e2:	2300      	movs	r3, #0
 80143e4:	e009      	b.n	80143fa <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	683a      	ldr	r2, [r7, #0]
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d802      	bhi.n	80143f4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80143ee:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80143f0:	3301      	adds	r3, #1
 80143f2:	d101      	bne.n	80143f8 <CheckFCntDown+0x3c>
    {
        return true;
 80143f4:	2301      	movs	r3, #1
 80143f6:	e000      	b.n	80143fa <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80143f8:	2300      	movs	r3, #0
    }
}
 80143fa:	0018      	movs	r0, r3
 80143fc:	46bd      	mov	sp, r7
 80143fe:	b004      	add	sp, #16
 8014400:	bd80      	pop	{r7, pc}
	...

08014404 <UpdateFCntDown>:
 * \param[IN]     currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8014404:	b580      	push	{r7, lr}
 8014406:	b082      	sub	sp, #8
 8014408:	af00      	add	r7, sp, #0
 801440a:	0002      	movs	r2, r0
 801440c:	6039      	str	r1, [r7, #0]
 801440e:	1dfb      	adds	r3, r7, #7
 8014410:	701a      	strb	r2, [r3, #0]
    switch( fCntID )
 8014412:	1dfb      	adds	r3, r7, #7
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	2b07      	cmp	r3, #7
 8014418:	d827      	bhi.n	801446a <UpdateFCntDown+0x66>
 801441a:	009a      	lsls	r2, r3, #2
 801441c:	4b17      	ldr	r3, [pc, #92]	; (801447c <UpdateFCntDown+0x78>)
 801441e:	18d3      	adds	r3, r2, r3
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	469f      	mov	pc, r3
    {
        case N_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 8014424:	4b16      	ldr	r3, [pc, #88]	; (8014480 <UpdateFCntDown+0x7c>)
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	683a      	ldr	r2, [r7, #0]
 801442a:	611a      	str	r2, [r3, #16]
            break;
 801442c:	e01e      	b.n	801446c <UpdateFCntDown+0x68>
        case A_FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 801442e:	4b14      	ldr	r3, [pc, #80]	; (8014480 <UpdateFCntDown+0x7c>)
 8014430:	685b      	ldr	r3, [r3, #4]
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	615a      	str	r2, [r3, #20]
            break;
 8014436:	e019      	b.n	801446c <UpdateFCntDown+0x68>
        case FCNT_DOWN:
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 8014438:	4b11      	ldr	r3, [pc, #68]	; (8014480 <UpdateFCntDown+0x7c>)
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	683a      	ldr	r2, [r7, #0]
 801443e:	619a      	str	r2, [r3, #24]
            break;
 8014440:	e014      	b.n	801446c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_0:
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 8014442:	4b0f      	ldr	r3, [pc, #60]	; (8014480 <UpdateFCntDown+0x7c>)
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	683a      	ldr	r2, [r7, #0]
 8014448:	61da      	str	r2, [r3, #28]
            break;
 801444a:	e00f      	b.n	801446c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_1:
            CryptoCtx.NvmCtx->FCntList.McFCntDown1 = currentDown;
 801444c:	4b0c      	ldr	r3, [pc, #48]	; (8014480 <UpdateFCntDown+0x7c>)
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	683a      	ldr	r2, [r7, #0]
 8014452:	621a      	str	r2, [r3, #32]
            break;
 8014454:	e00a      	b.n	801446c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_2:
            CryptoCtx.NvmCtx->FCntList.McFCntDown2 = currentDown;
 8014456:	4b0a      	ldr	r3, [pc, #40]	; (8014480 <UpdateFCntDown+0x7c>)
 8014458:	685b      	ldr	r3, [r3, #4]
 801445a:	683a      	ldr	r2, [r7, #0]
 801445c:	625a      	str	r2, [r3, #36]	; 0x24
            break;
 801445e:	e005      	b.n	801446c <UpdateFCntDown+0x68>
        case MC_FCNT_DOWN_3:
            CryptoCtx.NvmCtx->FCntList.McFCntDown3 = currentDown;
 8014460:	4b07      	ldr	r3, [pc, #28]	; (8014480 <UpdateFCntDown+0x7c>)
 8014462:	685b      	ldr	r3, [r3, #4]
 8014464:	683a      	ldr	r2, [r7, #0]
 8014466:	629a      	str	r2, [r3, #40]	; 0x28
            break;
 8014468:	e000      	b.n	801446c <UpdateFCntDown+0x68>
        default:
            break;
 801446a:	46c0      	nop			; (mov r8, r8)
    }
    CryptoCtx.EventCryptoNvmCtxChanged( );
 801446c:	4b04      	ldr	r3, [pc, #16]	; (8014480 <UpdateFCntDown+0x7c>)
 801446e:	689b      	ldr	r3, [r3, #8]
 8014470:	4798      	blx	r3
}
 8014472:	46c0      	nop			; (mov r8, r8)
 8014474:	46bd      	mov	sp, r7
 8014476:	b002      	add	sp, #8
 8014478:	bd80      	pop	{r7, pc}
 801447a:	46c0      	nop			; (mov r8, r8)
 801447c:	0801b424 	.word	0x0801b424
 8014480:	20001084 	.word	0x20001084

08014484 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8014484:	b580      	push	{r7, lr}
 8014486:	af00      	add	r7, sp, #0

    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8014488:	4b19      	ldr	r3, [pc, #100]	; (80144f0 <ResetFCnts+0x6c>)
 801448a:	685b      	ldr	r3, [r3, #4]
 801448c:	2200      	movs	r2, #0
 801448e:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014490:	4b17      	ldr	r3, [pc, #92]	; (80144f0 <ResetFCnts+0x6c>)
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	2201      	movs	r2, #1
 8014496:	4252      	negs	r2, r2
 8014498:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 801449a:	4b15      	ldr	r3, [pc, #84]	; (80144f0 <ResetFCnts+0x6c>)
 801449c:	685b      	ldr	r3, [r3, #4]
 801449e:	2201      	movs	r2, #1
 80144a0:	4252      	negs	r2, r2
 80144a2:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80144a4:	4b12      	ldr	r3, [pc, #72]	; (80144f0 <ResetFCnts+0x6c>)
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	2201      	movs	r2, #1
 80144aa:	4252      	negs	r2, r2
 80144ac:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 80144ae:	4b10      	ldr	r3, [pc, #64]	; (80144f0 <ResetFCnts+0x6c>)
 80144b0:	685a      	ldr	r2, [r3, #4]
 80144b2:	4b0f      	ldr	r3, [pc, #60]	; (80144f0 <ResetFCnts+0x6c>)
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	3218      	adds	r2, #24
 80144b8:	631a      	str	r2, [r3, #48]	; 0x30

    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 80144ba:	4b0d      	ldr	r3, [pc, #52]	; (80144f0 <ResetFCnts+0x6c>)
 80144bc:	685b      	ldr	r3, [r3, #4]
 80144be:	2201      	movs	r2, #1
 80144c0:	4252      	negs	r2, r2
 80144c2:	61da      	str	r2, [r3, #28]
    CryptoCtx.NvmCtx->FCntList.McFCntDown1 = FCNT_DOWN_INITAL_VALUE;
 80144c4:	4b0a      	ldr	r3, [pc, #40]	; (80144f0 <ResetFCnts+0x6c>)
 80144c6:	685b      	ldr	r3, [r3, #4]
 80144c8:	2201      	movs	r2, #1
 80144ca:	4252      	negs	r2, r2
 80144cc:	621a      	str	r2, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown2 = FCNT_DOWN_INITAL_VALUE;
 80144ce:	4b08      	ldr	r3, [pc, #32]	; (80144f0 <ResetFCnts+0x6c>)
 80144d0:	685b      	ldr	r3, [r3, #4]
 80144d2:	2201      	movs	r2, #1
 80144d4:	4252      	negs	r2, r2
 80144d6:	625a      	str	r2, [r3, #36]	; 0x24
    CryptoCtx.NvmCtx->FCntList.McFCntDown3 = FCNT_DOWN_INITAL_VALUE;
 80144d8:	4b05      	ldr	r3, [pc, #20]	; (80144f0 <ResetFCnts+0x6c>)
 80144da:	685b      	ldr	r3, [r3, #4]
 80144dc:	2201      	movs	r2, #1
 80144de:	4252      	negs	r2, r2
 80144e0:	629a      	str	r2, [r3, #40]	; 0x28

    CryptoCtx.EventCryptoNvmCtxChanged( );
 80144e2:	4b03      	ldr	r3, [pc, #12]	; (80144f0 <ResetFCnts+0x6c>)
 80144e4:	689b      	ldr	r3, [r3, #8]
 80144e6:	4798      	blx	r3
}
 80144e8:	46c0      	nop			; (mov r8, r8)
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}
 80144ee:	46c0      	nop			; (mov r8, r8)
 80144f0:	20001084 	.word	0x20001084

080144f4 <DummyCB>:

/*
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	af00      	add	r7, sp, #0
    return;
 80144f8:	46c0      	nop			; (mov r8, r8)
}
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}
	...

08014500 <LoRaMacCryptoInit>:
/*
 *  API functions
 */

LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmEvent cryptoNvmCtxChanged )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
    // Assign non volatile context
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 8014508:	4b15      	ldr	r3, [pc, #84]	; (8014560 <LoRaMacCryptoInit+0x60>)
 801450a:	4a16      	ldr	r2, [pc, #88]	; (8014564 <LoRaMacCryptoInit+0x64>)
 801450c:	605a      	str	r2, [r3, #4]

    // Assign callback
    if( cryptoNvmCtxChanged != 0 )
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d003      	beq.n	801451c <LoRaMacCryptoInit+0x1c>
    {
        CryptoCtx.EventCryptoNvmCtxChanged = cryptoNvmCtxChanged;
 8014514:	4b12      	ldr	r3, [pc, #72]	; (8014560 <LoRaMacCryptoInit+0x60>)
 8014516:	687a      	ldr	r2, [r7, #4]
 8014518:	609a      	str	r2, [r3, #8]
 801451a:	e002      	b.n	8014522 <LoRaMacCryptoInit+0x22>
    }
    else
    {
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 801451c:	4b10      	ldr	r3, [pc, #64]	; (8014560 <LoRaMacCryptoInit+0x60>)
 801451e:	4a12      	ldr	r2, [pc, #72]	; (8014568 <LoRaMacCryptoInit+0x68>)
 8014520:	609a      	str	r2, [r3, #8]
    }

    // Initialize with default
    memset1( (uint8_t*) CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 8014522:	4b0f      	ldr	r3, [pc, #60]	; (8014560 <LoRaMacCryptoInit+0x60>)
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	2234      	movs	r2, #52	; 0x34
 8014528:	2100      	movs	r1, #0
 801452a:	0018      	movs	r0, r3
 801452c:	f005 f9cc 	bl	80198c8 <memset1>

    // Set default LoRaWAN version
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 8014530:	4b0b      	ldr	r3, [pc, #44]	; (8014560 <LoRaMacCryptoInit+0x60>)
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	2201      	movs	r2, #1
 8014536:	70da      	strb	r2, [r3, #3]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 8014538:	4b09      	ldr	r3, [pc, #36]	; (8014560 <LoRaMacCryptoInit+0x60>)
 801453a:	685b      	ldr	r3, [r3, #4]
 801453c:	2201      	movs	r2, #1
 801453e:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 1;
 8014540:	4b07      	ldr	r3, [pc, #28]	; (8014560 <LoRaMacCryptoInit+0x60>)
 8014542:	685b      	ldr	r3, [r3, #4]
 8014544:	2201      	movs	r2, #1
 8014546:	705a      	strb	r2, [r3, #1]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Rfu = 0;
 8014548:	4b05      	ldr	r3, [pc, #20]	; (8014560 <LoRaMacCryptoInit+0x60>)
 801454a:	685b      	ldr	r3, [r3, #4]
 801454c:	2200      	movs	r2, #0
 801454e:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8014550:	f7ff ff98 	bl	8014484 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8014554:	2300      	movs	r3, #0
}
 8014556:	0018      	movs	r0, r3
 8014558:	46bd      	mov	sp, r7
 801455a:	b002      	add	sp, #8
 801455c:	bd80      	pop	{r7, pc}
 801455e:	46c0      	nop			; (mov r8, r8)
 8014560:	20001084 	.word	0x20001084
 8014564:	20001090 	.word	0x20001090
 8014568:	080144f5 	.word	0x080144f5

0801456c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
    CryptoCtx.NvmCtx->LrWanVersion = version;
 8014574:	4b04      	ldr	r3, [pc, #16]	; (8014588 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8014576:	685b      	ldr	r3, [r3, #4]
 8014578:	687a      	ldr	r2, [r7, #4]
 801457a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801457c:	2300      	movs	r3, #0
}
 801457e:	0018      	movs	r0, r3
 8014580:	46bd      	mov	sp, r7
 8014582:	b002      	add	sp, #8
 8014584:	bd80      	pop	{r7, pc}
 8014586:	46c0      	nop			; (mov r8, r8)
 8014588:	20001084 	.word	0x20001084

0801458c <LoRaMacCryptoRestoreNvmCtx>:

LoRaMacCryptoStatus_t LoRaMacCryptoRestoreNvmCtx( void* cryptoNvmCtx )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
    // Restore module context
    if( cryptoNvmCtx != 0 )
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d007      	beq.n	80145aa <LoRaMacCryptoRestoreNvmCtx+0x1e>
    {
        memcpy1( ( uint8_t* ) &NvmCryptoCtx, ( uint8_t* ) cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 801459a:	6879      	ldr	r1, [r7, #4]
 801459c:	4b05      	ldr	r3, [pc, #20]	; (80145b4 <LoRaMacCryptoRestoreNvmCtx+0x28>)
 801459e:	2234      	movs	r2, #52	; 0x34
 80145a0:	0018      	movs	r0, r3
 80145a2:	f005 f955 	bl	8019850 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 80145a6:	2300      	movs	r3, #0
 80145a8:	e000      	b.n	80145ac <LoRaMacCryptoRestoreNvmCtx+0x20>
    }
    else
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145aa:	230a      	movs	r3, #10
    }
}
 80145ac:	0018      	movs	r0, r3
 80145ae:	46bd      	mov	sp, r7
 80145b0:	b002      	add	sp, #8
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	20001090 	.word	0x20001090

080145b8 <LoRaMacCryptoGetNvmCtx>:

void* LoRaMacCryptoGetNvmCtx( size_t* cryptoNvmCtxSize )
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b082      	sub	sp, #8
 80145bc:	af00      	add	r7, sp, #0
 80145be:	6078      	str	r0, [r7, #4]
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2234      	movs	r2, #52	; 0x34
 80145c4:	601a      	str	r2, [r3, #0]
    return &NvmCryptoCtx;
 80145c6:	4b02      	ldr	r3, [pc, #8]	; (80145d0 <LoRaMacCryptoGetNvmCtx+0x18>)
}
 80145c8:	0018      	movs	r0, r3
 80145ca:	46bd      	mov	sp, r7
 80145cc:	b002      	add	sp, #8
 80145ce:	bd80      	pop	{r7, pc}
 80145d0:	20001090 	.word	0x20001090

080145d4 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b082      	sub	sp, #8
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d101      	bne.n	80145e6 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80145e2:	230a      	movs	r3, #10
 80145e4:	e006      	b.n	80145f4 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 80145e6:	4b05      	ldr	r3, [pc, #20]	; (80145fc <LoRaMacCryptoGetFCntUp+0x28>)
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	68db      	ldr	r3, [r3, #12]
 80145ec:	1c5a      	adds	r2, r3, #1
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80145f2:	2300      	movs	r3, #0
}
 80145f4:	0018      	movs	r0, r3
 80145f6:	46bd      	mov	sp, r7
 80145f8:	b002      	add	sp, #8
 80145fa:	bd80      	pop	{r7, pc}
 80145fc:	20001084 	.word	0x20001084

08014600 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8014600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014602:	b08d      	sub	sp, #52	; 0x34
 8014604:	af00      	add	r7, sp, #0
 8014606:	61ba      	str	r2, [r7, #24]
 8014608:	617b      	str	r3, [r7, #20]
 801460a:	230f      	movs	r3, #15
 801460c:	2210      	movs	r2, #16
 801460e:	4694      	mov	ip, r2
 8014610:	44bc      	add	ip, r7
 8014612:	4463      	add	r3, ip
 8014614:	1c02      	adds	r2, r0, #0
 8014616:	701a      	strb	r2, [r3, #0]
 8014618:	230c      	movs	r3, #12
 801461a:	2210      	movs	r2, #16
 801461c:	4694      	mov	ip, r2
 801461e:	44bc      	add	ip, r7
 8014620:	4463      	add	r3, ip
 8014622:	1c0a      	adds	r2, r1, #0
 8014624:	801a      	strh	r2, [r3, #0]
    uint32_t lastDown = 0;
 8014626:	2300      	movs	r3, #0
 8014628:	627b      	str	r3, [r7, #36]	; 0x24
    int32_t fCntDiff = 0;
 801462a:	2300      	movs	r3, #0
 801462c:	62fb      	str	r3, [r7, #44]	; 0x2c
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801462e:	231b      	movs	r3, #27
 8014630:	2210      	movs	r2, #16
 8014632:	4694      	mov	ip, r2
 8014634:	44bc      	add	ip, r7
 8014636:	4463      	add	r3, ip
 8014638:	2213      	movs	r2, #19
 801463a:	701a      	strb	r2, [r3, #0]

    if( currentDown == NULL )
 801463c:	697b      	ldr	r3, [r7, #20]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d101      	bne.n	8014646 <LoRaMacCryptoGetFCntDown+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014642:	230a      	movs	r3, #10
 8014644:	e06f      	b.n	8014726 <LoRaMacCryptoGetFCntDown+0x126>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8014646:	231b      	movs	r3, #27
 8014648:	2010      	movs	r0, #16
 801464a:	183a      	adds	r2, r7, r0
 801464c:	18d4      	adds	r4, r2, r3
 801464e:	2214      	movs	r2, #20
 8014650:	2310      	movs	r3, #16
 8014652:	469c      	mov	ip, r3
 8014654:	44bc      	add	ip, r7
 8014656:	4462      	add	r2, ip
 8014658:	210f      	movs	r1, #15
 801465a:	183b      	adds	r3, r7, r0
 801465c:	185b      	adds	r3, r3, r1
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	0011      	movs	r1, r2
 8014662:	0018      	movs	r0, r3
 8014664:	f7ff fe4e 	bl	8014304 <GetLastFcntDown>
 8014668:	0003      	movs	r3, r0
 801466a:	7023      	strb	r3, [r4, #0]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801466c:	231b      	movs	r3, #27
 801466e:	2210      	movs	r2, #16
 8014670:	4694      	mov	ip, r2
 8014672:	44bc      	add	ip, r7
 8014674:	4463      	add	r3, ip
 8014676:	781b      	ldrb	r3, [r3, #0]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d006      	beq.n	801468a <LoRaMacCryptoGetFCntDown+0x8a>
    {
        return cryptoStatus;
 801467c:	231b      	movs	r3, #27
 801467e:	2210      	movs	r2, #16
 8014680:	4694      	mov	ip, r2
 8014682:	44bc      	add	ip, r7
 8014684:	4463      	add	r3, ip
 8014686:	781b      	ldrb	r3, [r3, #0]
 8014688:	e04d      	b.n	8014726 <LoRaMacCryptoGetFCntDown+0x126>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 801468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468c:	3301      	adds	r3, #1
 801468e:	d103      	bne.n	8014698 <LoRaMacCryptoGetFCntDown+0x98>
    {
         *currentDown = frameFcnt;
 8014690:	697b      	ldr	r3, [r7, #20]
 8014692:	69ba      	ldr	r2, [r7, #24]
 8014694:	601a      	str	r2, [r3, #0]
 8014696:	e020      	b.n	80146da <LoRaMacCryptoGetFCntDown+0xda>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8014698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801469a:	041b      	lsls	r3, r3, #16
 801469c:	0c1b      	lsrs	r3, r3, #16
 801469e:	69ba      	ldr	r2, [r7, #24]
 80146a0:	1ad3      	subs	r3, r2, r3
 80146a2:	62fb      	str	r3, [r7, #44]	; 0x2c

        if( fCntDiff > 0 )
 80146a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	dd05      	ble.n	80146b6 <LoRaMacCryptoGetFCntDown+0xb6>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80146aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ae:	18d2      	adds	r2, r2, r3
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	601a      	str	r2, [r3, #0]
 80146b4:	e011      	b.n	80146da <LoRaMacCryptoGetFCntDown+0xda>
        }
        else if( fCntDiff == 0 )
 80146b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d104      	bne.n	80146c6 <LoRaMacCryptoGetFCntDown+0xc6>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80146bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80146c2:	2307      	movs	r3, #7
 80146c4:	e02f      	b.n	8014726 <LoRaMacCryptoGetFCntDown+0x126>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80146c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c8:	0c1b      	lsrs	r3, r3, #16
 80146ca:	041a      	lsls	r2, r3, #16
 80146cc:	69bb      	ldr	r3, [r7, #24]
 80146ce:	18d3      	adds	r3, r2, r3
 80146d0:	2280      	movs	r2, #128	; 0x80
 80146d2:	0252      	lsls	r2, r2, #9
 80146d4:	189a      	adds	r2, r3, r2
 80146d6:	697b      	ldr	r3, [r7, #20]
 80146d8:	601a      	str	r2, [r3, #0]
        }
    }


    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 80146da:	4b15      	ldr	r3, [pc, #84]	; (8014730 <LoRaMacCryptoGetFCntDown+0x130>)
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	789b      	ldrb	r3, [r3, #2]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d11f      	bne.n	8014724 <LoRaMacCryptoGetFCntDown+0x124>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	60bb      	str	r3, [r7, #8]
 80146ea:	2300      	movs	r3, #0
 80146ec:	60fb      	str	r3, [r7, #12]
 80146ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f0:	603b      	str	r3, [r7, #0]
 80146f2:	2300      	movs	r3, #0
 80146f4:	607b      	str	r3, [r7, #4]
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	68fc      	ldr	r4, [r7, #12]
 80146fa:	6839      	ldr	r1, [r7, #0]
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	1a5b      	subs	r3, r3, r1
 8014700:	4194      	sbcs	r4, r2
 8014702:	220c      	movs	r2, #12
 8014704:	2110      	movs	r1, #16
 8014706:	468c      	mov	ip, r1
 8014708:	44bc      	add	ip, r7
 801470a:	4462      	add	r2, ip
 801470c:	8812      	ldrh	r2, [r2, #0]
 801470e:	b292      	uxth	r2, r2
 8014710:	0015      	movs	r5, r2
 8014712:	2200      	movs	r2, #0
 8014714:	0016      	movs	r6, r2
 8014716:	42a6      	cmp	r6, r4
 8014718:	dc04      	bgt.n	8014724 <LoRaMacCryptoGetFCntDown+0x124>
 801471a:	d101      	bne.n	8014720 <LoRaMacCryptoGetFCntDown+0x120>
 801471c:	429d      	cmp	r5, r3
 801471e:	d801      	bhi.n	8014724 <LoRaMacCryptoGetFCntDown+0x124>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8014720:	2308      	movs	r3, #8
 8014722:	e000      	b.n	8014726 <LoRaMacCryptoGetFCntDown+0x126>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014724:	2300      	movs	r3, #0
}
 8014726:	0018      	movs	r0, r3
 8014728:	46bd      	mov	sp, r7
 801472a:	b00d      	add	sp, #52	; 0x34
 801472c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801472e:	46c0      	nop			; (mov r8, r8)
 8014730:	20001084 	.word	0x20001084

08014734 <LoRaMacCryptoSetMulticastReference>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8014734:	b580      	push	{r7, lr}
 8014736:	b082      	sub	sp, #8
 8014738:	af00      	add	r7, sp, #0
 801473a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d101      	bne.n	8014746 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014742:	230a      	movs	r3, #10
 8014744:	e018      	b.n	8014778 <LoRaMacCryptoSetMulticastReference+0x44>
    }

    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 8014746:	4b0e      	ldr	r3, [pc, #56]	; (8014780 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014748:	685b      	ldr	r3, [r3, #4]
 801474a:	331c      	adds	r3, #28
 801474c:	001a      	movs	r2, r3
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	61da      	str	r2, [r3, #28]
    multicastList[1].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown1;
 8014752:	4b0b      	ldr	r3, [pc, #44]	; (8014780 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014754:	685a      	ldr	r2, [r3, #4]
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	3328      	adds	r3, #40	; 0x28
 801475a:	3220      	adds	r2, #32
 801475c:	61da      	str	r2, [r3, #28]
    multicastList[2].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown2;
 801475e:	4b08      	ldr	r3, [pc, #32]	; (8014780 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8014760:	685a      	ldr	r2, [r3, #4]
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	3350      	adds	r3, #80	; 0x50
 8014766:	3224      	adds	r2, #36	; 0x24
 8014768:	61da      	str	r2, [r3, #28]
    multicastList[3].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown3;
 801476a:	4b05      	ldr	r3, [pc, #20]	; (8014780 <LoRaMacCryptoSetMulticastReference+0x4c>)
 801476c:	685a      	ldr	r2, [r3, #4]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	3378      	adds	r3, #120	; 0x78
 8014772:	3228      	adds	r2, #40	; 0x28
 8014774:	61da      	str	r2, [r3, #28]

    return LORAMAC_CRYPTO_SUCCESS;
 8014776:	2300      	movs	r3, #0
}
 8014778:	0018      	movs	r0, r3
 801477a:	46bd      	mov	sp, r7
 801477c:	b002      	add	sp, #8
 801477e:	bd80      	pop	{r7, pc}
 8014780:	20001084 	.word	0x20001084

08014784 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	0002      	movs	r2, r0
 801478c:	6039      	str	r1, [r7, #0]
 801478e:	1dfb      	adds	r3, r7, #7
 8014790:	701a      	strb	r2, [r3, #0]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8014792:	683a      	ldr	r2, [r7, #0]
 8014794:	1dfb      	adds	r3, r7, #7
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	0011      	movs	r1, r2
 801479a:	0018      	movs	r0, r3
 801479c:	f7f8 fdf2 	bl	800d384 <SecureElementSetKey>
 80147a0:	1e03      	subs	r3, r0, #0
 80147a2:	d001      	beq.n	80147a8 <LoRaMacCryptoSetKey+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147a4:	230f      	movs	r3, #15
 80147a6:	e018      	b.n	80147da <LoRaMacCryptoSetKey+0x56>
    }
    if( ( keyID == GEN_APP_KEY ) || ( keyID == APP_KEY ) )
 80147a8:	1dfb      	adds	r3, r7, #7
 80147aa:	781b      	ldrb	r3, [r3, #0]
 80147ac:	2b01      	cmp	r3, #1
 80147ae:	d003      	beq.n	80147b8 <LoRaMacCryptoSetKey+0x34>
 80147b0:	1dfb      	adds	r3, r7, #7
 80147b2:	781b      	ldrb	r3, [r3, #0]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d10f      	bne.n	80147d8 <LoRaMacCryptoSetKey+0x54>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 80147b8:	1dfb      	adds	r3, r7, #7
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	0018      	movs	r0, r3
 80147be:	f000 fbb3 	bl	8014f28 <LoRaMacCryptoDeriveMcRootKey>
 80147c2:	1e03      	subs	r3, r0, #0
 80147c4:	d001      	beq.n	80147ca <LoRaMacCryptoSetKey+0x46>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147c6:	230f      	movs	r3, #15
 80147c8:	e007      	b.n	80147da <LoRaMacCryptoSetKey+0x56>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 80147ca:	2009      	movs	r0, #9
 80147cc:	f000 fbec 	bl	8014fa8 <LoRaMacCryptoDeriveMcKEKey>
 80147d0:	1e03      	subs	r3, r0, #0
 80147d2:	d001      	beq.n	80147d8 <LoRaMacCryptoSetKey+0x54>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80147d4:	230f      	movs	r3, #15
 80147d6:	e000      	b.n	80147da <LoRaMacCryptoSetKey+0x56>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80147d8:	2300      	movs	r3, #0
}
 80147da:	0018      	movs	r0, r3
 80147dc:	46bd      	mov	sp, r7
 80147de:	b002      	add	sp, #8
 80147e0:	bd80      	pop	{r7, pc}
	...

080147e4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b086      	sub	sp, #24
 80147e8:	af02      	add	r7, sp, #8
 80147ea:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d101      	bne.n	80147f6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80147f2:	230a      	movs	r3, #10
 80147f4:	e039      	b.n	801486a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80147f6:	230f      	movs	r3, #15
 80147f8:	18fb      	adds	r3, r7, r3
 80147fa:	2202      	movs	r2, #2
 80147fc:	701a      	strb	r2, [r3, #0]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 80147fe:	2300      	movs	r3, #0
 8014800:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8014802:	2308      	movs	r3, #8
 8014804:	18fb      	adds	r3, r7, r3
 8014806:	0018      	movs	r0, r3
 8014808:	f7f8 ff70 	bl	800d6ec <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 801480c:	68ba      	ldr	r2, [r7, #8]
 801480e:	4b19      	ldr	r3, [pc, #100]	; (8014874 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	b292      	uxth	r2, r2
 8014814:	809a      	strh	r2, [r3, #4]
#else
    CryptoCtx.NvmCtx->DevNonce++;
#endif
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8014816:	4b17      	ldr	r3, [pc, #92]	; (8014874 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 8014818:	689b      	ldr	r3, [r3, #8]
 801481a:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 801481c:	4b15      	ldr	r3, [pc, #84]	; (8014874 <LoRaMacCryptoPrepareJoinRequest+0x90>)
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	889a      	ldrh	r2, [r3, #4]
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	0018      	movs	r0, r3
 801482a:	f000 fde8 	bl	80153fe <LoRaMacSerializerJoinRequest>
 801482e:	1e03      	subs	r3, r0, #0
 8014830:	d001      	beq.n	8014836 <LoRaMacCryptoPrepareJoinRequest+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014832:	2311      	movs	r3, #17
 8014834:	e019      	b.n	801486a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6819      	ldr	r1, [r3, #0]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	3318      	adds	r3, #24
 801483e:	220f      	movs	r2, #15
 8014840:	18ba      	adds	r2, r7, r2
 8014842:	7812      	ldrb	r2, [r2, #0]
 8014844:	9300      	str	r3, [sp, #0]
 8014846:	0013      	movs	r3, r2
 8014848:	2213      	movs	r2, #19
 801484a:	2000      	movs	r0, #0
 801484c:	f7f8 fe22 	bl	800d494 <SecureElementComputeAesCmac>
 8014850:	1e03      	subs	r3, r0, #0
 8014852:	d001      	beq.n	8014858 <LoRaMacCryptoPrepareJoinRequest+0x74>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014854:	230f      	movs	r3, #15
 8014856:	e008      	b.n	801486a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	0018      	movs	r0, r3
 801485c:	f000 fdcf 	bl	80153fe <LoRaMacSerializerJoinRequest>
 8014860:	1e03      	subs	r3, r0, #0
 8014862:	d001      	beq.n	8014868 <LoRaMacCryptoPrepareJoinRequest+0x84>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014864:	2311      	movs	r3, #17
 8014866:	e000      	b.n	801486a <LoRaMacCryptoPrepareJoinRequest+0x86>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014868:	2300      	movs	r3, #0
}
 801486a:	0018      	movs	r0, r3
 801486c:	46bd      	mov	sp, r7
 801486e:	b004      	add	sp, #16
 8014870:	bd80      	pop	{r7, pc}
 8014872:	46c0      	nop			; (mov r8, r8)
 8014874:	20001084 	.word	0x20001084

08014878 <LoRaMacCryptoHandleJoinAccept>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8014878:	b5b0      	push	{r4, r5, r7, lr}
 801487a:	b0ca      	sub	sp, #296	; 0x128
 801487c:	af00      	add	r7, sp, #0
 801487e:	60b9      	str	r1, [r7, #8]
 8014880:	607a      	str	r2, [r7, #4]
 8014882:	4bdb      	ldr	r3, [pc, #876]	; (8014bf0 <LoRaMacCryptoHandleJoinAccept+0x378>)
 8014884:	2294      	movs	r2, #148	; 0x94
 8014886:	0052      	lsls	r2, r2, #1
 8014888:	4694      	mov	ip, r2
 801488a:	44bc      	add	ip, r7
 801488c:	4463      	add	r3, ip
 801488e:	1c02      	adds	r2, r0, #0
 8014890:	701a      	strb	r2, [r3, #0]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d002      	beq.n	801489e <LoRaMacCryptoHandleJoinAccept+0x26>
 8014898:	68bb      	ldr	r3, [r7, #8]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d101      	bne.n	80148a2 <LoRaMacCryptoHandleJoinAccept+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801489e:	230a      	movs	r3, #10
 80148a0:	e1df      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80148a2:	2392      	movs	r3, #146	; 0x92
 80148a4:	005b      	lsls	r3, r3, #1
 80148a6:	18fb      	adds	r3, r7, r3
 80148a8:	2213      	movs	r2, #19
 80148aa:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID;
    KeyIdentifier_t encryptionKeyID;
    uint8_t micComputationOffset = 0;
 80148ac:	2326      	movs	r3, #38	; 0x26
 80148ae:	33ff      	adds	r3, #255	; 0xff
 80148b0:	18fb      	adds	r3, r7, r3
 80148b2:	2200      	movs	r2, #0
 80148b4:	701a      	strb	r2, [r3, #0]
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    uint8_t* devNonceForKeyDerivation = ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce;
#endif

    // Determine decryption key and DevNonce for key derivation
    if( joinReqType == JOIN_REQ )
 80148b6:	4bce      	ldr	r3, [pc, #824]	; (8014bf0 <LoRaMacCryptoHandleJoinAccept+0x378>)
 80148b8:	2294      	movs	r2, #148	; 0x94
 80148ba:	0052      	lsls	r2, r2, #1
 80148bc:	4694      	mov	ip, r2
 80148be:	44bc      	add	ip, r7
 80148c0:	4463      	add	r3, ip
 80148c2:	781b      	ldrb	r3, [r3, #0]
 80148c4:	2bff      	cmp	r3, #255	; 0xff
 80148c6:	d109      	bne.n	80148dc <LoRaMacCryptoHandleJoinAccept+0x64>
    {
        encryptionKeyID = NWK_KEY;
 80148c8:	2393      	movs	r3, #147	; 0x93
 80148ca:	005b      	lsls	r3, r3, #1
 80148cc:	18fb      	adds	r3, r7, r3
 80148ce:	2202      	movs	r2, #2
 80148d0:	701a      	strb	r2, [r3, #0]
        micComputationOffset = CRYPTO_MIC_COMPUTATION_OFFSET;
 80148d2:	2326      	movs	r3, #38	; 0x26
 80148d4:	33ff      	adds	r3, #255	; 0xff
 80148d6:	18fb      	adds	r3, r7, r3
 80148d8:	220c      	movs	r2, #12
 80148da:	701a      	strb	r2, [r3, #0]
        }
    }
#endif
    // Decrypt header, skip MHDR
    uint8_t procBuffer[CRYPTO_MAXMESSAGE_SIZE + CRYPTO_MIC_COMPUTATION_OFFSET];
    memset1( procBuffer, 0, ( macMsg->BufSize + micComputationOffset ) );
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	791b      	ldrb	r3, [r3, #4]
 80148e0:	b29a      	uxth	r2, r3
 80148e2:	2426      	movs	r4, #38	; 0x26
 80148e4:	34ff      	adds	r4, #255	; 0xff
 80148e6:	193b      	adds	r3, r7, r4
 80148e8:	781b      	ldrb	r3, [r3, #0]
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	18d3      	adds	r3, r2, r3
 80148ee:	b29a      	uxth	r2, r3
 80148f0:	2510      	movs	r5, #16
 80148f2:	197b      	adds	r3, r7, r5
 80148f4:	2100      	movs	r1, #0
 80148f6:	0018      	movs	r0, r3
 80148f8:	f004 ffe6 	bl	80198c8 <memset1>

    if( SecureElementAesEncrypt( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ), encryptionKeyID, ( procBuffer + micComputationOffset ) ) != SECURE_ELEMENT_SUCCESS )
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	1c58      	adds	r0, r3, #1
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	791b      	ldrb	r3, [r3, #4]
 8014906:	b29b      	uxth	r3, r3
 8014908:	3b01      	subs	r3, #1
 801490a:	b299      	uxth	r1, r3
 801490c:	193b      	adds	r3, r7, r4
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	197a      	adds	r2, r7, r5
 8014912:	18d4      	adds	r4, r2, r3
 8014914:	2393      	movs	r3, #147	; 0x93
 8014916:	005b      	lsls	r3, r3, #1
 8014918:	18fb      	adds	r3, r7, r3
 801491a:	781a      	ldrb	r2, [r3, #0]
 801491c:	0023      	movs	r3, r4
 801491e:	f7f8 fe1d 	bl	800d55c <SecureElementAesEncrypt>
 8014922:	1e03      	subs	r3, r0, #0
 8014924:	d001      	beq.n	801492a <LoRaMacCryptoHandleJoinAccept+0xb2>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014926:	230f      	movs	r3, #15
 8014928:	e19b      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }
    // Copy the result to an offset location to keep space for additional information which have to be added in case of 1.1 and later
    memcpy1( macMsg->Buffer + LORAMAC_MHDR_FIELD_SIZE, ( procBuffer + micComputationOffset ), ( macMsg->BufSize - LORAMAC_MHDR_FIELD_SIZE ) );
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	1c58      	adds	r0, r3, #1
 8014930:	2326      	movs	r3, #38	; 0x26
 8014932:	33ff      	adds	r3, #255	; 0xff
 8014934:	18fb      	adds	r3, r7, r3
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	2210      	movs	r2, #16
 801493a:	18ba      	adds	r2, r7, r2
 801493c:	18d1      	adds	r1, r2, r3
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	791b      	ldrb	r3, [r3, #4]
 8014942:	b29b      	uxth	r3, r3
 8014944:	3b01      	subs	r3, #1
 8014946:	b29b      	uxth	r3, r3
 8014948:	001a      	movs	r2, r3
 801494a:	f004 ff81 	bl	8019850 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	0018      	movs	r0, r3
 8014952:	f000 fb51 	bl	8014ff8 <LoRaMacParserJoinAccept>
 8014956:	1e03      	subs	r3, r0, #0
 8014958:	d001      	beq.n	801495e <LoRaMacCryptoHandleJoinAccept+0xe6>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801495a:	2310      	movs	r3, #16
 801495c:	e181      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }

    // Is it a LoRaWAN 1.1.0 or later ?
    if( macMsg->DLSettings.Bits.OptNeg == 1 )
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	7c1b      	ldrb	r3, [r3, #16]
 8014962:	227f      	movs	r2, #127	; 0x7f
 8014964:	4393      	bics	r3, r2
 8014966:	b2db      	uxtb	r3, r3
 8014968:	2b00      	cmp	r3, #0
 801496a:	d009      	beq.n	8014980 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 1;
 801496c:	4ba1      	ldr	r3, [pc, #644]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 801496e:	685b      	ldr	r3, [r3, #4]
 8014970:	2201      	movs	r2, #1
 8014972:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = J_S_INT_KEY;
 8014974:	2328      	movs	r3, #40	; 0x28
 8014976:	33ff      	adds	r3, #255	; 0xff
 8014978:	18fb      	adds	r3, r7, r3
 801497a:	2203      	movs	r2, #3
 801497c:	701a      	strb	r2, [r3, #0]
 801497e:	e008      	b.n	8014992 <LoRaMacCryptoHandleJoinAccept+0x11a>
    }
    else
    {
        CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = 0;
 8014980:	4b9c      	ldr	r3, [pc, #624]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	2200      	movs	r2, #0
 8014986:	709a      	strb	r2, [r3, #2]
        micComputationKeyID = NWK_KEY;
 8014988:	2328      	movs	r3, #40	; 0x28
 801498a:	33ff      	adds	r3, #255	; 0xff
 801498c:	18fb      	adds	r3, r7, r3
 801498e:	2202      	movs	r2, #2
 8014990:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8014992:	4b98      	ldr	r3, [pc, #608]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014994:	685b      	ldr	r3, [r3, #4]
 8014996:	789b      	ldrb	r3, [r3, #2]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d113      	bne.n	80149c4 <LoRaMacCryptoHandleJoinAccept+0x14c>
    {
        // For legacy mode :
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)
        if( SecureElementVerifyAesCmac( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	6818      	ldr	r0, [r3, #0]
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	791b      	ldrb	r3, [r3, #4]
 80149a4:	b29b      	uxth	r3, r3
 80149a6:	3b04      	subs	r3, #4
 80149a8:	b299      	uxth	r1, r3
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149ae:	2328      	movs	r3, #40	; 0x28
 80149b0:	33ff      	adds	r3, #255	; 0xff
 80149b2:	18fb      	adds	r3, r7, r3
 80149b4:	781b      	ldrb	r3, [r3, #0]
 80149b6:	f7f8 fd8e 	bl	800d4d6 <SecureElementVerifyAesCmac>
 80149ba:	1e03      	subs	r3, r0, #0
 80149bc:	d100      	bne.n	80149c0 <LoRaMacCryptoHandleJoinAccept+0x148>
 80149be:	e0a9      	b.n	8014b14 <LoRaMacCryptoHandleJoinAccept+0x29c>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80149c0:	230f      	movs	r3, #15
 80149c2:	e14e      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    {
        // For 1.1 and later:
        //   cmac = aes128_cmac(JSIntKey, JoinReqType | JoinEUI | DevNonce | MHDR | JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList | CFListType)

        // Prepare the msg for integrity check (adding JoinReqType, JoinEUI and DevNonce)
        uint16_t bufItr = 0;
 80149c4:	2091      	movs	r0, #145	; 0x91
 80149c6:	0040      	lsls	r0, r0, #1
 80149c8:	183b      	adds	r3, r7, r0
 80149ca:	2200      	movs	r2, #0
 80149cc:	801a      	strh	r2, [r3, #0]
        procBuffer[bufItr++] = ( uint8_t ) joinReqType;
 80149ce:	183b      	adds	r3, r7, r0
 80149d0:	881b      	ldrh	r3, [r3, #0]
 80149d2:	183a      	adds	r2, r7, r0
 80149d4:	1c59      	adds	r1, r3, #1
 80149d6:	8011      	strh	r1, [r2, #0]
 80149d8:	0019      	movs	r1, r3
 80149da:	4b87      	ldr	r3, [pc, #540]	; (8014bf8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 80149dc:	2294      	movs	r2, #148	; 0x94
 80149de:	0052      	lsls	r2, r2, #1
 80149e0:	4694      	mov	ip, r2
 80149e2:	44bc      	add	ip, r7
 80149e4:	4463      	add	r3, ip
 80149e6:	4a82      	ldr	r2, [pc, #520]	; (8014bf0 <LoRaMacCryptoHandleJoinAccept+0x378>)
 80149e8:	2494      	movs	r4, #148	; 0x94
 80149ea:	0064      	lsls	r4, r4, #1
 80149ec:	46a4      	mov	ip, r4
 80149ee:	44bc      	add	ip, r7
 80149f0:	4462      	add	r2, ip
 80149f2:	7812      	ldrb	r2, [r2, #0]
 80149f4:	545a      	strb	r2, [r3, r1]

        memcpyr( &procBuffer[bufItr], joinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80149f6:	0004      	movs	r4, r0
 80149f8:	183b      	adds	r3, r7, r0
 80149fa:	881b      	ldrh	r3, [r3, #0]
 80149fc:	2510      	movs	r5, #16
 80149fe:	197a      	adds	r2, r7, r5
 8014a00:	18d3      	adds	r3, r2, r3
 8014a02:	68b9      	ldr	r1, [r7, #8]
 8014a04:	2208      	movs	r2, #8
 8014a06:	0018      	movs	r0, r3
 8014a08:	f004 ff3d 	bl	8019886 <memcpyr>
        bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014a0c:	0020      	movs	r0, r4
 8014a0e:	183b      	adds	r3, r7, r0
 8014a10:	183a      	adds	r2, r7, r0
 8014a12:	8812      	ldrh	r2, [r2, #0]
 8014a14:	3208      	adds	r2, #8
 8014a16:	801a      	strh	r2, [r3, #0]

        procBuffer[bufItr++] = CryptoCtx.NvmCtx->DevNonce & 0xFF;
 8014a18:	4b76      	ldr	r3, [pc, #472]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014a1a:	685b      	ldr	r3, [r3, #4]
 8014a1c:	8899      	ldrh	r1, [r3, #4]
 8014a1e:	183b      	adds	r3, r7, r0
 8014a20:	881b      	ldrh	r3, [r3, #0]
 8014a22:	0004      	movs	r4, r0
 8014a24:	183a      	adds	r2, r7, r0
 8014a26:	1c58      	adds	r0, r3, #1
 8014a28:	8010      	strh	r0, [r2, #0]
 8014a2a:	001a      	movs	r2, r3
 8014a2c:	b2c9      	uxtb	r1, r1
 8014a2e:	4b72      	ldr	r3, [pc, #456]	; (8014bf8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 8014a30:	2094      	movs	r0, #148	; 0x94
 8014a32:	0040      	lsls	r0, r0, #1
 8014a34:	4684      	mov	ip, r0
 8014a36:	44bc      	add	ip, r7
 8014a38:	4463      	add	r3, ip
 8014a3a:	5499      	strb	r1, [r3, r2]
        procBuffer[bufItr++] = ( CryptoCtx.NvmCtx->DevNonce >> 8 ) & 0xFF;
 8014a3c:	4b6d      	ldr	r3, [pc, #436]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	889b      	ldrh	r3, [r3, #4]
 8014a42:	0a1b      	lsrs	r3, r3, #8
 8014a44:	b299      	uxth	r1, r3
 8014a46:	193b      	adds	r3, r7, r4
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	193a      	adds	r2, r7, r4
 8014a4c:	1c58      	adds	r0, r3, #1
 8014a4e:	8010      	strh	r0, [r2, #0]
 8014a50:	001a      	movs	r2, r3
 8014a52:	b2c9      	uxtb	r1, r1
 8014a54:	4b68      	ldr	r3, [pc, #416]	; (8014bf8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 8014a56:	2094      	movs	r0, #148	; 0x94
 8014a58:	0040      	lsls	r0, r0, #1
 8014a5a:	4684      	mov	ip, r0
 8014a5c:	44bc      	add	ip, r7
 8014a5e:	4463      	add	r3, ip
 8014a60:	5499      	strb	r1, [r3, r2]

        procBuffer[bufItr++] = macMsg->MHDR.Value;
 8014a62:	193b      	adds	r3, r7, r4
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	193a      	adds	r2, r7, r4
 8014a68:	1c59      	adds	r1, r3, #1
 8014a6a:	8011      	strh	r1, [r2, #0]
 8014a6c:	001a      	movs	r2, r3
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	7959      	ldrb	r1, [r3, #5]
 8014a72:	4b61      	ldr	r3, [pc, #388]	; (8014bf8 <LoRaMacCryptoHandleJoinAccept+0x380>)
 8014a74:	2094      	movs	r0, #148	; 0x94
 8014a76:	0040      	lsls	r0, r0, #1
 8014a78:	4684      	mov	ip, r0
 8014a7a:	44bc      	add	ip, r7
 8014a7c:	4463      	add	r3, ip
 8014a7e:	5499      	strb	r1, [r3, r2]

        if( SecureElementVerifyAesCmac( procBuffer,  ( macMsg->BufSize + micComputationOffset - LORAMAC_MHDR_FIELD_SIZE - LORAMAC_MIC_FIELD_SIZE ), macMsg->MIC, micComputationKeyID ) != SECURE_ELEMENT_SUCCESS )
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	791b      	ldrb	r3, [r3, #4]
 8014a84:	b29a      	uxth	r2, r3
 8014a86:	2326      	movs	r3, #38	; 0x26
 8014a88:	33ff      	adds	r3, #255	; 0xff
 8014a8a:	18fb      	adds	r3, r7, r3
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	b29b      	uxth	r3, r3
 8014a90:	18d3      	adds	r3, r2, r3
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	3b05      	subs	r3, #5
 8014a96:	b299      	uxth	r1, r3
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a9c:	2328      	movs	r3, #40	; 0x28
 8014a9e:	33ff      	adds	r3, #255	; 0xff
 8014aa0:	18fb      	adds	r3, r7, r3
 8014aa2:	781b      	ldrb	r3, [r3, #0]
 8014aa4:	1978      	adds	r0, r7, r5
 8014aa6:	f7f8 fd16 	bl	800d4d6 <SecureElementVerifyAesCmac>
 8014aaa:	1e03      	subs	r3, r0, #0
 8014aac:	d001      	beq.n	8014ab2 <LoRaMacCryptoHandleJoinAccept+0x23a>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014aae:	230f      	movs	r3, #15
 8014ab0:	e0d7      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        // Check if the JoinNonce is greater as the previous one
        uint32_t currentJoinNonce = 0;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	228e      	movs	r2, #142	; 0x8e
 8014ab6:	0052      	lsls	r2, r2, #1
 8014ab8:	18b9      	adds	r1, r7, r2
 8014aba:	600b      	str	r3, [r1, #0]
        currentJoinNonce = ( uint32_t ) macMsg->JoinNonce[0];
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	799b      	ldrb	r3, [r3, #6]
 8014ac0:	18b9      	adds	r1, r7, r2
 8014ac2:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[1] << 8 );
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	79db      	ldrb	r3, [r3, #7]
 8014ac8:	021b      	lsls	r3, r3, #8
 8014aca:	0011      	movs	r1, r2
 8014acc:	18ba      	adds	r2, r7, r2
 8014ace:	6812      	ldr	r2, [r2, #0]
 8014ad0:	4313      	orrs	r3, r2
 8014ad2:	000a      	movs	r2, r1
 8014ad4:	18b9      	adds	r1, r7, r2
 8014ad6:	600b      	str	r3, [r1, #0]
        currentJoinNonce |= ( ( uint32_t ) macMsg->JoinNonce[2] << 16 );
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	7a1b      	ldrb	r3, [r3, #8]
 8014adc:	041b      	lsls	r3, r3, #16
 8014ade:	0011      	movs	r1, r2
 8014ae0:	18ba      	adds	r2, r7, r2
 8014ae2:	6812      	ldr	r2, [r2, #0]
 8014ae4:	4313      	orrs	r3, r2
 8014ae6:	000a      	movs	r2, r1
 8014ae8:	18b9      	adds	r1, r7, r2
 8014aea:	600b      	str	r3, [r1, #0]

        if( currentJoinNonce > CryptoCtx.NvmCtx->JoinNonce )
 8014aec:	4b41      	ldr	r3, [pc, #260]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014aee:	685b      	ldr	r3, [r3, #4]
 8014af0:	689b      	ldr	r3, [r3, #8]
 8014af2:	18ba      	adds	r2, r7, r2
 8014af4:	6812      	ldr	r2, [r2, #0]
 8014af6:	429a      	cmp	r2, r3
 8014af8:	d90a      	bls.n	8014b10 <LoRaMacCryptoHandleJoinAccept+0x298>
        {
            CryptoCtx.NvmCtx->JoinNonce = currentJoinNonce;
 8014afa:	4b3e      	ldr	r3, [pc, #248]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014afc:	685b      	ldr	r3, [r3, #4]
 8014afe:	228e      	movs	r2, #142	; 0x8e
 8014b00:	0052      	lsls	r2, r2, #1
 8014b02:	18ba      	adds	r2, r7, r2
 8014b04:	6812      	ldr	r2, [r2, #0]
 8014b06:	609a      	str	r2, [r3, #8]
            CryptoCtx.EventCryptoNvmCtxChanged( );
 8014b08:	4b3a      	ldr	r3, [pc, #232]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014b0a:	689b      	ldr	r3, [r3, #8]
 8014b0c:	4798      	blx	r3
 8014b0e:	e001      	b.n	8014b14 <LoRaMacCryptoHandleJoinAccept+0x29c>
        }
        else
        {
            return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8014b10:	2303      	movs	r3, #3
 8014b12:	e0a6      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
    }
    else
#endif
    {
        // prior LoRaWAN 1.1.0
        retval = LoRaMacCryptoDeriveMcRootKey( GEN_APP_KEY );
 8014b14:	2592      	movs	r5, #146	; 0x92
 8014b16:	006d      	lsls	r5, r5, #1
 8014b18:	197c      	adds	r4, r7, r5
 8014b1a:	2001      	movs	r0, #1
 8014b1c:	f000 fa04 	bl	8014f28 <LoRaMacCryptoDeriveMcRootKey>
 8014b20:	0003      	movs	r3, r0
 8014b22:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b24:	197b      	adds	r3, r7, r5
 8014b26:	781b      	ldrb	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d004      	beq.n	8014b36 <LoRaMacCryptoHandleJoinAccept+0x2be>
        {
            return retval;
 8014b2c:	2392      	movs	r3, #146	; 0x92
 8014b2e:	005b      	lsls	r3, r3, #1
 8014b30:	18fb      	adds	r3, r7, r3
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	e095      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8014b36:	2592      	movs	r5, #146	; 0x92
 8014b38:	006d      	lsls	r5, r5, #1
 8014b3a:	197c      	adds	r4, r7, r5
 8014b3c:	2009      	movs	r0, #9
 8014b3e:	f000 fa33 	bl	8014fa8 <LoRaMacCryptoDeriveMcKEKey>
 8014b42:	0003      	movs	r3, r0
 8014b44:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b46:	197b      	adds	r3, r7, r5
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d004      	beq.n	8014b58 <LoRaMacCryptoHandleJoinAccept+0x2e0>
        {
            return retval;
 8014b4e:	2392      	movs	r3, #146	; 0x92
 8014b50:	005b      	lsls	r3, r3, #1
 8014b52:	18fb      	adds	r3, r7, r3
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	e084      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	1d99      	adds	r1, r3, #6
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	3309      	adds	r3, #9
 8014b60:	001a      	movs	r2, r3
 8014b62:	4b24      	ldr	r3, [pc, #144]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014b64:	685b      	ldr	r3, [r3, #4]
 8014b66:	3304      	adds	r3, #4
 8014b68:	2592      	movs	r5, #146	; 0x92
 8014b6a:	006d      	lsls	r5, r5, #1
 8014b6c:	197c      	adds	r4, r7, r5
 8014b6e:	2008      	movs	r0, #8
 8014b70:	f7ff fb68 	bl	8014244 <DeriveSessionKey10x>
 8014b74:	0003      	movs	r3, r0
 8014b76:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014b78:	197b      	adds	r3, r7, r5
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d004      	beq.n	8014b8a <LoRaMacCryptoHandleJoinAccept+0x312>
        {
            return retval;
 8014b80:	2392      	movs	r3, #146	; 0x92
 8014b82:	005b      	lsls	r3, r3, #1
 8014b84:	18fb      	adds	r3, r7, r3
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	e06b      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	1d99      	adds	r1, r3, #6
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	3309      	adds	r3, #9
 8014b92:	001a      	movs	r2, r3
 8014b94:	4b17      	ldr	r3, [pc, #92]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	3304      	adds	r3, #4
 8014b9a:	2592      	movs	r5, #146	; 0x92
 8014b9c:	006d      	lsls	r5, r5, #1
 8014b9e:	197c      	adds	r4, r7, r5
 8014ba0:	2007      	movs	r0, #7
 8014ba2:	f7ff fb4f 	bl	8014244 <DeriveSessionKey10x>
 8014ba6:	0003      	movs	r3, r0
 8014ba8:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014baa:	197b      	adds	r3, r7, r5
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d004      	beq.n	8014bbc <LoRaMacCryptoHandleJoinAccept+0x344>
        {
            return retval;
 8014bb2:	2392      	movs	r3, #146	; 0x92
 8014bb4:	005b      	lsls	r3, r3, #1
 8014bb6:	18fb      	adds	r3, r7, r3
 8014bb8:	781b      	ldrb	r3, [r3, #0]
 8014bba:	e052      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }

        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	1d99      	adds	r1, r3, #6
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	3309      	adds	r3, #9
 8014bc4:	001a      	movs	r2, r3
 8014bc6:	4b0b      	ldr	r3, [pc, #44]	; (8014bf4 <LoRaMacCryptoHandleJoinAccept+0x37c>)
 8014bc8:	685b      	ldr	r3, [r3, #4]
 8014bca:	3304      	adds	r3, #4
 8014bcc:	2592      	movs	r5, #146	; 0x92
 8014bce:	006d      	lsls	r5, r5, #1
 8014bd0:	197c      	adds	r4, r7, r5
 8014bd2:	2005      	movs	r0, #5
 8014bd4:	f7ff fb36 	bl	8014244 <DeriveSessionKey10x>
 8014bd8:	0003      	movs	r3, r0
 8014bda:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014bdc:	197b      	adds	r3, r7, r5
 8014bde:	781b      	ldrb	r3, [r3, #0]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d00b      	beq.n	8014bfc <LoRaMacCryptoHandleJoinAccept+0x384>
        {
            return retval;
 8014be4:	2392      	movs	r3, #146	; 0x92
 8014be6:	005b      	lsls	r3, r3, #1
 8014be8:	18fb      	adds	r3, r7, r3
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	e039      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
 8014bee:	46c0      	nop			; (mov r8, r8)
 8014bf0:	fffffee7 	.word	0xfffffee7
 8014bf4:	20001084 	.word	0x20001084
 8014bf8:	fffffee8 	.word	0xfffffee8
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* ) &CryptoCtx.NvmCtx->DevNonce );
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	1d99      	adds	r1, r3, #6
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	3309      	adds	r3, #9
 8014c04:	001a      	movs	r2, r3
 8014c06:	4b19      	ldr	r3, [pc, #100]	; (8014c6c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	3304      	adds	r3, #4
 8014c0c:	2592      	movs	r5, #146	; 0x92
 8014c0e:	006d      	lsls	r5, r5, #1
 8014c10:	197c      	adds	r4, r7, r5
 8014c12:	2006      	movs	r0, #6
 8014c14:	f7ff fb16 	bl	8014244 <DeriveSessionKey10x>
 8014c18:	0003      	movs	r3, r0
 8014c1a:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014c1c:	197b      	adds	r3, r7, r5
 8014c1e:	781b      	ldrb	r3, [r3, #0]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d004      	beq.n	8014c2e <LoRaMacCryptoHandleJoinAccept+0x3b6>
        {
            return retval;
 8014c24:	2392      	movs	r3, #146	; 0x92
 8014c26:	005b      	lsls	r3, r3, #1
 8014c28:	18fb      	adds	r3, r7, r3
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	e019      	b.n	8014c62 <LoRaMacCryptoHandleJoinAccept+0x3ea>
        }
    }

    // Join-Accept is successfully processed, reset frame counters
    CryptoCtx.RJcount0 = 0;
 8014c2e:	4b0f      	ldr	r3, [pc, #60]	; (8014c6c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8014c30:	2200      	movs	r2, #0
 8014c32:	801a      	strh	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 8014c34:	4b0d      	ldr	r3, [pc, #52]	; (8014c6c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8014c36:	685b      	ldr	r3, [r3, #4]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	60da      	str	r2, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8014c3c:	4b0b      	ldr	r3, [pc, #44]	; (8014c6c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	2201      	movs	r2, #1
 8014c42:	4252      	negs	r2, r2
 8014c44:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014c46:	4b09      	ldr	r3, [pc, #36]	; (8014c6c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8014c48:	685b      	ldr	r3, [r3, #4]
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	4252      	negs	r2, r2
 8014c4e:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8014c50:	4b06      	ldr	r3, [pc, #24]	; (8014c6c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8014c52:	685b      	ldr	r3, [r3, #4]
 8014c54:	2201      	movs	r2, #1
 8014c56:	4252      	negs	r2, r2
 8014c58:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8014c5a:	4b04      	ldr	r3, [pc, #16]	; (8014c6c <LoRaMacCryptoHandleJoinAccept+0x3f4>)
 8014c5c:	689b      	ldr	r3, [r3, #8]
 8014c5e:	4798      	blx	r3

    return LORAMAC_CRYPTO_SUCCESS;
 8014c60:	2300      	movs	r3, #0
}
 8014c62:	0018      	movs	r0, r3
 8014c64:	46bd      	mov	sp, r7
 8014c66:	b04a      	add	sp, #296	; 0x128
 8014c68:	bdb0      	pop	{r4, r5, r7, pc}
 8014c6a:	46c0      	nop			; (mov r8, r8)
 8014c6c:	20001084 	.word	0x20001084

08014c70 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8014c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c72:	b08b      	sub	sp, #44	; 0x2c
 8014c74:	af04      	add	r7, sp, #16
 8014c76:	60f8      	str	r0, [r7, #12]
 8014c78:	0008      	movs	r0, r1
 8014c7a:	0011      	movs	r1, r2
 8014c7c:	607b      	str	r3, [r7, #4]
 8014c7e:	230b      	movs	r3, #11
 8014c80:	18fb      	adds	r3, r7, r3
 8014c82:	1c02      	adds	r2, r0, #0
 8014c84:	701a      	strb	r2, [r3, #0]
 8014c86:	230a      	movs	r3, #10
 8014c88:	18fb      	adds	r3, r7, r3
 8014c8a:	1c0a      	adds	r2, r1, #0
 8014c8c:	701a      	strb	r2, [r3, #0]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014c8e:	2316      	movs	r3, #22
 8014c90:	18fb      	adds	r3, r7, r3
 8014c92:	2213      	movs	r2, #19
 8014c94:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014c96:	2317      	movs	r3, #23
 8014c98:	18fb      	adds	r3, r7, r3
 8014c9a:	2208      	movs	r2, #8
 8014c9c:	701a      	strb	r2, [r3, #0]

    if( macMsg == NULL )
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d101      	bne.n	8014ca8 <LoRaMacCryptoSecureMessage+0x38>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014ca4:	230a      	movs	r3, #10
 8014ca6:	e06d      	b.n	8014d84 <LoRaMacCryptoSecureMessage+0x114>
    }

    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 8014ca8:	4b38      	ldr	r3, [pc, #224]	; (8014d8c <LoRaMacCryptoSecureMessage+0x11c>)
 8014caa:	685b      	ldr	r3, [r3, #4]
 8014cac:	68db      	ldr	r3, [r3, #12]
 8014cae:	68fa      	ldr	r2, [r7, #12]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d201      	bcs.n	8014cb8 <LoRaMacCryptoSecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014cb4:	2306      	movs	r3, #6
 8014cb6:	e065      	b.n	8014d84 <LoRaMacCryptoSecureMessage+0x114>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	2220      	movs	r2, #32
 8014cbc:	5c9b      	ldrb	r3, [r3, r2]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d103      	bne.n	8014cca <LoRaMacCryptoSecureMessage+0x5a>
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8014cc2:	2317      	movs	r3, #23
 8014cc4:	18fb      	adds	r3, r7, r3
 8014cc6:	2207      	movs	r2, #7
 8014cc8:	701a      	strb	r2, [r3, #0]
    }

    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 8014cca:	4b30      	ldr	r3, [pc, #192]	; (8014d8c <LoRaMacCryptoSecureMessage+0x11c>)
 8014ccc:	685b      	ldr	r3, [r3, #4]
 8014cce:	68db      	ldr	r3, [r3, #12]
 8014cd0:	68fa      	ldr	r2, [r7, #12]
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d91d      	bls.n	8014d12 <LoRaMacCryptoSecureMessage+0xa2>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2228      	movs	r2, #40	; 0x28
 8014cde:	5c9b      	ldrb	r3, [r3, r2]
 8014ce0:	b219      	sxth	r1, r3
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	689d      	ldr	r5, [r3, #8]
 8014ce6:	2616      	movs	r6, #22
 8014ce8:	19bc      	adds	r4, r7, r6
 8014cea:	2317      	movs	r3, #23
 8014cec:	18fb      	adds	r3, r7, r3
 8014cee:	781a      	ldrb	r2, [r3, #0]
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	9301      	str	r3, [sp, #4]
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	9300      	str	r3, [sp, #0]
 8014cf8:	002b      	movs	r3, r5
 8014cfa:	f7ff f823 	bl	8013d44 <PayloadEncrypt>
 8014cfe:	0003      	movs	r3, r0
 8014d00:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014d02:	19bb      	adds	r3, r7, r6
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d003      	beq.n	8014d12 <LoRaMacCryptoSecureMessage+0xa2>
        {
            return retval;
 8014d0a:	2316      	movs	r3, #22
 8014d0c:	18fb      	adds	r3, r7, r3
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	e038      	b.n	8014d84 <LoRaMacCryptoSecureMessage+0x114>
                return retval;
            }
        }
#endif
    }
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 8014d12:	4b1e      	ldr	r3, [pc, #120]	; (8014d8c <LoRaMacCryptoSecureMessage+0x11c>)
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	68fa      	ldr	r2, [r7, #12]
 8014d18:	60da      	str	r2, [r3, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 8014d1a:	4b1c      	ldr	r3, [pc, #112]	; (8014d8c <LoRaMacCryptoSecureMessage+0x11c>)
 8014d1c:	689b      	ldr	r3, [r3, #8]
 8014d1e:	4798      	blx	r3

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	0018      	movs	r0, r3
 8014d24:	f000 fc06 	bl	8015534 <LoRaMacSerializerData>
 8014d28:	1e03      	subs	r3, r0, #0
 8014d2a:	d001      	beq.n	8014d30 <LoRaMacCryptoSecureMessage+0xc0>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014d2c:	2311      	movs	r3, #17
 8014d2e:	e029      	b.n	8014d84 <LoRaMacCryptoSecureMessage+0x114>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6818      	ldr	r0, [r3, #0]
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	791b      	ldrb	r3, [r3, #4]
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	3b04      	subs	r3, #4
 8014d3c:	b299      	uxth	r1, r3
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	689b      	ldr	r3, [r3, #8]
 8014d42:	687a      	ldr	r2, [r7, #4]
 8014d44:	322c      	adds	r2, #44	; 0x2c
 8014d46:	2516      	movs	r5, #22
 8014d48:	197c      	adds	r4, r7, r5
 8014d4a:	9203      	str	r2, [sp, #12]
 8014d4c:	68fa      	ldr	r2, [r7, #12]
 8014d4e:	9202      	str	r2, [sp, #8]
 8014d50:	9301      	str	r3, [sp, #4]
 8014d52:	2300      	movs	r3, #0
 8014d54:	9300      	str	r3, [sp, #0]
 8014d56:	2300      	movs	r3, #0
 8014d58:	2207      	movs	r2, #7
 8014d5a:	f7ff f947 	bl	8013fec <ComputeCmacB0>
 8014d5e:	0003      	movs	r3, r0
 8014d60:	7023      	strb	r3, [r4, #0]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014d62:	197b      	adds	r3, r7, r5
 8014d64:	781b      	ldrb	r3, [r3, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d003      	beq.n	8014d72 <LoRaMacCryptoSecureMessage+0x102>
        {
            return retval;
 8014d6a:	2316      	movs	r3, #22
 8014d6c:	18fb      	adds	r3, r7, r3
 8014d6e:	781b      	ldrb	r3, [r3, #0]
 8014d70:	e008      	b.n	8014d84 <LoRaMacCryptoSecureMessage+0x114>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	0018      	movs	r0, r3
 8014d76:	f000 fbdd 	bl	8015534 <LoRaMacSerializerData>
 8014d7a:	1e03      	subs	r3, r0, #0
 8014d7c:	d001      	beq.n	8014d82 <LoRaMacCryptoSecureMessage+0x112>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8014d7e:	2311      	movs	r3, #17
 8014d80:	e000      	b.n	8014d84 <LoRaMacCryptoSecureMessage+0x114>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014d82:	2300      	movs	r3, #0
}
 8014d84:	0018      	movs	r0, r3
 8014d86:	46bd      	mov	sp, r7
 8014d88:	b007      	add	sp, #28
 8014d8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d8c:	20001084 	.word	0x20001084

08014d90 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8014d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d92:	b08b      	sub	sp, #44	; 0x2c
 8014d94:	af04      	add	r7, sp, #16
 8014d96:	60b9      	str	r1, [r7, #8]
 8014d98:	0011      	movs	r1, r2
 8014d9a:	607b      	str	r3, [r7, #4]
 8014d9c:	230f      	movs	r3, #15
 8014d9e:	18fb      	adds	r3, r7, r3
 8014da0:	1c02      	adds	r2, r0, #0
 8014da2:	701a      	strb	r2, [r3, #0]
 8014da4:	230e      	movs	r3, #14
 8014da6:	18fb      	adds	r3, r7, r3
 8014da8:	1c0a      	adds	r2, r1, #0
 8014daa:	701a      	strb	r2, [r3, #0]
    if( macMsg == 0 )
 8014dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d101      	bne.n	8014db6 <LoRaMacCryptoUnsecureMessage+0x26>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8014db2:	230a      	movs	r3, #10
 8014db4:	e0b2      	b.n	8014f1c <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	230e      	movs	r3, #14
 8014dba:	18fb      	adds	r3, r7, r3
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	0011      	movs	r1, r2
 8014dc0:	0018      	movs	r0, r3
 8014dc2:	f7ff fafb 	bl	80143bc <CheckFCntDown>
 8014dc6:	0003      	movs	r3, r0
 8014dc8:	001a      	movs	r2, r3
 8014dca:	2301      	movs	r3, #1
 8014dcc:	4053      	eors	r3, r2
 8014dce:	b2db      	uxtb	r3, r3
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d001      	beq.n	8014dd8 <LoRaMacCryptoUnsecureMessage+0x48>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8014dd4:	2306      	movs	r3, #6
 8014dd6:	e0a1      	b.n	8014f1c <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8014dd8:	2315      	movs	r3, #21
 8014dda:	18fb      	adds	r3, r7, r3
 8014ddc:	2213      	movs	r2, #19
 8014dde:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8014de0:	2317      	movs	r3, #23
 8014de2:	18fb      	adds	r3, r7, r3
 8014de4:	2208      	movs	r2, #8
 8014de6:	701a      	strb	r2, [r3, #0]
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
 8014de8:	2314      	movs	r3, #20
 8014dea:	18fb      	adds	r3, r7, r3
 8014dec:	2206      	movs	r2, #6
 8014dee:	701a      	strb	r2, [r3, #0]
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8014df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df2:	0018      	movs	r0, r3
 8014df4:	f000 f9f1 	bl	80151da <LoRaMacParserData>
 8014df8:	1e03      	subs	r3, r0, #0
 8014dfa:	d001      	beq.n	8014e00 <LoRaMacCryptoUnsecureMessage+0x70>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8014dfc:	2310      	movs	r3, #16
 8014dfe:	e08d      	b.n	8014f1c <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8014e00:	2515      	movs	r5, #21
 8014e02:	197c      	adds	r4, r7, r5
 8014e04:	2310      	movs	r3, #16
 8014e06:	18fa      	adds	r2, r7, r3
 8014e08:	230f      	movs	r3, #15
 8014e0a:	18fb      	adds	r3, r7, r3
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	0011      	movs	r1, r2
 8014e10:	0018      	movs	r0, r3
 8014e12:	f7ff f9e5 	bl	80141e0 <GetKeyAddrItem>
 8014e16:	0003      	movs	r3, r0
 8014e18:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014e1a:	197b      	adds	r3, r7, r5
 8014e1c:	781b      	ldrb	r3, [r3, #0]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d003      	beq.n	8014e2a <LoRaMacCryptoUnsecureMessage+0x9a>
    {
        return retval;
 8014e22:	2315      	movs	r3, #21
 8014e24:	18fb      	adds	r3, r7, r3
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	e078      	b.n	8014f1c <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8014e2a:	693a      	ldr	r2, [r7, #16]
 8014e2c:	2317      	movs	r3, #23
 8014e2e:	18fb      	adds	r3, r7, r3
 8014e30:	7852      	ldrb	r2, [r2, #1]
 8014e32:	701a      	strb	r2, [r3, #0]
    micComputationKeyID = curItem->NwkSkey;
 8014e34:	693a      	ldr	r2, [r7, #16]
 8014e36:	2314      	movs	r3, #20
 8014e38:	18fb      	adds	r3, r7, r3
 8014e3a:	7892      	ldrb	r2, [r2, #2]
 8014e3c:	701a      	strb	r2, [r3, #0]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8014e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e40:	689b      	ldr	r3, [r3, #8]
 8014e42:	68ba      	ldr	r2, [r7, #8]
 8014e44:	429a      	cmp	r2, r3
 8014e46:	d001      	beq.n	8014e4c <LoRaMacCryptoUnsecureMessage+0xbc>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8014e48:	2302      	movs	r3, #2
 8014e4a:	e067      	b.n	8014f1c <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8014e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4e:	7b1b      	ldrb	r3, [r3, #12]
 8014e50:	069b      	lsls	r3, r3, #26
 8014e52:	0fdb      	lsrs	r3, r3, #31
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	001a      	movs	r2, r3
 8014e58:	2316      	movs	r3, #22
 8014e5a:	18fb      	adds	r3, r7, r3
 8014e5c:	1e51      	subs	r1, r2, #1
 8014e5e:	418a      	sbcs	r2, r1
 8014e60:	701a      	strb	r2, [r3, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 8014e62:	4b30      	ldr	r3, [pc, #192]	; (8014f24 <LoRaMacCryptoUnsecureMessage+0x194>)
 8014e64:	685b      	ldr	r3, [r3, #4]
 8014e66:	789b      	ldrb	r3, [r3, #2]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d103      	bne.n	8014e74 <LoRaMacCryptoUnsecureMessage+0xe4>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8014e6c:	2316      	movs	r3, #22
 8014e6e:	18fb      	adds	r3, r7, r3
 8014e70:	2200      	movs	r2, #0
 8014e72:	701a      	strb	r2, [r3, #0]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8014e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e76:	6818      	ldr	r0, [r3, #0]
 8014e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e7a:	791b      	ldrb	r3, [r3, #4]
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	3b04      	subs	r3, #4
 8014e80:	b299      	uxth	r1, r3
 8014e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e86:	2615      	movs	r6, #21
 8014e88:	19bc      	adds	r4, r7, r6
 8014e8a:	2216      	movs	r2, #22
 8014e8c:	18ba      	adds	r2, r7, r2
 8014e8e:	7815      	ldrb	r5, [r2, #0]
 8014e90:	2214      	movs	r2, #20
 8014e92:	18ba      	adds	r2, r7, r2
 8014e94:	7812      	ldrb	r2, [r2, #0]
 8014e96:	9303      	str	r3, [sp, #12]
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	9302      	str	r3, [sp, #8]
 8014e9c:	68bb      	ldr	r3, [r7, #8]
 8014e9e:	9301      	str	r3, [sp, #4]
 8014ea0:	2301      	movs	r3, #1
 8014ea2:	9300      	str	r3, [sp, #0]
 8014ea4:	002b      	movs	r3, r5
 8014ea6:	f7ff f8e9 	bl	801407c <VerifyCmacB0>
 8014eaa:	0003      	movs	r3, r0
 8014eac:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014eae:	19bb      	adds	r3, r7, r6
 8014eb0:	781b      	ldrb	r3, [r3, #0]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d003      	beq.n	8014ebe <LoRaMacCryptoUnsecureMessage+0x12e>
    {
        return retval;
 8014eb6:	2315      	movs	r3, #21
 8014eb8:	18fb      	adds	r3, r7, r3
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	e02e      	b.n	8014f1c <LoRaMacCryptoUnsecureMessage+0x18c>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8014ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ec0:	2220      	movs	r2, #32
 8014ec2:	5c9b      	ldrb	r3, [r3, r2]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d103      	bne.n	8014ed0 <LoRaMacCryptoUnsecureMessage+0x140>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8014ec8:	2317      	movs	r3, #23
 8014eca:	18fb      	adds	r3, r7, r3
 8014ecc:	2207      	movs	r2, #7
 8014ece:	701a      	strb	r2, [r3, #0]
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8014ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ed6:	2228      	movs	r2, #40	; 0x28
 8014ed8:	5c9b      	ldrb	r3, [r3, r2]
 8014eda:	b219      	sxth	r1, r3
 8014edc:	2615      	movs	r6, #21
 8014ede:	19bc      	adds	r4, r7, r6
 8014ee0:	68bd      	ldr	r5, [r7, #8]
 8014ee2:	2317      	movs	r3, #23
 8014ee4:	18fb      	adds	r3, r7, r3
 8014ee6:	781a      	ldrb	r2, [r3, #0]
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	9301      	str	r3, [sp, #4]
 8014eec:	2301      	movs	r3, #1
 8014eee:	9300      	str	r3, [sp, #0]
 8014ef0:	002b      	movs	r3, r5
 8014ef2:	f7fe ff27 	bl	8013d44 <PayloadEncrypt>
 8014ef6:	0003      	movs	r3, r0
 8014ef8:	7023      	strb	r3, [r4, #0]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8014efa:	19bb      	adds	r3, r7, r6
 8014efc:	781b      	ldrb	r3, [r3, #0]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d003      	beq.n	8014f0a <LoRaMacCryptoUnsecureMessage+0x17a>
    {
        return retval;
 8014f02:	2315      	movs	r3, #21
 8014f04:	18fb      	adds	r3, r7, r3
 8014f06:	781b      	ldrb	r3, [r3, #0]
 8014f08:	e008      	b.n	8014f1c <LoRaMacCryptoUnsecureMessage+0x18c>
            return retval;
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8014f0a:	687a      	ldr	r2, [r7, #4]
 8014f0c:	230e      	movs	r3, #14
 8014f0e:	18fb      	adds	r3, r7, r3
 8014f10:	781b      	ldrb	r3, [r3, #0]
 8014f12:	0011      	movs	r1, r2
 8014f14:	0018      	movs	r0, r3
 8014f16:	f7ff fa75 	bl	8014404 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8014f1a:	2300      	movs	r3, #0
}
 8014f1c:	0018      	movs	r0, r3
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	b007      	add	sp, #28
 8014f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f24:	20001084 	.word	0x20001084

08014f28 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( KeyIdentifier_t keyID )
{
 8014f28:	b580      	push	{r7, lr}
 8014f2a:	b086      	sub	sp, #24
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	0002      	movs	r2, r0
 8014f30:	1dfb      	adds	r3, r7, #7
 8014f32:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than GenAppKey for LoRaWAN 1.0.x or AppKey for LoRaWAN 1.1 or later
    if( ( ( keyID == APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 ) ) ||
 8014f34:	1dfb      	adds	r3, r7, #7
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d104      	bne.n	8014f46 <LoRaMacCryptoDeriveMcRootKey+0x1e>
 8014f3c:	4b19      	ldr	r3, [pc, #100]	; (8014fa4 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	789b      	ldrb	r3, [r3, #2]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d008      	beq.n	8014f58 <LoRaMacCryptoDeriveMcRootKey+0x30>
 8014f46:	1dfb      	adds	r3, r7, #7
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	2b01      	cmp	r3, #1
 8014f4c:	d106      	bne.n	8014f5c <LoRaMacCryptoDeriveMcRootKey+0x34>
        ( ( keyID == GEN_APP_KEY ) && ( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 ) ) )
 8014f4e:	4b15      	ldr	r3, [pc, #84]	; (8014fa4 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	789b      	ldrb	r3, [r3, #2]
 8014f54:	2b01      	cmp	r3, #1
 8014f56:	d101      	bne.n	8014f5c <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014f58:	230b      	movs	r3, #11
 8014f5a:	e01f      	b.n	8014f9c <LoRaMacCryptoDeriveMcRootKey+0x74>
    }
    uint8_t compBase[16] = { 0 };
 8014f5c:	2308      	movs	r3, #8
 8014f5e:	18fb      	adds	r3, r7, r3
 8014f60:	0018      	movs	r0, r3
 8014f62:	2310      	movs	r3, #16
 8014f64:	001a      	movs	r2, r3
 8014f66:	2100      	movs	r1, #0
 8014f68:	f004 fcf6 	bl	8019958 <memset>

    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 8014f6c:	4b0d      	ldr	r3, [pc, #52]	; (8014fa4 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	789b      	ldrb	r3, [r3, #2]
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d103      	bne.n	8014f7e <LoRaMacCryptoDeriveMcRootKey+0x56>
    {
        compBase[0] = 0x20;
 8014f76:	2308      	movs	r3, #8
 8014f78:	18fb      	adds	r3, r7, r3
 8014f7a:	2220      	movs	r2, #32
 8014f7c:	701a      	strb	r2, [r3, #0]
    }
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014f7e:	4b09      	ldr	r3, [pc, #36]	; (8014fa4 <LoRaMacCryptoDeriveMcRootKey+0x7c>)
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	1dfa      	adds	r2, r7, #7
 8014f84:	7812      	ldrb	r2, [r2, #0]
 8014f86:	2108      	movs	r1, #8
 8014f88:	1879      	adds	r1, r7, r1
 8014f8a:	6818      	ldr	r0, [r3, #0]
 8014f8c:	2309      	movs	r3, #9
 8014f8e:	f7f8 fb4f 	bl	800d630 <SecureElementDeriveAndStoreKey>
 8014f92:	1e03      	subs	r3, r0, #0
 8014f94:	d001      	beq.n	8014f9a <LoRaMacCryptoDeriveMcRootKey+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014f96:	230f      	movs	r3, #15
 8014f98:	e000      	b.n	8014f9c <LoRaMacCryptoDeriveMcRootKey+0x74>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014f9a:	2300      	movs	r3, #0
}
 8014f9c:	0018      	movs	r0, r3
 8014f9e:	46bd      	mov	sp, r7
 8014fa0:	b006      	add	sp, #24
 8014fa2:	bd80      	pop	{r7, pc}
 8014fa4:	20001084 	.word	0x20001084

08014fa8 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8014fa8:	b590      	push	{r4, r7, lr}
 8014faa:	b087      	sub	sp, #28
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	0002      	movs	r2, r0
 8014fb0:	1dfb      	adds	r3, r7, #7
 8014fb2:	701a      	strb	r2, [r3, #0]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8014fb4:	1dfb      	adds	r3, r7, #7
 8014fb6:	781b      	ldrb	r3, [r3, #0]
 8014fb8:	2b09      	cmp	r3, #9
 8014fba:	d001      	beq.n	8014fc0 <LoRaMacCryptoDeriveMcKEKey+0x18>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8014fbc:	230b      	movs	r3, #11
 8014fbe:	e015      	b.n	8014fec <LoRaMacCryptoDeriveMcKEKey+0x44>
    }
    uint8_t compBase[16] = { 0 };
 8014fc0:	2408      	movs	r4, #8
 8014fc2:	193b      	adds	r3, r7, r4
 8014fc4:	0018      	movs	r0, r3
 8014fc6:	2310      	movs	r3, #16
 8014fc8:	001a      	movs	r2, r3
 8014fca:	2100      	movs	r1, #0
 8014fcc:	f004 fcc4 	bl	8019958 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8014fd0:	4b08      	ldr	r3, [pc, #32]	; (8014ff4 <LoRaMacCryptoDeriveMcKEKey+0x4c>)
 8014fd2:	685b      	ldr	r3, [r3, #4]
 8014fd4:	1dfa      	adds	r2, r7, #7
 8014fd6:	7812      	ldrb	r2, [r2, #0]
 8014fd8:	1939      	adds	r1, r7, r4
 8014fda:	6818      	ldr	r0, [r3, #0]
 8014fdc:	237f      	movs	r3, #127	; 0x7f
 8014fde:	f7f8 fb27 	bl	800d630 <SecureElementDeriveAndStoreKey>
 8014fe2:	1e03      	subs	r3, r0, #0
 8014fe4:	d001      	beq.n	8014fea <LoRaMacCryptoDeriveMcKEKey+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8014fe6:	230f      	movs	r3, #15
 8014fe8:	e000      	b.n	8014fec <LoRaMacCryptoDeriveMcKEKey+0x44>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8014fea:	2300      	movs	r3, #0
}
 8014fec:	0018      	movs	r0, r3
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	b007      	add	sp, #28
 8014ff2:	bd90      	pop	{r4, r7, pc}
 8014ff4:	20001084 	.word	0x20001084

08014ff8 <LoRaMacParserJoinAccept>:
*/
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8014ff8:	b590      	push	{r4, r7, lr}
 8014ffa:	b085      	sub	sp, #20
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d003      	beq.n	801500e <LoRaMacParserJoinAccept+0x16>
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d101      	bne.n	8015012 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 801500e:	2302      	movs	r3, #2
 8015010:	e0df      	b.n	80151d2 <LoRaMacParserJoinAccept+0x1da>
    }

    uint16_t bufItr = 0;
 8015012:	240e      	movs	r4, #14
 8015014:	193b      	adds	r3, r7, r4
 8015016:	2200      	movs	r2, #0
 8015018:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	193b      	adds	r3, r7, r4
 8015020:	881b      	ldrh	r3, [r3, #0]
 8015022:	1939      	adds	r1, r7, r4
 8015024:	1c58      	adds	r0, r3, #1
 8015026:	8008      	strh	r0, [r1, #0]
 8015028:	18d3      	adds	r3, r2, r3
 801502a:	781a      	ldrb	r2, [r3, #0]
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	1d98      	adds	r0, r3, #6
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	193b      	adds	r3, r7, r4
 801503a:	881b      	ldrh	r3, [r3, #0]
 801503c:	18d3      	adds	r3, r2, r3
 801503e:	2203      	movs	r2, #3
 8015040:	0019      	movs	r1, r3
 8015042:	f004 fc05 	bl	8019850 <memcpy1>
    bufItr = bufItr + 3;
 8015046:	193b      	adds	r3, r7, r4
 8015048:	193a      	adds	r2, r7, r4
 801504a:	8812      	ldrh	r2, [r2, #0]
 801504c:	3203      	adds	r2, #3
 801504e:	801a      	strh	r2, [r3, #0]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	3309      	adds	r3, #9
 8015054:	0018      	movs	r0, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	681a      	ldr	r2, [r3, #0]
 801505a:	193b      	adds	r3, r7, r4
 801505c:	881b      	ldrh	r3, [r3, #0]
 801505e:	18d3      	adds	r3, r2, r3
 8015060:	2203      	movs	r2, #3
 8015062:	0019      	movs	r1, r3
 8015064:	f004 fbf4 	bl	8019850 <memcpy1>
    bufItr = bufItr + 3;
 8015068:	193b      	adds	r3, r7, r4
 801506a:	193a      	adds	r2, r7, r4
 801506c:	8812      	ldrh	r2, [r2, #0]
 801506e:	3203      	adds	r2, #3
 8015070:	801a      	strh	r2, [r3, #0]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	681a      	ldr	r2, [r3, #0]
 8015076:	193b      	adds	r3, r7, r4
 8015078:	881b      	ldrh	r3, [r3, #0]
 801507a:	1939      	adds	r1, r7, r4
 801507c:	1c58      	adds	r0, r3, #1
 801507e:	8008      	strh	r0, [r1, #0]
 8015080:	18d3      	adds	r3, r2, r3
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	001a      	movs	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	681a      	ldr	r2, [r3, #0]
 801508e:	193b      	adds	r3, r7, r4
 8015090:	881b      	ldrh	r3, [r3, #0]
 8015092:	1939      	adds	r1, r7, r4
 8015094:	1c58      	adds	r0, r3, #1
 8015096:	8008      	strh	r0, [r1, #0]
 8015098:	18d3      	adds	r3, r2, r3
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	021a      	lsls	r2, r3, #8
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	68db      	ldr	r3, [r3, #12]
 80150a2:	431a      	orrs	r2, r3
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	681a      	ldr	r2, [r3, #0]
 80150ac:	193b      	adds	r3, r7, r4
 80150ae:	881b      	ldrh	r3, [r3, #0]
 80150b0:	1939      	adds	r1, r7, r4
 80150b2:	1c58      	adds	r0, r3, #1
 80150b4:	8008      	strh	r0, [r1, #0]
 80150b6:	18d3      	adds	r3, r2, r3
 80150b8:	781b      	ldrb	r3, [r3, #0]
 80150ba:	041a      	lsls	r2, r3, #16
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	68db      	ldr	r3, [r3, #12]
 80150c0:	431a      	orrs	r2, r3
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	681a      	ldr	r2, [r3, #0]
 80150ca:	193b      	adds	r3, r7, r4
 80150cc:	881b      	ldrh	r3, [r3, #0]
 80150ce:	1939      	adds	r1, r7, r4
 80150d0:	1c58      	adds	r0, r3, #1
 80150d2:	8008      	strh	r0, [r1, #0]
 80150d4:	18d3      	adds	r3, r2, r3
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	061a      	lsls	r2, r3, #24
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	68db      	ldr	r3, [r3, #12]
 80150de:	431a      	orrs	r2, r3
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681a      	ldr	r2, [r3, #0]
 80150e8:	193b      	adds	r3, r7, r4
 80150ea:	881b      	ldrh	r3, [r3, #0]
 80150ec:	1939      	adds	r1, r7, r4
 80150ee:	1c58      	adds	r0, r3, #1
 80150f0:	8008      	strh	r0, [r1, #0]
 80150f2:	18d3      	adds	r3, r2, r3
 80150f4:	781a      	ldrb	r2, [r3, #0]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	193b      	adds	r3, r7, r4
 8015100:	881b      	ldrh	r3, [r3, #0]
 8015102:	1939      	adds	r1, r7, r4
 8015104:	1c58      	adds	r0, r3, #1
 8015106:	8008      	strh	r0, [r1, #0]
 8015108:	18d3      	adds	r3, r2, r3
 801510a:	781a      	ldrb	r2, [r3, #0]
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_C_FLIST_FIELD_SIZE )
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	791b      	ldrb	r3, [r3, #4]
 8015114:	1f1a      	subs	r2, r3, #4
 8015116:	193b      	adds	r3, r7, r4
 8015118:	881b      	ldrh	r3, [r3, #0]
 801511a:	1ad3      	subs	r3, r2, r3
 801511c:	2b10      	cmp	r3, #16
 801511e:	d112      	bne.n	8015146 <LoRaMacParserJoinAccept+0x14e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_C_FLIST_FIELD_SIZE );
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	3312      	adds	r3, #18
 8015124:	0018      	movs	r0, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	681a      	ldr	r2, [r3, #0]
 801512a:	240e      	movs	r4, #14
 801512c:	193b      	adds	r3, r7, r4
 801512e:	881b      	ldrh	r3, [r3, #0]
 8015130:	18d3      	adds	r3, r2, r3
 8015132:	2210      	movs	r2, #16
 8015134:	0019      	movs	r1, r3
 8015136:	f004 fb8b 	bl	8019850 <memcpy1>
        bufItr = bufItr + LORAMAC_C_FLIST_FIELD_SIZE;
 801513a:	193b      	adds	r3, r7, r4
 801513c:	193a      	adds	r2, r7, r4
 801513e:	8812      	ldrh	r2, [r2, #0]
 8015140:	3210      	adds	r2, #16
 8015142:	801a      	strh	r2, [r3, #0]
 8015144:	e00a      	b.n	801515c <LoRaMacParserJoinAccept+0x164>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	791b      	ldrb	r3, [r3, #4]
 801514a:	1f1a      	subs	r2, r3, #4
 801514c:	230e      	movs	r3, #14
 801514e:	18fb      	adds	r3, r7, r3
 8015150:	881b      	ldrh	r3, [r3, #0]
 8015152:	1ad3      	subs	r3, r2, r3
 8015154:	2b00      	cmp	r3, #0
 8015156:	dd01      	ble.n	801515c <LoRaMacParserJoinAccept+0x164>
    {
        return LORAMAC_PARSER_FAIL;
 8015158:	2301      	movs	r3, #1
 801515a:	e03a      	b.n	80151d2 <LoRaMacParserJoinAccept+0x1da>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	681a      	ldr	r2, [r3, #0]
 8015160:	240e      	movs	r4, #14
 8015162:	193b      	adds	r3, r7, r4
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	1939      	adds	r1, r7, r4
 8015168:	1c58      	adds	r0, r3, #1
 801516a:	8008      	strh	r0, [r1, #0]
 801516c:	18d3      	adds	r3, r2, r3
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	001a      	movs	r2, r3
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	681a      	ldr	r2, [r3, #0]
 801517a:	193b      	adds	r3, r7, r4
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	1939      	adds	r1, r7, r4
 8015180:	1c58      	adds	r0, r3, #1
 8015182:	8008      	strh	r0, [r1, #0]
 8015184:	18d3      	adds	r3, r2, r3
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	021a      	lsls	r2, r3, #8
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801518e:	431a      	orrs	r2, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681a      	ldr	r2, [r3, #0]
 8015198:	193b      	adds	r3, r7, r4
 801519a:	881b      	ldrh	r3, [r3, #0]
 801519c:	1939      	adds	r1, r7, r4
 801519e:	1c58      	adds	r0, r3, #1
 80151a0:	8008      	strh	r0, [r1, #0]
 80151a2:	18d3      	adds	r3, r2, r3
 80151a4:	781b      	ldrb	r3, [r3, #0]
 80151a6:	041a      	lsls	r2, r3, #16
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ac:	431a      	orrs	r2, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	681a      	ldr	r2, [r3, #0]
 80151b6:	193b      	adds	r3, r7, r4
 80151b8:	881b      	ldrh	r3, [r3, #0]
 80151ba:	1939      	adds	r1, r7, r4
 80151bc:	1c58      	adds	r0, r3, #1
 80151be:	8008      	strh	r0, [r1, #0]
 80151c0:	18d3      	adds	r3, r2, r3
 80151c2:	781b      	ldrb	r3, [r3, #0]
 80151c4:	061a      	lsls	r2, r3, #24
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151ca:	431a      	orrs	r2, r3
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80151d0:	2300      	movs	r3, #0
}
 80151d2:	0018      	movs	r0, r3
 80151d4:	46bd      	mov	sp, r7
 80151d6:	b005      	add	sp, #20
 80151d8:	bd90      	pop	{r4, r7, pc}

080151da <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80151da:	b590      	push	{r4, r7, lr}
 80151dc:	b085      	sub	sp, #20
 80151de:	af00      	add	r7, sp, #0
 80151e0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d003      	beq.n	80151f0 <LoRaMacParserData+0x16>
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d101      	bne.n	80151f4 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80151f0:	2302      	movs	r3, #2
 80151f2:	e100      	b.n	80153f6 <LoRaMacParserData+0x21c>
    }

    uint16_t bufItr = 0;
 80151f4:	240e      	movs	r4, #14
 80151f6:	193b      	adds	r3, r7, r4
 80151f8:	2200      	movs	r2, #0
 80151fa:	801a      	strh	r2, [r3, #0]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	193b      	adds	r3, r7, r4
 8015202:	881b      	ldrh	r3, [r3, #0]
 8015204:	1939      	adds	r1, r7, r4
 8015206:	1c58      	adds	r0, r3, #1
 8015208:	8008      	strh	r0, [r1, #0]
 801520a:	18d3      	adds	r3, r2, r3
 801520c:	781a      	ldrb	r2, [r3, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681a      	ldr	r2, [r3, #0]
 8015216:	193b      	adds	r3, r7, r4
 8015218:	881b      	ldrh	r3, [r3, #0]
 801521a:	1939      	adds	r1, r7, r4
 801521c:	1c58      	adds	r0, r3, #1
 801521e:	8008      	strh	r0, [r1, #0]
 8015220:	18d3      	adds	r3, r2, r3
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	001a      	movs	r2, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	681a      	ldr	r2, [r3, #0]
 801522e:	193b      	adds	r3, r7, r4
 8015230:	881b      	ldrh	r3, [r3, #0]
 8015232:	1939      	adds	r1, r7, r4
 8015234:	1c58      	adds	r0, r3, #1
 8015236:	8008      	strh	r0, [r1, #0]
 8015238:	18d3      	adds	r3, r2, r3
 801523a:	781b      	ldrb	r3, [r3, #0]
 801523c:	021a      	lsls	r2, r3, #8
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	689b      	ldr	r3, [r3, #8]
 8015242:	431a      	orrs	r2, r3
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	681a      	ldr	r2, [r3, #0]
 801524c:	193b      	adds	r3, r7, r4
 801524e:	881b      	ldrh	r3, [r3, #0]
 8015250:	1939      	adds	r1, r7, r4
 8015252:	1c58      	adds	r0, r3, #1
 8015254:	8008      	strh	r0, [r1, #0]
 8015256:	18d3      	adds	r3, r2, r3
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	041a      	lsls	r2, r3, #16
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	689b      	ldr	r3, [r3, #8]
 8015260:	431a      	orrs	r2, r3
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	681a      	ldr	r2, [r3, #0]
 801526a:	193b      	adds	r3, r7, r4
 801526c:	881b      	ldrh	r3, [r3, #0]
 801526e:	1939      	adds	r1, r7, r4
 8015270:	1c58      	adds	r0, r3, #1
 8015272:	8008      	strh	r0, [r1, #0]
 8015274:	18d3      	adds	r3, r2, r3
 8015276:	781b      	ldrb	r3, [r3, #0]
 8015278:	061a      	lsls	r2, r3, #24
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	689b      	ldr	r3, [r3, #8]
 801527e:	431a      	orrs	r2, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	681a      	ldr	r2, [r3, #0]
 8015288:	193b      	adds	r3, r7, r4
 801528a:	881b      	ldrh	r3, [r3, #0]
 801528c:	1939      	adds	r1, r7, r4
 801528e:	1c58      	adds	r0, r3, #1
 8015290:	8008      	strh	r0, [r1, #0]
 8015292:	18d3      	adds	r3, r2, r3
 8015294:	781a      	ldrb	r2, [r3, #0]
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681a      	ldr	r2, [r3, #0]
 801529e:	193b      	adds	r3, r7, r4
 80152a0:	881b      	ldrh	r3, [r3, #0]
 80152a2:	1939      	adds	r1, r7, r4
 80152a4:	1c58      	adds	r0, r3, #1
 80152a6:	8008      	strh	r0, [r1, #0]
 80152a8:	18d3      	adds	r3, r2, r3
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	b29a      	uxth	r2, r3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681a      	ldr	r2, [r3, #0]
 80152b6:	193b      	adds	r3, r7, r4
 80152b8:	881b      	ldrh	r3, [r3, #0]
 80152ba:	1939      	adds	r1, r7, r4
 80152bc:	1c58      	adds	r0, r3, #1
 80152be:	8008      	strh	r0, [r1, #0]
 80152c0:	18d3      	adds	r3, r2, r3
 80152c2:	781b      	ldrb	r3, [r3, #0]
 80152c4:	0219      	lsls	r1, r3, #8
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	89db      	ldrh	r3, [r3, #14]
 80152ca:	b21a      	sxth	r2, r3
 80152cc:	b20b      	sxth	r3, r1
 80152ce:	4313      	orrs	r3, r2
 80152d0:	b21b      	sxth	r3, r3
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	3310      	adds	r3, #16
 80152dc:	0018      	movs	r0, r3
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	681a      	ldr	r2, [r3, #0]
 80152e2:	193b      	adds	r3, r7, r4
 80152e4:	881b      	ldrh	r3, [r3, #0]
 80152e6:	18d1      	adds	r1, r2, r3
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	7b1b      	ldrb	r3, [r3, #12]
 80152ec:	071b      	lsls	r3, r3, #28
 80152ee:	0f1b      	lsrs	r3, r3, #28
 80152f0:	b2db      	uxtb	r3, r3
 80152f2:	b29b      	uxth	r3, r3
 80152f4:	001a      	movs	r2, r3
 80152f6:	f004 faab 	bl	8019850 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	7b1b      	ldrb	r3, [r3, #12]
 80152fe:	071b      	lsls	r3, r3, #28
 8015300:	0f1b      	lsrs	r3, r3, #28
 8015302:	b2db      	uxtb	r3, r3
 8015304:	b299      	uxth	r1, r3
 8015306:	193b      	adds	r3, r7, r4
 8015308:	193a      	adds	r2, r7, r4
 801530a:	8812      	ldrh	r2, [r2, #0]
 801530c:	188a      	adds	r2, r1, r2
 801530e:	801a      	strh	r2, [r3, #0]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2220      	movs	r2, #32
 8015314:	2100      	movs	r1, #0
 8015316:	5499      	strb	r1, [r3, r2]
    macMsg->FRMPayloadSize = 0;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2228      	movs	r2, #40	; 0x28
 801531c:	2100      	movs	r1, #0
 801531e:	5499      	strb	r1, [r3, r2]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	791b      	ldrb	r3, [r3, #4]
 8015324:	001a      	movs	r2, r3
 8015326:	193b      	adds	r3, r7, r4
 8015328:	881b      	ldrh	r3, [r3, #0]
 801532a:	1ad3      	subs	r3, r2, r3
 801532c:	3b04      	subs	r3, #4
 801532e:	2b00      	cmp	r3, #0
 8015330:	dd2f      	ble.n	8015392 <LoRaMacParserData+0x1b8>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	681a      	ldr	r2, [r3, #0]
 8015336:	240e      	movs	r4, #14
 8015338:	193b      	adds	r3, r7, r4
 801533a:	881b      	ldrh	r3, [r3, #0]
 801533c:	1939      	adds	r1, r7, r4
 801533e:	1c58      	adds	r0, r3, #1
 8015340:	8008      	strh	r0, [r1, #0]
 8015342:	18d3      	adds	r3, r2, r3
 8015344:	7819      	ldrb	r1, [r3, #0]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2220      	movs	r2, #32
 801534a:	5499      	strb	r1, [r3, r2]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	791a      	ldrb	r2, [r3, #4]
 8015350:	193b      	adds	r3, r7, r4
 8015352:	881b      	ldrh	r3, [r3, #0]
 8015354:	b2db      	uxtb	r3, r3
 8015356:	1ad3      	subs	r3, r2, r3
 8015358:	b2db      	uxtb	r3, r3
 801535a:	3b04      	subs	r3, #4
 801535c:	b2d9      	uxtb	r1, r3
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	2228      	movs	r2, #40	; 0x28
 8015362:	5499      	strb	r1, [r3, r2]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681a      	ldr	r2, [r3, #0]
 801536c:	193b      	adds	r3, r7, r4
 801536e:	881b      	ldrh	r3, [r3, #0]
 8015370:	18d1      	adds	r1, r2, r3
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	2228      	movs	r2, #40	; 0x28
 8015376:	5c9b      	ldrb	r3, [r3, r2]
 8015378:	b29b      	uxth	r3, r3
 801537a:	001a      	movs	r2, r3
 801537c:	f004 fa68 	bl	8019850 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	2228      	movs	r2, #40	; 0x28
 8015384:	5c9b      	ldrb	r3, [r3, r2]
 8015386:	b299      	uxth	r1, r3
 8015388:	193b      	adds	r3, r7, r4
 801538a:	193a      	adds	r2, r7, r4
 801538c:	8812      	ldrh	r2, [r2, #0]
 801538e:	188a      	adds	r2, r1, r2
 8015390:	801a      	strh	r2, [r3, #0]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681a      	ldr	r2, [r3, #0]
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	791b      	ldrb	r3, [r3, #4]
 801539a:	3b04      	subs	r3, #4
 801539c:	18d3      	adds	r3, r2, r3
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	001a      	movs	r2, r3
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	6819      	ldr	r1, [r3, #0]
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	791b      	ldrb	r3, [r3, #4]
 80153b2:	3b03      	subs	r3, #3
 80153b4:	18cb      	adds	r3, r1, r3
 80153b6:	781b      	ldrb	r3, [r3, #0]
 80153b8:	021b      	lsls	r3, r3, #8
 80153ba:	431a      	orrs	r2, r3
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	6819      	ldr	r1, [r3, #0]
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	791b      	ldrb	r3, [r3, #4]
 80153cc:	3b02      	subs	r3, #2
 80153ce:	18cb      	adds	r3, r1, r3
 80153d0:	781b      	ldrb	r3, [r3, #0]
 80153d2:	041b      	lsls	r3, r3, #16
 80153d4:	431a      	orrs	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	6819      	ldr	r1, [r3, #0]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	791b      	ldrb	r3, [r3, #4]
 80153e6:	3b01      	subs	r3, #1
 80153e8:	18cb      	adds	r3, r1, r3
 80153ea:	781b      	ldrb	r3, [r3, #0]
 80153ec:	061b      	lsls	r3, r3, #24
 80153ee:	431a      	orrs	r2, r3
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80153f4:	2300      	movs	r3, #0
}
 80153f6:	0018      	movs	r0, r3
 80153f8:	46bd      	mov	sp, r7
 80153fa:	b005      	add	sp, #20
 80153fc:	bd90      	pop	{r4, r7, pc}

080153fe <LoRaMacSerializerJoinRequest>:
*/
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80153fe:	b5b0      	push	{r4, r5, r7, lr}
 8015400:	b084      	sub	sp, #16
 8015402:	af00      	add	r7, sp, #0
 8015404:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d003      	beq.n	8015414 <LoRaMacSerializerJoinRequest+0x16>
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d101      	bne.n	8015418 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8015414:	2301      	movs	r3, #1
 8015416:	e089      	b.n	801552c <LoRaMacSerializerJoinRequest+0x12e>
    }

    uint16_t bufItr = 0;
 8015418:	230e      	movs	r3, #14
 801541a:	18fb      	adds	r3, r7, r3
 801541c:	2200      	movs	r2, #0
 801541e:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	791b      	ldrb	r3, [r3, #4]
 8015424:	2b16      	cmp	r3, #22
 8015426:	d801      	bhi.n	801542c <LoRaMacSerializerJoinRequest+0x2e>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8015428:	2302      	movs	r3, #2
 801542a:	e07f      	b.n	801552c <LoRaMacSerializerJoinRequest+0x12e>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	240e      	movs	r4, #14
 8015432:	193b      	adds	r3, r7, r4
 8015434:	881b      	ldrh	r3, [r3, #0]
 8015436:	1939      	adds	r1, r7, r4
 8015438:	1c58      	adds	r0, r3, #1
 801543a:	8008      	strh	r0, [r1, #0]
 801543c:	18d3      	adds	r3, r2, r3
 801543e:	687a      	ldr	r2, [r7, #4]
 8015440:	7952      	ldrb	r2, [r2, #5]
 8015442:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681a      	ldr	r2, [r3, #0]
 8015448:	193b      	adds	r3, r7, r4
 801544a:	881b      	ldrh	r3, [r3, #0]
 801544c:	18d0      	adds	r0, r2, r3
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	3306      	adds	r3, #6
 8015452:	2208      	movs	r2, #8
 8015454:	0019      	movs	r1, r3
 8015456:	f004 fa16 	bl	8019886 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801545a:	193b      	adds	r3, r7, r4
 801545c:	193a      	adds	r2, r7, r4
 801545e:	8812      	ldrh	r2, [r2, #0]
 8015460:	3208      	adds	r2, #8
 8015462:	801a      	strh	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681a      	ldr	r2, [r3, #0]
 8015468:	193b      	adds	r3, r7, r4
 801546a:	881b      	ldrh	r3, [r3, #0]
 801546c:	18d0      	adds	r0, r2, r3
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	330e      	adds	r3, #14
 8015472:	2208      	movs	r2, #8
 8015474:	0019      	movs	r1, r3
 8015476:	f004 fa06 	bl	8019886 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801547a:	193b      	adds	r3, r7, r4
 801547c:	0025      	movs	r5, r4
 801547e:	193a      	adds	r2, r7, r4
 8015480:	8812      	ldrh	r2, [r2, #0]
 8015482:	3208      	adds	r2, #8
 8015484:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	8ad8      	ldrh	r0, [r3, #22]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	197b      	adds	r3, r7, r5
 8015490:	881b      	ldrh	r3, [r3, #0]
 8015492:	1979      	adds	r1, r7, r5
 8015494:	1c5c      	adds	r4, r3, #1
 8015496:	800c      	strh	r4, [r1, #0]
 8015498:	18d3      	adds	r3, r2, r3
 801549a:	b2c2      	uxtb	r2, r0
 801549c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	8adb      	ldrh	r3, [r3, #22]
 80154a2:	0a1b      	lsrs	r3, r3, #8
 80154a4:	b298      	uxth	r0, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	681a      	ldr	r2, [r3, #0]
 80154aa:	197b      	adds	r3, r7, r5
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	1979      	adds	r1, r7, r5
 80154b0:	1c5c      	adds	r4, r3, #1
 80154b2:	800c      	strh	r4, [r1, #0]
 80154b4:	18d3      	adds	r3, r2, r3
 80154b6:	b2c2      	uxtb	r2, r0
 80154b8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	6998      	ldr	r0, [r3, #24]
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681a      	ldr	r2, [r3, #0]
 80154c2:	197b      	adds	r3, r7, r5
 80154c4:	881b      	ldrh	r3, [r3, #0]
 80154c6:	1979      	adds	r1, r7, r5
 80154c8:	1c5c      	adds	r4, r3, #1
 80154ca:	800c      	strh	r4, [r1, #0]
 80154cc:	18d3      	adds	r3, r2, r3
 80154ce:	b2c2      	uxtb	r2, r0
 80154d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	699b      	ldr	r3, [r3, #24]
 80154d6:	0a18      	lsrs	r0, r3, #8
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	681a      	ldr	r2, [r3, #0]
 80154dc:	197b      	adds	r3, r7, r5
 80154de:	881b      	ldrh	r3, [r3, #0]
 80154e0:	1979      	adds	r1, r7, r5
 80154e2:	1c5c      	adds	r4, r3, #1
 80154e4:	800c      	strh	r4, [r1, #0]
 80154e6:	18d3      	adds	r3, r2, r3
 80154e8:	b2c2      	uxtb	r2, r0
 80154ea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	699b      	ldr	r3, [r3, #24]
 80154f0:	0c18      	lsrs	r0, r3, #16
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681a      	ldr	r2, [r3, #0]
 80154f6:	197b      	adds	r3, r7, r5
 80154f8:	881b      	ldrh	r3, [r3, #0]
 80154fa:	1979      	adds	r1, r7, r5
 80154fc:	1c5c      	adds	r4, r3, #1
 80154fe:	800c      	strh	r4, [r1, #0]
 8015500:	18d3      	adds	r3, r2, r3
 8015502:	b2c2      	uxtb	r2, r0
 8015504:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	699b      	ldr	r3, [r3, #24]
 801550a:	0e18      	lsrs	r0, r3, #24
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	197b      	adds	r3, r7, r5
 8015512:	881b      	ldrh	r3, [r3, #0]
 8015514:	1979      	adds	r1, r7, r5
 8015516:	1c5c      	adds	r4, r3, #1
 8015518:	800c      	strh	r4, [r1, #0]
 801551a:	18d3      	adds	r3, r2, r3
 801551c:	b2c2      	uxtb	r2, r0
 801551e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8015520:	197b      	adds	r3, r7, r5
 8015522:	881b      	ldrh	r3, [r3, #0]
 8015524:	b2da      	uxtb	r2, r3
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801552a:	2300      	movs	r3, #0
}
 801552c:	0018      	movs	r0, r3
 801552e:	46bd      	mov	sp, r7
 8015530:	b004      	add	sp, #16
 8015532:	bdb0      	pop	{r4, r5, r7, pc}

08015534 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8015534:	b5b0      	push	{r4, r5, r7, lr}
 8015536:	b084      	sub	sp, #16
 8015538:	af00      	add	r7, sp, #0
 801553a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	2b00      	cmp	r3, #0
 8015540:	d003      	beq.n	801554a <LoRaMacSerializerData+0x16>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d101      	bne.n	801554e <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801554a:	2301      	movs	r3, #1
 801554c:	e11b      	b.n	8015786 <LoRaMacSerializerData+0x252>
    }

    uint16_t bufItr = 0;
 801554e:	230e      	movs	r3, #14
 8015550:	18fb      	adds	r3, r7, r3
 8015552:	2200      	movs	r2, #0
 8015554:	801a      	strh	r2, [r3, #0]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8015556:	200c      	movs	r0, #12
 8015558:	183b      	adds	r3, r7, r0
 801555a:	2208      	movs	r2, #8
 801555c:	801a      	strh	r2, [r3, #0]
                               + LORAMAC_FHDR_DEV_ADD_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	7b1b      	ldrb	r3, [r3, #12]
 8015562:	071b      	lsls	r3, r3, #28
 8015564:	0f1b      	lsrs	r3, r3, #28
 8015566:	b2db      	uxtb	r3, r3
 8015568:	b299      	uxth	r1, r3
 801556a:	183b      	adds	r3, r7, r0
 801556c:	183a      	adds	r2, r7, r0
 801556e:	8812      	ldrh	r2, [r2, #0]
 8015570:	188a      	adds	r2, r1, r2
 8015572:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	2228      	movs	r2, #40	; 0x28
 8015578:	5c9b      	ldrb	r3, [r3, r2]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d005      	beq.n	801558a <LoRaMacSerializerData+0x56>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 801557e:	220c      	movs	r2, #12
 8015580:	18bb      	adds	r3, r7, r2
 8015582:	18ba      	adds	r2, r7, r2
 8015584:	8812      	ldrh	r2, [r2, #0]
 8015586:	3201      	adds	r2, #1
 8015588:	801a      	strh	r2, [r3, #0]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	2228      	movs	r2, #40	; 0x28
 801558e:	5c9b      	ldrb	r3, [r3, r2]
 8015590:	b299      	uxth	r1, r3
 8015592:	200c      	movs	r0, #12
 8015594:	183b      	adds	r3, r7, r0
 8015596:	183a      	adds	r2, r7, r0
 8015598:	8812      	ldrh	r2, [r2, #0]
 801559a:	188a      	adds	r2, r1, r2
 801559c:	801a      	strh	r2, [r3, #0]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801559e:	0001      	movs	r1, r0
 80155a0:	187b      	adds	r3, r7, r1
 80155a2:	187a      	adds	r2, r7, r1
 80155a4:	8812      	ldrh	r2, [r2, #0]
 80155a6:	3204      	adds	r2, #4
 80155a8:	801a      	strh	r2, [r3, #0]

    if( macMsg->BufSize < computedBufSize )
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	791b      	ldrb	r3, [r3, #4]
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	187a      	adds	r2, r7, r1
 80155b2:	8812      	ldrh	r2, [r2, #0]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d901      	bls.n	80155bc <LoRaMacSerializerData+0x88>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80155b8:	2302      	movs	r3, #2
 80155ba:	e0e4      	b.n	8015786 <LoRaMacSerializerData+0x252>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681a      	ldr	r2, [r3, #0]
 80155c0:	250e      	movs	r5, #14
 80155c2:	197b      	adds	r3, r7, r5
 80155c4:	881b      	ldrh	r3, [r3, #0]
 80155c6:	1979      	adds	r1, r7, r5
 80155c8:	1c58      	adds	r0, r3, #1
 80155ca:	8008      	strh	r0, [r1, #0]
 80155cc:	18d3      	adds	r3, r2, r3
 80155ce:	687a      	ldr	r2, [r7, #4]
 80155d0:	7952      	ldrb	r2, [r2, #5]
 80155d2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6898      	ldr	r0, [r3, #8]
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	197b      	adds	r3, r7, r5
 80155de:	881b      	ldrh	r3, [r3, #0]
 80155e0:	1979      	adds	r1, r7, r5
 80155e2:	1c5c      	adds	r4, r3, #1
 80155e4:	800c      	strh	r4, [r1, #0]
 80155e6:	18d3      	adds	r3, r2, r3
 80155e8:	b2c2      	uxtb	r2, r0
 80155ea:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	689b      	ldr	r3, [r3, #8]
 80155f0:	0a18      	lsrs	r0, r3, #8
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	681a      	ldr	r2, [r3, #0]
 80155f6:	197b      	adds	r3, r7, r5
 80155f8:	881b      	ldrh	r3, [r3, #0]
 80155fa:	1979      	adds	r1, r7, r5
 80155fc:	1c5c      	adds	r4, r3, #1
 80155fe:	800c      	strh	r4, [r1, #0]
 8015600:	18d3      	adds	r3, r2, r3
 8015602:	b2c2      	uxtb	r2, r0
 8015604:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	689b      	ldr	r3, [r3, #8]
 801560a:	0c18      	lsrs	r0, r3, #16
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681a      	ldr	r2, [r3, #0]
 8015610:	197b      	adds	r3, r7, r5
 8015612:	881b      	ldrh	r3, [r3, #0]
 8015614:	1979      	adds	r1, r7, r5
 8015616:	1c5c      	adds	r4, r3, #1
 8015618:	800c      	strh	r4, [r1, #0]
 801561a:	18d3      	adds	r3, r2, r3
 801561c:	b2c2      	uxtb	r2, r0
 801561e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	689b      	ldr	r3, [r3, #8]
 8015624:	0e18      	lsrs	r0, r3, #24
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	197b      	adds	r3, r7, r5
 801562c:	881b      	ldrh	r3, [r3, #0]
 801562e:	1979      	adds	r1, r7, r5
 8015630:	1c5c      	adds	r4, r3, #1
 8015632:	800c      	strh	r4, [r1, #0]
 8015634:	18d3      	adds	r3, r2, r3
 8015636:	b2c2      	uxtb	r2, r0
 8015638:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	681a      	ldr	r2, [r3, #0]
 801563e:	197b      	adds	r3, r7, r5
 8015640:	881b      	ldrh	r3, [r3, #0]
 8015642:	1979      	adds	r1, r7, r5
 8015644:	1c58      	adds	r0, r3, #1
 8015646:	8008      	strh	r0, [r1, #0]
 8015648:	18d3      	adds	r3, r2, r3
 801564a:	687a      	ldr	r2, [r7, #4]
 801564c:	7b12      	ldrb	r2, [r2, #12]
 801564e:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	89d8      	ldrh	r0, [r3, #14]
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681a      	ldr	r2, [r3, #0]
 8015658:	197b      	adds	r3, r7, r5
 801565a:	881b      	ldrh	r3, [r3, #0]
 801565c:	1979      	adds	r1, r7, r5
 801565e:	1c5c      	adds	r4, r3, #1
 8015660:	800c      	strh	r4, [r1, #0]
 8015662:	18d3      	adds	r3, r2, r3
 8015664:	b2c2      	uxtb	r2, r0
 8015666:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	89db      	ldrh	r3, [r3, #14]
 801566c:	0a1b      	lsrs	r3, r3, #8
 801566e:	b298      	uxth	r0, r3
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	681a      	ldr	r2, [r3, #0]
 8015674:	197b      	adds	r3, r7, r5
 8015676:	881b      	ldrh	r3, [r3, #0]
 8015678:	1979      	adds	r1, r7, r5
 801567a:	1c5c      	adds	r4, r3, #1
 801567c:	800c      	strh	r4, [r1, #0]
 801567e:	18d3      	adds	r3, r2, r3
 8015680:	b2c2      	uxtb	r2, r0
 8015682:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	681a      	ldr	r2, [r3, #0]
 8015688:	002c      	movs	r4, r5
 801568a:	197b      	adds	r3, r7, r5
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	18d0      	adds	r0, r2, r3
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	3310      	adds	r3, #16
 8015694:	0019      	movs	r1, r3
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	7b1b      	ldrb	r3, [r3, #12]
 801569a:	071b      	lsls	r3, r3, #28
 801569c:	0f1b      	lsrs	r3, r3, #28
 801569e:	b2db      	uxtb	r3, r3
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	001a      	movs	r2, r3
 80156a4:	f004 f8d4 	bl	8019850 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	7b1b      	ldrb	r3, [r3, #12]
 80156ac:	071b      	lsls	r3, r3, #28
 80156ae:	0f1b      	lsrs	r3, r3, #28
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	b299      	uxth	r1, r3
 80156b4:	193b      	adds	r3, r7, r4
 80156b6:	193a      	adds	r2, r7, r4
 80156b8:	8812      	ldrh	r2, [r2, #0]
 80156ba:	188a      	adds	r2, r1, r2
 80156bc:	801a      	strh	r2, [r3, #0]

    if( macMsg->FRMPayloadSize > 0 )
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2228      	movs	r2, #40	; 0x28
 80156c2:	5c9b      	ldrb	r3, [r3, r2]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d00c      	beq.n	80156e2 <LoRaMacSerializerData+0x1ae>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	681a      	ldr	r2, [r3, #0]
 80156cc:	210e      	movs	r1, #14
 80156ce:	187b      	adds	r3, r7, r1
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	1879      	adds	r1, r7, r1
 80156d4:	1c58      	adds	r0, r3, #1
 80156d6:	8008      	strh	r0, [r1, #0]
 80156d8:	18d3      	adds	r3, r2, r3
 80156da:	687a      	ldr	r2, [r7, #4]
 80156dc:	2120      	movs	r1, #32
 80156de:	5c52      	ldrb	r2, [r2, r1]
 80156e0:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	240e      	movs	r4, #14
 80156e8:	193b      	adds	r3, r7, r4
 80156ea:	881b      	ldrh	r3, [r3, #0]
 80156ec:	18d0      	adds	r0, r2, r3
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	2228      	movs	r2, #40	; 0x28
 80156f6:	5c9b      	ldrb	r3, [r3, r2]
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	001a      	movs	r2, r3
 80156fc:	f004 f8a8 	bl	8019850 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	2228      	movs	r2, #40	; 0x28
 8015704:	5c9b      	ldrb	r3, [r3, r2]
 8015706:	b299      	uxth	r1, r3
 8015708:	193b      	adds	r3, r7, r4
 801570a:	193a      	adds	r2, r7, r4
 801570c:	8812      	ldrh	r2, [r2, #0]
 801570e:	188a      	adds	r2, r1, r2
 8015710:	801a      	strh	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	681a      	ldr	r2, [r3, #0]
 801571a:	193b      	adds	r3, r7, r4
 801571c:	881b      	ldrh	r3, [r3, #0]
 801571e:	0025      	movs	r5, r4
 8015720:	1939      	adds	r1, r7, r4
 8015722:	1c5c      	adds	r4, r3, #1
 8015724:	800c      	strh	r4, [r1, #0]
 8015726:	18d3      	adds	r3, r2, r3
 8015728:	b2c2      	uxtb	r2, r0
 801572a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015730:	0a18      	lsrs	r0, r3, #8
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	197b      	adds	r3, r7, r5
 8015738:	881b      	ldrh	r3, [r3, #0]
 801573a:	1979      	adds	r1, r7, r5
 801573c:	1c5c      	adds	r4, r3, #1
 801573e:	800c      	strh	r4, [r1, #0]
 8015740:	18d3      	adds	r3, r2, r3
 8015742:	b2c2      	uxtb	r2, r0
 8015744:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801574a:	0c18      	lsrs	r0, r3, #16
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	197b      	adds	r3, r7, r5
 8015752:	881b      	ldrh	r3, [r3, #0]
 8015754:	1979      	adds	r1, r7, r5
 8015756:	1c5c      	adds	r4, r3, #1
 8015758:	800c      	strh	r4, [r1, #0]
 801575a:	18d3      	adds	r3, r2, r3
 801575c:	b2c2      	uxtb	r2, r0
 801575e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8015760:	687b      	ldr	r3, [r7, #4]
 8015762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015764:	0e18      	lsrs	r0, r3, #24
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	681a      	ldr	r2, [r3, #0]
 801576a:	197b      	adds	r3, r7, r5
 801576c:	881b      	ldrh	r3, [r3, #0]
 801576e:	1979      	adds	r1, r7, r5
 8015770:	1c5c      	adds	r4, r3, #1
 8015772:	800c      	strh	r4, [r1, #0]
 8015774:	18d3      	adds	r3, r2, r3
 8015776:	b2c2      	uxtb	r2, r0
 8015778:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 801577a:	197b      	adds	r3, r7, r5
 801577c:	881b      	ldrh	r3, [r3, #0]
 801577e:	b2da      	uxtb	r2, r3
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8015784:	2300      	movs	r3, #0
}
 8015786:	0018      	movs	r0, r3
 8015788:	46bd      	mov	sp, r7
 801578a:	b004      	add	sp, #16
 801578c:	bdb0      	pop	{r4, r5, r7, pc}

0801578e <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 801578e:	b580      	push	{r7, lr}
 8015790:	b082      	sub	sp, #8
 8015792:	af00      	add	r7, sp, #0
 8015794:	0002      	movs	r2, r0
 8015796:	1dfb      	adds	r3, r7, #7
 8015798:	701a      	strb	r2, [r3, #0]
    switch( region )
 801579a:	1dfb      	adds	r3, r7, #7
 801579c:	781b      	ldrb	r3, [r3, #0]
 801579e:	2b07      	cmp	r3, #7
 80157a0:	d101      	bne.n	80157a6 <RegionIsActive+0x18>
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
 80157a2:	2301      	movs	r3, #1
 80157a4:	e000      	b.n	80157a8 <RegionIsActive+0x1a>
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80157a6:	2300      	movs	r3, #0
        }
    }
}
 80157a8:	0018      	movs	r0, r3
 80157aa:	46bd      	mov	sp, r7
 80157ac:	b002      	add	sp, #8
 80157ae:	bd80      	pop	{r7, pc}

080157b0 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b084      	sub	sp, #16
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	0002      	movs	r2, r0
 80157b8:	6039      	str	r1, [r7, #0]
 80157ba:	1dfb      	adds	r3, r7, #7
 80157bc:	701a      	strb	r2, [r3, #0]
    PhyParam_t phyParam = { 0 };
 80157be:	2308      	movs	r3, #8
 80157c0:	18fb      	adds	r3, r7, r3
 80157c2:	2200      	movs	r2, #0
 80157c4:	601a      	str	r2, [r3, #0]
    switch( region )
 80157c6:	1dfb      	adds	r3, r7, #7
 80157c8:	781b      	ldrb	r3, [r3, #0]
 80157ca:	2b07      	cmp	r3, #7
 80157cc:	d109      	bne.n	80157e2 <RegionGetPhyParam+0x32>
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	0018      	movs	r0, r3
 80157d2:	f001 f8cd 	bl	8016970 <RegionIN865GetPhyParam>
 80157d6:	0003      	movs	r3, r0
 80157d8:	001a      	movs	r2, r3
 80157da:	230c      	movs	r3, #12
 80157dc:	18fb      	adds	r3, r7, r3
 80157de:	601a      	str	r2, [r3, #0]
 80157e0:	e005      	b.n	80157ee <RegionGetPhyParam+0x3e>
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80157e2:	230c      	movs	r3, #12
 80157e4:	18fb      	adds	r3, r7, r3
 80157e6:	2208      	movs	r2, #8
 80157e8:	18ba      	adds	r2, r7, r2
 80157ea:	6812      	ldr	r2, [r2, #0]
 80157ec:	601a      	str	r2, [r3, #0]
 80157ee:	230c      	movs	r3, #12
 80157f0:	18fb      	adds	r3, r7, r3
 80157f2:	2200      	movs	r2, #0
 80157f4:	681a      	ldr	r2, [r3, #0]
 80157f6:	0013      	movs	r3, r2
        }
    }
}
 80157f8:	0018      	movs	r0, r3
 80157fa:	46bd      	mov	sp, r7
 80157fc:	b004      	add	sp, #16
 80157fe:	bd80      	pop	{r7, pc}

08015800 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8015800:	b580      	push	{r7, lr}
 8015802:	b082      	sub	sp, #8
 8015804:	af00      	add	r7, sp, #0
 8015806:	0002      	movs	r2, r0
 8015808:	6039      	str	r1, [r7, #0]
 801580a:	1dfb      	adds	r3, r7, #7
 801580c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801580e:	1dfb      	adds	r3, r7, #7
 8015810:	781b      	ldrb	r3, [r3, #0]
 8015812:	2b07      	cmp	r3, #7
 8015814:	d000      	beq.n	8015818 <RegionSetBandTxDone+0x18>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8015816:	e004      	b.n	8015822 <RegionSetBandTxDone+0x22>
        IN865_SET_BAND_TX_DONE( );
 8015818:	683b      	ldr	r3, [r7, #0]
 801581a:	0018      	movs	r0, r3
 801581c:	f001 f9ac 	bl	8016b78 <RegionIN865SetBandTxDone>
 8015820:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8015822:	46bd      	mov	sp, r7
 8015824:	b002      	add	sp, #8
 8015826:	bd80      	pop	{r7, pc}

08015828 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b082      	sub	sp, #8
 801582c:	af00      	add	r7, sp, #0
 801582e:	0002      	movs	r2, r0
 8015830:	6039      	str	r1, [r7, #0]
 8015832:	1dfb      	adds	r3, r7, #7
 8015834:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015836:	1dfb      	adds	r3, r7, #7
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	2b07      	cmp	r3, #7
 801583c:	d000      	beq.n	8015840 <RegionInitDefaults+0x18>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801583e:	e004      	b.n	801584a <RegionInitDefaults+0x22>
        IN865_INIT_DEFAULTS( );
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	0018      	movs	r0, r3
 8015844:	f001 f9b8 	bl	8016bb8 <RegionIN865InitDefaults>
 8015848:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801584a:	46c0      	nop			; (mov r8, r8)
 801584c:	46bd      	mov	sp, r7
 801584e:	b002      	add	sp, #8
 8015850:	bd80      	pop	{r7, pc}

08015852 <RegionGetNvmCtx>:

void* RegionGetNvmCtx( LoRaMacRegion_t region, GetNvmCtxParams_t* params )
{
 8015852:	b580      	push	{r7, lr}
 8015854:	b082      	sub	sp, #8
 8015856:	af00      	add	r7, sp, #0
 8015858:	0002      	movs	r2, r0
 801585a:	6039      	str	r1, [r7, #0]
 801585c:	1dfb      	adds	r3, r7, #7
 801585e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015860:	1dfb      	adds	r3, r7, #7
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	2b07      	cmp	r3, #7
 8015866:	d105      	bne.n	8015874 <RegionGetNvmCtx+0x22>
        CN470_GET_NVM_CTX( );
        CN779_GET_NVM_CTX( );
        EU433_GET_NVM_CTX( );
        EU868_GET_NVM_CTX( );
        KR920_GET_NVM_CTX( );
        IN865_GET_NVM_CTX( );
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	0018      	movs	r0, r3
 801586c:	f001 fa1a 	bl	8016ca4 <RegionIN865GetNvmCtx>
 8015870:	0003      	movs	r3, r0
 8015872:	e000      	b.n	8015876 <RegionGetNvmCtx+0x24>
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 8015874:	2300      	movs	r3, #0
        }
    }
}
 8015876:	0018      	movs	r0, r3
 8015878:	46bd      	mov	sp, r7
 801587a:	b002      	add	sp, #8
 801587c:	bd80      	pop	{r7, pc}

0801587e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801587e:	b580      	push	{r7, lr}
 8015880:	b082      	sub	sp, #8
 8015882:	af00      	add	r7, sp, #0
 8015884:	6039      	str	r1, [r7, #0]
 8015886:	0011      	movs	r1, r2
 8015888:	1dfb      	adds	r3, r7, #7
 801588a:	1c02      	adds	r2, r0, #0
 801588c:	701a      	strb	r2, [r3, #0]
 801588e:	1dbb      	adds	r3, r7, #6
 8015890:	1c0a      	adds	r2, r1, #0
 8015892:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015894:	1dfb      	adds	r3, r7, #7
 8015896:	781b      	ldrb	r3, [r3, #0]
 8015898:	2b07      	cmp	r3, #7
 801589a:	d108      	bne.n	80158ae <RegionVerify+0x30>
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
        KR920_VERIFY( );
        IN865_VERIFY( );
 801589c:	1dbb      	adds	r3, r7, #6
 801589e:	781a      	ldrb	r2, [r3, #0]
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	0011      	movs	r1, r2
 80158a4:	0018      	movs	r0, r3
 80158a6:	f001 fa0b 	bl	8016cc0 <RegionIN865Verify>
 80158aa:	0003      	movs	r3, r0
 80158ac:	e000      	b.n	80158b0 <RegionVerify+0x32>
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 80158ae:	2300      	movs	r3, #0
        }
    }
}
 80158b0:	0018      	movs	r0, r3
 80158b2:	46bd      	mov	sp, r7
 80158b4:	b002      	add	sp, #8
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b082      	sub	sp, #8
 80158bc:	af00      	add	r7, sp, #0
 80158be:	0002      	movs	r2, r0
 80158c0:	6039      	str	r1, [r7, #0]
 80158c2:	1dfb      	adds	r3, r7, #7
 80158c4:	701a      	strb	r2, [r3, #0]
    switch( region )
 80158c6:	1dfb      	adds	r3, r7, #7
 80158c8:	781b      	ldrb	r3, [r3, #0]
 80158ca:	2b07      	cmp	r3, #7
 80158cc:	d000      	beq.n	80158d0 <RegionApplyCFList+0x18>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80158ce:	e004      	b.n	80158da <RegionApplyCFList+0x22>
        IN865_APPLY_CF_LIST( );
 80158d0:	683b      	ldr	r3, [r7, #0]
 80158d2:	0018      	movs	r0, r3
 80158d4:	f001 fa56 	bl	8016d84 <RegionIN865ApplyCFList>
 80158d8:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 80158da:	46c0      	nop			; (mov r8, r8)
 80158dc:	46bd      	mov	sp, r7
 80158de:	b002      	add	sp, #8
 80158e0:	bd80      	pop	{r7, pc}

080158e2 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80158e2:	b580      	push	{r7, lr}
 80158e4:	b082      	sub	sp, #8
 80158e6:	af00      	add	r7, sp, #0
 80158e8:	0002      	movs	r2, r0
 80158ea:	6039      	str	r1, [r7, #0]
 80158ec:	1dfb      	adds	r3, r7, #7
 80158ee:	701a      	strb	r2, [r3, #0]
    switch( region )
 80158f0:	1dfb      	adds	r3, r7, #7
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	2b07      	cmp	r3, #7
 80158f6:	d105      	bne.n	8015904 <RegionChanMaskSet+0x22>
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	0018      	movs	r0, r3
 80158fc:	f001 fad4 	bl	8016ea8 <RegionIN865ChanMaskSet>
 8015900:	0003      	movs	r3, r0
 8015902:	e000      	b.n	8015906 <RegionChanMaskSet+0x24>
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8015904:	2300      	movs	r3, #0
        }
    }
}
 8015906:	0018      	movs	r0, r3
 8015908:	46bd      	mov	sp, r7
 801590a:	b002      	add	sp, #8
 801590c:	bd80      	pop	{r7, pc}

0801590e <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801590e:	b590      	push	{r4, r7, lr}
 8015910:	b083      	sub	sp, #12
 8015912:	af00      	add	r7, sp, #0
 8015914:	0004      	movs	r4, r0
 8015916:	0008      	movs	r0, r1
 8015918:	0011      	movs	r1, r2
 801591a:	603b      	str	r3, [r7, #0]
 801591c:	1dfb      	adds	r3, r7, #7
 801591e:	1c22      	adds	r2, r4, #0
 8015920:	701a      	strb	r2, [r3, #0]
 8015922:	1dbb      	adds	r3, r7, #6
 8015924:	1c02      	adds	r2, r0, #0
 8015926:	701a      	strb	r2, [r3, #0]
 8015928:	1d7b      	adds	r3, r7, #5
 801592a:	1c0a      	adds	r2, r1, #0
 801592c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801592e:	1dfb      	adds	r3, r7, #7
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	2b07      	cmp	r3, #7
 8015934:	d000      	beq.n	8015938 <RegionComputeRxWindowParameters+0x2a>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8015936:	e00a      	b.n	801594e <RegionComputeRxWindowParameters+0x40>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
 8015938:	69bc      	ldr	r4, [r7, #24]
 801593a:	683a      	ldr	r2, [r7, #0]
 801593c:	1d7b      	adds	r3, r7, #5
 801593e:	7819      	ldrb	r1, [r3, #0]
 8015940:	1dbb      	adds	r3, r7, #6
 8015942:	2000      	movs	r0, #0
 8015944:	5618      	ldrsb	r0, [r3, r0]
 8015946:	0023      	movs	r3, r4
 8015948:	f001 fad4 	bl	8016ef4 <RegionIN865ComputeRxWindowParameters>
 801594c:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 801594e:	46c0      	nop			; (mov r8, r8)
 8015950:	46bd      	mov	sp, r7
 8015952:	b003      	add	sp, #12
 8015954:	bd90      	pop	{r4, r7, pc}

08015956 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015956:	b580      	push	{r7, lr}
 8015958:	b084      	sub	sp, #16
 801595a:	af00      	add	r7, sp, #0
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
 8015960:	210f      	movs	r1, #15
 8015962:	187b      	adds	r3, r7, r1
 8015964:	1c02      	adds	r2, r0, #0
 8015966:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015968:	187b      	adds	r3, r7, r1
 801596a:	781b      	ldrb	r3, [r3, #0]
 801596c:	2b07      	cmp	r3, #7
 801596e:	d107      	bne.n	8015980 <RegionRxConfig+0x2a>
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
 8015970:	687a      	ldr	r2, [r7, #4]
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	0011      	movs	r1, r2
 8015976:	0018      	movs	r0, r3
 8015978:	f001 fb26 	bl	8016fc8 <RegionIN865RxConfig>
 801597c:	0003      	movs	r3, r0
 801597e:	e000      	b.n	8015982 <RegionRxConfig+0x2c>
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8015980:	2300      	movs	r3, #0
        }
    }
}
 8015982:	0018      	movs	r0, r3
 8015984:	46bd      	mov	sp, r7
 8015986:	b004      	add	sp, #16
 8015988:	bd80      	pop	{r7, pc}

0801598a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801598a:	b580      	push	{r7, lr}
 801598c:	b084      	sub	sp, #16
 801598e:	af00      	add	r7, sp, #0
 8015990:	60b9      	str	r1, [r7, #8]
 8015992:	607a      	str	r2, [r7, #4]
 8015994:	603b      	str	r3, [r7, #0]
 8015996:	210f      	movs	r1, #15
 8015998:	187b      	adds	r3, r7, r1
 801599a:	1c02      	adds	r2, r0, #0
 801599c:	701a      	strb	r2, [r3, #0]
    switch( region )
 801599e:	187b      	adds	r3, r7, r1
 80159a0:	781b      	ldrb	r3, [r3, #0]
 80159a2:	2b07      	cmp	r3, #7
 80159a4:	d107      	bne.n	80159b6 <RegionTxConfig+0x2c>
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
 80159a6:	683a      	ldr	r2, [r7, #0]
 80159a8:	6879      	ldr	r1, [r7, #4]
 80159aa:	68bb      	ldr	r3, [r7, #8]
 80159ac:	0018      	movs	r0, r3
 80159ae:	f001 fbf7 	bl	80171a0 <RegionIN865TxConfig>
 80159b2:	0003      	movs	r3, r0
 80159b4:	e000      	b.n	80159b8 <RegionTxConfig+0x2e>
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80159b6:	2300      	movs	r3, #0
        }
    }
}
 80159b8:	0018      	movs	r0, r3
 80159ba:	46bd      	mov	sp, r7
 80159bc:	b004      	add	sp, #16
 80159be:	bd80      	pop	{r7, pc}

080159c0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80159c0:	b590      	push	{r4, r7, lr}
 80159c2:	b087      	sub	sp, #28
 80159c4:	af02      	add	r7, sp, #8
 80159c6:	60b9      	str	r1, [r7, #8]
 80159c8:	607a      	str	r2, [r7, #4]
 80159ca:	603b      	str	r3, [r7, #0]
 80159cc:	210f      	movs	r1, #15
 80159ce:	187b      	adds	r3, r7, r1
 80159d0:	1c02      	adds	r2, r0, #0
 80159d2:	701a      	strb	r2, [r3, #0]
    switch( region )
 80159d4:	187b      	adds	r3, r7, r1
 80159d6:	781b      	ldrb	r3, [r3, #0]
 80159d8:	2b07      	cmp	r3, #7
 80159da:	d10a      	bne.n	80159f2 <RegionLinkAdrReq+0x32>
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
 80159dc:	6a3c      	ldr	r4, [r7, #32]
 80159de:	683a      	ldr	r2, [r7, #0]
 80159e0:	6879      	ldr	r1, [r7, #4]
 80159e2:	68b8      	ldr	r0, [r7, #8]
 80159e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e6:	9300      	str	r3, [sp, #0]
 80159e8:	0023      	movs	r3, r4
 80159ea:	f001 fcb1 	bl	8017350 <RegionIN865LinkAdrReq>
 80159ee:	0003      	movs	r3, r0
 80159f0:	e000      	b.n	80159f4 <RegionLinkAdrReq+0x34>
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80159f2:	2300      	movs	r3, #0
        }
    }
}
 80159f4:	0018      	movs	r0, r3
 80159f6:	46bd      	mov	sp, r7
 80159f8:	b005      	add	sp, #20
 80159fa:	bd90      	pop	{r4, r7, pc}

080159fc <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	0002      	movs	r2, r0
 8015a04:	6039      	str	r1, [r7, #0]
 8015a06:	1dfb      	adds	r3, r7, #7
 8015a08:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015a0a:	1dfb      	adds	r3, r7, #7
 8015a0c:	781b      	ldrb	r3, [r3, #0]
 8015a0e:	2b07      	cmp	r3, #7
 8015a10:	d105      	bne.n	8015a1e <RegionRxParamSetupReq+0x22>
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	0018      	movs	r0, r3
 8015a16:	f001 fdfd 	bl	8017614 <RegionIN865RxParamSetupReq>
 8015a1a:	0003      	movs	r3, r0
 8015a1c:	e000      	b.n	8015a20 <RegionRxParamSetupReq+0x24>
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015a1e:	2300      	movs	r3, #0
        }
    }
}
 8015a20:	0018      	movs	r0, r3
 8015a22:	46bd      	mov	sp, r7
 8015a24:	b002      	add	sp, #8
 8015a26:	bd80      	pop	{r7, pc}

08015a28 <RegionNewChannelReq>:

uint8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8015a28:	b580      	push	{r7, lr}
 8015a2a:	b082      	sub	sp, #8
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	0002      	movs	r2, r0
 8015a30:	6039      	str	r1, [r7, #0]
 8015a32:	1dfb      	adds	r3, r7, #7
 8015a34:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015a36:	1dfb      	adds	r3, r7, #7
 8015a38:	781b      	ldrb	r3, [r3, #0]
 8015a3a:	2b07      	cmp	r3, #7
 8015a3c:	d105      	bne.n	8015a4a <RegionNewChannelReq+0x22>
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	0018      	movs	r0, r3
 8015a42:	f001 fe2b 	bl	801769c <RegionIN865NewChannelReq>
 8015a46:	0003      	movs	r3, r0
 8015a48:	e000      	b.n	8015a4c <RegionNewChannelReq+0x24>
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015a4a:	2300      	movs	r3, #0
        }
    }
}
 8015a4c:	0018      	movs	r0, r3
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	b002      	add	sp, #8
 8015a52:	bd80      	pop	{r7, pc}

08015a54 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	b082      	sub	sp, #8
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	0002      	movs	r2, r0
 8015a5c:	6039      	str	r1, [r7, #0]
 8015a5e:	1dfb      	adds	r3, r7, #7
 8015a60:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015a62:	1dfb      	adds	r3, r7, #7
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	2b07      	cmp	r3, #7
 8015a68:	d105      	bne.n	8015a76 <RegionTxParamSetupReq+0x22>
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	0018      	movs	r0, r3
 8015a6e:	f001 fe7f 	bl	8017770 <RegionIN865TxParamSetupReq>
 8015a72:	0003      	movs	r3, r0
 8015a74:	e000      	b.n	8015a78 <RegionTxParamSetupReq+0x24>
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8015a76:	2300      	movs	r3, #0
        }
    }
}
 8015a78:	0018      	movs	r0, r3
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	b002      	add	sp, #8
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <RegionDlChannelReq>:

uint8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	0002      	movs	r2, r0
 8015a88:	6039      	str	r1, [r7, #0]
 8015a8a:	1dfb      	adds	r3, r7, #7
 8015a8c:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015a8e:	1dfb      	adds	r3, r7, #7
 8015a90:	781b      	ldrb	r3, [r3, #0]
 8015a92:	2b07      	cmp	r3, #7
 8015a94:	d105      	bne.n	8015aa2 <RegionDlChannelReq+0x22>
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	0018      	movs	r0, r3
 8015a9a:	f001 fe73 	bl	8017784 <RegionIN865DlChannelReq>
 8015a9e:	0003      	movs	r3, r0
 8015aa0:	e000      	b.n	8015aa4 <RegionDlChannelReq+0x24>
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8015aa2:	2300      	movs	r3, #0
        }
    }
}
 8015aa4:	0018      	movs	r0, r3
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	b002      	add	sp, #8
 8015aaa:	bd80      	pop	{r7, pc}

08015aac <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8015aac:	b590      	push	{r4, r7, lr}
 8015aae:	b083      	sub	sp, #12
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	0004      	movs	r4, r0
 8015ab4:	0008      	movs	r0, r1
 8015ab6:	0011      	movs	r1, r2
 8015ab8:	1dfb      	adds	r3, r7, #7
 8015aba:	1c22      	adds	r2, r4, #0
 8015abc:	701a      	strb	r2, [r3, #0]
 8015abe:	1dbb      	adds	r3, r7, #6
 8015ac0:	1c02      	adds	r2, r0, #0
 8015ac2:	701a      	strb	r2, [r3, #0]
 8015ac4:	1d7b      	adds	r3, r7, #5
 8015ac6:	1c0a      	adds	r2, r1, #0
 8015ac8:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015aca:	1dfb      	adds	r3, r7, #7
 8015acc:	781b      	ldrb	r3, [r3, #0]
 8015ace:	2b07      	cmp	r3, #7
 8015ad0:	d10a      	bne.n	8015ae8 <RegionAlternateDr+0x3c>
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
 8015ad2:	1d7b      	adds	r3, r7, #5
 8015ad4:	781a      	ldrb	r2, [r3, #0]
 8015ad6:	1dbb      	adds	r3, r7, #6
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	b25b      	sxtb	r3, r3
 8015adc:	0011      	movs	r1, r2
 8015ade:	0018      	movs	r0, r3
 8015ae0:	f001 fe98 	bl	8017814 <RegionIN865AlternateDr>
 8015ae4:	0003      	movs	r3, r0
 8015ae6:	e000      	b.n	8015aea <RegionAlternateDr+0x3e>
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8015ae8:	2300      	movs	r3, #0
        }
    }
}
 8015aea:	0018      	movs	r0, r3
 8015aec:	46bd      	mov	sp, r7
 8015aee:	b003      	add	sp, #12
 8015af0:	bd90      	pop	{r4, r7, pc}

08015af2 <RegionCalcBackOff>:

void RegionCalcBackOff( LoRaMacRegion_t region, CalcBackOffParams_t* calcBackOff )
{
 8015af2:	b580      	push	{r7, lr}
 8015af4:	b082      	sub	sp, #8
 8015af6:	af00      	add	r7, sp, #0
 8015af8:	0002      	movs	r2, r0
 8015afa:	6039      	str	r1, [r7, #0]
 8015afc:	1dfb      	adds	r3, r7, #7
 8015afe:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015b00:	1dfb      	adds	r3, r7, #7
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	2b07      	cmp	r3, #7
 8015b06:	d000      	beq.n	8015b0a <RegionCalcBackOff+0x18>
        IN865_CALC_BACKOFF( );
        US915_CALC_BACKOFF( );
        RU864_CALC_BACKOFF( );
        default:
        {
            break;
 8015b08:	e004      	b.n	8015b14 <RegionCalcBackOff+0x22>
        IN865_CALC_BACKOFF( );
 8015b0a:	683b      	ldr	r3, [r7, #0]
 8015b0c:	0018      	movs	r0, r3
 8015b0e:	f001 fe91 	bl	8017834 <RegionIN865CalcBackOff>
 8015b12:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8015b14:	46c0      	nop			; (mov r8, r8)
 8015b16:	46bd      	mov	sp, r7
 8015b18:	b002      	add	sp, #8
 8015b1a:	bd80      	pop	{r7, pc}

08015b1c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b084      	sub	sp, #16
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	60b9      	str	r1, [r7, #8]
 8015b24:	607a      	str	r2, [r7, #4]
 8015b26:	603b      	str	r3, [r7, #0]
 8015b28:	210f      	movs	r1, #15
 8015b2a:	187b      	adds	r3, r7, r1
 8015b2c:	1c02      	adds	r2, r0, #0
 8015b2e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015b30:	187b      	adds	r3, r7, r1
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	2b07      	cmp	r3, #7
 8015b36:	d107      	bne.n	8015b48 <RegionNextChannel+0x2c>
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
 8015b38:	69bb      	ldr	r3, [r7, #24]
 8015b3a:	683a      	ldr	r2, [r7, #0]
 8015b3c:	6879      	ldr	r1, [r7, #4]
 8015b3e:	68b8      	ldr	r0, [r7, #8]
 8015b40:	f001 fea8 	bl	8017894 <RegionIN865NextChannel>
 8015b44:	0003      	movs	r3, r0
 8015b46:	e000      	b.n	8015b4a <RegionNextChannel+0x2e>
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8015b48:	2309      	movs	r3, #9
        }
    }
}
 8015b4a:	0018      	movs	r0, r3
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	b004      	add	sp, #16
 8015b50:	bd80      	pop	{r7, pc}

08015b52 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8015b52:	b580      	push	{r7, lr}
 8015b54:	b082      	sub	sp, #8
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	0002      	movs	r2, r0
 8015b5a:	6039      	str	r1, [r7, #0]
 8015b5c:	1dfb      	adds	r3, r7, #7
 8015b5e:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015b60:	1dfb      	adds	r3, r7, #7
 8015b62:	781b      	ldrb	r3, [r3, #0]
 8015b64:	2b07      	cmp	r3, #7
 8015b66:	d000      	beq.n	8015b6a <RegionSetContinuousWave+0x18>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8015b68:	e004      	b.n	8015b74 <RegionSetContinuousWave+0x22>
        IN865_SET_CONTINUOUS_WAVE( );
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	0018      	movs	r0, r3
 8015b6e:	f002 f81d 	bl	8017bac <RegionIN865SetContinuousWave>
 8015b72:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8015b74:	46c0      	nop			; (mov r8, r8)
 8015b76:	46bd      	mov	sp, r7
 8015b78:	b002      	add	sp, #8
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8015b7c:	b5b0      	push	{r4, r5, r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	0005      	movs	r5, r0
 8015b84:	000c      	movs	r4, r1
 8015b86:	0010      	movs	r0, r2
 8015b88:	0019      	movs	r1, r3
 8015b8a:	1dfb      	adds	r3, r7, #7
 8015b8c:	1c2a      	adds	r2, r5, #0
 8015b8e:	701a      	strb	r2, [r3, #0]
 8015b90:	1dbb      	adds	r3, r7, #6
 8015b92:	1c22      	adds	r2, r4, #0
 8015b94:	701a      	strb	r2, [r3, #0]
 8015b96:	1d7b      	adds	r3, r7, #5
 8015b98:	1c02      	adds	r2, r0, #0
 8015b9a:	701a      	strb	r2, [r3, #0]
 8015b9c:	1d3b      	adds	r3, r7, #4
 8015b9e:	1c0a      	adds	r2, r1, #0
 8015ba0:	701a      	strb	r2, [r3, #0]
    switch( region )
 8015ba2:	1dfb      	adds	r3, r7, #7
 8015ba4:	781b      	ldrb	r3, [r3, #0]
 8015ba6:	2b07      	cmp	r3, #7
 8015ba8:	d10c      	bne.n	8015bc4 <RegionApplyDrOffset+0x48>
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
 8015baa:	1d3b      	adds	r3, r7, #4
 8015bac:	2200      	movs	r2, #0
 8015bae:	569a      	ldrsb	r2, [r3, r2]
 8015bb0:	1d7b      	adds	r3, r7, #5
 8015bb2:	2100      	movs	r1, #0
 8015bb4:	5659      	ldrsb	r1, [r3, r1]
 8015bb6:	1dbb      	adds	r3, r7, #6
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	0018      	movs	r0, r3
 8015bbc:	f002 f84a 	bl	8017c54 <RegionIN865ApplyDrOffset>
 8015bc0:	0003      	movs	r3, r0
 8015bc2:	e001      	b.n	8015bc8 <RegionApplyDrOffset+0x4c>
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8015bc4:	1d7b      	adds	r3, r7, #5
 8015bc6:	781b      	ldrb	r3, [r3, #0]
        }
    }
}
 8015bc8:	0018      	movs	r0, r3
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	b002      	add	sp, #8
 8015bce:	bdb0      	pop	{r4, r5, r7, pc}

08015bd0 <CountChannels>:
#define BACKOFF_DC_1_HOUR       100
#define BACKOFF_DC_10_HOURS     1000
#define BACKOFF_DC_24_HOURS     10000

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	0002      	movs	r2, r0
 8015bd8:	1dbb      	adds	r3, r7, #6
 8015bda:	801a      	strh	r2, [r3, #0]
 8015bdc:	1d7b      	adds	r3, r7, #5
 8015bde:	1c0a      	adds	r2, r1, #0
 8015be0:	701a      	strb	r2, [r3, #0]
    uint8_t nbActiveBits = 0;
 8015be2:	230f      	movs	r3, #15
 8015be4:	18fb      	adds	r3, r7, r3
 8015be6:	2200      	movs	r2, #0
 8015be8:	701a      	strb	r2, [r3, #0]

    for( uint8_t j = 0; j < nbBits; j++ )
 8015bea:	230e      	movs	r3, #14
 8015bec:	18fb      	adds	r3, r7, r3
 8015bee:	2200      	movs	r2, #0
 8015bf0:	701a      	strb	r2, [r3, #0]
 8015bf2:	e01b      	b.n	8015c2c <CountChannels+0x5c>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8015bf4:	1dbb      	adds	r3, r7, #6
 8015bf6:	881b      	ldrh	r3, [r3, #0]
 8015bf8:	200e      	movs	r0, #14
 8015bfa:	183a      	adds	r2, r7, r0
 8015bfc:	7812      	ldrb	r2, [r2, #0]
 8015bfe:	2101      	movs	r1, #1
 8015c00:	4091      	lsls	r1, r2
 8015c02:	000a      	movs	r2, r1
 8015c04:	401a      	ands	r2, r3
 8015c06:	183b      	adds	r3, r7, r0
 8015c08:	781b      	ldrb	r3, [r3, #0]
 8015c0a:	2101      	movs	r1, #1
 8015c0c:	4099      	lsls	r1, r3
 8015c0e:	000b      	movs	r3, r1
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d105      	bne.n	8015c20 <CountChannels+0x50>
        {
            nbActiveBits++;
 8015c14:	210f      	movs	r1, #15
 8015c16:	187b      	adds	r3, r7, r1
 8015c18:	781a      	ldrb	r2, [r3, #0]
 8015c1a:	187b      	adds	r3, r7, r1
 8015c1c:	3201      	adds	r2, #1
 8015c1e:	701a      	strb	r2, [r3, #0]
    for( uint8_t j = 0; j < nbBits; j++ )
 8015c20:	210e      	movs	r1, #14
 8015c22:	187b      	adds	r3, r7, r1
 8015c24:	781a      	ldrb	r2, [r3, #0]
 8015c26:	187b      	adds	r3, r7, r1
 8015c28:	3201      	adds	r2, #1
 8015c2a:	701a      	strb	r2, [r3, #0]
 8015c2c:	230e      	movs	r3, #14
 8015c2e:	18fa      	adds	r2, r7, r3
 8015c30:	1d7b      	adds	r3, r7, #5
 8015c32:	7812      	ldrb	r2, [r2, #0]
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d3dc      	bcc.n	8015bf4 <CountChannels+0x24>
        }
    }
    return nbActiveBits;
 8015c3a:	230f      	movs	r3, #15
 8015c3c:	18fb      	adds	r3, r7, r3
 8015c3e:	781b      	ldrb	r3, [r3, #0]
}
 8015c40:	0018      	movs	r0, r3
 8015c42:	46bd      	mov	sp, r7
 8015c44:	b004      	add	sp, #16
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <RegionCommonGetJoinDc>:

uint16_t RegionCommonGetJoinDc( TimerTime_t elapsedTime )
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b084      	sub	sp, #16
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
    uint16_t dutyCycle = 0;
 8015c50:	230e      	movs	r3, #14
 8015c52:	18fb      	adds	r3, r7, r3
 8015c54:	2200      	movs	r2, #0
 8015c56:	801a      	strh	r2, [r3, #0]

    if( elapsedTime < 3600000 )
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	4a0e      	ldr	r2, [pc, #56]	; (8015c94 <RegionCommonGetJoinDc+0x4c>)
 8015c5c:	4293      	cmp	r3, r2
 8015c5e:	d804      	bhi.n	8015c6a <RegionCommonGetJoinDc+0x22>
    {
        dutyCycle = BACKOFF_DC_1_HOUR;
 8015c60:	230e      	movs	r3, #14
 8015c62:	18fb      	adds	r3, r7, r3
 8015c64:	2264      	movs	r2, #100	; 0x64
 8015c66:	801a      	strh	r2, [r3, #0]
 8015c68:	e00d      	b.n	8015c86 <RegionCommonGetJoinDc+0x3e>
    }
    else if( elapsedTime < ( 3600000 + 36000000 ) )
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	4a0a      	ldr	r2, [pc, #40]	; (8015c98 <RegionCommonGetJoinDc+0x50>)
 8015c6e:	4293      	cmp	r3, r2
 8015c70:	d805      	bhi.n	8015c7e <RegionCommonGetJoinDc+0x36>
    {
        dutyCycle = BACKOFF_DC_10_HOURS;
 8015c72:	230e      	movs	r3, #14
 8015c74:	18fb      	adds	r3, r7, r3
 8015c76:	22fa      	movs	r2, #250	; 0xfa
 8015c78:	0092      	lsls	r2, r2, #2
 8015c7a:	801a      	strh	r2, [r3, #0]
 8015c7c:	e003      	b.n	8015c86 <RegionCommonGetJoinDc+0x3e>
    }
    else
    {
        dutyCycle = BACKOFF_DC_24_HOURS;
 8015c7e:	230e      	movs	r3, #14
 8015c80:	18fb      	adds	r3, r7, r3
 8015c82:	4a06      	ldr	r2, [pc, #24]	; (8015c9c <RegionCommonGetJoinDc+0x54>)
 8015c84:	801a      	strh	r2, [r3, #0]
    }
    return dutyCycle;
 8015c86:	230e      	movs	r3, #14
 8015c88:	18fb      	adds	r3, r7, r3
 8015c8a:	881b      	ldrh	r3, [r3, #0]
}
 8015c8c:	0018      	movs	r0, r3
 8015c8e:	46bd      	mov	sp, r7
 8015c90:	b004      	add	sp, #16
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	0036ee7f 	.word	0x0036ee7f
 8015c98:	025c3f7f 	.word	0x025c3f7f
 8015c9c:	00002710 	.word	0x00002710

08015ca0 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8015ca0:	b590      	push	{r4, r7, lr}
 8015ca2:	b085      	sub	sp, #20
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	0004      	movs	r4, r0
 8015ca8:	6039      	str	r1, [r7, #0]
 8015caa:	0010      	movs	r0, r2
 8015cac:	0019      	movs	r1, r3
 8015cae:	1dfb      	adds	r3, r7, #7
 8015cb0:	1c22      	adds	r2, r4, #0
 8015cb2:	701a      	strb	r2, [r3, #0]
 8015cb4:	1dbb      	adds	r3, r7, #6
 8015cb6:	1c02      	adds	r2, r0, #0
 8015cb8:	701a      	strb	r2, [r3, #0]
 8015cba:	1d7b      	adds	r3, r7, #5
 8015cbc:	1c0a      	adds	r2, r1, #0
 8015cbe:	701a      	strb	r2, [r3, #0]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8015cc0:	2320      	movs	r3, #32
 8015cc2:	18fb      	adds	r3, r7, r3
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	569a      	ldrsb	r2, [r3, r2]
 8015cc8:	1d7b      	adds	r3, r7, #5
 8015cca:	2100      	movs	r1, #0
 8015ccc:	5659      	ldrsb	r1, [r3, r1]
 8015cce:	1dbb      	adds	r3, r7, #6
 8015cd0:	781b      	ldrb	r3, [r3, #0]
 8015cd2:	b25b      	sxtb	r3, r3
 8015cd4:	0018      	movs	r0, r3
 8015cd6:	f000 f87d 	bl	8015dd4 <RegionCommonValueInRange>
 8015cda:	1e03      	subs	r3, r0, #0
 8015cdc:	d101      	bne.n	8015ce2 <RegionCommonChanVerifyDr+0x42>
    {
        return false;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	e074      	b.n	8015dcc <RegionCommonChanVerifyDr+0x12c>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015ce2:	230f      	movs	r3, #15
 8015ce4:	18fb      	adds	r3, r7, r3
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	701a      	strb	r2, [r3, #0]
 8015cea:	230e      	movs	r3, #14
 8015cec:	18fb      	adds	r3, r7, r3
 8015cee:	2200      	movs	r2, #0
 8015cf0:	701a      	strb	r2, [r3, #0]
 8015cf2:	e063      	b.n	8015dbc <RegionCommonChanVerifyDr+0x11c>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015cf4:	230d      	movs	r3, #13
 8015cf6:	18fb      	adds	r3, r7, r3
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	701a      	strb	r2, [r3, #0]
 8015cfc:	e04d      	b.n	8015d9a <RegionCommonChanVerifyDr+0xfa>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8015cfe:	230e      	movs	r3, #14
 8015d00:	18fb      	adds	r3, r7, r3
 8015d02:	781b      	ldrb	r3, [r3, #0]
 8015d04:	005b      	lsls	r3, r3, #1
 8015d06:	683a      	ldr	r2, [r7, #0]
 8015d08:	18d3      	adds	r3, r2, r3
 8015d0a:	881b      	ldrh	r3, [r3, #0]
 8015d0c:	001a      	movs	r2, r3
 8015d0e:	230d      	movs	r3, #13
 8015d10:	18fb      	adds	r3, r7, r3
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	411a      	asrs	r2, r3
 8015d16:	0013      	movs	r3, r2
 8015d18:	2201      	movs	r2, #1
 8015d1a:	4013      	ands	r3, r2
 8015d1c:	d037      	beq.n	8015d8e <RegionCommonChanVerifyDr+0xee>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015d1e:	200f      	movs	r0, #15
 8015d20:	183b      	adds	r3, r7, r0
 8015d22:	781a      	ldrb	r2, [r3, #0]
 8015d24:	240d      	movs	r4, #13
 8015d26:	193b      	adds	r3, r7, r4
 8015d28:	781b      	ldrb	r3, [r3, #0]
 8015d2a:	18d3      	adds	r3, r2, r3
 8015d2c:	001a      	movs	r2, r3
 8015d2e:	0013      	movs	r3, r2
 8015d30:	005b      	lsls	r3, r3, #1
 8015d32:	189b      	adds	r3, r3, r2
 8015d34:	009b      	lsls	r3, r3, #2
 8015d36:	001a      	movs	r2, r3
 8015d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3a:	189b      	adds	r3, r3, r2
 8015d3c:	7a1b      	ldrb	r3, [r3, #8]
 8015d3e:	011b      	lsls	r3, r3, #4
 8015d40:	b25b      	sxtb	r3, r3
 8015d42:	111b      	asrs	r3, r3, #4
 8015d44:	b25b      	sxtb	r3, r3
 8015d46:	001a      	movs	r2, r3
 8015d48:	230f      	movs	r3, #15
 8015d4a:	4013      	ands	r3, r2
 8015d4c:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8015d4e:	183b      	adds	r3, r7, r0
 8015d50:	781a      	ldrb	r2, [r3, #0]
 8015d52:	193b      	adds	r3, r7, r4
 8015d54:	781b      	ldrb	r3, [r3, #0]
 8015d56:	18d3      	adds	r3, r2, r3
 8015d58:	001a      	movs	r2, r3
 8015d5a:	0013      	movs	r3, r2
 8015d5c:	005b      	lsls	r3, r3, #1
 8015d5e:	189b      	adds	r3, r3, r2
 8015d60:	009b      	lsls	r3, r3, #2
 8015d62:	001a      	movs	r2, r3
 8015d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d66:	189b      	adds	r3, r3, r2
 8015d68:	7a1b      	ldrb	r3, [r3, #8]
 8015d6a:	b25b      	sxtb	r3, r3
 8015d6c:	111b      	asrs	r3, r3, #4
 8015d6e:	b25b      	sxtb	r3, r3
 8015d70:	001a      	movs	r2, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8015d72:	230f      	movs	r3, #15
 8015d74:	4013      	ands	r3, r2
 8015d76:	b25a      	sxtb	r2, r3
 8015d78:	1dbb      	adds	r3, r7, #6
 8015d7a:	781b      	ldrb	r3, [r3, #0]
 8015d7c:	b25b      	sxtb	r3, r3
 8015d7e:	0018      	movs	r0, r3
 8015d80:	f000 f828 	bl	8015dd4 <RegionCommonValueInRange>
 8015d84:	0003      	movs	r3, r0
 8015d86:	2b01      	cmp	r3, #1
 8015d88:	d101      	bne.n	8015d8e <RegionCommonChanVerifyDr+0xee>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	e01e      	b.n	8015dcc <RegionCommonChanVerifyDr+0x12c>
        for( uint8_t j = 0; j < 16; j++ )
 8015d8e:	210d      	movs	r1, #13
 8015d90:	187b      	adds	r3, r7, r1
 8015d92:	781a      	ldrb	r2, [r3, #0]
 8015d94:	187b      	adds	r3, r7, r1
 8015d96:	3201      	adds	r2, #1
 8015d98:	701a      	strb	r2, [r3, #0]
 8015d9a:	230d      	movs	r3, #13
 8015d9c:	18fb      	adds	r3, r7, r3
 8015d9e:	781b      	ldrb	r3, [r3, #0]
 8015da0:	2b0f      	cmp	r3, #15
 8015da2:	d9ac      	bls.n	8015cfe <RegionCommonChanVerifyDr+0x5e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8015da4:	220f      	movs	r2, #15
 8015da6:	18bb      	adds	r3, r7, r2
 8015da8:	18ba      	adds	r2, r7, r2
 8015daa:	7812      	ldrb	r2, [r2, #0]
 8015dac:	3210      	adds	r2, #16
 8015dae:	701a      	strb	r2, [r3, #0]
 8015db0:	210e      	movs	r1, #14
 8015db2:	187b      	adds	r3, r7, r1
 8015db4:	781a      	ldrb	r2, [r3, #0]
 8015db6:	187b      	adds	r3, r7, r1
 8015db8:	3201      	adds	r2, #1
 8015dba:	701a      	strb	r2, [r3, #0]
 8015dbc:	230f      	movs	r3, #15
 8015dbe:	18fa      	adds	r2, r7, r3
 8015dc0:	1dfb      	adds	r3, r7, #7
 8015dc2:	7812      	ldrb	r2, [r2, #0]
 8015dc4:	781b      	ldrb	r3, [r3, #0]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d394      	bcc.n	8015cf4 <RegionCommonChanVerifyDr+0x54>
                }
            }
        }
    }
    return false;
 8015dca:	2300      	movs	r3, #0
}
 8015dcc:	0018      	movs	r0, r3
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	b005      	add	sp, #20
 8015dd2:	bd90      	pop	{r4, r7, pc}

08015dd4 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8015dd4:	b590      	push	{r4, r7, lr}
 8015dd6:	b083      	sub	sp, #12
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	0004      	movs	r4, r0
 8015ddc:	0008      	movs	r0, r1
 8015dde:	0011      	movs	r1, r2
 8015de0:	1dfb      	adds	r3, r7, #7
 8015de2:	1c22      	adds	r2, r4, #0
 8015de4:	701a      	strb	r2, [r3, #0]
 8015de6:	1dbb      	adds	r3, r7, #6
 8015de8:	1c02      	adds	r2, r0, #0
 8015dea:	701a      	strb	r2, [r3, #0]
 8015dec:	1d7b      	adds	r3, r7, #5
 8015dee:	1c0a      	adds	r2, r1, #0
 8015df0:	701a      	strb	r2, [r3, #0]
    if( ( value >= min ) && ( value <= max ) )
 8015df2:	1dfa      	adds	r2, r7, #7
 8015df4:	1dbb      	adds	r3, r7, #6
 8015df6:	7812      	ldrb	r2, [r2, #0]
 8015df8:	b252      	sxtb	r2, r2
 8015dfa:	781b      	ldrb	r3, [r3, #0]
 8015dfc:	b25b      	sxtb	r3, r3
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	db09      	blt.n	8015e16 <RegionCommonValueInRange+0x42>
 8015e02:	1dfa      	adds	r2, r7, #7
 8015e04:	1d7b      	adds	r3, r7, #5
 8015e06:	7812      	ldrb	r2, [r2, #0]
 8015e08:	b252      	sxtb	r2, r2
 8015e0a:	781b      	ldrb	r3, [r3, #0]
 8015e0c:	b25b      	sxtb	r3, r3
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	dc01      	bgt.n	8015e16 <RegionCommonValueInRange+0x42>
    {
        return 1;
 8015e12:	2301      	movs	r3, #1
 8015e14:	e000      	b.n	8015e18 <RegionCommonValueInRange+0x44>
    }
    return 0;
 8015e16:	2300      	movs	r3, #0
}
 8015e18:	0018      	movs	r0, r3
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	b003      	add	sp, #12
 8015e1e:	bd90      	pop	{r4, r7, pc}

08015e20 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b084      	sub	sp, #16
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	0008      	movs	r0, r1
 8015e2a:	0011      	movs	r1, r2
 8015e2c:	1cfb      	adds	r3, r7, #3
 8015e2e:	1c02      	adds	r2, r0, #0
 8015e30:	701a      	strb	r2, [r3, #0]
 8015e32:	1cbb      	adds	r3, r7, #2
 8015e34:	1c0a      	adds	r2, r1, #0
 8015e36:	701a      	strb	r2, [r3, #0]
    uint8_t index = id / 16;
 8015e38:	210f      	movs	r1, #15
 8015e3a:	187b      	adds	r3, r7, r1
 8015e3c:	1cfa      	adds	r2, r7, #3
 8015e3e:	7812      	ldrb	r2, [r2, #0]
 8015e40:	0912      	lsrs	r2, r2, #4
 8015e42:	701a      	strb	r2, [r3, #0]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8015e44:	1cbb      	adds	r3, r7, #2
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	091b      	lsrs	r3, r3, #4
 8015e4a:	b2db      	uxtb	r3, r3
 8015e4c:	187a      	adds	r2, r7, r1
 8015e4e:	7812      	ldrb	r2, [r2, #0]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d805      	bhi.n	8015e60 <RegionCommonChanDisable+0x40>
 8015e54:	1cfa      	adds	r2, r7, #3
 8015e56:	1cbb      	adds	r3, r7, #2
 8015e58:	7812      	ldrb	r2, [r2, #0]
 8015e5a:	781b      	ldrb	r3, [r3, #0]
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d301      	bcc.n	8015e64 <RegionCommonChanDisable+0x44>
    {
        return false;
 8015e60:	2300      	movs	r3, #0
 8015e62:	e01b      	b.n	8015e9c <RegionCommonChanDisable+0x7c>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8015e64:	200f      	movs	r0, #15
 8015e66:	183b      	adds	r3, r7, r0
 8015e68:	781b      	ldrb	r3, [r3, #0]
 8015e6a:	005b      	lsls	r3, r3, #1
 8015e6c:	687a      	ldr	r2, [r7, #4]
 8015e6e:	18d3      	adds	r3, r2, r3
 8015e70:	881b      	ldrh	r3, [r3, #0]
 8015e72:	b21b      	sxth	r3, r3
 8015e74:	1cfa      	adds	r2, r7, #3
 8015e76:	7812      	ldrb	r2, [r2, #0]
 8015e78:	210f      	movs	r1, #15
 8015e7a:	400a      	ands	r2, r1
 8015e7c:	2101      	movs	r1, #1
 8015e7e:	4091      	lsls	r1, r2
 8015e80:	000a      	movs	r2, r1
 8015e82:	b212      	sxth	r2, r2
 8015e84:	43d2      	mvns	r2, r2
 8015e86:	b212      	sxth	r2, r2
 8015e88:	4013      	ands	r3, r2
 8015e8a:	b219      	sxth	r1, r3
 8015e8c:	183b      	adds	r3, r7, r0
 8015e8e:	781b      	ldrb	r3, [r3, #0]
 8015e90:	005b      	lsls	r3, r3, #1
 8015e92:	687a      	ldr	r2, [r7, #4]
 8015e94:	18d3      	adds	r3, r2, r3
 8015e96:	b28a      	uxth	r2, r1
 8015e98:	801a      	strh	r2, [r3, #0]

    return true;
 8015e9a:	2301      	movs	r3, #1
}
 8015e9c:	0018      	movs	r0, r3
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	b004      	add	sp, #16
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8015ea4:	b590      	push	{r4, r7, lr}
 8015ea6:	b085      	sub	sp, #20
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	0008      	movs	r0, r1
 8015eae:	0011      	movs	r1, r2
 8015eb0:	1cfb      	adds	r3, r7, #3
 8015eb2:	1c02      	adds	r2, r0, #0
 8015eb4:	701a      	strb	r2, [r3, #0]
 8015eb6:	1cbb      	adds	r3, r7, #2
 8015eb8:	1c0a      	adds	r2, r1, #0
 8015eba:	701a      	strb	r2, [r3, #0]
    uint8_t nbChannels = 0;
 8015ebc:	230f      	movs	r3, #15
 8015ebe:	18fb      	adds	r3, r7, r3
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	701a      	strb	r2, [r3, #0]

    if( channelsMask == NULL )
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d101      	bne.n	8015ece <RegionCommonCountChannels+0x2a>
    {
        return 0;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e027      	b.n	8015f1e <RegionCommonCountChannels+0x7a>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015ece:	230e      	movs	r3, #14
 8015ed0:	18fb      	adds	r3, r7, r3
 8015ed2:	1cfa      	adds	r2, r7, #3
 8015ed4:	7812      	ldrb	r2, [r2, #0]
 8015ed6:	701a      	strb	r2, [r3, #0]
 8015ed8:	e017      	b.n	8015f0a <RegionCommonCountChannels+0x66>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8015eda:	240e      	movs	r4, #14
 8015edc:	193b      	adds	r3, r7, r4
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	005b      	lsls	r3, r3, #1
 8015ee2:	687a      	ldr	r2, [r7, #4]
 8015ee4:	18d3      	adds	r3, r2, r3
 8015ee6:	881b      	ldrh	r3, [r3, #0]
 8015ee8:	2110      	movs	r1, #16
 8015eea:	0018      	movs	r0, r3
 8015eec:	f7ff fe70 	bl	8015bd0 <CountChannels>
 8015ef0:	0003      	movs	r3, r0
 8015ef2:	0019      	movs	r1, r3
 8015ef4:	220f      	movs	r2, #15
 8015ef6:	18bb      	adds	r3, r7, r2
 8015ef8:	18ba      	adds	r2, r7, r2
 8015efa:	7812      	ldrb	r2, [r2, #0]
 8015efc:	188a      	adds	r2, r1, r2
 8015efe:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8015f00:	193b      	adds	r3, r7, r4
 8015f02:	781a      	ldrb	r2, [r3, #0]
 8015f04:	193b      	adds	r3, r7, r4
 8015f06:	3201      	adds	r2, #1
 8015f08:	701a      	strb	r2, [r3, #0]
 8015f0a:	230e      	movs	r3, #14
 8015f0c:	18fa      	adds	r2, r7, r3
 8015f0e:	1cbb      	adds	r3, r7, #2
 8015f10:	7812      	ldrb	r2, [r2, #0]
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	429a      	cmp	r2, r3
 8015f16:	d3e0      	bcc.n	8015eda <RegionCommonCountChannels+0x36>
    }

    return nbChannels;
 8015f18:	230f      	movs	r3, #15
 8015f1a:	18fb      	adds	r3, r7, r3
 8015f1c:	781b      	ldrb	r3, [r3, #0]
}
 8015f1e:	0018      	movs	r0, r3
 8015f20:	46bd      	mov	sp, r7
 8015f22:	b005      	add	sp, #20
 8015f24:	bd90      	pop	{r4, r7, pc}

08015f26 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8015f26:	b580      	push	{r7, lr}
 8015f28:	b086      	sub	sp, #24
 8015f2a:	af00      	add	r7, sp, #0
 8015f2c:	60f8      	str	r0, [r7, #12]
 8015f2e:	60b9      	str	r1, [r7, #8]
 8015f30:	1dfb      	adds	r3, r7, #7
 8015f32:	701a      	strb	r2, [r3, #0]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d020      	beq.n	8015f7c <RegionCommonChanMaskCopy+0x56>
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d01d      	beq.n	8015f7c <RegionCommonChanMaskCopy+0x56>
    {
        for( uint8_t i = 0; i < len; i++ )
 8015f40:	2317      	movs	r3, #23
 8015f42:	18fb      	adds	r3, r7, r3
 8015f44:	2200      	movs	r2, #0
 8015f46:	701a      	strb	r2, [r3, #0]
 8015f48:	e011      	b.n	8015f6e <RegionCommonChanMaskCopy+0x48>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8015f4a:	2017      	movs	r0, #23
 8015f4c:	183b      	adds	r3, r7, r0
 8015f4e:	781b      	ldrb	r3, [r3, #0]
 8015f50:	005b      	lsls	r3, r3, #1
 8015f52:	68ba      	ldr	r2, [r7, #8]
 8015f54:	18d2      	adds	r2, r2, r3
 8015f56:	183b      	adds	r3, r7, r0
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	005b      	lsls	r3, r3, #1
 8015f5c:	68f9      	ldr	r1, [r7, #12]
 8015f5e:	18cb      	adds	r3, r1, r3
 8015f60:	8812      	ldrh	r2, [r2, #0]
 8015f62:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8015f64:	183b      	adds	r3, r7, r0
 8015f66:	781a      	ldrb	r2, [r3, #0]
 8015f68:	183b      	adds	r3, r7, r0
 8015f6a:	3201      	adds	r2, #1
 8015f6c:	701a      	strb	r2, [r3, #0]
 8015f6e:	2317      	movs	r3, #23
 8015f70:	18fa      	adds	r2, r7, r3
 8015f72:	1dfb      	adds	r3, r7, #7
 8015f74:	7812      	ldrb	r2, [r2, #0]
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d3e6      	bcc.n	8015f4a <RegionCommonChanMaskCopy+0x24>
        }
    }
}
 8015f7c:	46c0      	nop			; (mov r8, r8)
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	b006      	add	sp, #24
 8015f82:	bd80      	pop	{r7, pc}

08015f84 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( bool joined, Band_t* band, TimerTime_t lastTxDone )
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b084      	sub	sp, #16
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	60b9      	str	r1, [r7, #8]
 8015f8c:	607a      	str	r2, [r7, #4]
 8015f8e:	210f      	movs	r1, #15
 8015f90:	187b      	adds	r3, r7, r1
 8015f92:	1c02      	adds	r2, r0, #0
 8015f94:	701a      	strb	r2, [r3, #0]
    if( joined == true )
 8015f96:	187b      	adds	r3, r7, r1
 8015f98:	781b      	ldrb	r3, [r3, #0]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d003      	beq.n	8015fa6 <RegionCommonSetBandTxDone+0x22>
    {
        band->LastTxDoneTime = lastTxDone;
 8015f9e:	68bb      	ldr	r3, [r7, #8]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	609a      	str	r2, [r3, #8]
    else
    {
        band->LastTxDoneTime = lastTxDone;
        band->LastJoinTxDoneTime = lastTxDone;
    }
}
 8015fa4:	e005      	b.n	8015fb2 <RegionCommonSetBandTxDone+0x2e>
        band->LastTxDoneTime = lastTxDone;
 8015fa6:	68bb      	ldr	r3, [r7, #8]
 8015fa8:	687a      	ldr	r2, [r7, #4]
 8015faa:	609a      	str	r2, [r3, #8]
        band->LastJoinTxDoneTime = lastTxDone;
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	687a      	ldr	r2, [r7, #4]
 8015fb0:	605a      	str	r2, [r3, #4]
}
 8015fb2:	46c0      	nop			; (mov r8, r8)
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	b004      	add	sp, #16
 8015fb8:	bd80      	pop	{r7, pc}

08015fba <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, bool dutyCycle, Band_t* bands, uint8_t nbBands )
{
 8015fba:	b590      	push	{r4, r7, lr}
 8015fbc:	b089      	sub	sp, #36	; 0x24
 8015fbe:	af00      	add	r7, sp, #0
 8015fc0:	0004      	movs	r4, r0
 8015fc2:	0008      	movs	r0, r1
 8015fc4:	603a      	str	r2, [r7, #0]
 8015fc6:	0019      	movs	r1, r3
 8015fc8:	1dfb      	adds	r3, r7, #7
 8015fca:	1c22      	adds	r2, r4, #0
 8015fcc:	701a      	strb	r2, [r3, #0]
 8015fce:	1dbb      	adds	r3, r7, #6
 8015fd0:	1c02      	adds	r2, r0, #0
 8015fd2:	701a      	strb	r2, [r3, #0]
 8015fd4:	1d7b      	adds	r3, r7, #5
 8015fd6:	1c0a      	adds	r2, r1, #0
 8015fd8:	701a      	strb	r2, [r3, #0]
    TimerTime_t nextTxDelay = TIMERTIME_T_MAX;
 8015fda:	2301      	movs	r3, #1
 8015fdc:	425b      	negs	r3, r3
 8015fde:	61fb      	str	r3, [r7, #28]

    // Update bands Time OFF
    for( uint8_t i = 0; i < nbBands; i++ )
 8015fe0:	231b      	movs	r3, #27
 8015fe2:	18fb      	adds	r3, r7, r3
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	701a      	strb	r2, [r3, #0]
 8015fe8:	e09c      	b.n	8016124 <RegionCommonUpdateBandTimeOff+0x16a>
    {
        if( joined == false )
 8015fea:	1dfb      	adds	r3, r7, #7
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	2201      	movs	r2, #1
 8015ff0:	4053      	eors	r3, r2
 8015ff2:	b2db      	uxtb	r3, r3
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d04c      	beq.n	8016092 <RegionCommonUpdateBandTimeOff+0xd8>
        {
            TimerTime_t elapsedJoin = TimerGetElapsedTime( bands[i].LastJoinTxDoneTime );
 8015ff8:	241b      	movs	r4, #27
 8015ffa:	193b      	adds	r3, r7, r4
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	011b      	lsls	r3, r3, #4
 8016000:	683a      	ldr	r2, [r7, #0]
 8016002:	18d3      	adds	r3, r2, r3
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	0018      	movs	r0, r3
 8016008:	f003 fa59 	bl	80194be <TimerGetElapsedTime>
 801600c:	0003      	movs	r3, r0
 801600e:	613b      	str	r3, [r7, #16]
            TimerTime_t elapsedTx = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 8016010:	193b      	adds	r3, r7, r4
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	011b      	lsls	r3, r3, #4
 8016016:	683a      	ldr	r2, [r7, #0]
 8016018:	18d3      	adds	r3, r2, r3
 801601a:	689b      	ldr	r3, [r3, #8]
 801601c:	0018      	movs	r0, r3
 801601e:	f003 fa4e 	bl	80194be <TimerGetElapsedTime>
 8016022:	0003      	movs	r3, r0
 8016024:	60fb      	str	r3, [r7, #12]
            TimerTime_t txDoneTime =  MAX( elapsedJoin,
 8016026:	1dbb      	adds	r3, r7, #6
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d001      	beq.n	8016032 <RegionCommonUpdateBandTimeOff+0x78>
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	e000      	b.n	8016034 <RegionCommonUpdateBandTimeOff+0x7a>
 8016032:	2300      	movs	r3, #0
 8016034:	693a      	ldr	r2, [r7, #16]
 8016036:	4293      	cmp	r3, r2
 8016038:	d200      	bcs.n	801603c <RegionCommonUpdateBandTimeOff+0x82>
 801603a:	0013      	movs	r3, r2
 801603c:	60bb      	str	r3, [r7, #8]
                                        ( dutyCycle == true ) ? elapsedTx : 0 );

            if( bands[i].TimeOff <= txDoneTime )
 801603e:	231b      	movs	r3, #27
 8016040:	18fb      	adds	r3, r7, r3
 8016042:	781b      	ldrb	r3, [r3, #0]
 8016044:	011b      	lsls	r3, r3, #4
 8016046:	683a      	ldr	r2, [r7, #0]
 8016048:	18d3      	adds	r3, r2, r3
 801604a:	68db      	ldr	r3, [r3, #12]
 801604c:	68ba      	ldr	r2, [r7, #8]
 801604e:	429a      	cmp	r2, r3
 8016050:	d307      	bcc.n	8016062 <RegionCommonUpdateBandTimeOff+0xa8>
            {
                bands[i].TimeOff = 0;
 8016052:	231b      	movs	r3, #27
 8016054:	18fb      	adds	r3, r7, r3
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	011b      	lsls	r3, r3, #4
 801605a:	683a      	ldr	r2, [r7, #0]
 801605c:	18d3      	adds	r3, r2, r3
 801605e:	2200      	movs	r2, #0
 8016060:	60da      	str	r2, [r3, #12]
            }
            if( bands[i].TimeOff != 0 )
 8016062:	231b      	movs	r3, #27
 8016064:	18fb      	adds	r3, r7, r3
 8016066:	781b      	ldrb	r3, [r3, #0]
 8016068:	011b      	lsls	r3, r3, #4
 801606a:	683a      	ldr	r2, [r7, #0]
 801606c:	18d3      	adds	r3, r2, r3
 801606e:	68db      	ldr	r3, [r3, #12]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d051      	beq.n	8016118 <RegionCommonUpdateBandTimeOff+0x15e>
            {
                nextTxDelay = MIN( bands[i].TimeOff - txDoneTime, nextTxDelay );
 8016074:	231b      	movs	r3, #27
 8016076:	18fb      	adds	r3, r7, r3
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	011b      	lsls	r3, r3, #4
 801607c:	683a      	ldr	r2, [r7, #0]
 801607e:	18d3      	adds	r3, r2, r3
 8016080:	68da      	ldr	r2, [r3, #12]
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	1ad2      	subs	r2, r2, r3
 8016086:	69fb      	ldr	r3, [r7, #28]
 8016088:	4293      	cmp	r3, r2
 801608a:	d900      	bls.n	801608e <RegionCommonUpdateBandTimeOff+0xd4>
 801608c:	0013      	movs	r3, r2
 801608e:	61fb      	str	r3, [r7, #28]
 8016090:	e042      	b.n	8016118 <RegionCommonUpdateBandTimeOff+0x15e>
            }
        }
        else
        {
            if( dutyCycle == true )
 8016092:	1dbb      	adds	r3, r7, #6
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	2b00      	cmp	r3, #0
 8016098:	d034      	beq.n	8016104 <RegionCommonUpdateBandTimeOff+0x14a>
            {
                TimerTime_t elapsed = TimerGetElapsedTime( bands[i].LastTxDoneTime );
 801609a:	241b      	movs	r4, #27
 801609c:	193b      	adds	r3, r7, r4
 801609e:	781b      	ldrb	r3, [r3, #0]
 80160a0:	011b      	lsls	r3, r3, #4
 80160a2:	683a      	ldr	r2, [r7, #0]
 80160a4:	18d3      	adds	r3, r2, r3
 80160a6:	689b      	ldr	r3, [r3, #8]
 80160a8:	0018      	movs	r0, r3
 80160aa:	f003 fa08 	bl	80194be <TimerGetElapsedTime>
 80160ae:	0003      	movs	r3, r0
 80160b0:	617b      	str	r3, [r7, #20]
                if( bands[i].TimeOff <= elapsed )
 80160b2:	193b      	adds	r3, r7, r4
 80160b4:	781b      	ldrb	r3, [r3, #0]
 80160b6:	011b      	lsls	r3, r3, #4
 80160b8:	683a      	ldr	r2, [r7, #0]
 80160ba:	18d3      	adds	r3, r2, r3
 80160bc:	68db      	ldr	r3, [r3, #12]
 80160be:	697a      	ldr	r2, [r7, #20]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d307      	bcc.n	80160d4 <RegionCommonUpdateBandTimeOff+0x11a>
                {
                    bands[i].TimeOff = 0;
 80160c4:	231b      	movs	r3, #27
 80160c6:	18fb      	adds	r3, r7, r3
 80160c8:	781b      	ldrb	r3, [r3, #0]
 80160ca:	011b      	lsls	r3, r3, #4
 80160cc:	683a      	ldr	r2, [r7, #0]
 80160ce:	18d3      	adds	r3, r2, r3
 80160d0:	2200      	movs	r2, #0
 80160d2:	60da      	str	r2, [r3, #12]
                }
                if( bands[i].TimeOff != 0 )
 80160d4:	231b      	movs	r3, #27
 80160d6:	18fb      	adds	r3, r7, r3
 80160d8:	781b      	ldrb	r3, [r3, #0]
 80160da:	011b      	lsls	r3, r3, #4
 80160dc:	683a      	ldr	r2, [r7, #0]
 80160de:	18d3      	adds	r3, r2, r3
 80160e0:	68db      	ldr	r3, [r3, #12]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d018      	beq.n	8016118 <RegionCommonUpdateBandTimeOff+0x15e>
                {
                    nextTxDelay = MIN( bands[i].TimeOff - elapsed, nextTxDelay );
 80160e6:	231b      	movs	r3, #27
 80160e8:	18fb      	adds	r3, r7, r3
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	011b      	lsls	r3, r3, #4
 80160ee:	683a      	ldr	r2, [r7, #0]
 80160f0:	18d3      	adds	r3, r2, r3
 80160f2:	68da      	ldr	r2, [r3, #12]
 80160f4:	697b      	ldr	r3, [r7, #20]
 80160f6:	1ad2      	subs	r2, r2, r3
 80160f8:	69fb      	ldr	r3, [r7, #28]
 80160fa:	4293      	cmp	r3, r2
 80160fc:	d900      	bls.n	8016100 <RegionCommonUpdateBandTimeOff+0x146>
 80160fe:	0013      	movs	r3, r2
 8016100:	61fb      	str	r3, [r7, #28]
 8016102:	e009      	b.n	8016118 <RegionCommonUpdateBandTimeOff+0x15e>
                }
            }
            else
            {
                nextTxDelay = 0;
 8016104:	2300      	movs	r3, #0
 8016106:	61fb      	str	r3, [r7, #28]
                bands[i].TimeOff = 0;
 8016108:	231b      	movs	r3, #27
 801610a:	18fb      	adds	r3, r7, r3
 801610c:	781b      	ldrb	r3, [r3, #0]
 801610e:	011b      	lsls	r3, r3, #4
 8016110:	683a      	ldr	r2, [r7, #0]
 8016112:	18d3      	adds	r3, r2, r3
 8016114:	2200      	movs	r2, #0
 8016116:	60da      	str	r2, [r3, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 8016118:	211b      	movs	r1, #27
 801611a:	187b      	adds	r3, r7, r1
 801611c:	781a      	ldrb	r2, [r3, #0]
 801611e:	187b      	adds	r3, r7, r1
 8016120:	3201      	adds	r2, #1
 8016122:	701a      	strb	r2, [r3, #0]
 8016124:	231b      	movs	r3, #27
 8016126:	18fa      	adds	r2, r7, r3
 8016128:	1d7b      	adds	r3, r7, #5
 801612a:	7812      	ldrb	r2, [r2, #0]
 801612c:	781b      	ldrb	r3, [r3, #0]
 801612e:	429a      	cmp	r2, r3
 8016130:	d200      	bcs.n	8016134 <RegionCommonUpdateBandTimeOff+0x17a>
 8016132:	e75a      	b.n	8015fea <RegionCommonUpdateBandTimeOff+0x30>
            }
        }
    }

    return ( nextTxDelay == TIMERTIME_T_MAX ) ? 0 : nextTxDelay;
 8016134:	69fb      	ldr	r3, [r7, #28]
 8016136:	3301      	adds	r3, #1
 8016138:	d001      	beq.n	801613e <RegionCommonUpdateBandTimeOff+0x184>
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	e000      	b.n	8016140 <RegionCommonUpdateBandTimeOff+0x186>
 801613e:	2300      	movs	r3, #0
}
 8016140:	0018      	movs	r0, r3
 8016142:	46bd      	mov	sp, r7
 8016144:	b009      	add	sp, #36	; 0x24
 8016146:	bd90      	pop	{r4, r7, pc}

08016148 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8016148:	b580      	push	{r7, lr}
 801614a:	b084      	sub	sp, #16
 801614c:	af00      	add	r7, sp, #0
 801614e:	6078      	str	r0, [r7, #4]
 8016150:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8016152:	230f      	movs	r3, #15
 8016154:	18fb      	adds	r3, r7, r3
 8016156:	2200      	movs	r2, #0
 8016158:	701a      	strb	r2, [r3, #0]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	2b03      	cmp	r3, #3
 8016160:	d141      	bne.n	80161e6 <RegionCommonParseLinkAdrReq+0x9e>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	3301      	adds	r3, #1
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	b25a      	sxtb	r2, r3
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	785b      	ldrb	r3, [r3, #1]
 8016172:	b25b      	sxtb	r3, r3
 8016174:	220f      	movs	r2, #15
 8016176:	4013      	ands	r3, r2
 8016178:	b25a      	sxtb	r2, r3
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	785b      	ldrb	r3, [r3, #1]
 8016182:	b25b      	sxtb	r3, r3
 8016184:	b2db      	uxtb	r3, r3
 8016186:	091b      	lsrs	r3, r3, #4
 8016188:	b2db      	uxtb	r3, r3
 801618a:	b25a      	sxtb	r2, r3
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	3302      	adds	r3, #2
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	b29a      	uxth	r2, r3
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801619c:	683b      	ldr	r3, [r7, #0]
 801619e:	889b      	ldrh	r3, [r3, #4]
 80161a0:	b21a      	sxth	r2, r3
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	3303      	adds	r3, #3
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	021b      	lsls	r3, r3, #8
 80161aa:	b21b      	sxth	r3, r3
 80161ac:	4313      	orrs	r3, r2
 80161ae:	b21b      	sxth	r3, r3
 80161b0:	b29a      	uxth	r2, r3
 80161b2:	683b      	ldr	r3, [r7, #0]
 80161b4:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	791a      	ldrb	r2, [r3, #4]
 80161ba:	683b      	ldr	r3, [r7, #0]
 80161bc:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80161be:	683b      	ldr	r3, [r7, #0]
 80161c0:	781b      	ldrb	r3, [r3, #0]
 80161c2:	091b      	lsrs	r3, r3, #4
 80161c4:	b2db      	uxtb	r3, r3
 80161c6:	2207      	movs	r2, #7
 80161c8:	4013      	ands	r3, r2
 80161ca:	b2da      	uxtb	r2, r3
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	220f      	movs	r2, #15
 80161d6:	4013      	ands	r3, r2
 80161d8:	b2da      	uxtb	r2, r3
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80161de:	230f      	movs	r3, #15
 80161e0:	18fb      	adds	r3, r7, r3
 80161e2:	2205      	movs	r2, #5
 80161e4:	701a      	strb	r2, [r3, #0]
    }
    return retIndex;
 80161e6:	230f      	movs	r3, #15
 80161e8:	18fb      	adds	r3, r7, r3
 80161ea:	781b      	ldrb	r3, [r3, #0]
}
 80161ec:	0018      	movs	r0, r3
 80161ee:	46bd      	mov	sp, r7
 80161f0:	b004      	add	sp, #16
 80161f2:	bd80      	pop	{r7, pc}

080161f4 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80161f4:	b5b0      	push	{r4, r5, r7, lr}
 80161f6:	b088      	sub	sp, #32
 80161f8:	af02      	add	r7, sp, #8
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
 8016200:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8016202:	2317      	movs	r3, #23
 8016204:	18fb      	adds	r3, r7, r3
 8016206:	68fa      	ldr	r2, [r7, #12]
 8016208:	7912      	ldrb	r2, [r2, #4]
 801620a:	701a      	strb	r2, [r3, #0]
    int8_t datarate = verifyParams->Datarate;
 801620c:	2316      	movs	r3, #22
 801620e:	18fb      	adds	r3, r7, r3
 8016210:	68fa      	ldr	r2, [r7, #12]
 8016212:	7992      	ldrb	r2, [r2, #6]
 8016214:	701a      	strb	r2, [r3, #0]
    int8_t txPower = verifyParams->TxPower;
 8016216:	2315      	movs	r3, #21
 8016218:	18fb      	adds	r3, r7, r3
 801621a:	68fa      	ldr	r2, [r7, #12]
 801621c:	79d2      	ldrb	r2, [r2, #7]
 801621e:	701a      	strb	r2, [r3, #0]
    int8_t nbRepetitions = verifyParams->NbRep;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	7a1a      	ldrb	r2, [r3, #8]
 8016224:	2314      	movs	r3, #20
 8016226:	18fb      	adds	r3, r7, r3
 8016228:	701a      	strb	r2, [r3, #0]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	795b      	ldrb	r3, [r3, #5]
 801622e:	2201      	movs	r2, #1
 8016230:	4053      	eors	r3, r2
 8016232:	b2db      	uxtb	r3, r3
 8016234:	2b00      	cmp	r3, #0
 8016236:	d00e      	beq.n	8016256 <RegionCommonLinkAdrReqVerifyParams+0x62>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8016238:	2314      	movs	r3, #20
 801623a:	18fb      	adds	r3, r7, r3
 801623c:	68fa      	ldr	r2, [r7, #12]
 801623e:	7ad2      	ldrb	r2, [r2, #11]
 8016240:	701a      	strb	r2, [r3, #0]
        datarate =  verifyParams->CurrentDatarate;
 8016242:	2316      	movs	r3, #22
 8016244:	18fb      	adds	r3, r7, r3
 8016246:	68fa      	ldr	r2, [r7, #12]
 8016248:	7a52      	ldrb	r2, [r2, #9]
 801624a:	701a      	strb	r2, [r3, #0]
        txPower =  verifyParams->CurrentTxPower;
 801624c:	2315      	movs	r3, #21
 801624e:	18fb      	adds	r3, r7, r3
 8016250:	68fa      	ldr	r2, [r7, #12]
 8016252:	7a92      	ldrb	r2, [r2, #10]
 8016254:	701a      	strb	r2, [r3, #0]
    }

    if( status != 0 )
 8016256:	2317      	movs	r3, #23
 8016258:	18fb      	adds	r3, r7, r3
 801625a:	781b      	ldrb	r3, [r3, #0]
 801625c:	2b00      	cmp	r3, #0
 801625e:	d049      	beq.n	80162f4 <RegionCommonLinkAdrReqVerifyParams+0x100>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	7b18      	ldrb	r0, [r3, #12]
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	691c      	ldr	r4, [r3, #16]
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	2514      	movs	r5, #20
 801626c:	575d      	ldrsb	r5, [r3, r5]
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	2215      	movs	r2, #21
 8016272:	569a      	ldrsb	r2, [r3, r2]
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	699b      	ldr	r3, [r3, #24]
 8016278:	2116      	movs	r1, #22
 801627a:	1879      	adds	r1, r7, r1
 801627c:	7809      	ldrb	r1, [r1, #0]
 801627e:	b249      	sxtb	r1, r1
 8016280:	9301      	str	r3, [sp, #4]
 8016282:	9200      	str	r2, [sp, #0]
 8016284:	002b      	movs	r3, r5
 8016286:	000a      	movs	r2, r1
 8016288:	0021      	movs	r1, r4
 801628a:	f7ff fd09 	bl	8015ca0 <RegionCommonChanVerifyDr>
 801628e:	0003      	movs	r3, r0
 8016290:	001a      	movs	r2, r3
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8016292:	2301      	movs	r3, #1
 8016294:	4053      	eors	r3, r2
 8016296:	b2db      	uxtb	r3, r3
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8016298:	2b00      	cmp	r3, #0
 801629a:	d006      	beq.n	80162aa <RegionCommonLinkAdrReqVerifyParams+0xb6>
        {
            status &= 0xFD; // Datarate KO
 801629c:	2217      	movs	r2, #23
 801629e:	18bb      	adds	r3, r7, r2
 80162a0:	18ba      	adds	r2, r7, r2
 80162a2:	7812      	ldrb	r2, [r2, #0]
 80162a4:	2102      	movs	r1, #2
 80162a6:	438a      	bics	r2, r1
 80162a8:	701a      	strb	r2, [r3, #0]
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	211d      	movs	r1, #29
 80162ae:	5659      	ldrsb	r1, [r3, r1]
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	221c      	movs	r2, #28
 80162b4:	569a      	ldrsb	r2, [r3, r2]
 80162b6:	2315      	movs	r3, #21
 80162b8:	18fb      	adds	r3, r7, r3
 80162ba:	781b      	ldrb	r3, [r3, #0]
 80162bc:	b25b      	sxtb	r3, r3
 80162be:	0018      	movs	r0, r3
 80162c0:	f7ff fd88 	bl	8015dd4 <RegionCommonValueInRange>
 80162c4:	1e03      	subs	r3, r0, #0
 80162c6:	d115      	bne.n	80162f4 <RegionCommonLinkAdrReqVerifyParams+0x100>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	7f5b      	ldrb	r3, [r3, #29]
 80162cc:	b25b      	sxtb	r3, r3
 80162ce:	2215      	movs	r2, #21
 80162d0:	18ba      	adds	r2, r7, r2
 80162d2:	7812      	ldrb	r2, [r2, #0]
 80162d4:	b252      	sxtb	r2, r2
 80162d6:	429a      	cmp	r2, r3
 80162d8:	da05      	bge.n	80162e6 <RegionCommonLinkAdrReqVerifyParams+0xf2>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80162da:	2315      	movs	r3, #21
 80162dc:	18fb      	adds	r3, r7, r3
 80162de:	68fa      	ldr	r2, [r7, #12]
 80162e0:	7f52      	ldrb	r2, [r2, #29]
 80162e2:	701a      	strb	r2, [r3, #0]
 80162e4:	e006      	b.n	80162f4 <RegionCommonLinkAdrReqVerifyParams+0x100>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80162e6:	2217      	movs	r2, #23
 80162e8:	18bb      	adds	r3, r7, r2
 80162ea:	18ba      	adds	r2, r7, r2
 80162ec:	7812      	ldrb	r2, [r2, #0]
 80162ee:	2104      	movs	r1, #4
 80162f0:	438a      	bics	r2, r1
 80162f2:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80162f4:	2317      	movs	r3, #23
 80162f6:	18fb      	adds	r3, r7, r3
 80162f8:	781b      	ldrb	r3, [r3, #0]
 80162fa:	2b07      	cmp	r3, #7
 80162fc:	d109      	bne.n	8016312 <RegionCommonLinkAdrReqVerifyParams+0x11e>
    {
        if( nbRepetitions == 0 )
 80162fe:	2314      	movs	r3, #20
 8016300:	18fb      	adds	r3, r7, r3
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	b25b      	sxtb	r3, r3
 8016306:	2b00      	cmp	r3, #0
 8016308:	d103      	bne.n	8016312 <RegionCommonLinkAdrReqVerifyParams+0x11e>
        { // Restore the default value according to the LoRaWAN specification
            nbRepetitions = 1;
 801630a:	2314      	movs	r3, #20
 801630c:	18fb      	adds	r3, r7, r3
 801630e:	2201      	movs	r2, #1
 8016310:	701a      	strb	r2, [r3, #0]
        }
    }

    // Apply changes
    *dr = datarate;
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	2216      	movs	r2, #22
 8016316:	18ba      	adds	r2, r7, r2
 8016318:	7812      	ldrb	r2, [r2, #0]
 801631a:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2215      	movs	r2, #21
 8016320:	18ba      	adds	r2, r7, r2
 8016322:	7812      	ldrb	r2, [r2, #0]
 8016324:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8016326:	2314      	movs	r3, #20
 8016328:	18fb      	adds	r3, r7, r3
 801632a:	781a      	ldrb	r2, [r3, #0]
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	701a      	strb	r2, [r3, #0]

    return status;
 8016330:	2317      	movs	r3, #23
 8016332:	18fb      	adds	r3, r7, r3
 8016334:	781b      	ldrb	r3, [r3, #0]
}
 8016336:	0018      	movs	r0, r3
 8016338:	46bd      	mov	sp, r7
 801633a:	b006      	add	sp, #24
 801633c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016340 <RegionCommonComputeSymbolTimeLoRa>:

double RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 8016340:	b5b0      	push	{r4, r5, r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	0002      	movs	r2, r0
 8016348:	6039      	str	r1, [r7, #0]
 801634a:	1dfb      	adds	r3, r7, #7
 801634c:	701a      	strb	r2, [r3, #0]
    return ( ( double )( 1 << phyDr ) / ( double )bandwidth ) * 1000;
 801634e:	1dfb      	adds	r3, r7, #7
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	2201      	movs	r2, #1
 8016354:	409a      	lsls	r2, r3
 8016356:	0013      	movs	r3, r2
 8016358:	0018      	movs	r0, r3
 801635a:	f7ec fc1f 	bl	8002b9c <__aeabi_i2d>
 801635e:	0004      	movs	r4, r0
 8016360:	000d      	movs	r5, r1
 8016362:	6838      	ldr	r0, [r7, #0]
 8016364:	f7ec fc54 	bl	8002c10 <__aeabi_ui2d>
 8016368:	0002      	movs	r2, r0
 801636a:	000b      	movs	r3, r1
 801636c:	0020      	movs	r0, r4
 801636e:	0029      	movs	r1, r5
 8016370:	f7eb fa1a 	bl	80017a8 <__aeabi_ddiv>
 8016374:	0003      	movs	r3, r0
 8016376:	000c      	movs	r4, r1
 8016378:	0018      	movs	r0, r3
 801637a:	0021      	movs	r1, r4
 801637c:	2200      	movs	r2, #0
 801637e:	4b05      	ldr	r3, [pc, #20]	; (8016394 <RegionCommonComputeSymbolTimeLoRa+0x54>)
 8016380:	f7eb fe1c 	bl	8001fbc <__aeabi_dmul>
 8016384:	0003      	movs	r3, r0
 8016386:	000c      	movs	r4, r1
}
 8016388:	0018      	movs	r0, r3
 801638a:	0021      	movs	r1, r4
 801638c:	46bd      	mov	sp, r7
 801638e:	b002      	add	sp, #8
 8016390:	bdb0      	pop	{r4, r5, r7, pc}
 8016392:	46c0      	nop			; (mov r8, r8)
 8016394:	408f4000 	.word	0x408f4000

08016398 <RegionCommonComputeSymbolTimeFsk>:

double RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
 8016398:	b590      	push	{r4, r7, lr}
 801639a:	b083      	sub	sp, #12
 801639c:	af00      	add	r7, sp, #0
 801639e:	0002      	movs	r2, r0
 80163a0:	1dfb      	adds	r3, r7, #7
 80163a2:	701a      	strb	r2, [r3, #0]
    return ( 8.0 / ( double )phyDr ); // 1 symbol equals 1 byte
 80163a4:	1dfb      	adds	r3, r7, #7
 80163a6:	781b      	ldrb	r3, [r3, #0]
 80163a8:	0018      	movs	r0, r3
 80163aa:	f7ec fc31 	bl	8002c10 <__aeabi_ui2d>
 80163ae:	0003      	movs	r3, r0
 80163b0:	000c      	movs	r4, r1
 80163b2:	001a      	movs	r2, r3
 80163b4:	0023      	movs	r3, r4
 80163b6:	2000      	movs	r0, #0
 80163b8:	4904      	ldr	r1, [pc, #16]	; (80163cc <RegionCommonComputeSymbolTimeFsk+0x34>)
 80163ba:	f7eb f9f5 	bl	80017a8 <__aeabi_ddiv>
 80163be:	0003      	movs	r3, r0
 80163c0:	000c      	movs	r4, r1
}
 80163c2:	0018      	movs	r0, r3
 80163c4:	0021      	movs	r1, r4
 80163c6:	46bd      	mov	sp, r7
 80163c8:	b003      	add	sp, #12
 80163ca:	bd90      	pop	{r4, r7, pc}
 80163cc:	40200000 	.word	0x40200000

080163d0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( double tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 80163d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163d2:	b085      	sub	sp, #20
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	60b8      	str	r0, [r7, #8]
 80163d8:	60f9      	str	r1, [r7, #12]
 80163da:	603b      	str	r3, [r7, #0]
 80163dc:	1dfb      	adds	r3, r7, #7
 80163de:	701a      	strb	r2, [r3, #0]
    *windowTimeout = MAX( ( uint32_t )ceil( ( ( 2 * minRxSymbols - 8 ) * tSymbol + 2 * rxError ) / tSymbol ), minRxSymbols ); // Computed number of symbols
 80163e0:	1dfb      	adds	r3, r7, #7
 80163e2:	781c      	ldrb	r4, [r3, #0]
 80163e4:	1dfb      	adds	r3, r7, #7
 80163e6:	781b      	ldrb	r3, [r3, #0]
 80163e8:	3b04      	subs	r3, #4
 80163ea:	005b      	lsls	r3, r3, #1
 80163ec:	0018      	movs	r0, r3
 80163ee:	f7ec fbd5 	bl	8002b9c <__aeabi_i2d>
 80163f2:	68ba      	ldr	r2, [r7, #8]
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f7eb fde1 	bl	8001fbc <__aeabi_dmul>
 80163fa:	0002      	movs	r2, r0
 80163fc:	000b      	movs	r3, r1
 80163fe:	0015      	movs	r5, r2
 8016400:	001e      	movs	r6, r3
 8016402:	683b      	ldr	r3, [r7, #0]
 8016404:	005b      	lsls	r3, r3, #1
 8016406:	0018      	movs	r0, r3
 8016408:	f7ec fc02 	bl	8002c10 <__aeabi_ui2d>
 801640c:	0002      	movs	r2, r0
 801640e:	000b      	movs	r3, r1
 8016410:	0028      	movs	r0, r5
 8016412:	0031      	movs	r1, r6
 8016414:	f7ea feac 	bl	8001170 <__aeabi_dadd>
 8016418:	0002      	movs	r2, r0
 801641a:	000b      	movs	r3, r1
 801641c:	0010      	movs	r0, r2
 801641e:	0019      	movs	r1, r3
 8016420:	68ba      	ldr	r2, [r7, #8]
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	f7eb f9c0 	bl	80017a8 <__aeabi_ddiv>
 8016428:	0002      	movs	r2, r0
 801642a:	000b      	movs	r3, r1
 801642c:	0010      	movs	r0, r2
 801642e:	0019      	movs	r1, r3
 8016430:	f003 feda 	bl	801a1e8 <ceil>
 8016434:	0002      	movs	r2, r0
 8016436:	000b      	movs	r3, r1
 8016438:	0010      	movs	r0, r2
 801643a:	0019      	movs	r1, r3
 801643c:	f7ea f88a 	bl	8000554 <__aeabi_d2uiz>
 8016440:	0002      	movs	r2, r0
 8016442:	0023      	movs	r3, r4
 8016444:	4293      	cmp	r3, r2
 8016446:	d200      	bcs.n	801644a <RegionCommonComputeRxWindowParameters+0x7a>
 8016448:	0013      	movs	r3, r2
 801644a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801644c:	6013      	str	r3, [r2, #0]
    *windowOffset = ( int32_t )ceil( ( 4.0 * tSymbol ) - ( ( *windowTimeout * tSymbol ) / 2.0 ) - wakeUpTime );
 801644e:	2200      	movs	r2, #0
 8016450:	4b20      	ldr	r3, [pc, #128]	; (80164d4 <RegionCommonComputeRxWindowParameters+0x104>)
 8016452:	68b8      	ldr	r0, [r7, #8]
 8016454:	68f9      	ldr	r1, [r7, #12]
 8016456:	f7eb fdb1 	bl	8001fbc <__aeabi_dmul>
 801645a:	0003      	movs	r3, r0
 801645c:	000c      	movs	r4, r1
 801645e:	0025      	movs	r5, r4
 8016460:	001c      	movs	r4, r3
 8016462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	0018      	movs	r0, r3
 8016468:	f7ec fbd2 	bl	8002c10 <__aeabi_ui2d>
 801646c:	68ba      	ldr	r2, [r7, #8]
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	f7eb fda4 	bl	8001fbc <__aeabi_dmul>
 8016474:	0002      	movs	r2, r0
 8016476:	000b      	movs	r3, r1
 8016478:	0010      	movs	r0, r2
 801647a:	0019      	movs	r1, r3
 801647c:	2200      	movs	r2, #0
 801647e:	2380      	movs	r3, #128	; 0x80
 8016480:	05db      	lsls	r3, r3, #23
 8016482:	f7eb f991 	bl	80017a8 <__aeabi_ddiv>
 8016486:	0002      	movs	r2, r0
 8016488:	000b      	movs	r3, r1
 801648a:	0020      	movs	r0, r4
 801648c:	0029      	movs	r1, r5
 801648e:	f7ec f807 	bl	80024a0 <__aeabi_dsub>
 8016492:	0003      	movs	r3, r0
 8016494:	000c      	movs	r4, r1
 8016496:	0025      	movs	r5, r4
 8016498:	001c      	movs	r4, r3
 801649a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801649c:	f7ec fbb8 	bl	8002c10 <__aeabi_ui2d>
 80164a0:	0002      	movs	r2, r0
 80164a2:	000b      	movs	r3, r1
 80164a4:	0020      	movs	r0, r4
 80164a6:	0029      	movs	r1, r5
 80164a8:	f7eb fffa 	bl	80024a0 <__aeabi_dsub>
 80164ac:	0003      	movs	r3, r0
 80164ae:	000c      	movs	r4, r1
 80164b0:	0018      	movs	r0, r3
 80164b2:	0021      	movs	r1, r4
 80164b4:	f003 fe98 	bl	801a1e8 <ceil>
 80164b8:	0003      	movs	r3, r0
 80164ba:	000c      	movs	r4, r1
 80164bc:	0018      	movs	r0, r3
 80164be:	0021      	movs	r1, r4
 80164c0:	f7ec fb36 	bl	8002b30 <__aeabi_d2iz>
 80164c4:	0002      	movs	r2, r0
 80164c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c8:	601a      	str	r2, [r3, #0]
}
 80164ca:	46c0      	nop			; (mov r8, r8)
 80164cc:	46bd      	mov	sp, r7
 80164ce:	b005      	add	sp, #20
 80164d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164d2:	46c0      	nop			; (mov r8, r8)
 80164d4:	40100000 	.word	0x40100000

080164d8 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80164d8:	b5b0      	push	{r4, r5, r7, lr}
 80164da:	b086      	sub	sp, #24
 80164dc:	af00      	add	r7, sp, #0
 80164de:	60b9      	str	r1, [r7, #8]
 80164e0:	607a      	str	r2, [r7, #4]
 80164e2:	210f      	movs	r1, #15
 80164e4:	187b      	adds	r3, r7, r1
 80164e6:	1c02      	adds	r2, r0, #0
 80164e8:	701a      	strb	r2, [r3, #0]
    int8_t phyTxPower = 0;
 80164ea:	2517      	movs	r5, #23
 80164ec:	197b      	adds	r3, r7, r5
 80164ee:	2200      	movs	r2, #0
 80164f0:	701a      	strb	r2, [r3, #0]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80164f2:	187b      	adds	r3, r7, r1
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	b25b      	sxtb	r3, r3
 80164f8:	005b      	lsls	r3, r3, #1
 80164fa:	0018      	movs	r0, r3
 80164fc:	f7ea fdf8 	bl	80010f0 <__aeabi_ui2f>
 8016500:	1c03      	adds	r3, r0, #0
 8016502:	1c19      	adds	r1, r3, #0
 8016504:	68b8      	ldr	r0, [r7, #8]
 8016506:	f7ea fc0f 	bl	8000d28 <__aeabi_fsub>
 801650a:	1c03      	adds	r3, r0, #0
 801650c:	6879      	ldr	r1, [r7, #4]
 801650e:	1c18      	adds	r0, r3, #0
 8016510:	f7ea fc0a 	bl	8000d28 <__aeabi_fsub>
 8016514:	1c03      	adds	r3, r0, #0
 8016516:	1c18      	adds	r0, r3, #0
 8016518:	f7ec fbac 	bl	8002c74 <__aeabi_f2d>
 801651c:	0003      	movs	r3, r0
 801651e:	000c      	movs	r4, r1
 8016520:	0018      	movs	r0, r3
 8016522:	0021      	movs	r1, r4
 8016524:	f003 fee2 	bl	801a2ec <floor>
 8016528:	0002      	movs	r2, r0
 801652a:	000b      	movs	r3, r1
 801652c:	197c      	adds	r4, r7, r5
 801652e:	0010      	movs	r0, r2
 8016530:	0019      	movs	r1, r3
 8016532:	f7ec fafd 	bl	8002b30 <__aeabi_d2iz>
 8016536:	0003      	movs	r3, r0
 8016538:	7023      	strb	r3, [r4, #0]

    return phyTxPower;
 801653a:	197b      	adds	r3, r7, r5
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	b25b      	sxtb	r3, r3
}
 8016540:	0018      	movs	r0, r3
 8016542:	46bd      	mov	sp, r7
 8016544:	b006      	add	sp, #24
 8016546:	bdb0      	pop	{r4, r5, r7, pc}

08016548 <RegionCommonCalcBackOff>:

void RegionCommonCalcBackOff( RegionCommonCalcBackOffParams_t* calcBackOffParams )
{
 8016548:	b5b0      	push	{r4, r5, r7, lr}
 801654a:	b084      	sub	sp, #16
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
    uint8_t bandIdx = calcBackOffParams->Channels[calcBackOffParams->Channel].Band;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681a      	ldr	r2, [r3, #0]
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	7adb      	ldrb	r3, [r3, #11]
 8016558:	0019      	movs	r1, r3
 801655a:	000b      	movs	r3, r1
 801655c:	005b      	lsls	r3, r3, #1
 801655e:	185b      	adds	r3, r3, r1
 8016560:	009b      	lsls	r3, r3, #2
 8016562:	18d2      	adds	r2, r2, r3
 8016564:	210f      	movs	r1, #15
 8016566:	187b      	adds	r3, r7, r1
 8016568:	7a52      	ldrb	r2, [r2, #9]
 801656a:	701a      	strb	r2, [r3, #0]
    uint16_t dutyCycle = calcBackOffParams->Bands[bandIdx].DCycle;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	685a      	ldr	r2, [r3, #4]
 8016570:	187b      	adds	r3, r7, r1
 8016572:	781b      	ldrb	r3, [r3, #0]
 8016574:	011b      	lsls	r3, r3, #4
 8016576:	18d2      	adds	r2, r2, r3
 8016578:	230c      	movs	r3, #12
 801657a:	18fb      	adds	r3, r7, r3
 801657c:	8812      	ldrh	r2, [r2, #0]
 801657e:	801a      	strh	r2, [r3, #0]
    uint16_t joinDutyCycle = 0;
 8016580:	230a      	movs	r3, #10
 8016582:	18fb      	adds	r3, r7, r3
 8016584:	2200      	movs	r2, #0
 8016586:	801a      	strh	r2, [r3, #0]

    // Reset time-off to initial value.
    calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	685a      	ldr	r2, [r3, #4]
 801658c:	187b      	adds	r3, r7, r1
 801658e:	781b      	ldrb	r3, [r3, #0]
 8016590:	011b      	lsls	r3, r3, #4
 8016592:	18d3      	adds	r3, r2, r3
 8016594:	2200      	movs	r2, #0
 8016596:	60da      	str	r2, [r3, #12]

    if( calcBackOffParams->Joined == false )
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	7a5b      	ldrb	r3, [r3, #9]
 801659c:	2201      	movs	r2, #1
 801659e:	4053      	eors	r3, r2
 80165a0:	b2db      	uxtb	r3, r3
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d03c      	beq.n	8016620 <RegionCommonCalcBackOff+0xd8>
    {
        // Get the join duty cycle
        joinDutyCycle = RegionCommonGetJoinDc( calcBackOffParams->ElapsedTime );
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	68db      	ldr	r3, [r3, #12]
 80165aa:	250a      	movs	r5, #10
 80165ac:	197c      	adds	r4, r7, r5
 80165ae:	0018      	movs	r0, r3
 80165b0:	f7ff fb4a 	bl	8015c48 <RegionCommonGetJoinDc>
 80165b4:	0003      	movs	r3, r0
 80165b6:	8023      	strh	r3, [r4, #0]
        // Apply the most restricting duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 80165b8:	210c      	movs	r1, #12
 80165ba:	187a      	adds	r2, r7, r1
 80165bc:	197b      	adds	r3, r7, r5
 80165be:	1879      	adds	r1, r7, r1
 80165c0:	880c      	ldrh	r4, [r1, #0]
 80165c2:	881b      	ldrh	r3, [r3, #0]
 80165c4:	b298      	uxth	r0, r3
 80165c6:	b2a1      	uxth	r1, r4
 80165c8:	4288      	cmp	r0, r1
 80165ca:	d200      	bcs.n	80165ce <RegionCommonCalcBackOff+0x86>
 80165cc:	1c23      	adds	r3, r4, #0
 80165ce:	8013      	strh	r3, [r2, #0]
        // Reset the timeoff if the last frame was not a join request and when the duty cycle is not enabled
        if( ( calcBackOffParams->DutyCycleEnabled == false ) && ( calcBackOffParams->LastTxIsJoinRequest == false ) )
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	7a9b      	ldrb	r3, [r3, #10]
 80165d4:	2201      	movs	r2, #1
 80165d6:	4053      	eors	r3, r2
 80165d8:	b2db      	uxtb	r3, r3
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d010      	beq.n	8016600 <RegionCommonCalcBackOff+0xb8>
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	7a1b      	ldrb	r3, [r3, #8]
 80165e2:	2201      	movs	r2, #1
 80165e4:	4053      	eors	r3, r2
 80165e6:	b2db      	uxtb	r3, r3
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d009      	beq.n	8016600 <RegionCommonCalcBackOff+0xb8>
        {
            // This is the case when the duty cycle is off and the last uplink frame was not a join.
            // This could happen in case of a rejoin, e.g. in compliance test mode.
            // In this special case we have to set the time off to 0, since the join duty cycle shall only
            // be applied after the first join request.
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	685a      	ldr	r2, [r3, #4]
 80165f0:	230f      	movs	r3, #15
 80165f2:	18fb      	adds	r3, r7, r3
 80165f4:	781b      	ldrb	r3, [r3, #0]
 80165f6:	011b      	lsls	r3, r3, #4
 80165f8:	18d3      	adds	r3, r2, r3
 80165fa:	2200      	movs	r2, #0
 80165fc:	60da      	str	r2, [r3, #12]
        else
        {
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
        }
    }
}
 80165fe:	e02c      	b.n	801665a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8016600:	230c      	movs	r3, #12
 8016602:	18fb      	adds	r3, r7, r3
 8016604:	881b      	ldrh	r3, [r3, #0]
 8016606:	1e5a      	subs	r2, r3, #1
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6919      	ldr	r1, [r3, #16]
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	6858      	ldr	r0, [r3, #4]
 8016610:	230f      	movs	r3, #15
 8016612:	18fb      	adds	r3, r7, r3
 8016614:	781b      	ldrb	r3, [r3, #0]
 8016616:	011b      	lsls	r3, r3, #4
 8016618:	18c3      	adds	r3, r0, r3
 801661a:	434a      	muls	r2, r1
 801661c:	60da      	str	r2, [r3, #12]
}
 801661e:	e01c      	b.n	801665a <RegionCommonCalcBackOff+0x112>
        if( calcBackOffParams->DutyCycleEnabled == true )
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	7a9b      	ldrb	r3, [r3, #10]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d00f      	beq.n	8016648 <RegionCommonCalcBackOff+0x100>
            calcBackOffParams->Bands[bandIdx].TimeOff = calcBackOffParams->TxTimeOnAir * dutyCycle - calcBackOffParams->TxTimeOnAir;
 8016628:	230c      	movs	r3, #12
 801662a:	18fb      	adds	r3, r7, r3
 801662c:	881b      	ldrh	r3, [r3, #0]
 801662e:	1e5a      	subs	r2, r3, #1
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	6919      	ldr	r1, [r3, #16]
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	6858      	ldr	r0, [r3, #4]
 8016638:	230f      	movs	r3, #15
 801663a:	18fb      	adds	r3, r7, r3
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	011b      	lsls	r3, r3, #4
 8016640:	18c3      	adds	r3, r0, r3
 8016642:	434a      	muls	r2, r1
 8016644:	60da      	str	r2, [r3, #12]
}
 8016646:	e008      	b.n	801665a <RegionCommonCalcBackOff+0x112>
            calcBackOffParams->Bands[bandIdx].TimeOff = 0;
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	685a      	ldr	r2, [r3, #4]
 801664c:	230f      	movs	r3, #15
 801664e:	18fb      	adds	r3, r7, r3
 8016650:	781b      	ldrb	r3, [r3, #0]
 8016652:	011b      	lsls	r3, r3, #4
 8016654:	18d3      	adds	r3, r2, r3
 8016656:	2200      	movs	r2, #0
 8016658:	60da      	str	r2, [r3, #12]
}
 801665a:	46c0      	nop			; (mov r8, r8)
 801665c:	46bd      	mov	sp, r7
 801665e:	b004      	add	sp, #16
 8016660:	bdb0      	pop	{r4, r5, r7, pc}

08016662 <GetNextLowerTxDr>:
 */
static RegionIN865NvmCtx_t NvmCtx;

// Static functions
static int8_t GetNextLowerTxDr( int8_t dr, int8_t minDr )
{
 8016662:	b580      	push	{r7, lr}
 8016664:	b084      	sub	sp, #16
 8016666:	af00      	add	r7, sp, #0
 8016668:	0002      	movs	r2, r0
 801666a:	1dfb      	adds	r3, r7, #7
 801666c:	701a      	strb	r2, [r3, #0]
 801666e:	1dbb      	adds	r3, r7, #6
 8016670:	1c0a      	adds	r2, r1, #0
 8016672:	701a      	strb	r2, [r3, #0]
    uint8_t nextLowerDr = 0;
 8016674:	230f      	movs	r3, #15
 8016676:	18fb      	adds	r3, r7, r3
 8016678:	2200      	movs	r2, #0
 801667a:	701a      	strb	r2, [r3, #0]

    if( dr == minDr )
 801667c:	1dfa      	adds	r2, r7, #7
 801667e:	1dbb      	adds	r3, r7, #6
 8016680:	7812      	ldrb	r2, [r2, #0]
 8016682:	b252      	sxtb	r2, r2
 8016684:	781b      	ldrb	r3, [r3, #0]
 8016686:	b25b      	sxtb	r3, r3
 8016688:	429a      	cmp	r2, r3
 801668a:	d105      	bne.n	8016698 <GetNextLowerTxDr+0x36>
    {
        nextLowerDr = minDr;
 801668c:	230f      	movs	r3, #15
 801668e:	18fb      	adds	r3, r7, r3
 8016690:	1dba      	adds	r2, r7, #6
 8016692:	7812      	ldrb	r2, [r2, #0]
 8016694:	701a      	strb	r2, [r3, #0]
 8016696:	e00f      	b.n	80166b8 <GetNextLowerTxDr+0x56>
    }
    else if( dr == DR_7 )
 8016698:	1dfb      	adds	r3, r7, #7
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	b25b      	sxtb	r3, r3
 801669e:	2b07      	cmp	r3, #7
 80166a0:	d104      	bne.n	80166ac <GetNextLowerTxDr+0x4a>
    {
        nextLowerDr = DR_5;
 80166a2:	230f      	movs	r3, #15
 80166a4:	18fb      	adds	r3, r7, r3
 80166a6:	2205      	movs	r2, #5
 80166a8:	701a      	strb	r2, [r3, #0]
 80166aa:	e005      	b.n	80166b8 <GetNextLowerTxDr+0x56>
    }
    else
    {
        nextLowerDr = dr - 1;
 80166ac:	1dfb      	adds	r3, r7, #7
 80166ae:	781a      	ldrb	r2, [r3, #0]
 80166b0:	230f      	movs	r3, #15
 80166b2:	18fb      	adds	r3, r7, r3
 80166b4:	3a01      	subs	r2, #1
 80166b6:	701a      	strb	r2, [r3, #0]
    }
    return nextLowerDr;
 80166b8:	230f      	movs	r3, #15
 80166ba:	18fb      	adds	r3, r7, r3
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	b25b      	sxtb	r3, r3
}
 80166c0:	0018      	movs	r0, r3
 80166c2:	46bd      	mov	sp, r7
 80166c4:	b004      	add	sp, #16
 80166c6:	bd80      	pop	{r7, pc}

080166c8 <GetBandwidth>:

static uint32_t GetBandwidth( uint32_t drIndex )
{
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
    switch( BandwidthsIN865[drIndex] )
 80166d0:	4b09      	ldr	r3, [pc, #36]	; (80166f8 <GetBandwidth+0x30>)
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	0092      	lsls	r2, r2, #2
 80166d6:	58d3      	ldr	r3, [r2, r3]
 80166d8:	4a08      	ldr	r2, [pc, #32]	; (80166fc <GetBandwidth+0x34>)
 80166da:	4293      	cmp	r3, r2
 80166dc:	d004      	beq.n	80166e8 <GetBandwidth+0x20>
 80166de:	4a08      	ldr	r2, [pc, #32]	; (8016700 <GetBandwidth+0x38>)
 80166e0:	4293      	cmp	r3, r2
 80166e2:	d003      	beq.n	80166ec <GetBandwidth+0x24>
    {
        default:
        case 125000:
            return 0;
 80166e4:	2300      	movs	r3, #0
 80166e6:	e002      	b.n	80166ee <GetBandwidth+0x26>
        case 250000:
            return 1;
 80166e8:	2301      	movs	r3, #1
 80166ea:	e000      	b.n	80166ee <GetBandwidth+0x26>
        case 500000:
            return 2;
 80166ec:	2302      	movs	r3, #2
    }
}
 80166ee:	0018      	movs	r0, r3
 80166f0:	46bd      	mov	sp, r7
 80166f2:	b002      	add	sp, #8
 80166f4:	bd80      	pop	{r7, pc}
 80166f6:	46c0      	nop			; (mov r8, r8)
 80166f8:	0801b44c 	.word	0x0801b44c
 80166fc:	0003d090 	.word	0x0003d090
 8016700:	0007a120 	.word	0x0007a120

08016704 <LimitTxPower>:

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8016704:	b590      	push	{r4, r7, lr}
 8016706:	b085      	sub	sp, #20
 8016708:	af00      	add	r7, sp, #0
 801670a:	0004      	movs	r4, r0
 801670c:	0008      	movs	r0, r1
 801670e:	0011      	movs	r1, r2
 8016710:	603b      	str	r3, [r7, #0]
 8016712:	1dfb      	adds	r3, r7, #7
 8016714:	1c22      	adds	r2, r4, #0
 8016716:	701a      	strb	r2, [r3, #0]
 8016718:	1dbb      	adds	r3, r7, #6
 801671a:	1c02      	adds	r2, r0, #0
 801671c:	701a      	strb	r2, [r3, #0]
 801671e:	1d7b      	adds	r3, r7, #5
 8016720:	1c0a      	adds	r2, r1, #0
 8016722:	701a      	strb	r2, [r3, #0]
    int8_t txPowerResult = txPower;
 8016724:	210f      	movs	r1, #15
 8016726:	187b      	adds	r3, r7, r1
 8016728:	1dfa      	adds	r2, r7, #7
 801672a:	7812      	ldrb	r2, [r2, #0]
 801672c:	701a      	strb	r2, [r3, #0]

    // Limit tx power to the band max
    txPowerResult =  MAX( txPower, maxBandTxPower );
 801672e:	187a      	adds	r2, r7, r1
 8016730:	1dbb      	adds	r3, r7, #6
 8016732:	1df9      	adds	r1, r7, #7
 8016734:	780c      	ldrb	r4, [r1, #0]
 8016736:	781b      	ldrb	r3, [r3, #0]
 8016738:	b258      	sxtb	r0, r3
 801673a:	b261      	sxtb	r1, r4
 801673c:	4288      	cmp	r0, r1
 801673e:	da00      	bge.n	8016742 <LimitTxPower+0x3e>
 8016740:	1c23      	adds	r3, r4, #0
 8016742:	7013      	strb	r3, [r2, #0]

    return txPowerResult;
 8016744:	230f      	movs	r3, #15
 8016746:	18fb      	adds	r3, r7, r3
 8016748:	781b      	ldrb	r3, [r3, #0]
 801674a:	b25b      	sxtb	r3, r3
}
 801674c:	0018      	movs	r0, r3
 801674e:	46bd      	mov	sp, r7
 8016750:	b005      	add	sp, #20
 8016752:	bd90      	pop	{r4, r7, pc}

08016754 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801675c:	4b0e      	ldr	r3, [pc, #56]	; (8016798 <VerifyRfFreq+0x44>)
 801675e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	0010      	movs	r0, r2
 8016764:	4798      	blx	r3
 8016766:	0003      	movs	r3, r0
 8016768:	001a      	movs	r2, r3
 801676a:	2301      	movs	r3, #1
 801676c:	4053      	eors	r3, r2
 801676e:	b2db      	uxtb	r3, r3
 8016770:	2b00      	cmp	r3, #0
 8016772:	d001      	beq.n	8016778 <VerifyRfFreq+0x24>
    {
        return false;
 8016774:	2300      	movs	r3, #0
 8016776:	e00a      	b.n	801678e <VerifyRfFreq+0x3a>
    }

    if( ( freq < 865000000 ) || ( freq > 867000000 ) )
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	4a08      	ldr	r2, [pc, #32]	; (801679c <VerifyRfFreq+0x48>)
 801677c:	4293      	cmp	r3, r2
 801677e:	d903      	bls.n	8016788 <VerifyRfFreq+0x34>
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	4a07      	ldr	r2, [pc, #28]	; (80167a0 <VerifyRfFreq+0x4c>)
 8016784:	4293      	cmp	r3, r2
 8016786:	d901      	bls.n	801678c <VerifyRfFreq+0x38>
    {
        return false;
 8016788:	2300      	movs	r3, #0
 801678a:	e000      	b.n	801678e <VerifyRfFreq+0x3a>
    }
    return true;
 801678c:	2301      	movs	r3, #1
}
 801678e:	0018      	movs	r0, r3
 8016790:	46bd      	mov	sp, r7
 8016792:	b002      	add	sp, #8
 8016794:	bd80      	pop	{r7, pc}
 8016796:	46c0      	nop			; (mov r8, r8)
 8016798:	0801acec 	.word	0x0801acec
 801679c:	338eda3f 	.word	0x338eda3f
 80167a0:	33ad5ec0 	.word	0x33ad5ec0

080167a4 <CountNbOfEnabledChannels>:

static uint8_t CountNbOfEnabledChannels( bool joined, uint8_t datarate, uint16_t* channelsMask, ChannelParams_t* channels, Band_t* bands, uint8_t* enabledChannels, uint8_t* delayTx )
{
 80167a4:	b5b0      	push	{r4, r5, r7, lr}
 80167a6:	b086      	sub	sp, #24
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	60ba      	str	r2, [r7, #8]
 80167ac:	607b      	str	r3, [r7, #4]
 80167ae:	230f      	movs	r3, #15
 80167b0:	18fb      	adds	r3, r7, r3
 80167b2:	1c02      	adds	r2, r0, #0
 80167b4:	701a      	strb	r2, [r3, #0]
 80167b6:	230e      	movs	r3, #14
 80167b8:	18fb      	adds	r3, r7, r3
 80167ba:	1c0a      	adds	r2, r1, #0
 80167bc:	701a      	strb	r2, [r3, #0]
    uint8_t nbEnabledChannels = 0;
 80167be:	2317      	movs	r3, #23
 80167c0:	18fb      	adds	r3, r7, r3
 80167c2:	2200      	movs	r2, #0
 80167c4:	701a      	strb	r2, [r3, #0]
    uint8_t delayTransmission = 0;
 80167c6:	2316      	movs	r3, #22
 80167c8:	18fb      	adds	r3, r7, r3
 80167ca:	2200      	movs	r2, #0
 80167cc:	701a      	strb	r2, [r3, #0]

    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 80167ce:	2315      	movs	r3, #21
 80167d0:	18fb      	adds	r3, r7, r3
 80167d2:	2200      	movs	r2, #0
 80167d4:	701a      	strb	r2, [r3, #0]
 80167d6:	2314      	movs	r3, #20
 80167d8:	18fb      	adds	r3, r7, r3
 80167da:	2200      	movs	r2, #0
 80167dc:	701a      	strb	r2, [r3, #0]
 80167de:	e0b4      	b.n	801694a <CountNbOfEnabledChannels+0x1a6>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80167e0:	2313      	movs	r3, #19
 80167e2:	18fb      	adds	r3, r7, r3
 80167e4:	2200      	movs	r2, #0
 80167e6:	701a      	strb	r2, [r3, #0]
 80167e8:	e09d      	b.n	8016926 <CountNbOfEnabledChannels+0x182>
        {
            if( ( channelsMask[k] & ( 1 << j ) ) != 0 )
 80167ea:	2314      	movs	r3, #20
 80167ec:	18fb      	adds	r3, r7, r3
 80167ee:	781b      	ldrb	r3, [r3, #0]
 80167f0:	005b      	lsls	r3, r3, #1
 80167f2:	68ba      	ldr	r2, [r7, #8]
 80167f4:	18d3      	adds	r3, r2, r3
 80167f6:	881b      	ldrh	r3, [r3, #0]
 80167f8:	001a      	movs	r2, r3
 80167fa:	2313      	movs	r3, #19
 80167fc:	18fb      	adds	r3, r7, r3
 80167fe:	781b      	ldrb	r3, [r3, #0]
 8016800:	411a      	asrs	r2, r3
 8016802:	0013      	movs	r3, r2
 8016804:	2201      	movs	r2, #1
 8016806:	4013      	ands	r3, r2
 8016808:	d100      	bne.n	801680c <CountNbOfEnabledChannels+0x68>
 801680a:	e086      	b.n	801691a <CountNbOfEnabledChannels+0x176>
            {
                if( channels[i + j].Frequency == 0 )
 801680c:	2315      	movs	r3, #21
 801680e:	18fb      	adds	r3, r7, r3
 8016810:	781a      	ldrb	r2, [r3, #0]
 8016812:	2313      	movs	r3, #19
 8016814:	18fb      	adds	r3, r7, r3
 8016816:	781b      	ldrb	r3, [r3, #0]
 8016818:	18d3      	adds	r3, r2, r3
 801681a:	001a      	movs	r2, r3
 801681c:	0013      	movs	r3, r2
 801681e:	005b      	lsls	r3, r3, #1
 8016820:	189b      	adds	r3, r3, r2
 8016822:	009b      	lsls	r3, r3, #2
 8016824:	001a      	movs	r2, r3
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	189b      	adds	r3, r3, r2
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d06f      	beq.n	8016910 <CountNbOfEnabledChannels+0x16c>
                { // Check if the channel is enabled
                    continue;
                }
                if( joined == false )
 8016830:	230f      	movs	r3, #15
 8016832:	18fb      	adds	r3, r7, r3
 8016834:	781b      	ldrb	r3, [r3, #0]
 8016836:	2201      	movs	r2, #1
 8016838:	4053      	eors	r3, r2
 801683a:	b2db      	uxtb	r3, r3
 801683c:	2b00      	cmp	r3, #0
 801683e:	d008      	beq.n	8016852 <CountNbOfEnabledChannels+0xae>
                {
                    if( ( IN865_JOIN_CHANNELS & ( 1 << j ) ) == 0 )
 8016840:	2313      	movs	r3, #19
 8016842:	18fb      	adds	r3, r7, r3
 8016844:	781b      	ldrb	r3, [r3, #0]
 8016846:	2207      	movs	r2, #7
 8016848:	411a      	asrs	r2, r3
 801684a:	0013      	movs	r3, r2
 801684c:	2201      	movs	r2, #1
 801684e:	4013      	ands	r3, r2
 8016850:	d060      	beq.n	8016914 <CountNbOfEnabledChannels+0x170>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 8016852:	230e      	movs	r3, #14
 8016854:	18fb      	adds	r3, r7, r3
 8016856:	2000      	movs	r0, #0
 8016858:	5618      	ldrsb	r0, [r3, r0]
 801685a:	2415      	movs	r4, #21
 801685c:	193b      	adds	r3, r7, r4
 801685e:	781a      	ldrb	r2, [r3, #0]
 8016860:	2513      	movs	r5, #19
 8016862:	197b      	adds	r3, r7, r5
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	18d3      	adds	r3, r2, r3
 8016868:	001a      	movs	r2, r3
 801686a:	0013      	movs	r3, r2
 801686c:	005b      	lsls	r3, r3, #1
 801686e:	189b      	adds	r3, r3, r2
 8016870:	009b      	lsls	r3, r3, #2
 8016872:	001a      	movs	r2, r3
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	189b      	adds	r3, r3, r2
 8016878:	7a1b      	ldrb	r3, [r3, #8]
 801687a:	011b      	lsls	r3, r3, #4
 801687c:	b25b      	sxtb	r3, r3
 801687e:	111b      	asrs	r3, r3, #4
 8016880:	b25b      	sxtb	r3, r3
 8016882:	0019      	movs	r1, r3
                                              channels[i + j].DrRange.Fields.Max ) == false )
 8016884:	193b      	adds	r3, r7, r4
 8016886:	781a      	ldrb	r2, [r3, #0]
 8016888:	197b      	adds	r3, r7, r5
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	18d3      	adds	r3, r2, r3
 801688e:	001a      	movs	r2, r3
 8016890:	0013      	movs	r3, r2
 8016892:	005b      	lsls	r3, r3, #1
 8016894:	189b      	adds	r3, r3, r2
 8016896:	009b      	lsls	r3, r3, #2
 8016898:	001a      	movs	r2, r3
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	189b      	adds	r3, r3, r2
 801689e:	7a1b      	ldrb	r3, [r3, #8]
 80168a0:	b25b      	sxtb	r3, r3
 80168a2:	111b      	asrs	r3, r3, #4
 80168a4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( datarate, channels[i + j].DrRange.Fields.Min,
 80168a6:	001a      	movs	r2, r3
 80168a8:	f7ff fa94 	bl	8015dd4 <RegionCommonValueInRange>
 80168ac:	1e03      	subs	r3, r0, #0
 80168ae:	d033      	beq.n	8016918 <CountNbOfEnabledChannels+0x174>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( bands[channels[i + j].Band].TimeOff > 0 )
 80168b0:	2315      	movs	r3, #21
 80168b2:	18fb      	adds	r3, r7, r3
 80168b4:	781a      	ldrb	r2, [r3, #0]
 80168b6:	2313      	movs	r3, #19
 80168b8:	18fb      	adds	r3, r7, r3
 80168ba:	781b      	ldrb	r3, [r3, #0]
 80168bc:	18d3      	adds	r3, r2, r3
 80168be:	001a      	movs	r2, r3
 80168c0:	0013      	movs	r3, r2
 80168c2:	005b      	lsls	r3, r3, #1
 80168c4:	189b      	adds	r3, r3, r2
 80168c6:	009b      	lsls	r3, r3, #2
 80168c8:	001a      	movs	r2, r3
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	189b      	adds	r3, r3, r2
 80168ce:	7a5b      	ldrb	r3, [r3, #9]
 80168d0:	011b      	lsls	r3, r3, #4
 80168d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80168d4:	18d3      	adds	r3, r2, r3
 80168d6:	68db      	ldr	r3, [r3, #12]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d006      	beq.n	80168ea <CountNbOfEnabledChannels+0x146>
                { // Check if the band is available for transmission
                    delayTransmission++;
 80168dc:	2116      	movs	r1, #22
 80168de:	187b      	adds	r3, r7, r1
 80168e0:	781a      	ldrb	r2, [r3, #0]
 80168e2:	187b      	adds	r3, r7, r1
 80168e4:	3201      	adds	r2, #1
 80168e6:	701a      	strb	r2, [r3, #0]
                    continue;
 80168e8:	e017      	b.n	801691a <CountNbOfEnabledChannels+0x176>
                }
                enabledChannels[nbEnabledChannels++] = i + j;
 80168ea:	2217      	movs	r2, #23
 80168ec:	18bb      	adds	r3, r7, r2
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	18ba      	adds	r2, r7, r2
 80168f2:	1c59      	adds	r1, r3, #1
 80168f4:	7011      	strb	r1, [r2, #0]
 80168f6:	001a      	movs	r2, r3
 80168f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fa:	189b      	adds	r3, r3, r2
 80168fc:	2215      	movs	r2, #21
 80168fe:	18b9      	adds	r1, r7, r2
 8016900:	2213      	movs	r2, #19
 8016902:	18ba      	adds	r2, r7, r2
 8016904:	7809      	ldrb	r1, [r1, #0]
 8016906:	7812      	ldrb	r2, [r2, #0]
 8016908:	188a      	adds	r2, r1, r2
 801690a:	b2d2      	uxtb	r2, r2
 801690c:	701a      	strb	r2, [r3, #0]
 801690e:	e004      	b.n	801691a <CountNbOfEnabledChannels+0x176>
                    continue;
 8016910:	46c0      	nop			; (mov r8, r8)
 8016912:	e002      	b.n	801691a <CountNbOfEnabledChannels+0x176>
                        continue;
 8016914:	46c0      	nop			; (mov r8, r8)
 8016916:	e000      	b.n	801691a <CountNbOfEnabledChannels+0x176>
                    continue;
 8016918:	46c0      	nop			; (mov r8, r8)
        for( uint8_t j = 0; j < 16; j++ )
 801691a:	2113      	movs	r1, #19
 801691c:	187b      	adds	r3, r7, r1
 801691e:	781a      	ldrb	r2, [r3, #0]
 8016920:	187b      	adds	r3, r7, r1
 8016922:	3201      	adds	r2, #1
 8016924:	701a      	strb	r2, [r3, #0]
 8016926:	2313      	movs	r3, #19
 8016928:	18fb      	adds	r3, r7, r3
 801692a:	781b      	ldrb	r3, [r3, #0]
 801692c:	2b0f      	cmp	r3, #15
 801692e:	d800      	bhi.n	8016932 <CountNbOfEnabledChannels+0x18e>
 8016930:	e75b      	b.n	80167ea <CountNbOfEnabledChannels+0x46>
    for( uint8_t i = 0, k = 0; i < IN865_MAX_NB_CHANNELS; i += 16, k++ )
 8016932:	2215      	movs	r2, #21
 8016934:	18bb      	adds	r3, r7, r2
 8016936:	18ba      	adds	r2, r7, r2
 8016938:	7812      	ldrb	r2, [r2, #0]
 801693a:	3210      	adds	r2, #16
 801693c:	701a      	strb	r2, [r3, #0]
 801693e:	2114      	movs	r1, #20
 8016940:	187b      	adds	r3, r7, r1
 8016942:	781a      	ldrb	r2, [r3, #0]
 8016944:	187b      	adds	r3, r7, r1
 8016946:	3201      	adds	r2, #1
 8016948:	701a      	strb	r2, [r3, #0]
 801694a:	2315      	movs	r3, #21
 801694c:	18fb      	adds	r3, r7, r3
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	2b0f      	cmp	r3, #15
 8016952:	d800      	bhi.n	8016956 <CountNbOfEnabledChannels+0x1b2>
 8016954:	e744      	b.n	80167e0 <CountNbOfEnabledChannels+0x3c>
            }
        }
    }

    *delayTx = delayTransmission;
 8016956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016958:	2216      	movs	r2, #22
 801695a:	18ba      	adds	r2, r7, r2
 801695c:	7812      	ldrb	r2, [r2, #0]
 801695e:	701a      	strb	r2, [r3, #0]
    return nbEnabledChannels;
 8016960:	2317      	movs	r3, #23
 8016962:	18fb      	adds	r3, r7, r3
 8016964:	781b      	ldrb	r3, [r3, #0]
}
 8016966:	0018      	movs	r0, r3
 8016968:	46bd      	mov	sp, r7
 801696a:	b006      	add	sp, #24
 801696c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08016970 <RegionIN865GetPhyParam>:

PhyParam_t RegionIN865GetPhyParam( GetPhyParams_t* getPhy )
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b084      	sub	sp, #16
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016978:	2308      	movs	r3, #8
 801697a:	18fb      	adds	r3, r7, r3
 801697c:	2200      	movs	r2, #0
 801697e:	601a      	str	r2, [r3, #0]

    switch( getPhy->Attribute )
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	781b      	ldrb	r3, [r3, #0]
 8016984:	2b35      	cmp	r3, #53	; 0x35
 8016986:	d900      	bls.n	801698a <RegionIN865GetPhyParam+0x1a>
 8016988:	e0cd      	b.n	8016b26 <RegionIN865GetPhyParam+0x1b6>
 801698a:	009a      	lsls	r2, r3, #2
 801698c:	4b6d      	ldr	r3, [pc, #436]	; (8016b44 <RegionIN865GetPhyParam+0x1d4>)
 801698e:	18d3      	adds	r3, r2, r3
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	469f      	mov	pc, r3
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = IN865_RX_MIN_DATARATE;
 8016994:	2308      	movs	r3, #8
 8016996:	18fb      	adds	r3, r7, r3
 8016998:	2200      	movs	r2, #0
 801699a:	601a      	str	r2, [r3, #0]
            break;
 801699c:	e0c4      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = IN865_TX_MIN_DATARATE;
 801699e:	2308      	movs	r3, #8
 80169a0:	18fb      	adds	r3, r7, r3
 80169a2:	2200      	movs	r2, #0
 80169a4:	601a      	str	r2, [r3, #0]
            break;
 80169a6:	e0bf      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = IN865_DEFAULT_DATARATE;
 80169a8:	2308      	movs	r3, #8
 80169aa:	18fb      	adds	r3, r7, r3
 80169ac:	2200      	movs	r2, #0
 80169ae:	601a      	str	r2, [r3, #0]
            break;
 80169b0:	e0ba      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, IN865_TX_MIN_DATARATE );
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	785b      	ldrb	r3, [r3, #1]
 80169b6:	b25b      	sxtb	r3, r3
 80169b8:	2100      	movs	r1, #0
 80169ba:	0018      	movs	r0, r3
 80169bc:	f7ff fe51 	bl	8016662 <GetNextLowerTxDr>
 80169c0:	0003      	movs	r3, r0
 80169c2:	001a      	movs	r2, r3
 80169c4:	2308      	movs	r3, #8
 80169c6:	18fb      	adds	r3, r7, r3
 80169c8:	601a      	str	r2, [r3, #0]
            break;
 80169ca:	e0ad      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = IN865_MAX_TX_POWER;
 80169cc:	2308      	movs	r3, #8
 80169ce:	18fb      	adds	r3, r7, r3
 80169d0:	2200      	movs	r2, #0
 80169d2:	601a      	str	r2, [r3, #0]
            break;
 80169d4:	e0a8      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = IN865_DEFAULT_TX_POWER;
 80169d6:	2308      	movs	r3, #8
 80169d8:	18fb      	adds	r3, r7, r3
 80169da:	2200      	movs	r2, #0
 80169dc:	601a      	str	r2, [r3, #0]
            break;
 80169de:	e0a3      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = IN865_ADR_ACK_LIMIT;
 80169e0:	2308      	movs	r3, #8
 80169e2:	18fb      	adds	r3, r7, r3
 80169e4:	2240      	movs	r2, #64	; 0x40
 80169e6:	601a      	str	r2, [r3, #0]
            break;
 80169e8:	e09e      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = IN865_ADR_ACK_DELAY;
 80169ea:	2308      	movs	r3, #8
 80169ec:	18fb      	adds	r3, r7, r3
 80169ee:	2220      	movs	r2, #32
 80169f0:	601a      	str	r2, [r3, #0]
            break;
 80169f2:	e099      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateIN865[getPhy->Datarate];
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	785b      	ldrb	r3, [r3, #1]
 80169f8:	b25b      	sxtb	r3, r3
 80169fa:	001a      	movs	r2, r3
 80169fc:	4b52      	ldr	r3, [pc, #328]	; (8016b48 <RegionIN865GetPhyParam+0x1d8>)
 80169fe:	5c9b      	ldrb	r3, [r3, r2]
 8016a00:	001a      	movs	r2, r3
 8016a02:	2308      	movs	r3, #8
 8016a04:	18fb      	adds	r3, r7, r3
 8016a06:	601a      	str	r2, [r3, #0]
            break;
 8016a08:	e08e      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterIN865[getPhy->Datarate];
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	785b      	ldrb	r3, [r3, #1]
 8016a0e:	b25b      	sxtb	r3, r3
 8016a10:	001a      	movs	r2, r3
 8016a12:	4b4e      	ldr	r3, [pc, #312]	; (8016b4c <RegionIN865GetPhyParam+0x1dc>)
 8016a14:	5c9b      	ldrb	r3, [r3, r2]
 8016a16:	001a      	movs	r2, r3
 8016a18:	2308      	movs	r3, #8
 8016a1a:	18fb      	adds	r3, r7, r3
 8016a1c:	601a      	str	r2, [r3, #0]
            break;
 8016a1e:	e083      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = IN865_DUTY_CYCLE_ENABLED;
 8016a20:	2308      	movs	r3, #8
 8016a22:	18fb      	adds	r3, r7, r3
 8016a24:	2201      	movs	r2, #1
 8016a26:	601a      	str	r2, [r3, #0]
            break;
 8016a28:	e07e      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = IN865_MAX_RX_WINDOW;
 8016a2a:	2308      	movs	r3, #8
 8016a2c:	18fb      	adds	r3, r7, r3
 8016a2e:	4a48      	ldr	r2, [pc, #288]	; (8016b50 <RegionIN865GetPhyParam+0x1e0>)
 8016a30:	601a      	str	r2, [r3, #0]
            break;
 8016a32:	e079      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = IN865_RECEIVE_DELAY1;
 8016a34:	2308      	movs	r3, #8
 8016a36:	18fb      	adds	r3, r7, r3
 8016a38:	22fa      	movs	r2, #250	; 0xfa
 8016a3a:	0092      	lsls	r2, r2, #2
 8016a3c:	601a      	str	r2, [r3, #0]
            break;
 8016a3e:	e073      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = IN865_RECEIVE_DELAY2;
 8016a40:	2308      	movs	r3, #8
 8016a42:	18fb      	adds	r3, r7, r3
 8016a44:	22fa      	movs	r2, #250	; 0xfa
 8016a46:	00d2      	lsls	r2, r2, #3
 8016a48:	601a      	str	r2, [r3, #0]
            break;
 8016a4a:	e06d      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY1;
 8016a4c:	2308      	movs	r3, #8
 8016a4e:	18fb      	adds	r3, r7, r3
 8016a50:	4a40      	ldr	r2, [pc, #256]	; (8016b54 <RegionIN865GetPhyParam+0x1e4>)
 8016a52:	601a      	str	r2, [r3, #0]
            break;
 8016a54:	e068      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = IN865_JOIN_ACCEPT_DELAY2;
 8016a56:	2308      	movs	r3, #8
 8016a58:	18fb      	adds	r3, r7, r3
 8016a5a:	4a3f      	ldr	r2, [pc, #252]	; (8016b58 <RegionIN865GetPhyParam+0x1e8>)
 8016a5c:	601a      	str	r2, [r3, #0]
            break;
 8016a5e:	e063      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = IN865_MAX_FCNT_GAP;
 8016a60:	2308      	movs	r3, #8
 8016a62:	18fb      	adds	r3, r7, r3
 8016a64:	2280      	movs	r2, #128	; 0x80
 8016a66:	01d2      	lsls	r2, r2, #7
 8016a68:	601a      	str	r2, [r3, #0]
            break;
 8016a6a:	e05d      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( IN865_ACKTIMEOUT + randr( -IN865_ACK_TIMEOUT_RND, IN865_ACK_TIMEOUT_RND ) );
 8016a6c:	23fa      	movs	r3, #250	; 0xfa
 8016a6e:	009b      	lsls	r3, r3, #2
 8016a70:	4a3a      	ldr	r2, [pc, #232]	; (8016b5c <RegionIN865GetPhyParam+0x1ec>)
 8016a72:	0019      	movs	r1, r3
 8016a74:	0010      	movs	r0, r2
 8016a76:	f002 fed5 	bl	8019824 <randr>
 8016a7a:	0003      	movs	r3, r0
 8016a7c:	22fa      	movs	r2, #250	; 0xfa
 8016a7e:	00d2      	lsls	r2, r2, #3
 8016a80:	4694      	mov	ip, r2
 8016a82:	4463      	add	r3, ip
 8016a84:	001a      	movs	r2, r3
 8016a86:	2308      	movs	r3, #8
 8016a88:	18fb      	adds	r3, r7, r3
 8016a8a:	601a      	str	r2, [r3, #0]
            break;
 8016a8c:	e04c      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = IN865_DEFAULT_RX1_DR_OFFSET;
 8016a8e:	2308      	movs	r3, #8
 8016a90:	18fb      	adds	r3, r7, r3
 8016a92:	2200      	movs	r2, #0
 8016a94:	601a      	str	r2, [r3, #0]
            break;
 8016a96:	e047      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = IN865_RX_WND_2_FREQ;
 8016a98:	2308      	movs	r3, #8
 8016a9a:	18fb      	adds	r3, r7, r3
 8016a9c:	4a30      	ldr	r2, [pc, #192]	; (8016b60 <RegionIN865GetPhyParam+0x1f0>)
 8016a9e:	601a      	str	r2, [r3, #0]
            break;
 8016aa0:	e042      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = IN865_RX_WND_2_DR;
 8016aa2:	2308      	movs	r3, #8
 8016aa4:	18fb      	adds	r3, r7, r3
 8016aa6:	2202      	movs	r2, #2
 8016aa8:	601a      	str	r2, [r3, #0]
            break;
 8016aaa:	e03d      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 8016aac:	2308      	movs	r3, #8
 8016aae:	18fb      	adds	r3, r7, r3
 8016ab0:	4a2c      	ldr	r2, [pc, #176]	; (8016b64 <RegionIN865GetPhyParam+0x1f4>)
 8016ab2:	601a      	str	r2, [r3, #0]
            break;
 8016ab4:	e038      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 8016ab6:	2308      	movs	r3, #8
 8016ab8:	18fb      	adds	r3, r7, r3
 8016aba:	4a2b      	ldr	r2, [pc, #172]	; (8016b68 <RegionIN865GetPhyParam+0x1f8>)
 8016abc:	601a      	str	r2, [r3, #0]
            break;
 8016abe:	e033      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = IN865_MAX_NB_CHANNELS;
 8016ac0:	2308      	movs	r3, #8
 8016ac2:	18fb      	adds	r3, r7, r3
 8016ac4:	2210      	movs	r2, #16
 8016ac6:	601a      	str	r2, [r3, #0]
            break;
 8016ac8:	e02e      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = NvmCtx.Channels;
 8016aca:	2308      	movs	r3, #8
 8016acc:	18fb      	adds	r3, r7, r3
 8016ace:	4a27      	ldr	r2, [pc, #156]	; (8016b6c <RegionIN865GetPhyParam+0x1fc>)
 8016ad0:	601a      	str	r2, [r3, #0]
            break;
 8016ad2:	e029      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = 0;
 8016ad4:	2308      	movs	r3, #8
 8016ad6:	18fb      	adds	r3, r7, r3
 8016ad8:	2200      	movs	r2, #0
 8016ada:	601a      	str	r2, [r3, #0]
            break;
 8016adc:	e024      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = IN865_DEFAULT_MAX_EIRP;
 8016ade:	2308      	movs	r3, #8
 8016ae0:	18fb      	adds	r3, r7, r3
 8016ae2:	4a23      	ldr	r2, [pc, #140]	; (8016b70 <RegionIN865GetPhyParam+0x200>)
 8016ae4:	601a      	str	r2, [r3, #0]
            break;
 8016ae6:	e01f      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = IN865_DEFAULT_ANTENNA_GAIN;
 8016ae8:	2308      	movs	r3, #8
 8016aea:	18fb      	adds	r3, r7, r3
 8016aec:	4a21      	ldr	r2, [pc, #132]	; (8016b74 <RegionIN865GetPhyParam+0x204>)
 8016aee:	601a      	str	r2, [r3, #0]
            break;
 8016af0:	e01a      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_FREQ;
 8016af2:	2308      	movs	r3, #8
 8016af4:	18fb      	adds	r3, r7, r3
 8016af6:	4a1a      	ldr	r2, [pc, #104]	; (8016b60 <RegionIN865GetPhyParam+0x1f0>)
 8016af8:	601a      	str	r2, [r3, #0]
            break;
 8016afa:	e015      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = IN865_BEACON_SIZE;
 8016afc:	2108      	movs	r1, #8
 8016afe:	187b      	adds	r3, r7, r1
 8016b00:	2213      	movs	r2, #19
 8016b02:	701a      	strb	r2, [r3, #0]
            phyParam.BeaconFormat.Rfu1Size = IN865_RFU1_SIZE;
 8016b04:	187b      	adds	r3, r7, r1
 8016b06:	2201      	movs	r2, #1
 8016b08:	705a      	strb	r2, [r3, #1]
            phyParam.BeaconFormat.Rfu2Size = IN865_RFU2_SIZE;
 8016b0a:	187b      	adds	r3, r7, r1
 8016b0c:	2203      	movs	r2, #3
 8016b0e:	709a      	strb	r2, [r3, #2]
            break;
 8016b10:	e00a      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = IN865_BEACON_CHANNEL_DR;
 8016b12:	2308      	movs	r3, #8
 8016b14:	18fb      	adds	r3, r7, r3
 8016b16:	2204      	movs	r2, #4
 8016b18:	601a      	str	r2, [r3, #0]
            break;
 8016b1a:	e005      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = IN865_PING_SLOT_CHANNEL_DR;
 8016b1c:	2308      	movs	r3, #8
 8016b1e:	18fb      	adds	r3, r7, r3
 8016b20:	2204      	movs	r2, #4
 8016b22:	601a      	str	r2, [r3, #0]
            break;
 8016b24:	e000      	b.n	8016b28 <RegionIN865GetPhyParam+0x1b8>
        }
        default:
        {
            break;
 8016b26:	46c0      	nop			; (mov r8, r8)
        }
    }

    return phyParam;
 8016b28:	210c      	movs	r1, #12
 8016b2a:	187b      	adds	r3, r7, r1
 8016b2c:	2208      	movs	r2, #8
 8016b2e:	18ba      	adds	r2, r7, r2
 8016b30:	6812      	ldr	r2, [r2, #0]
 8016b32:	601a      	str	r2, [r3, #0]
 8016b34:	187b      	adds	r3, r7, r1
 8016b36:	2200      	movs	r2, #0
 8016b38:	681a      	ldr	r2, [r3, #0]
 8016b3a:	0013      	movs	r3, r2
}
 8016b3c:	0018      	movs	r0, r3
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	b004      	add	sp, #16
 8016b42:	bd80      	pop	{r7, pc}
 8016b44:	0801b484 	.word	0x0801b484
 8016b48:	0801b46c 	.word	0x0801b46c
 8016b4c:	0801b474 	.word	0x0801b474
 8016b50:	00000bb8 	.word	0x00000bb8
 8016b54:	00001388 	.word	0x00001388
 8016b58:	00001770 	.word	0x00001770
 8016b5c:	fffffc18 	.word	0xfffffc18
 8016b60:	33a680f0 	.word	0x33a680f0
 8016b64:	20001194 	.word	0x20001194
 8016b68:	20001196 	.word	0x20001196
 8016b6c:	200010c4 	.word	0x200010c4
 8016b70:	41f00000 	.word	0x41f00000
 8016b74:	4009999a 	.word	0x4009999a

08016b78 <RegionIN865SetBandTxDone>:

void RegionIN865SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b082      	sub	sp, #8
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
    RegionCommonSetBandTxDone( txDone->Joined, &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band], txDone->LastTxDoneTime );
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	7858      	ldrb	r0, [r3, #1]
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	781b      	ldrb	r3, [r3, #0]
 8016b88:	0019      	movs	r1, r3
 8016b8a:	4a0a      	ldr	r2, [pc, #40]	; (8016bb4 <RegionIN865SetBandTxDone+0x3c>)
 8016b8c:	000b      	movs	r3, r1
 8016b8e:	005b      	lsls	r3, r3, #1
 8016b90:	185b      	adds	r3, r3, r1
 8016b92:	009b      	lsls	r3, r3, #2
 8016b94:	18d3      	adds	r3, r2, r3
 8016b96:	3309      	adds	r3, #9
 8016b98:	781b      	ldrb	r3, [r3, #0]
 8016b9a:	330c      	adds	r3, #12
 8016b9c:	011a      	lsls	r2, r3, #4
 8016b9e:	4b05      	ldr	r3, [pc, #20]	; (8016bb4 <RegionIN865SetBandTxDone+0x3c>)
 8016ba0:	18d1      	adds	r1, r2, r3
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	685b      	ldr	r3, [r3, #4]
 8016ba6:	001a      	movs	r2, r3
 8016ba8:	f7ff f9ec 	bl	8015f84 <RegionCommonSetBandTxDone>
}
 8016bac:	46c0      	nop			; (mov r8, r8)
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	b002      	add	sp, #8
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	200010c4 	.word	0x200010c4

08016bb8 <RegionIN865InitDefaults>:

void RegionIN865InitDefaults( InitDefaultsParams_t* params )
{
 8016bb8:	b590      	push	{r4, r7, lr}
 8016bba:	b087      	sub	sp, #28
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
    Band_t bands[IN865_MAX_NB_BANDS] =
 8016bc0:	2108      	movs	r1, #8
 8016bc2:	187b      	adds	r3, r7, r1
 8016bc4:	2201      	movs	r2, #1
 8016bc6:	801a      	strh	r2, [r3, #0]
 8016bc8:	187b      	adds	r3, r7, r1
 8016bca:	2200      	movs	r2, #0
 8016bcc:	709a      	strb	r2, [r3, #2]
 8016bce:	187b      	adds	r3, r7, r1
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	605a      	str	r2, [r3, #4]
 8016bd4:	187b      	adds	r3, r7, r1
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	609a      	str	r2, [r3, #8]
 8016bda:	187b      	adds	r3, r7, r1
 8016bdc:	2200      	movs	r2, #0
 8016bde:	60da      	str	r2, [r3, #12]
    {
        IN865_BAND0
    };

    switch( params->Type )
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	791b      	ldrb	r3, [r3, #4]
 8016be4:	2b01      	cmp	r3, #1
 8016be6:	d030      	beq.n	8016c4a <RegionIN865InitDefaults+0x92>
 8016be8:	2b02      	cmp	r3, #2
 8016bea:	d022      	beq.n	8016c32 <RegionIN865InitDefaults+0x7a>
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d000      	beq.n	8016bf2 <RegionIN865InitDefaults+0x3a>
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
            break;
        }
        default:
        {
            break;
 8016bf0:	e046      	b.n	8016c80 <RegionIN865InitDefaults+0xc8>
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * IN865_MAX_NB_BANDS );
 8016bf2:	2308      	movs	r3, #8
 8016bf4:	18f9      	adds	r1, r7, r3
 8016bf6:	4b24      	ldr	r3, [pc, #144]	; (8016c88 <RegionIN865InitDefaults+0xd0>)
 8016bf8:	2210      	movs	r2, #16
 8016bfa:	0018      	movs	r0, r3
 8016bfc:	f002 fe28 	bl	8019850 <memcpy1>
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8016c00:	4b22      	ldr	r3, [pc, #136]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c02:	4a23      	ldr	r2, [pc, #140]	; (8016c90 <RegionIN865InitDefaults+0xd8>)
 8016c04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8016c06:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8016c08:	4b20      	ldr	r3, [pc, #128]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c0a:	4a22      	ldr	r2, [pc, #136]	; (8016c94 <RegionIN865InitDefaults+0xdc>)
 8016c0c:	330c      	adds	r3, #12
 8016c0e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8016c10:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8016c12:	4b1e      	ldr	r3, [pc, #120]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c14:	4a20      	ldr	r2, [pc, #128]	; (8016c98 <RegionIN865InitDefaults+0xe0>)
 8016c16:	3318      	adds	r3, #24
 8016c18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8016c1a:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8016c1c:	4b1b      	ldr	r3, [pc, #108]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c1e:	22d2      	movs	r2, #210	; 0xd2
 8016c20:	2107      	movs	r1, #7
 8016c22:	5299      	strh	r1, [r3, r2]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, 1 );
 8016c24:	491d      	ldr	r1, [pc, #116]	; (8016c9c <RegionIN865InitDefaults+0xe4>)
 8016c26:	4b1e      	ldr	r3, [pc, #120]	; (8016ca0 <RegionIN865InitDefaults+0xe8>)
 8016c28:	2201      	movs	r2, #1
 8016c2a:	0018      	movs	r0, r3
 8016c2c:	f7ff f97b 	bl	8015f26 <RegionCommonChanMaskCopy>
            break;
 8016c30:	e026      	b.n	8016c80 <RegionIN865InitDefaults+0xc8>
            if( params->NvmCtx != 0 )
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d021      	beq.n	8016c7e <RegionIN865InitDefaults+0xc6>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6819      	ldr	r1, [r3, #0]
 8016c3e:	4b13      	ldr	r3, [pc, #76]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c40:	22d4      	movs	r2, #212	; 0xd4
 8016c42:	0018      	movs	r0, r3
 8016c44:	f002 fe04 	bl	8019850 <memcpy1>
            break;
 8016c48:	e019      	b.n	8016c7e <RegionIN865InitDefaults+0xc6>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 8016c4a:	4b10      	ldr	r3, [pc, #64]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c4c:	22d0      	movs	r2, #208	; 0xd0
 8016c4e:	5a9a      	ldrh	r2, [r3, r2]
 8016c50:	4b0e      	ldr	r3, [pc, #56]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c52:	21d2      	movs	r1, #210	; 0xd2
 8016c54:	5a5b      	ldrh	r3, [r3, r1]
 8016c56:	4313      	orrs	r3, r2
 8016c58:	b299      	uxth	r1, r3
 8016c5a:	4b0c      	ldr	r3, [pc, #48]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c5c:	22d0      	movs	r2, #208	; 0xd0
 8016c5e:	5299      	strh	r1, [r3, r2]
            NvmCtx.Channels[0] = ( ChannelParams_t ) IN865_LC1;
 8016c60:	4b0a      	ldr	r3, [pc, #40]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c62:	4a0b      	ldr	r2, [pc, #44]	; (8016c90 <RegionIN865InitDefaults+0xd8>)
 8016c64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8016c66:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[1] = ( ChannelParams_t ) IN865_LC2;
 8016c68:	4b08      	ldr	r3, [pc, #32]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c6a:	4a0a      	ldr	r2, [pc, #40]	; (8016c94 <RegionIN865InitDefaults+0xdc>)
 8016c6c:	330c      	adds	r3, #12
 8016c6e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8016c70:	c313      	stmia	r3!, {r0, r1, r4}
            NvmCtx.Channels[2] = ( ChannelParams_t ) IN865_LC3;
 8016c72:	4b06      	ldr	r3, [pc, #24]	; (8016c8c <RegionIN865InitDefaults+0xd4>)
 8016c74:	4a08      	ldr	r2, [pc, #32]	; (8016c98 <RegionIN865InitDefaults+0xe0>)
 8016c76:	3318      	adds	r3, #24
 8016c78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8016c7a:	c313      	stmia	r3!, {r0, r1, r4}
            break;
 8016c7c:	e000      	b.n	8016c80 <RegionIN865InitDefaults+0xc8>
            break;
 8016c7e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016c80:	46c0      	nop			; (mov r8, r8)
 8016c82:	46bd      	mov	sp, r7
 8016c84:	b007      	add	sp, #28
 8016c86:	bd90      	pop	{r4, r7, pc}
 8016c88:	20001184 	.word	0x20001184
 8016c8c:	200010c4 	.word	0x200010c4
 8016c90:	0801a5dc 	.word	0x0801a5dc
 8016c94:	0801a5e8 	.word	0x0801a5e8
 8016c98:	0801a5f4 	.word	0x0801a5f4
 8016c9c:	20001196 	.word	0x20001196
 8016ca0:	20001194 	.word	0x20001194

08016ca4 <RegionIN865GetNvmCtx>:

void* RegionIN865GetNvmCtx( GetNvmCtxParams_t* params )
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
    params->nvmCtxSize = sizeof( RegionIN865NvmCtx_t );
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	22d4      	movs	r2, #212	; 0xd4
 8016cb0:	601a      	str	r2, [r3, #0]
    return &NvmCtx;
 8016cb2:	4b02      	ldr	r3, [pc, #8]	; (8016cbc <RegionIN865GetNvmCtx+0x18>)
}
 8016cb4:	0018      	movs	r0, r3
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	b002      	add	sp, #8
 8016cba:	bd80      	pop	{r7, pc}
 8016cbc:	200010c4 	.word	0x200010c4

08016cc0 <RegionIN865Verify>:

bool RegionIN865Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b082      	sub	sp, #8
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	000a      	movs	r2, r1
 8016cca:	1cfb      	adds	r3, r7, #3
 8016ccc:	701a      	strb	r2, [r3, #0]
    switch( phyAttribute )
 8016cce:	1cfb      	adds	r3, r7, #3
 8016cd0:	781b      	ldrb	r3, [r3, #0]
 8016cd2:	2b0f      	cmp	r3, #15
 8016cd4:	d84f      	bhi.n	8016d76 <RegionIN865Verify+0xb6>
 8016cd6:	009a      	lsls	r2, r3, #2
 8016cd8:	4b29      	ldr	r3, [pc, #164]	; (8016d80 <RegionIN865Verify+0xc0>)
 8016cda:	18d3      	adds	r3, r2, r3
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	469f      	mov	pc, r3
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	0018      	movs	r0, r3
 8016ce6:	f7ff fd35 	bl	8016754 <VerifyRfFreq>
 8016cea:	0003      	movs	r3, r0
 8016cec:	e044      	b.n	8016d78 <RegionIN865Verify+0xb8>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	781b      	ldrb	r3, [r3, #0]
 8016cf2:	b25b      	sxtb	r3, r3
 8016cf4:	2b06      	cmp	r3, #6
 8016cf6:	d101      	bne.n	8016cfc <RegionIN865Verify+0x3c>
            {// DR_6 is not supported by this region
                return false;
 8016cf8:	2300      	movs	r3, #0
 8016cfa:	e03d      	b.n	8016d78 <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE );
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	781b      	ldrb	r3, [r3, #0]
 8016d00:	b25b      	sxtb	r3, r3
 8016d02:	2207      	movs	r2, #7
 8016d04:	2100      	movs	r1, #0
 8016d06:	0018      	movs	r0, r3
 8016d08:	f7ff f864 	bl	8015dd4 <RegionCommonValueInRange>
 8016d0c:	0003      	movs	r3, r0
 8016d0e:	1e5a      	subs	r2, r3, #1
 8016d10:	4193      	sbcs	r3, r2
 8016d12:	b2db      	uxtb	r3, r3
 8016d14:	e030      	b.n	8016d78 <RegionIN865Verify+0xb8>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	b25b      	sxtb	r3, r3
 8016d1c:	2205      	movs	r2, #5
 8016d1e:	2100      	movs	r1, #0
 8016d20:	0018      	movs	r0, r3
 8016d22:	f7ff f857 	bl	8015dd4 <RegionCommonValueInRange>
 8016d26:	0003      	movs	r3, r0
 8016d28:	1e5a      	subs	r2, r3, #1
 8016d2a:	4193      	sbcs	r3, r2
 8016d2c:	b2db      	uxtb	r3, r3
 8016d2e:	e023      	b.n	8016d78 <RegionIN865Verify+0xb8>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.Datarate == DR_6 )
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	781b      	ldrb	r3, [r3, #0]
 8016d34:	b25b      	sxtb	r3, r3
 8016d36:	2b06      	cmp	r3, #6
 8016d38:	d101      	bne.n	8016d3e <RegionIN865Verify+0x7e>
            {// DR_6 is not supported by this region
                return false;
 8016d3a:	2300      	movs	r3, #0
 8016d3c:	e01c      	b.n	8016d78 <RegionIN865Verify+0xb8>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE );
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	b25b      	sxtb	r3, r3
 8016d44:	2207      	movs	r2, #7
 8016d46:	2100      	movs	r1, #0
 8016d48:	0018      	movs	r0, r3
 8016d4a:	f7ff f843 	bl	8015dd4 <RegionCommonValueInRange>
 8016d4e:	0003      	movs	r3, r0
 8016d50:	1e5a      	subs	r2, r3, #1
 8016d52:	4193      	sbcs	r3, r2
 8016d54:	b2db      	uxtb	r3, r3
 8016d56:	e00f      	b.n	8016d78 <RegionIN865Verify+0xb8>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, IN865_MAX_TX_POWER, IN865_MIN_TX_POWER );
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	781b      	ldrb	r3, [r3, #0]
 8016d5c:	b25b      	sxtb	r3, r3
 8016d5e:	220a      	movs	r2, #10
 8016d60:	2100      	movs	r1, #0
 8016d62:	0018      	movs	r0, r3
 8016d64:	f7ff f836 	bl	8015dd4 <RegionCommonValueInRange>
 8016d68:	0003      	movs	r3, r0
 8016d6a:	1e5a      	subs	r2, r3, #1
 8016d6c:	4193      	sbcs	r3, r2
 8016d6e:	b2db      	uxtb	r3, r3
 8016d70:	e002      	b.n	8016d78 <RegionIN865Verify+0xb8>
        }
        case PHY_DUTY_CYCLE:
        {
            return IN865_DUTY_CYCLE_ENABLED;
 8016d72:	2301      	movs	r3, #1
 8016d74:	e000      	b.n	8016d78 <RegionIN865Verify+0xb8>
        }
        default:
            return false;
 8016d76:	2300      	movs	r3, #0
    }
}
 8016d78:	0018      	movs	r0, r3
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	b002      	add	sp, #8
 8016d7e:	bd80      	pop	{r7, pc}
 8016d80:	0801b55c 	.word	0x0801b55c

08016d84 <RegionIN865ApplyCFList>:

void RegionIN865ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016d84:	b590      	push	{r4, r7, lr}
 8016d86:	b08b      	sub	sp, #44	; 0x2c
 8016d88:	af00      	add	r7, sp, #0
 8016d8a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8016d8c:	2318      	movs	r3, #24
 8016d8e:	18fb      	adds	r3, r7, r3
 8016d90:	2250      	movs	r2, #80	; 0x50
 8016d92:	721a      	strb	r2, [r3, #8]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	791b      	ldrb	r3, [r3, #4]
 8016d98:	2b10      	cmp	r3, #16
 8016d9a:	d000      	beq.n	8016d9e <RegionIN865ApplyCFList+0x1a>
 8016d9c:	e07d      	b.n	8016e9a <RegionIN865ApplyCFList+0x116>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	330f      	adds	r3, #15
 8016da4:	781b      	ldrb	r3, [r3, #0]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d000      	beq.n	8016dac <RegionIN865ApplyCFList+0x28>
 8016daa:	e078      	b.n	8016e9e <RegionIN865ApplyCFList+0x11a>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016dac:	2327      	movs	r3, #39	; 0x27
 8016dae:	18fb      	adds	r3, r7, r3
 8016db0:	2200      	movs	r2, #0
 8016db2:	701a      	strb	r2, [r3, #0]
 8016db4:	2326      	movs	r3, #38	; 0x26
 8016db6:	18fb      	adds	r3, r7, r3
 8016db8:	2203      	movs	r2, #3
 8016dba:	701a      	strb	r2, [r3, #0]
 8016dbc:	e067      	b.n	8016e8e <RegionIN865ApplyCFList+0x10a>
    {
        if( chanIdx < ( IN865_NUMB_CHANNELS_CF_LIST + IN865_NUMB_DEFAULT_CHANNELS ) )
 8016dbe:	2326      	movs	r3, #38	; 0x26
 8016dc0:	18fb      	adds	r3, r7, r3
 8016dc2:	781b      	ldrb	r3, [r3, #0]
 8016dc4:	2b07      	cmp	r3, #7
 8016dc6:	d82e      	bhi.n	8016e26 <RegionIN865ApplyCFList+0xa2>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	2427      	movs	r4, #39	; 0x27
 8016dce:	193b      	adds	r3, r7, r4
 8016dd0:	781b      	ldrb	r3, [r3, #0]
 8016dd2:	18d3      	adds	r3, r2, r3
 8016dd4:	781b      	ldrb	r3, [r3, #0]
 8016dd6:	001a      	movs	r2, r3
 8016dd8:	2018      	movs	r0, #24
 8016dda:	183b      	adds	r3, r7, r0
 8016ddc:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8016dde:	183b      	adds	r3, r7, r0
 8016de0:	681a      	ldr	r2, [r3, #0]
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	6819      	ldr	r1, [r3, #0]
 8016de6:	193b      	adds	r3, r7, r4
 8016de8:	781b      	ldrb	r3, [r3, #0]
 8016dea:	3301      	adds	r3, #1
 8016dec:	18cb      	adds	r3, r1, r3
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	021b      	lsls	r3, r3, #8
 8016df2:	431a      	orrs	r2, r3
 8016df4:	183b      	adds	r3, r7, r0
 8016df6:	601a      	str	r2, [r3, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8016df8:	183b      	adds	r3, r7, r0
 8016dfa:	681a      	ldr	r2, [r3, #0]
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6819      	ldr	r1, [r3, #0]
 8016e00:	193b      	adds	r3, r7, r4
 8016e02:	781b      	ldrb	r3, [r3, #0]
 8016e04:	3302      	adds	r3, #2
 8016e06:	18cb      	adds	r3, r1, r3
 8016e08:	781b      	ldrb	r3, [r3, #0]
 8016e0a:	041b      	lsls	r3, r3, #16
 8016e0c:	431a      	orrs	r2, r3
 8016e0e:	183b      	adds	r3, r7, r0
 8016e10:	601a      	str	r2, [r3, #0]
            newChannel.Frequency *= 100;
 8016e12:	183b      	adds	r3, r7, r0
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	2264      	movs	r2, #100	; 0x64
 8016e18:	435a      	muls	r2, r3
 8016e1a:	183b      	adds	r3, r7, r0
 8016e1c:	601a      	str	r2, [r3, #0]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8016e1e:	183b      	adds	r3, r7, r0
 8016e20:	2200      	movs	r2, #0
 8016e22:	605a      	str	r2, [r3, #4]
 8016e24:	e009      	b.n	8016e3a <RegionIN865ApplyCFList+0xb6>
        }
        else
        {
            newChannel.Frequency = 0;
 8016e26:	2118      	movs	r1, #24
 8016e28:	187b      	adds	r3, r7, r1
 8016e2a:	2200      	movs	r2, #0
 8016e2c:	601a      	str	r2, [r3, #0]
            newChannel.DrRange.Value = 0;
 8016e2e:	187b      	adds	r3, r7, r1
 8016e30:	2200      	movs	r2, #0
 8016e32:	721a      	strb	r2, [r3, #8]
            newChannel.Rx1Frequency = 0;
 8016e34:	187b      	adds	r3, r7, r1
 8016e36:	2200      	movs	r2, #0
 8016e38:	605a      	str	r2, [r3, #4]
        }

        if( newChannel.Frequency != 0 )
 8016e3a:	2318      	movs	r3, #24
 8016e3c:	18fb      	adds	r3, r7, r3
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d00e      	beq.n	8016e62 <RegionIN865ApplyCFList+0xde>
        {
            channelAdd.NewChannel = &newChannel;
 8016e44:	2110      	movs	r1, #16
 8016e46:	187b      	adds	r3, r7, r1
 8016e48:	2218      	movs	r2, #24
 8016e4a:	18ba      	adds	r2, r7, r2
 8016e4c:	601a      	str	r2, [r3, #0]
            channelAdd.ChannelId = chanIdx;
 8016e4e:	187b      	adds	r3, r7, r1
 8016e50:	2226      	movs	r2, #38	; 0x26
 8016e52:	18ba      	adds	r2, r7, r2
 8016e54:	7812      	ldrb	r2, [r2, #0]
 8016e56:	711a      	strb	r2, [r3, #4]

            // Try to add all channels
            RegionIN865ChannelAdd( &channelAdd );
 8016e58:	187b      	adds	r3, r7, r1
 8016e5a:	0018      	movs	r0, r3
 8016e5c:	f000 fdbe 	bl	80179dc <RegionIN865ChannelAdd>
 8016e60:	e009      	b.n	8016e76 <RegionIN865ApplyCFList+0xf2>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8016e62:	210c      	movs	r1, #12
 8016e64:	187b      	adds	r3, r7, r1
 8016e66:	2226      	movs	r2, #38	; 0x26
 8016e68:	18ba      	adds	r2, r7, r2
 8016e6a:	7812      	ldrb	r2, [r2, #0]
 8016e6c:	701a      	strb	r2, [r3, #0]

            RegionIN865ChannelsRemove( &channelRemove );
 8016e6e:	187b      	adds	r3, r7, r1
 8016e70:	0018      	movs	r0, r3
 8016e72:	f000 fe6d 	bl	8017b50 <RegionIN865ChannelsRemove>
    for( uint8_t i = 0, chanIdx = IN865_NUMB_DEFAULT_CHANNELS; chanIdx < IN865_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8016e76:	2227      	movs	r2, #39	; 0x27
 8016e78:	18bb      	adds	r3, r7, r2
 8016e7a:	18ba      	adds	r2, r7, r2
 8016e7c:	7812      	ldrb	r2, [r2, #0]
 8016e7e:	3203      	adds	r2, #3
 8016e80:	701a      	strb	r2, [r3, #0]
 8016e82:	2126      	movs	r1, #38	; 0x26
 8016e84:	187b      	adds	r3, r7, r1
 8016e86:	781a      	ldrb	r2, [r3, #0]
 8016e88:	187b      	adds	r3, r7, r1
 8016e8a:	3201      	adds	r2, #1
 8016e8c:	701a      	strb	r2, [r3, #0]
 8016e8e:	2326      	movs	r3, #38	; 0x26
 8016e90:	18fb      	adds	r3, r7, r3
 8016e92:	781b      	ldrb	r3, [r3, #0]
 8016e94:	2b0f      	cmp	r3, #15
 8016e96:	d992      	bls.n	8016dbe <RegionIN865ApplyCFList+0x3a>
 8016e98:	e002      	b.n	8016ea0 <RegionIN865ApplyCFList+0x11c>
        return;
 8016e9a:	46c0      	nop			; (mov r8, r8)
 8016e9c:	e000      	b.n	8016ea0 <RegionIN865ApplyCFList+0x11c>
        return;
 8016e9e:	46c0      	nop			; (mov r8, r8)
        }
    }
}
 8016ea0:	46bd      	mov	sp, r7
 8016ea2:	b00b      	add	sp, #44	; 0x2c
 8016ea4:	bd90      	pop	{r4, r7, pc}
	...

08016ea8 <RegionIN865ChanMaskSet>:

bool RegionIN865ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
    switch( chanMaskSet->ChannelsMaskType )
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	791b      	ldrb	r3, [r3, #4]
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d002      	beq.n	8016ebe <RegionIN865ChanMaskSet+0x16>
 8016eb8:	2b01      	cmp	r3, #1
 8016eba:	d008      	beq.n	8016ece <RegionIN865ChanMaskSet+0x26>
 8016ebc:	e00f      	b.n	8016ede <RegionIN865ChanMaskSet+0x36>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	6819      	ldr	r1, [r3, #0]
 8016ec2:	4b0a      	ldr	r3, [pc, #40]	; (8016eec <RegionIN865ChanMaskSet+0x44>)
 8016ec4:	2201      	movs	r2, #1
 8016ec6:	0018      	movs	r0, r3
 8016ec8:	f7ff f82d 	bl	8015f26 <RegionCommonChanMaskCopy>
            break;
 8016ecc:	e009      	b.n	8016ee2 <RegionIN865ChanMaskSet+0x3a>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	6819      	ldr	r1, [r3, #0]
 8016ed2:	4b07      	ldr	r3, [pc, #28]	; (8016ef0 <RegionIN865ChanMaskSet+0x48>)
 8016ed4:	2201      	movs	r2, #1
 8016ed6:	0018      	movs	r0, r3
 8016ed8:	f7ff f825 	bl	8015f26 <RegionCommonChanMaskCopy>
            break;
 8016edc:	e001      	b.n	8016ee2 <RegionIN865ChanMaskSet+0x3a>
        }
        default:
            return false;
 8016ede:	2300      	movs	r3, #0
 8016ee0:	e000      	b.n	8016ee4 <RegionIN865ChanMaskSet+0x3c>
    }
    return true;
 8016ee2:	2301      	movs	r3, #1
}
 8016ee4:	0018      	movs	r0, r3
 8016ee6:	46bd      	mov	sp, r7
 8016ee8:	b002      	add	sp, #8
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	20001194 	.word	0x20001194
 8016ef0:	20001196 	.word	0x20001196

08016ef4 <RegionIN865ComputeRxWindowParameters>:

void RegionIN865ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ef6:	b08b      	sub	sp, #44	; 0x2c
 8016ef8:	af04      	add	r7, sp, #16
 8016efa:	60ba      	str	r2, [r7, #8]
 8016efc:	607b      	str	r3, [r7, #4]
 8016efe:	250f      	movs	r5, #15
 8016f00:	197b      	adds	r3, r7, r5
 8016f02:	1c02      	adds	r2, r0, #0
 8016f04:	701a      	strb	r2, [r3, #0]
 8016f06:	230e      	movs	r3, #14
 8016f08:	18fb      	adds	r3, r7, r3
 8016f0a:	1c0a      	adds	r2, r1, #0
 8016f0c:	701a      	strb	r2, [r3, #0]
    double tSymbol = 0.0;
 8016f0e:	2300      	movs	r3, #0
 8016f10:	2400      	movs	r4, #0
 8016f12:	613b      	str	r3, [r7, #16]
 8016f14:	617c      	str	r4, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, IN865_RX_MAX_DATARATE );
 8016f16:	197b      	adds	r3, r7, r5
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	b25a      	sxtb	r2, r3
 8016f1c:	2a07      	cmp	r2, #7
 8016f1e:	dd00      	ble.n	8016f22 <RegionIN865ComputeRxWindowParameters+0x2e>
 8016f20:	2307      	movs	r3, #7
 8016f22:	b25a      	sxtb	r2, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	785b      	ldrb	r3, [r3, #1]
 8016f2c:	b25b      	sxtb	r3, r3
 8016f2e:	0018      	movs	r0, r3
 8016f30:	f7ff fbca 	bl	80166c8 <GetBandwidth>
 8016f34:	0003      	movs	r3, r0
 8016f36:	b2da      	uxtb	r2, r3
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	785b      	ldrb	r3, [r3, #1]
 8016f40:	b25b      	sxtb	r3, r3
 8016f42:	2b07      	cmp	r3, #7
 8016f44:	d10d      	bne.n	8016f62 <RegionIN865ComputeRxWindowParameters+0x6e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesIN865[rxConfigParams->Datarate] );
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	785b      	ldrb	r3, [r3, #1]
 8016f4a:	b25b      	sxtb	r3, r3
 8016f4c:	001a      	movs	r2, r3
 8016f4e:	4b1b      	ldr	r3, [pc, #108]	; (8016fbc <RegionIN865ComputeRxWindowParameters+0xc8>)
 8016f50:	5c9b      	ldrb	r3, [r3, r2]
 8016f52:	0018      	movs	r0, r3
 8016f54:	f7ff fa20 	bl	8016398 <RegionCommonComputeSymbolTimeFsk>
 8016f58:	0003      	movs	r3, r0
 8016f5a:	000c      	movs	r4, r1
 8016f5c:	613b      	str	r3, [r7, #16]
 8016f5e:	617c      	str	r4, [r7, #20]
 8016f60:	e013      	b.n	8016f8a <RegionIN865ComputeRxWindowParameters+0x96>
    }
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesIN865[rxConfigParams->Datarate], BandwidthsIN865[rxConfigParams->Datarate] );
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	785b      	ldrb	r3, [r3, #1]
 8016f66:	b25b      	sxtb	r3, r3
 8016f68:	001a      	movs	r2, r3
 8016f6a:	4b14      	ldr	r3, [pc, #80]	; (8016fbc <RegionIN865ComputeRxWindowParameters+0xc8>)
 8016f6c:	5c98      	ldrb	r0, [r3, r2]
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	785b      	ldrb	r3, [r3, #1]
 8016f72:	b25b      	sxtb	r3, r3
 8016f74:	001a      	movs	r2, r3
 8016f76:	4b12      	ldr	r3, [pc, #72]	; (8016fc0 <RegionIN865ComputeRxWindowParameters+0xcc>)
 8016f78:	0092      	lsls	r2, r2, #2
 8016f7a:	58d3      	ldr	r3, [r2, r3]
 8016f7c:	0019      	movs	r1, r3
 8016f7e:	f7ff f9df 	bl	8016340 <RegionCommonComputeSymbolTimeLoRa>
 8016f82:	0003      	movs	r3, r0
 8016f84:	000c      	movs	r4, r1
 8016f86:	613b      	str	r3, [r7, #16]
 8016f88:	617c      	str	r4, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016f8a:	4b0e      	ldr	r3, [pc, #56]	; (8016fc4 <RegionIN865ComputeRxWindowParameters+0xd0>)
 8016f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f8e:	4798      	blx	r3
 8016f90:	0006      	movs	r6, r0
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	3308      	adds	r3, #8
 8016f96:	687a      	ldr	r2, [r7, #4]
 8016f98:	320c      	adds	r2, #12
 8016f9a:	68bd      	ldr	r5, [r7, #8]
 8016f9c:	210e      	movs	r1, #14
 8016f9e:	1879      	adds	r1, r7, r1
 8016fa0:	780c      	ldrb	r4, [r1, #0]
 8016fa2:	6938      	ldr	r0, [r7, #16]
 8016fa4:	6979      	ldr	r1, [r7, #20]
 8016fa6:	9202      	str	r2, [sp, #8]
 8016fa8:	9301      	str	r3, [sp, #4]
 8016faa:	9600      	str	r6, [sp, #0]
 8016fac:	002b      	movs	r3, r5
 8016fae:	0022      	movs	r2, r4
 8016fb0:	f7ff fa0e 	bl	80163d0 <RegionCommonComputeRxWindowParameters>
}
 8016fb4:	46c0      	nop			; (mov r8, r8)
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	b007      	add	sp, #28
 8016fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fbc:	0801b444 	.word	0x0801b444
 8016fc0:	0801b44c 	.word	0x0801b44c
 8016fc4:	0801acec 	.word	0x0801acec

08016fc8 <RegionIN865RxConfig>:

bool RegionIN865RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016fca:	b091      	sub	sp, #68	; 0x44
 8016fcc:	af0a      	add	r7, sp, #40	; 0x28
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8016fd2:	230f      	movs	r3, #15
 8016fd4:	18fb      	adds	r3, r7, r3
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	7852      	ldrb	r2, [r2, #1]
 8016fda:	701a      	strb	r2, [r3, #0]
    uint8_t maxPayload = 0;
 8016fdc:	2316      	movs	r3, #22
 8016fde:	18fb      	adds	r3, r7, r3
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	701a      	strb	r2, [r3, #0]
    int8_t phyDr = 0;
 8016fe4:	230e      	movs	r3, #14
 8016fe6:	18fb      	adds	r3, r7, r3
 8016fe8:	2200      	movs	r2, #0
 8016fea:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = rxConfig->Frequency;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	685b      	ldr	r3, [r3, #4]
 8016ff0:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016ff2:	4b64      	ldr	r3, [pc, #400]	; (8017184 <RegionIN865RxConfig+0x1bc>)
 8016ff4:	68db      	ldr	r3, [r3, #12]
 8016ff6:	4798      	blx	r3
 8016ff8:	1e03      	subs	r3, r0, #0
 8016ffa:	d001      	beq.n	8017000 <RegionIN865RxConfig+0x38>
    {
        return false;
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	e0bc      	b.n	801717a <RegionIN865RxConfig+0x1b2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	7cdb      	ldrb	r3, [r3, #19]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d122      	bne.n	801704e <RegionIN865RxConfig+0x86>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	781b      	ldrb	r3, [r3, #0]
 801700c:	0019      	movs	r1, r3
 801700e:	4a5e      	ldr	r2, [pc, #376]	; (8017188 <RegionIN865RxConfig+0x1c0>)
 8017010:	000b      	movs	r3, r1
 8017012:	005b      	lsls	r3, r3, #1
 8017014:	185b      	adds	r3, r3, r1
 8017016:	009b      	lsls	r3, r3, #2
 8017018:	589b      	ldr	r3, [r3, r2]
 801701a:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	781b      	ldrb	r3, [r3, #0]
 8017020:	0019      	movs	r1, r3
 8017022:	4a59      	ldr	r2, [pc, #356]	; (8017188 <RegionIN865RxConfig+0x1c0>)
 8017024:	000b      	movs	r3, r1
 8017026:	005b      	lsls	r3, r3, #1
 8017028:	185b      	adds	r3, r3, r1
 801702a:	009b      	lsls	r3, r3, #2
 801702c:	18d3      	adds	r3, r2, r3
 801702e:	3304      	adds	r3, #4
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d00b      	beq.n	801704e <RegionIN865RxConfig+0x86>
        {
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	781b      	ldrb	r3, [r3, #0]
 801703a:	0019      	movs	r1, r3
 801703c:	4a52      	ldr	r2, [pc, #328]	; (8017188 <RegionIN865RxConfig+0x1c0>)
 801703e:	000b      	movs	r3, r1
 8017040:	005b      	lsls	r3, r3, #1
 8017042:	185b      	adds	r3, r3, r1
 8017044:	009b      	lsls	r3, r3, #2
 8017046:	18d3      	adds	r3, r2, r3
 8017048:	3304      	adds	r3, #4
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesIN865[dr];
 801704e:	240f      	movs	r4, #15
 8017050:	193b      	adds	r3, r7, r4
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	b25b      	sxtb	r3, r3
 8017056:	4a4d      	ldr	r2, [pc, #308]	; (801718c <RegionIN865RxConfig+0x1c4>)
 8017058:	5cd2      	ldrb	r2, [r2, r3]
 801705a:	230e      	movs	r3, #14
 801705c:	18fb      	adds	r3, r7, r3
 801705e:	701a      	strb	r2, [r3, #0]

    Radio.SetChannel( frequency );
 8017060:	4b48      	ldr	r3, [pc, #288]	; (8017184 <RegionIN865RxConfig+0x1bc>)
 8017062:	695b      	ldr	r3, [r3, #20]
 8017064:	693a      	ldr	r2, [r7, #16]
 8017066:	0010      	movs	r0, r2
 8017068:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801706a:	193b      	adds	r3, r7, r4
 801706c:	781b      	ldrb	r3, [r3, #0]
 801706e:	b25b      	sxtb	r3, r3
 8017070:	2b07      	cmp	r3, #7
 8017072:	d12f      	bne.n	80170d4 <RegionIN865RxConfig+0x10c>
    {
        modem = MODEM_FSK;
 8017074:	2117      	movs	r1, #23
 8017076:	187b      	adds	r3, r7, r1
 8017078:	2200      	movs	r2, #0
 801707a:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801707c:	4b41      	ldr	r3, [pc, #260]	; (8017184 <RegionIN865RxConfig+0x1bc>)
 801707e:	6a1c      	ldr	r4, [r3, #32]
 8017080:	230e      	movs	r3, #14
 8017082:	18fb      	adds	r3, r7, r3
 8017084:	2200      	movs	r2, #0
 8017086:	569a      	ldrsb	r2, [r3, r2]
 8017088:	0013      	movs	r3, r2
 801708a:	015b      	lsls	r3, r3, #5
 801708c:	1a9b      	subs	r3, r3, r2
 801708e:	009b      	lsls	r3, r3, #2
 8017090:	189b      	adds	r3, r3, r2
 8017092:	00db      	lsls	r3, r3, #3
 8017094:	001e      	movs	r6, r3
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	689b      	ldr	r3, [r3, #8]
 801709a:	b29b      	uxth	r3, r3
 801709c:	687a      	ldr	r2, [r7, #4]
 801709e:	7c92      	ldrb	r2, [r2, #18]
 80170a0:	4d3b      	ldr	r5, [pc, #236]	; (8017190 <RegionIN865RxConfig+0x1c8>)
 80170a2:	1879      	adds	r1, r7, r1
 80170a4:	7808      	ldrb	r0, [r1, #0]
 80170a6:	9209      	str	r2, [sp, #36]	; 0x24
 80170a8:	2200      	movs	r2, #0
 80170aa:	9208      	str	r2, [sp, #32]
 80170ac:	2200      	movs	r2, #0
 80170ae:	9207      	str	r2, [sp, #28]
 80170b0:	2200      	movs	r2, #0
 80170b2:	9206      	str	r2, [sp, #24]
 80170b4:	2201      	movs	r2, #1
 80170b6:	9205      	str	r2, [sp, #20]
 80170b8:	2200      	movs	r2, #0
 80170ba:	9204      	str	r2, [sp, #16]
 80170bc:	2200      	movs	r2, #0
 80170be:	9203      	str	r2, [sp, #12]
 80170c0:	9302      	str	r3, [sp, #8]
 80170c2:	2305      	movs	r3, #5
 80170c4:	9301      	str	r3, [sp, #4]
 80170c6:	4b33      	ldr	r3, [pc, #204]	; (8017194 <RegionIN865RxConfig+0x1cc>)
 80170c8:	9300      	str	r3, [sp, #0]
 80170ca:	2300      	movs	r3, #0
 80170cc:	0032      	movs	r2, r6
 80170ce:	0029      	movs	r1, r5
 80170d0:	47a0      	blx	r4
 80170d2:	e029      	b.n	8017128 <RegionIN865RxConfig+0x160>
    }
    else
    {
        modem = MODEM_LORA;
 80170d4:	2117      	movs	r1, #23
 80170d6:	187b      	adds	r3, r7, r1
 80170d8:	2201      	movs	r2, #1
 80170da:	701a      	strb	r2, [r3, #0]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80170dc:	4b29      	ldr	r3, [pc, #164]	; (8017184 <RegionIN865RxConfig+0x1bc>)
 80170de:	6a1c      	ldr	r4, [r3, #32]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	789b      	ldrb	r3, [r3, #2]
 80170e4:	001e      	movs	r6, r3
 80170e6:	230e      	movs	r3, #14
 80170e8:	18fb      	adds	r3, r7, r3
 80170ea:	2500      	movs	r5, #0
 80170ec:	575d      	ldrsb	r5, [r3, r5]
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	689b      	ldr	r3, [r3, #8]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	687a      	ldr	r2, [r7, #4]
 80170f6:	7c92      	ldrb	r2, [r2, #18]
 80170f8:	1879      	adds	r1, r7, r1
 80170fa:	7808      	ldrb	r0, [r1, #0]
 80170fc:	9209      	str	r2, [sp, #36]	; 0x24
 80170fe:	2201      	movs	r2, #1
 8017100:	9208      	str	r2, [sp, #32]
 8017102:	2200      	movs	r2, #0
 8017104:	9207      	str	r2, [sp, #28]
 8017106:	2200      	movs	r2, #0
 8017108:	9206      	str	r2, [sp, #24]
 801710a:	2200      	movs	r2, #0
 801710c:	9205      	str	r2, [sp, #20]
 801710e:	2200      	movs	r2, #0
 8017110:	9204      	str	r2, [sp, #16]
 8017112:	2200      	movs	r2, #0
 8017114:	9203      	str	r2, [sp, #12]
 8017116:	9302      	str	r3, [sp, #8]
 8017118:	2308      	movs	r3, #8
 801711a:	9301      	str	r3, [sp, #4]
 801711c:	2300      	movs	r3, #0
 801711e:	9300      	str	r3, [sp, #0]
 8017120:	2301      	movs	r3, #1
 8017122:	002a      	movs	r2, r5
 8017124:	0031      	movs	r1, r6
 8017126:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	7c5b      	ldrb	r3, [r3, #17]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d009      	beq.n	8017144 <RegionIN865RxConfig+0x17c>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterIN865[dr];
 8017130:	230f      	movs	r3, #15
 8017132:	18fb      	adds	r3, r7, r3
 8017134:	2200      	movs	r2, #0
 8017136:	569a      	ldrsb	r2, [r3, r2]
 8017138:	2316      	movs	r3, #22
 801713a:	18fb      	adds	r3, r7, r3
 801713c:	4916      	ldr	r1, [pc, #88]	; (8017198 <RegionIN865RxConfig+0x1d0>)
 801713e:	5c8a      	ldrb	r2, [r1, r2]
 8017140:	701a      	strb	r2, [r3, #0]
 8017142:	e008      	b.n	8017156 <RegionIN865RxConfig+0x18e>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateIN865[dr];
 8017144:	230f      	movs	r3, #15
 8017146:	18fb      	adds	r3, r7, r3
 8017148:	2200      	movs	r2, #0
 801714a:	569a      	ldrsb	r2, [r3, r2]
 801714c:	2316      	movs	r3, #22
 801714e:	18fb      	adds	r3, r7, r3
 8017150:	4912      	ldr	r1, [pc, #72]	; (801719c <RegionIN865RxConfig+0x1d4>)
 8017152:	5c8a      	ldrb	r2, [r1, r2]
 8017154:	701a      	strb	r2, [r3, #0]
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORA_MAC_FRMPAYLOAD_OVERHEAD );
 8017156:	4b0b      	ldr	r3, [pc, #44]	; (8017184 <RegionIN865RxConfig+0x1bc>)
 8017158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801715a:	2216      	movs	r2, #22
 801715c:	18ba      	adds	r2, r7, r2
 801715e:	7812      	ldrb	r2, [r2, #0]
 8017160:	320d      	adds	r2, #13
 8017162:	b2d1      	uxtb	r1, r2
 8017164:	2217      	movs	r2, #23
 8017166:	18ba      	adds	r2, r7, r2
 8017168:	7812      	ldrb	r2, [r2, #0]
 801716a:	0010      	movs	r0, r2
 801716c:	4798      	blx	r3
    TVL1( PRINTF( "RX on freq %d Hz at DR %d\n\r", frequency, dr );)

    *datarate = (uint8_t) dr;
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	220f      	movs	r2, #15
 8017172:	18ba      	adds	r2, r7, r2
 8017174:	7812      	ldrb	r2, [r2, #0]
 8017176:	701a      	strb	r2, [r3, #0]
    return true;
 8017178:	2301      	movs	r3, #1
}
 801717a:	0018      	movs	r0, r3
 801717c:	46bd      	mov	sp, r7
 801717e:	b007      	add	sp, #28
 8017180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017182:	46c0      	nop			; (mov r8, r8)
 8017184:	0801acec 	.word	0x0801acec
 8017188:	200010c4 	.word	0x200010c4
 801718c:	0801b444 	.word	0x0801b444
 8017190:	0000c350 	.word	0x0000c350
 8017194:	00014585 	.word	0x00014585
 8017198:	0801b474 	.word	0x0801b474
 801719c:	0801b46c 	.word	0x0801b46c

080171a0 <RegionIN865TxConfig>:

bool RegionIN865TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80171a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171a2:	b093      	sub	sp, #76	; 0x4c
 80171a4:	af0a      	add	r7, sp, #40	; 0x28
 80171a6:	60f8      	str	r0, [r7, #12]
 80171a8:	60b9      	str	r1, [r7, #8]
 80171aa:	607a      	str	r2, [r7, #4]
    RadioModems_t modem;
    int8_t phyDr = DataratesIN865[txConfig->Datarate];
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	785b      	ldrb	r3, [r3, #1]
 80171b0:	b25b      	sxtb	r3, r3
 80171b2:	001a      	movs	r2, r3
 80171b4:	4b61      	ldr	r3, [pc, #388]	; (801733c <RegionIN865TxConfig+0x19c>)
 80171b6:	5c9a      	ldrb	r2, [r3, r2]
 80171b8:	231e      	movs	r3, #30
 80171ba:	18fb      	adds	r3, r7, r3
 80171bc:	701a      	strb	r2, [r3, #0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	2002      	movs	r0, #2
 80171c2:	5618      	ldrsb	r0, [r3, r0]
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	781b      	ldrb	r3, [r3, #0]
 80171c8:	0019      	movs	r1, r3
 80171ca:	4a5d      	ldr	r2, [pc, #372]	; (8017340 <RegionIN865TxConfig+0x1a0>)
 80171cc:	000b      	movs	r3, r1
 80171ce:	005b      	lsls	r3, r3, #1
 80171d0:	185b      	adds	r3, r3, r1
 80171d2:	009b      	lsls	r3, r3, #2
 80171d4:	18d3      	adds	r3, r2, r3
 80171d6:	3309      	adds	r3, #9
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	4a59      	ldr	r2, [pc, #356]	; (8017340 <RegionIN865TxConfig+0x1a0>)
 80171dc:	330c      	adds	r3, #12
 80171de:	011b      	lsls	r3, r3, #4
 80171e0:	18d3      	adds	r3, r2, r3
 80171e2:	3302      	adds	r3, #2
 80171e4:	2100      	movs	r1, #0
 80171e6:	5659      	ldrsb	r1, [r3, r1]
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2201      	movs	r2, #1
 80171ec:	569a      	ldrsb	r2, [r3, r2]
 80171ee:	251d      	movs	r5, #29
 80171f0:	197c      	adds	r4, r7, r5
 80171f2:	4b54      	ldr	r3, [pc, #336]	; (8017344 <RegionIN865TxConfig+0x1a4>)
 80171f4:	f7ff fa86 	bl	8016704 <LimitTxPower>
 80171f8:	0003      	movs	r3, r0
 80171fa:	7023      	strb	r3, [r4, #0]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	785b      	ldrb	r3, [r3, #1]
 8017200:	b25b      	sxtb	r3, r3
 8017202:	0018      	movs	r0, r3
 8017204:	f7ff fa60 	bl	80166c8 <GetBandwidth>
 8017208:	0003      	movs	r3, r0
 801720a:	61bb      	str	r3, [r7, #24]
    int8_t phyTxPower = 0;
 801720c:	2017      	movs	r0, #23
 801720e:	183b      	adds	r3, r7, r0
 8017210:	2200      	movs	r2, #0
 8017212:	701a      	strb	r2, [r3, #0]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	6859      	ldr	r1, [r3, #4]
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	689a      	ldr	r2, [r3, #8]
 801721c:	183c      	adds	r4, r7, r0
 801721e:	197b      	adds	r3, r7, r5
 8017220:	781b      	ldrb	r3, [r3, #0]
 8017222:	b25b      	sxtb	r3, r3
 8017224:	0018      	movs	r0, r3
 8017226:	f7ff f957 	bl	80164d8 <RegionCommonComputeTxPower>
 801722a:	0003      	movs	r3, r0
 801722c:	7023      	strb	r3, [r4, #0]

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 801722e:	4b46      	ldr	r3, [pc, #280]	; (8017348 <RegionIN865TxConfig+0x1a8>)
 8017230:	695a      	ldr	r2, [r3, #20]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	781b      	ldrb	r3, [r3, #0]
 8017236:	0018      	movs	r0, r3
 8017238:	4941      	ldr	r1, [pc, #260]	; (8017340 <RegionIN865TxConfig+0x1a0>)
 801723a:	0003      	movs	r3, r0
 801723c:	005b      	lsls	r3, r3, #1
 801723e:	181b      	adds	r3, r3, r0
 8017240:	009b      	lsls	r3, r3, #2
 8017242:	585b      	ldr	r3, [r3, r1]
 8017244:	0018      	movs	r0, r3
 8017246:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	785b      	ldrb	r3, [r3, #1]
 801724c:	b25b      	sxtb	r3, r3
 801724e:	2b07      	cmp	r3, #7
 8017250:	d12e      	bne.n	80172b0 <RegionIN865TxConfig+0x110>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8017252:	201f      	movs	r0, #31
 8017254:	183b      	adds	r3, r7, r0
 8017256:	2200      	movs	r2, #0
 8017258:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801725a:	4b3b      	ldr	r3, [pc, #236]	; (8017348 <RegionIN865TxConfig+0x1a8>)
 801725c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801725e:	231e      	movs	r3, #30
 8017260:	18fb      	adds	r3, r7, r3
 8017262:	2200      	movs	r2, #0
 8017264:	569a      	ldrsb	r2, [r3, r2]
 8017266:	0013      	movs	r3, r2
 8017268:	015b      	lsls	r3, r3, #5
 801726a:	1a9b      	subs	r3, r3, r2
 801726c:	009b      	lsls	r3, r3, #2
 801726e:	189b      	adds	r3, r3, r2
 8017270:	00db      	lsls	r3, r3, #3
 8017272:	001d      	movs	r5, r3
 8017274:	69ba      	ldr	r2, [r7, #24]
 8017276:	4e35      	ldr	r6, [pc, #212]	; (801734c <RegionIN865TxConfig+0x1ac>)
 8017278:	2317      	movs	r3, #23
 801727a:	18fb      	adds	r3, r7, r3
 801727c:	2100      	movs	r1, #0
 801727e:	5659      	ldrsb	r1, [r3, r1]
 8017280:	183b      	adds	r3, r7, r0
 8017282:	7818      	ldrb	r0, [r3, #0]
 8017284:	23fa      	movs	r3, #250	; 0xfa
 8017286:	011b      	lsls	r3, r3, #4
 8017288:	9308      	str	r3, [sp, #32]
 801728a:	2300      	movs	r3, #0
 801728c:	9307      	str	r3, [sp, #28]
 801728e:	2300      	movs	r3, #0
 8017290:	9306      	str	r3, [sp, #24]
 8017292:	2300      	movs	r3, #0
 8017294:	9305      	str	r3, [sp, #20]
 8017296:	2301      	movs	r3, #1
 8017298:	9304      	str	r3, [sp, #16]
 801729a:	2300      	movs	r3, #0
 801729c:	9303      	str	r3, [sp, #12]
 801729e:	2305      	movs	r3, #5
 80172a0:	9302      	str	r3, [sp, #8]
 80172a2:	2300      	movs	r3, #0
 80172a4:	9301      	str	r3, [sp, #4]
 80172a6:	9500      	str	r5, [sp, #0]
 80172a8:	0013      	movs	r3, r2
 80172aa:	0032      	movs	r2, r6
 80172ac:	47a0      	blx	r4
 80172ae:	e025      	b.n	80172fc <RegionIN865TxConfig+0x15c>
    }
    else
    {
        modem = MODEM_LORA;
 80172b0:	201f      	movs	r0, #31
 80172b2:	183b      	adds	r3, r7, r0
 80172b4:	2201      	movs	r2, #1
 80172b6:	701a      	strb	r2, [r3, #0]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80172b8:	4b23      	ldr	r3, [pc, #140]	; (8017348 <RegionIN865TxConfig+0x1a8>)
 80172ba:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80172bc:	231e      	movs	r3, #30
 80172be:	18fb      	adds	r3, r7, r3
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	b25b      	sxtb	r3, r3
 80172c4:	69bd      	ldr	r5, [r7, #24]
 80172c6:	2217      	movs	r2, #23
 80172c8:	18ba      	adds	r2, r7, r2
 80172ca:	2100      	movs	r1, #0
 80172cc:	5651      	ldrsb	r1, [r2, r1]
 80172ce:	183a      	adds	r2, r7, r0
 80172d0:	7810      	ldrb	r0, [r2, #0]
 80172d2:	22fa      	movs	r2, #250	; 0xfa
 80172d4:	0112      	lsls	r2, r2, #4
 80172d6:	9208      	str	r2, [sp, #32]
 80172d8:	2200      	movs	r2, #0
 80172da:	9207      	str	r2, [sp, #28]
 80172dc:	2200      	movs	r2, #0
 80172de:	9206      	str	r2, [sp, #24]
 80172e0:	2200      	movs	r2, #0
 80172e2:	9205      	str	r2, [sp, #20]
 80172e4:	2201      	movs	r2, #1
 80172e6:	9204      	str	r2, [sp, #16]
 80172e8:	2200      	movs	r2, #0
 80172ea:	9203      	str	r2, [sp, #12]
 80172ec:	2208      	movs	r2, #8
 80172ee:	9202      	str	r2, [sp, #8]
 80172f0:	2201      	movs	r2, #1
 80172f2:	9201      	str	r2, [sp, #4]
 80172f4:	9300      	str	r3, [sp, #0]
 80172f6:	002b      	movs	r3, r5
 80172f8:	2200      	movs	r2, #0
 80172fa:	47a0      	blx	r4
    }
    TVL1( PRINTF( "TX on freq %d Hz at DR %d\n\r", NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate );)

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80172fc:	4b12      	ldr	r3, [pc, #72]	; (8017348 <RegionIN865TxConfig+0x1a8>)
 80172fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017300:	68fa      	ldr	r2, [r7, #12]
 8017302:	8992      	ldrh	r2, [r2, #12]
 8017304:	b2d1      	uxtb	r1, r2
 8017306:	241f      	movs	r4, #31
 8017308:	193a      	adds	r2, r7, r4
 801730a:	7812      	ldrb	r2, [r2, #0]
 801730c:	0010      	movs	r0, r2
 801730e:	4798      	blx	r3
    // Get the time-on-air of the next tx frame
    *txTimeOnAir = Radio.TimeOnAir( modem, txConfig->PktLen );
 8017310:	4b0d      	ldr	r3, [pc, #52]	; (8017348 <RegionIN865TxConfig+0x1a8>)
 8017312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017314:	68fa      	ldr	r2, [r7, #12]
 8017316:	8992      	ldrh	r2, [r2, #12]
 8017318:	b2d1      	uxtb	r1, r2
 801731a:	193a      	adds	r2, r7, r4
 801731c:	7812      	ldrb	r2, [r2, #0]
 801731e:	0010      	movs	r0, r2
 8017320:	4798      	blx	r3
 8017322:	0002      	movs	r2, r0
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8017328:	68bb      	ldr	r3, [r7, #8]
 801732a:	221d      	movs	r2, #29
 801732c:	18ba      	adds	r2, r7, r2
 801732e:	7812      	ldrb	r2, [r2, #0]
 8017330:	701a      	strb	r2, [r3, #0]
    return true;
 8017332:	2301      	movs	r3, #1
}
 8017334:	0018      	movs	r0, r3
 8017336:	46bd      	mov	sp, r7
 8017338:	b009      	add	sp, #36	; 0x24
 801733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801733c:	0801b444 	.word	0x0801b444
 8017340:	200010c4 	.word	0x200010c4
 8017344:	20001194 	.word	0x20001194
 8017348:	0801acec 	.word	0x0801acec
 801734c:	000061a8 	.word	0x000061a8

08017350 <RegionIN865LinkAdrReq>:

uint8_t RegionIN865LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017350:	b5b0      	push	{r4, r5, r7, lr}
 8017352:	b092      	sub	sp, #72	; 0x48
 8017354:	af00      	add	r7, sp, #0
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	607a      	str	r2, [r7, #4]
 801735c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801735e:	2347      	movs	r3, #71	; 0x47
 8017360:	18fb      	adds	r3, r7, r3
 8017362:	2207      	movs	r2, #7
 8017364:	701a      	strb	r2, [r3, #0]
    RegionCommonLinkAdrParams_t linkAdrParams;
    uint8_t nextIndex = 0;
 8017366:	2344      	movs	r3, #68	; 0x44
 8017368:	18fb      	adds	r3, r7, r3
 801736a:	2200      	movs	r2, #0
 801736c:	701a      	strb	r2, [r3, #0]
    uint8_t bytesProcessed = 0;
 801736e:	2346      	movs	r3, #70	; 0x46
 8017370:	18fb      	adds	r3, r7, r3
 8017372:	2200      	movs	r2, #0
 8017374:	701a      	strb	r2, [r3, #0]
    uint16_t chMask = 0;
 8017376:	233a      	movs	r3, #58	; 0x3a
 8017378:	18fb      	adds	r3, r7, r3
 801737a:	2200      	movs	r2, #0
 801737c:	801a      	strh	r2, [r3, #0]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801737e:	e09e      	b.n	80174be <RegionIN865LinkAdrReq+0x16e>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	685a      	ldr	r2, [r3, #4]
 8017384:	2346      	movs	r3, #70	; 0x46
 8017386:	18fb      	adds	r3, r7, r3
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	18d3      	adds	r3, r2, r3
 801738c:	2544      	movs	r5, #68	; 0x44
 801738e:	197c      	adds	r4, r7, r5
 8017390:	223c      	movs	r2, #60	; 0x3c
 8017392:	18ba      	adds	r2, r7, r2
 8017394:	0011      	movs	r1, r2
 8017396:	0018      	movs	r0, r3
 8017398:	f7fe fed6 	bl	8016148 <RegionCommonParseLinkAdrReq>
 801739c:	0003      	movs	r3, r0
 801739e:	7023      	strb	r3, [r4, #0]

        if( nextIndex == 0 )
 80173a0:	197b      	adds	r3, r7, r5
 80173a2:	781b      	ldrb	r3, [r3, #0]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d100      	bne.n	80173aa <RegionIN865LinkAdrReq+0x5a>
 80173a8:	e092      	b.n	80174d0 <RegionIN865LinkAdrReq+0x180>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80173aa:	2246      	movs	r2, #70	; 0x46
 80173ac:	18bb      	adds	r3, r7, r2
 80173ae:	18b9      	adds	r1, r7, r2
 80173b0:	2244      	movs	r2, #68	; 0x44
 80173b2:	18ba      	adds	r2, r7, r2
 80173b4:	7809      	ldrb	r1, [r1, #0]
 80173b6:	7812      	ldrb	r2, [r2, #0]
 80173b8:	188a      	adds	r2, r1, r2
 80173ba:	701a      	strb	r2, [r3, #0]

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80173bc:	2347      	movs	r3, #71	; 0x47
 80173be:	18fb      	adds	r3, r7, r3
 80173c0:	2207      	movs	r2, #7
 80173c2:	701a      	strb	r2, [r3, #0]

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80173c4:	213c      	movs	r1, #60	; 0x3c
 80173c6:	187b      	adds	r3, r7, r1
 80173c8:	889a      	ldrh	r2, [r3, #4]
 80173ca:	233a      	movs	r3, #58	; 0x3a
 80173cc:	18fb      	adds	r3, r7, r3
 80173ce:	801a      	strh	r2, [r3, #0]

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80173d0:	187b      	adds	r3, r7, r1
 80173d2:	78db      	ldrb	r3, [r3, #3]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d10c      	bne.n	80173f2 <RegionIN865LinkAdrReq+0xa2>
 80173d8:	233a      	movs	r3, #58	; 0x3a
 80173da:	18fb      	adds	r3, r7, r3
 80173dc:	881b      	ldrh	r3, [r3, #0]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d107      	bne.n	80173f2 <RegionIN865LinkAdrReq+0xa2>
        {
            status &= 0xFE; // Channel mask KO
 80173e2:	2247      	movs	r2, #71	; 0x47
 80173e4:	18bb      	adds	r3, r7, r2
 80173e6:	18ba      	adds	r2, r7, r2
 80173e8:	7812      	ldrb	r2, [r2, #0]
 80173ea:	2101      	movs	r1, #1
 80173ec:	438a      	bics	r2, r1
 80173ee:	701a      	strb	r2, [r3, #0]
 80173f0:	e065      	b.n	80174be <RegionIN865LinkAdrReq+0x16e>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80173f2:	233c      	movs	r3, #60	; 0x3c
 80173f4:	18fb      	adds	r3, r7, r3
 80173f6:	78db      	ldrb	r3, [r3, #3]
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d004      	beq.n	8017406 <RegionIN865LinkAdrReq+0xb6>
 80173fc:	233c      	movs	r3, #60	; 0x3c
 80173fe:	18fb      	adds	r3, r7, r3
 8017400:	78db      	ldrb	r3, [r3, #3]
 8017402:	2b05      	cmp	r3, #5
 8017404:	d904      	bls.n	8017410 <RegionIN865LinkAdrReq+0xc0>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8017406:	233c      	movs	r3, #60	; 0x3c
 8017408:	18fb      	adds	r3, r7, r3
 801740a:	78db      	ldrb	r3, [r3, #3]
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801740c:	2b06      	cmp	r3, #6
 801740e:	d907      	bls.n	8017420 <RegionIN865LinkAdrReq+0xd0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8017410:	2247      	movs	r2, #71	; 0x47
 8017412:	18bb      	adds	r3, r7, r2
 8017414:	18ba      	adds	r2, r7, r2
 8017416:	7812      	ldrb	r2, [r2, #0]
 8017418:	2101      	movs	r1, #1
 801741a:	438a      	bics	r2, r1
 801741c:	701a      	strb	r2, [r3, #0]
 801741e:	e04e      	b.n	80174be <RegionIN865LinkAdrReq+0x16e>
        }
        else
        {
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 8017420:	2345      	movs	r3, #69	; 0x45
 8017422:	18fb      	adds	r3, r7, r3
 8017424:	2200      	movs	r2, #0
 8017426:	701a      	strb	r2, [r3, #0]
 8017428:	e044      	b.n	80174b4 <RegionIN865LinkAdrReq+0x164>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801742a:	233c      	movs	r3, #60	; 0x3c
 801742c:	18fb      	adds	r3, r7, r3
 801742e:	78db      	ldrb	r3, [r3, #3]
 8017430:	2b06      	cmp	r3, #6
 8017432:	d11b      	bne.n	801746c <RegionIN865LinkAdrReq+0x11c>
                {
                    if( NvmCtx.Channels[i].Frequency != 0 )
 8017434:	2345      	movs	r3, #69	; 0x45
 8017436:	18fb      	adds	r3, r7, r3
 8017438:	781a      	ldrb	r2, [r3, #0]
 801743a:	4974      	ldr	r1, [pc, #464]	; (801760c <RegionIN865LinkAdrReq+0x2bc>)
 801743c:	0013      	movs	r3, r2
 801743e:	005b      	lsls	r3, r3, #1
 8017440:	189b      	adds	r3, r3, r2
 8017442:	009b      	lsls	r3, r3, #2
 8017444:	585b      	ldr	r3, [r3, r1]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d02e      	beq.n	80174a8 <RegionIN865LinkAdrReq+0x158>
                    {
                        chMask |= 1 << i;
 801744a:	2345      	movs	r3, #69	; 0x45
 801744c:	18fb      	adds	r3, r7, r3
 801744e:	781b      	ldrb	r3, [r3, #0]
 8017450:	2201      	movs	r2, #1
 8017452:	409a      	lsls	r2, r3
 8017454:	0013      	movs	r3, r2
 8017456:	b21a      	sxth	r2, r3
 8017458:	213a      	movs	r1, #58	; 0x3a
 801745a:	187b      	adds	r3, r7, r1
 801745c:	881b      	ldrh	r3, [r3, #0]
 801745e:	b21b      	sxth	r3, r3
 8017460:	4313      	orrs	r3, r2
 8017462:	b21b      	sxth	r3, r3
 8017464:	b29a      	uxth	r2, r3
 8017466:	187b      	adds	r3, r7, r1
 8017468:	801a      	strh	r2, [r3, #0]
 801746a:	e01d      	b.n	80174a8 <RegionIN865LinkAdrReq+0x158>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801746c:	233a      	movs	r3, #58	; 0x3a
 801746e:	18fb      	adds	r3, r7, r3
 8017470:	881b      	ldrh	r3, [r3, #0]
 8017472:	001a      	movs	r2, r3
 8017474:	2345      	movs	r3, #69	; 0x45
 8017476:	18fb      	adds	r3, r7, r3
 8017478:	781b      	ldrb	r3, [r3, #0]
 801747a:	411a      	asrs	r2, r3
 801747c:	0013      	movs	r3, r2
 801747e:	2201      	movs	r2, #1
 8017480:	4013      	ands	r3, r2
 8017482:	d011      	beq.n	80174a8 <RegionIN865LinkAdrReq+0x158>
                        ( NvmCtx.Channels[i].Frequency == 0 ) )
 8017484:	2345      	movs	r3, #69	; 0x45
 8017486:	18fb      	adds	r3, r7, r3
 8017488:	781a      	ldrb	r2, [r3, #0]
 801748a:	4960      	ldr	r1, [pc, #384]	; (801760c <RegionIN865LinkAdrReq+0x2bc>)
 801748c:	0013      	movs	r3, r2
 801748e:	005b      	lsls	r3, r3, #1
 8017490:	189b      	adds	r3, r3, r2
 8017492:	009b      	lsls	r3, r3, #2
 8017494:	585b      	ldr	r3, [r3, r1]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8017496:	2b00      	cmp	r3, #0
 8017498:	d106      	bne.n	80174a8 <RegionIN865LinkAdrReq+0x158>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801749a:	2247      	movs	r2, #71	; 0x47
 801749c:	18bb      	adds	r3, r7, r2
 801749e:	18ba      	adds	r2, r7, r2
 80174a0:	7812      	ldrb	r2, [r2, #0]
 80174a2:	2101      	movs	r1, #1
 80174a4:	438a      	bics	r2, r1
 80174a6:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < IN865_MAX_NB_CHANNELS; i++ )
 80174a8:	2145      	movs	r1, #69	; 0x45
 80174aa:	187b      	adds	r3, r7, r1
 80174ac:	781a      	ldrb	r2, [r3, #0]
 80174ae:	187b      	adds	r3, r7, r1
 80174b0:	3201      	adds	r2, #1
 80174b2:	701a      	strb	r2, [r3, #0]
 80174b4:	2345      	movs	r3, #69	; 0x45
 80174b6:	18fb      	adds	r3, r7, r3
 80174b8:	781b      	ldrb	r3, [r3, #0]
 80174ba:	2b0f      	cmp	r3, #15
 80174bc:	d9b5      	bls.n	801742a <RegionIN865LinkAdrReq+0xda>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	7a1b      	ldrb	r3, [r3, #8]
 80174c2:	2246      	movs	r2, #70	; 0x46
 80174c4:	18ba      	adds	r2, r7, r2
 80174c6:	7812      	ldrb	r2, [r2, #0]
 80174c8:	429a      	cmp	r2, r3
 80174ca:	d200      	bcs.n	80174ce <RegionIN865LinkAdrReq+0x17e>
 80174cc:	e758      	b.n	8017380 <RegionIN865LinkAdrReq+0x30>
 80174ce:	e000      	b.n	80174d2 <RegionIN865LinkAdrReq+0x182>
            break; // break loop, since no more request has been found
 80174d0:	46c0      	nop			; (mov r8, r8)
                }
            }
        }
    }

    if( linkAdrParams.Datarate != DR_6 )
 80174d2:	233c      	movs	r3, #60	; 0x3c
 80174d4:	18fb      	adds	r3, r7, r3
 80174d6:	785b      	ldrb	r3, [r3, #1]
 80174d8:	b25b      	sxtb	r3, r3
 80174da:	2b06      	cmp	r3, #6
 80174dc:	d063      	beq.n	80175a6 <RegionIN865LinkAdrReq+0x256>
    {
        // Get the minimum possible datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80174de:	2134      	movs	r1, #52	; 0x34
 80174e0:	187b      	adds	r3, r7, r1
 80174e2:	2202      	movs	r2, #2
 80174e4:	701a      	strb	r2, [r3, #0]
        getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80174e6:	68fb      	ldr	r3, [r7, #12]
 80174e8:	7a5a      	ldrb	r2, [r3, #9]
 80174ea:	187b      	adds	r3, r7, r1
 80174ec:	709a      	strb	r2, [r3, #2]
        phyParam = RegionIN865GetPhyParam( &getPhy );
 80174ee:	187b      	adds	r3, r7, r1
 80174f0:	0018      	movs	r0, r3
 80174f2:	f7ff fa3d 	bl	8016970 <RegionIN865GetPhyParam>
 80174f6:	0003      	movs	r3, r0
 80174f8:	001a      	movs	r2, r3
 80174fa:	2030      	movs	r0, #48	; 0x30
 80174fc:	183b      	adds	r3, r7, r0
 80174fe:	601a      	str	r2, [r3, #0]

        linkAdrVerifyParams.Status = status;
 8017500:	2110      	movs	r1, #16
 8017502:	187b      	adds	r3, r7, r1
 8017504:	2447      	movs	r4, #71	; 0x47
 8017506:	193a      	adds	r2, r7, r4
 8017508:	7812      	ldrb	r2, [r2, #0]
 801750a:	711a      	strb	r2, [r3, #4]
        linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	7a9a      	ldrb	r2, [r3, #10]
 8017510:	187b      	adds	r3, r7, r1
 8017512:	715a      	strb	r2, [r3, #5]
        linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8017514:	253c      	movs	r5, #60	; 0x3c
 8017516:	197b      	adds	r3, r7, r5
 8017518:	2201      	movs	r2, #1
 801751a:	569a      	ldrsb	r2, [r3, r2]
 801751c:	187b      	adds	r3, r7, r1
 801751e:	719a      	strb	r2, [r3, #6]
        linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8017520:	197b      	adds	r3, r7, r5
 8017522:	2202      	movs	r2, #2
 8017524:	569a      	ldrsb	r2, [r3, r2]
 8017526:	187b      	adds	r3, r7, r1
 8017528:	71da      	strb	r2, [r3, #7]
        linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 801752a:	197b      	adds	r3, r7, r5
 801752c:	781a      	ldrb	r2, [r3, #0]
 801752e:	187b      	adds	r3, r7, r1
 8017530:	721a      	strb	r2, [r3, #8]
        linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017532:	68fb      	ldr	r3, [r7, #12]
 8017534:	220b      	movs	r2, #11
 8017536:	569a      	ldrsb	r2, [r3, r2]
 8017538:	187b      	adds	r3, r7, r1
 801753a:	725a      	strb	r2, [r3, #9]
        linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	220c      	movs	r2, #12
 8017540:	569a      	ldrsb	r2, [r3, r2]
 8017542:	187b      	adds	r3, r7, r1
 8017544:	729a      	strb	r2, [r3, #10]
        linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	7b5b      	ldrb	r3, [r3, #13]
 801754a:	b25a      	sxtb	r2, r3
 801754c:	187b      	adds	r3, r7, r1
 801754e:	72da      	strb	r2, [r3, #11]
        linkAdrVerifyParams.NbChannels = IN865_MAX_NB_CHANNELS;
 8017550:	187b      	adds	r3, r7, r1
 8017552:	2210      	movs	r2, #16
 8017554:	731a      	strb	r2, [r3, #12]
        linkAdrVerifyParams.ChannelsMask = &chMask;
 8017556:	187b      	adds	r3, r7, r1
 8017558:	223a      	movs	r2, #58	; 0x3a
 801755a:	18ba      	adds	r2, r7, r2
 801755c:	611a      	str	r2, [r3, #16]
        linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801755e:	183b      	adds	r3, r7, r0
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	b25a      	sxtb	r2, r3
 8017564:	0008      	movs	r0, r1
 8017566:	183b      	adds	r3, r7, r0
 8017568:	751a      	strb	r2, [r3, #20]
        linkAdrVerifyParams.MaxDatarate = IN865_TX_MAX_DATARATE;
 801756a:	183b      	adds	r3, r7, r0
 801756c:	2207      	movs	r2, #7
 801756e:	755a      	strb	r2, [r3, #21]
        linkAdrVerifyParams.Channels = NvmCtx.Channels;
 8017570:	183b      	adds	r3, r7, r0
 8017572:	4a26      	ldr	r2, [pc, #152]	; (801760c <RegionIN865LinkAdrReq+0x2bc>)
 8017574:	619a      	str	r2, [r3, #24]
        linkAdrVerifyParams.MinTxPower = IN865_MIN_TX_POWER;
 8017576:	183b      	adds	r3, r7, r0
 8017578:	220a      	movs	r2, #10
 801757a:	771a      	strb	r2, [r3, #28]
        linkAdrVerifyParams.MaxTxPower = IN865_MAX_TX_POWER;
 801757c:	183b      	adds	r3, r7, r0
 801757e:	2200      	movs	r2, #0
 8017580:	775a      	strb	r2, [r3, #29]
        linkAdrVerifyParams.Version = linkAdrReq->Version;
 8017582:	183b      	adds	r3, r7, r0
 8017584:	68fa      	ldr	r2, [r7, #12]
 8017586:	6812      	ldr	r2, [r2, #0]
 8017588:	601a      	str	r2, [r3, #0]

        // Verify the parameters and update, if necessary
        status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801758a:	193c      	adds	r4, r7, r4
 801758c:	0029      	movs	r1, r5
 801758e:	187d      	adds	r5, r7, r1
 8017590:	187b      	adds	r3, r7, r1
 8017592:	1c9a      	adds	r2, r3, #2
 8017594:	187b      	adds	r3, r7, r1
 8017596:	1c59      	adds	r1, r3, #1
 8017598:	1838      	adds	r0, r7, r0
 801759a:	002b      	movs	r3, r5
 801759c:	f7fe fe2a 	bl	80161f4 <RegionCommonLinkAdrReqVerifyParams>
 80175a0:	0003      	movs	r3, r0
 80175a2:	7023      	strb	r3, [r4, #0]
 80175a4:	e006      	b.n	80175b4 <RegionIN865LinkAdrReq+0x264>
    }
    else
    {// DR_6 is not supported by this region
        status &= 0xFD; // Datarate KO
 80175a6:	2247      	movs	r2, #71	; 0x47
 80175a8:	18bb      	adds	r3, r7, r2
 80175aa:	18ba      	adds	r2, r7, r2
 80175ac:	7812      	ldrb	r2, [r2, #0]
 80175ae:	2102      	movs	r1, #2
 80175b0:	438a      	bics	r2, r1
 80175b2:	701a      	strb	r2, [r3, #0]
    }

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80175b4:	2347      	movs	r3, #71	; 0x47
 80175b6:	18fb      	adds	r3, r7, r3
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	2b07      	cmp	r3, #7
 80175bc:	d10b      	bne.n	80175d6 <RegionIN865LinkAdrReq+0x286>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 80175be:	4b14      	ldr	r3, [pc, #80]	; (8017610 <RegionIN865LinkAdrReq+0x2c0>)
 80175c0:	2202      	movs	r2, #2
 80175c2:	2100      	movs	r1, #0
 80175c4:	0018      	movs	r0, r3
 80175c6:	f002 f97f 	bl	80198c8 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 80175ca:	233a      	movs	r3, #58	; 0x3a
 80175cc:	18fb      	adds	r3, r7, r3
 80175ce:	8819      	ldrh	r1, [r3, #0]
 80175d0:	4b0e      	ldr	r3, [pc, #56]	; (801760c <RegionIN865LinkAdrReq+0x2bc>)
 80175d2:	22d0      	movs	r2, #208	; 0xd0
 80175d4:	5299      	strh	r1, [r3, r2]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80175d6:	213c      	movs	r1, #60	; 0x3c
 80175d8:	187b      	adds	r3, r7, r1
 80175da:	2201      	movs	r2, #1
 80175dc:	569a      	ldrsb	r2, [r3, r2]
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 80175e2:	187b      	adds	r3, r7, r1
 80175e4:	2202      	movs	r2, #2
 80175e6:	569a      	ldrsb	r2, [r3, r2]
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80175ec:	187b      	adds	r3, r7, r1
 80175ee:	781a      	ldrb	r2, [r3, #0]
 80175f0:	683b      	ldr	r3, [r7, #0]
 80175f2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80175f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80175f6:	2246      	movs	r2, #70	; 0x46
 80175f8:	18ba      	adds	r2, r7, r2
 80175fa:	7812      	ldrb	r2, [r2, #0]
 80175fc:	701a      	strb	r2, [r3, #0]

    return status;
 80175fe:	2347      	movs	r3, #71	; 0x47
 8017600:	18fb      	adds	r3, r7, r3
 8017602:	781b      	ldrb	r3, [r3, #0]
}
 8017604:	0018      	movs	r0, r3
 8017606:	46bd      	mov	sp, r7
 8017608:	b012      	add	sp, #72	; 0x48
 801760a:	bdb0      	pop	{r4, r5, r7, pc}
 801760c:	200010c4 	.word	0x200010c4
 8017610:	20001194 	.word	0x20001194

08017614 <RegionIN865RxParamSetupReq>:

uint8_t RegionIN865RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b084      	sub	sp, #16
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801761c:	230f      	movs	r3, #15
 801761e:	18fb      	adds	r3, r7, r3
 8017620:	2207      	movs	r2, #7
 8017622:	701a      	strb	r2, [r3, #0]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	0018      	movs	r0, r3
 801762a:	f7ff f893 	bl	8016754 <VerifyRfFreq>
 801762e:	0003      	movs	r3, r0
 8017630:	001a      	movs	r2, r3
 8017632:	2301      	movs	r3, #1
 8017634:	4053      	eors	r3, r2
 8017636:	b2db      	uxtb	r3, r3
 8017638:	2b00      	cmp	r3, #0
 801763a:	d006      	beq.n	801764a <RegionIN865RxParamSetupReq+0x36>
    {
        status &= 0xFE; // Channel frequency KO
 801763c:	220f      	movs	r2, #15
 801763e:	18bb      	adds	r3, r7, r2
 8017640:	18ba      	adds	r2, r7, r2
 8017642:	7812      	ldrb	r2, [r2, #0]
 8017644:	2101      	movs	r1, #1
 8017646:	438a      	bics	r2, r1
 8017648:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, IN865_RX_MIN_DATARATE, IN865_RX_MAX_DATARATE ) == false )
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	b25b      	sxtb	r3, r3
 8017650:	2207      	movs	r2, #7
 8017652:	2100      	movs	r1, #0
 8017654:	0018      	movs	r0, r3
 8017656:	f7fe fbbd 	bl	8015dd4 <RegionCommonValueInRange>
 801765a:	1e03      	subs	r3, r0, #0
 801765c:	d106      	bne.n	801766c <RegionIN865RxParamSetupReq+0x58>
    {
        status &= 0xFD; // Datarate KO
 801765e:	220f      	movs	r2, #15
 8017660:	18bb      	adds	r3, r7, r2
 8017662:	18ba      	adds	r2, r7, r2
 8017664:	7812      	ldrb	r2, [r2, #0]
 8017666:	2102      	movs	r1, #2
 8017668:	438a      	bics	r2, r1
 801766a:	701a      	strb	r2, [r3, #0]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, IN865_MIN_RX1_DR_OFFSET, IN865_MAX_RX1_DR_OFFSET ) == false )
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	785b      	ldrb	r3, [r3, #1]
 8017670:	b25b      	sxtb	r3, r3
 8017672:	2207      	movs	r2, #7
 8017674:	2100      	movs	r1, #0
 8017676:	0018      	movs	r0, r3
 8017678:	f7fe fbac 	bl	8015dd4 <RegionCommonValueInRange>
 801767c:	1e03      	subs	r3, r0, #0
 801767e:	d106      	bne.n	801768e <RegionIN865RxParamSetupReq+0x7a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8017680:	220f      	movs	r2, #15
 8017682:	18bb      	adds	r3, r7, r2
 8017684:	18ba      	adds	r2, r7, r2
 8017686:	7812      	ldrb	r2, [r2, #0]
 8017688:	2104      	movs	r1, #4
 801768a:	438a      	bics	r2, r1
 801768c:	701a      	strb	r2, [r3, #0]
    }

    return status;
 801768e:	230f      	movs	r3, #15
 8017690:	18fb      	adds	r3, r7, r3
 8017692:	781b      	ldrb	r3, [r3, #0]
}
 8017694:	0018      	movs	r0, r3
 8017696:	46bd      	mov	sp, r7
 8017698:	b004      	add	sp, #16
 801769a:	bd80      	pop	{r7, pc}

0801769c <RegionIN865NewChannelReq>:

uint8_t RegionIN865NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b086      	sub	sp, #24
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80176a4:	2317      	movs	r3, #23
 80176a6:	18fb      	adds	r3, r7, r3
 80176a8:	2203      	movs	r2, #3
 80176aa:	701a      	strb	r2, [r3, #0]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	d119      	bne.n	80176ea <RegionIN865NewChannelReq+0x4e>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	791b      	ldrb	r3, [r3, #4]
 80176ba:	b25b      	sxtb	r3, r3
 80176bc:	b2da      	uxtb	r2, r3
 80176be:	2108      	movs	r1, #8
 80176c0:	187b      	adds	r3, r7, r1
 80176c2:	701a      	strb	r2, [r3, #0]

        // Remove
        if( RegionIN865ChannelsRemove( &channelRemove ) == false )
 80176c4:	187b      	adds	r3, r7, r1
 80176c6:	0018      	movs	r0, r3
 80176c8:	f000 fa42 	bl	8017b50 <RegionIN865ChannelsRemove>
 80176cc:	0003      	movs	r3, r0
 80176ce:	001a      	movs	r2, r3
 80176d0:	2301      	movs	r3, #1
 80176d2:	4053      	eors	r3, r2
 80176d4:	b2db      	uxtb	r3, r3
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d043      	beq.n	8017762 <RegionIN865NewChannelReq+0xc6>
        {
            status &= 0xFC;
 80176da:	2217      	movs	r2, #23
 80176dc:	18bb      	adds	r3, r7, r2
 80176de:	18ba      	adds	r2, r7, r2
 80176e0:	7812      	ldrb	r2, [r2, #0]
 80176e2:	2103      	movs	r1, #3
 80176e4:	438a      	bics	r2, r1
 80176e6:	701a      	strb	r2, [r3, #0]
 80176e8:	e03b      	b.n	8017762 <RegionIN865NewChannelReq+0xc6>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	681a      	ldr	r2, [r3, #0]
 80176ee:	210c      	movs	r1, #12
 80176f0:	187b      	adds	r3, r7, r1
 80176f2:	601a      	str	r2, [r3, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	791b      	ldrb	r3, [r3, #4]
 80176f8:	b25b      	sxtb	r3, r3
 80176fa:	b2da      	uxtb	r2, r3
 80176fc:	187b      	adds	r3, r7, r1
 80176fe:	711a      	strb	r2, [r3, #4]

        switch( RegionIN865ChannelAdd( &channelAdd ) )
 8017700:	187b      	adds	r3, r7, r1
 8017702:	0018      	movs	r0, r3
 8017704:	f000 f96a 	bl	80179dc <RegionIN865ChannelAdd>
 8017708:	0003      	movs	r3, r0
 801770a:	2b04      	cmp	r3, #4
 801770c:	d008      	beq.n	8017720 <RegionIN865NewChannelReq+0x84>
 801770e:	dc02      	bgt.n	8017716 <RegionIN865NewChannelReq+0x7a>
 8017710:	2b00      	cmp	r3, #0
 8017712:	d025      	beq.n	8017760 <RegionIN865NewChannelReq+0xc4>
 8017714:	e01c      	b.n	8017750 <RegionIN865NewChannelReq+0xb4>
 8017716:	2b05      	cmp	r3, #5
 8017718:	d00a      	beq.n	8017730 <RegionIN865NewChannelReq+0x94>
 801771a:	2b06      	cmp	r3, #6
 801771c:	d010      	beq.n	8017740 <RegionIN865NewChannelReq+0xa4>
 801771e:	e017      	b.n	8017750 <RegionIN865NewChannelReq+0xb4>
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8017720:	2217      	movs	r2, #23
 8017722:	18bb      	adds	r3, r7, r2
 8017724:	18ba      	adds	r2, r7, r2
 8017726:	7812      	ldrb	r2, [r2, #0]
 8017728:	2101      	movs	r1, #1
 801772a:	438a      	bics	r2, r1
 801772c:	701a      	strb	r2, [r3, #0]
                break;
 801772e:	e018      	b.n	8017762 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8017730:	2217      	movs	r2, #23
 8017732:	18bb      	adds	r3, r7, r2
 8017734:	18ba      	adds	r2, r7, r2
 8017736:	7812      	ldrb	r2, [r2, #0]
 8017738:	2102      	movs	r1, #2
 801773a:	438a      	bics	r2, r1
 801773c:	701a      	strb	r2, [r3, #0]
                break;
 801773e:	e010      	b.n	8017762 <RegionIN865NewChannelReq+0xc6>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8017740:	2217      	movs	r2, #23
 8017742:	18bb      	adds	r3, r7, r2
 8017744:	18ba      	adds	r2, r7, r2
 8017746:	7812      	ldrb	r2, [r2, #0]
 8017748:	2103      	movs	r1, #3
 801774a:	438a      	bics	r2, r1
 801774c:	701a      	strb	r2, [r3, #0]
                break;
 801774e:	e008      	b.n	8017762 <RegionIN865NewChannelReq+0xc6>
            }
            default:
            {
                status &= 0xFC;
 8017750:	2217      	movs	r2, #23
 8017752:	18bb      	adds	r3, r7, r2
 8017754:	18ba      	adds	r2, r7, r2
 8017756:	7812      	ldrb	r2, [r2, #0]
 8017758:	2103      	movs	r1, #3
 801775a:	438a      	bics	r2, r1
 801775c:	701a      	strb	r2, [r3, #0]
                break;
 801775e:	e000      	b.n	8017762 <RegionIN865NewChannelReq+0xc6>
                break;
 8017760:	46c0      	nop			; (mov r8, r8)
            }
        }
    }

    return status;
 8017762:	2317      	movs	r3, #23
 8017764:	18fb      	adds	r3, r7, r3
 8017766:	781b      	ldrb	r3, [r3, #0]
}
 8017768:	0018      	movs	r0, r3
 801776a:	46bd      	mov	sp, r7
 801776c:	b006      	add	sp, #24
 801776e:	bd80      	pop	{r7, pc}

08017770 <RegionIN865TxParamSetupReq>:

int8_t RegionIN865TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b082      	sub	sp, #8
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
    return -1;
 8017778:	2301      	movs	r3, #1
 801777a:	425b      	negs	r3, r3
}
 801777c:	0018      	movs	r0, r3
 801777e:	46bd      	mov	sp, r7
 8017780:	b002      	add	sp, #8
 8017782:	bd80      	pop	{r7, pc}

08017784 <RegionIN865DlChannelReq>:

uint8_t RegionIN865DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017784:	b580      	push	{r7, lr}
 8017786:	b084      	sub	sp, #16
 8017788:	af00      	add	r7, sp, #0
 801778a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801778c:	230f      	movs	r3, #15
 801778e:	18fb      	adds	r3, r7, r3
 8017790:	2203      	movs	r2, #3
 8017792:	701a      	strb	r2, [r3, #0]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	685b      	ldr	r3, [r3, #4]
 8017798:	0018      	movs	r0, r3
 801779a:	f7fe ffdb 	bl	8016754 <VerifyRfFreq>
 801779e:	0003      	movs	r3, r0
 80177a0:	001a      	movs	r2, r3
 80177a2:	2301      	movs	r3, #1
 80177a4:	4053      	eors	r3, r2
 80177a6:	b2db      	uxtb	r3, r3
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d006      	beq.n	80177ba <RegionIN865DlChannelReq+0x36>
    {
        status &= 0xFE;
 80177ac:	220f      	movs	r2, #15
 80177ae:	18bb      	adds	r3, r7, r2
 80177b0:	18ba      	adds	r2, r7, r2
 80177b2:	7812      	ldrb	r2, [r2, #0]
 80177b4:	2101      	movs	r1, #1
 80177b6:	438a      	bics	r2, r1
 80177b8:	701a      	strb	r2, [r3, #0]
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	0019      	movs	r1, r3
 80177c0:	4a13      	ldr	r2, [pc, #76]	; (8017810 <RegionIN865DlChannelReq+0x8c>)
 80177c2:	000b      	movs	r3, r1
 80177c4:	005b      	lsls	r3, r3, #1
 80177c6:	185b      	adds	r3, r3, r1
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	589b      	ldr	r3, [r3, r2]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d106      	bne.n	80177de <RegionIN865DlChannelReq+0x5a>
    {
        status &= 0xFD;
 80177d0:	220f      	movs	r2, #15
 80177d2:	18bb      	adds	r3, r7, r2
 80177d4:	18ba      	adds	r2, r7, r2
 80177d6:	7812      	ldrb	r2, [r2, #0]
 80177d8:	2102      	movs	r1, #2
 80177da:	438a      	bics	r2, r1
 80177dc:	701a      	strb	r2, [r3, #0]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 80177de:	230f      	movs	r3, #15
 80177e0:	18fb      	adds	r3, r7, r3
 80177e2:	781b      	ldrb	r3, [r3, #0]
 80177e4:	2b03      	cmp	r3, #3
 80177e6:	d10c      	bne.n	8017802 <RegionIN865DlChannelReq+0x7e>
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	781b      	ldrb	r3, [r3, #0]
 80177ec:	0018      	movs	r0, r3
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	685a      	ldr	r2, [r3, #4]
 80177f2:	4907      	ldr	r1, [pc, #28]	; (8017810 <RegionIN865DlChannelReq+0x8c>)
 80177f4:	0003      	movs	r3, r0
 80177f6:	005b      	lsls	r3, r3, #1
 80177f8:	181b      	adds	r3, r3, r0
 80177fa:	009b      	lsls	r3, r3, #2
 80177fc:	18cb      	adds	r3, r1, r3
 80177fe:	3304      	adds	r3, #4
 8017800:	601a      	str	r2, [r3, #0]
    }

    return status;
 8017802:	230f      	movs	r3, #15
 8017804:	18fb      	adds	r3, r7, r3
 8017806:	781b      	ldrb	r3, [r3, #0]
}
 8017808:	0018      	movs	r0, r3
 801780a:	46bd      	mov	sp, r7
 801780c:	b004      	add	sp, #16
 801780e:	bd80      	pop	{r7, pc}
 8017810:	200010c4 	.word	0x200010c4

08017814 <RegionIN865AlternateDr>:

int8_t RegionIN865AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017814:	b580      	push	{r7, lr}
 8017816:	b082      	sub	sp, #8
 8017818:	af00      	add	r7, sp, #0
 801781a:	0002      	movs	r2, r0
 801781c:	1dfb      	adds	r3, r7, #7
 801781e:	701a      	strb	r2, [r3, #0]
 8017820:	1dbb      	adds	r3, r7, #6
 8017822:	1c0a      	adds	r2, r1, #0
 8017824:	701a      	strb	r2, [r3, #0]
    return currentDr;
 8017826:	1dfb      	adds	r3, r7, #7
 8017828:	781b      	ldrb	r3, [r3, #0]
 801782a:	b25b      	sxtb	r3, r3
}
 801782c:	0018      	movs	r0, r3
 801782e:	46bd      	mov	sp, r7
 8017830:	b002      	add	sp, #8
 8017832:	bd80      	pop	{r7, pc}

08017834 <RegionIN865CalcBackOff>:

void RegionIN865CalcBackOff( CalcBackOffParams_t* calcBackOff )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b088      	sub	sp, #32
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
    RegionCommonCalcBackOffParams_t calcBackOffParams;

    calcBackOffParams.Channels = NvmCtx.Channels;
 801783c:	210c      	movs	r1, #12
 801783e:	187b      	adds	r3, r7, r1
 8017840:	4a12      	ldr	r2, [pc, #72]	; (801788c <RegionIN865CalcBackOff+0x58>)
 8017842:	601a      	str	r2, [r3, #0]
    calcBackOffParams.Bands = NvmCtx.Bands;
 8017844:	187b      	adds	r3, r7, r1
 8017846:	4a12      	ldr	r2, [pc, #72]	; (8017890 <RegionIN865CalcBackOff+0x5c>)
 8017848:	605a      	str	r2, [r3, #4]
    calcBackOffParams.LastTxIsJoinRequest = calcBackOff->LastTxIsJoinRequest;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	785a      	ldrb	r2, [r3, #1]
 801784e:	187b      	adds	r3, r7, r1
 8017850:	721a      	strb	r2, [r3, #8]
    calcBackOffParams.Joined = calcBackOff->Joined;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	781a      	ldrb	r2, [r3, #0]
 8017856:	187b      	adds	r3, r7, r1
 8017858:	725a      	strb	r2, [r3, #9]
    calcBackOffParams.DutyCycleEnabled = calcBackOff->DutyCycleEnabled;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	789a      	ldrb	r2, [r3, #2]
 801785e:	187b      	adds	r3, r7, r1
 8017860:	729a      	strb	r2, [r3, #10]
    calcBackOffParams.Channel = calcBackOff->Channel;
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	78da      	ldrb	r2, [r3, #3]
 8017866:	187b      	adds	r3, r7, r1
 8017868:	72da      	strb	r2, [r3, #11]
    calcBackOffParams.ElapsedTime = calcBackOff->ElapsedTime;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	685a      	ldr	r2, [r3, #4]
 801786e:	187b      	adds	r3, r7, r1
 8017870:	60da      	str	r2, [r3, #12]
    calcBackOffParams.TxTimeOnAir = calcBackOff->TxTimeOnAir;
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	689a      	ldr	r2, [r3, #8]
 8017876:	187b      	adds	r3, r7, r1
 8017878:	611a      	str	r2, [r3, #16]

    RegionCommonCalcBackOff( &calcBackOffParams );
 801787a:	187b      	adds	r3, r7, r1
 801787c:	0018      	movs	r0, r3
 801787e:	f7fe fe63 	bl	8016548 <RegionCommonCalcBackOff>
}
 8017882:	46c0      	nop			; (mov r8, r8)
 8017884:	46bd      	mov	sp, r7
 8017886:	b008      	add	sp, #32
 8017888:	bd80      	pop	{r7, pc}
 801788a:	46c0      	nop			; (mov r8, r8)
 801788c:	200010c4 	.word	0x200010c4
 8017890:	20001184 	.word	0x20001184

08017894 <RegionIN865NextChannel>:

LoRaMacStatus_t RegionIN865NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017894:	b5b0      	push	{r4, r5, r7, lr}
 8017896:	b090      	sub	sp, #64	; 0x40
 8017898:	af04      	add	r7, sp, #16
 801789a:	60f8      	str	r0, [r7, #12]
 801789c:	60b9      	str	r1, [r7, #8]
 801789e:	607a      	str	r2, [r7, #4]
 80178a0:	603b      	str	r3, [r7, #0]
    uint8_t nbEnabledChannels = 0;
 80178a2:	232f      	movs	r3, #47	; 0x2f
 80178a4:	18fb      	adds	r3, r7, r3
 80178a6:	2200      	movs	r2, #0
 80178a8:	701a      	strb	r2, [r3, #0]
    uint8_t delayTx = 0;
 80178aa:	2323      	movs	r3, #35	; 0x23
 80178ac:	18fb      	adds	r3, r7, r3
 80178ae:	2200      	movs	r2, #0
 80178b0:	701a      	strb	r2, [r3, #0]
    uint8_t enabledChannels[IN865_MAX_NB_CHANNELS] = { 0 };
 80178b2:	2310      	movs	r3, #16
 80178b4:	18fb      	adds	r3, r7, r3
 80178b6:	0018      	movs	r0, r3
 80178b8:	2310      	movs	r3, #16
 80178ba:	001a      	movs	r2, r3
 80178bc:	2100      	movs	r1, #0
 80178be:	f002 f84b 	bl	8019958 <memset>
    TimerTime_t nextTxDelay = 0;
 80178c2:	2300      	movs	r3, #0
 80178c4:	62bb      	str	r3, [r7, #40]	; 0x28

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 80178c6:	4b42      	ldr	r3, [pc, #264]	; (80179d0 <RegionIN865NextChannel+0x13c>)
 80178c8:	2201      	movs	r2, #1
 80178ca:	2100      	movs	r1, #0
 80178cc:	0018      	movs	r0, r3
 80178ce:	f7fe fae9 	bl	8015ea4 <RegionCommonCountChannels>
 80178d2:	1e03      	subs	r3, r0, #0
 80178d4:	d108      	bne.n	80178e8 <RegionIN865NextChannel+0x54>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80178d6:	4b3f      	ldr	r3, [pc, #252]	; (80179d4 <RegionIN865NextChannel+0x140>)
 80178d8:	22d0      	movs	r2, #208	; 0xd0
 80178da:	5a9b      	ldrh	r3, [r3, r2]
 80178dc:	2207      	movs	r2, #7
 80178de:	4313      	orrs	r3, r2
 80178e0:	b299      	uxth	r1, r3
 80178e2:	4b3c      	ldr	r3, [pc, #240]	; (80179d4 <RegionIN865NextChannel+0x140>)
 80178e4:	22d0      	movs	r2, #208	; 0xd0
 80178e6:	5299      	strh	r1, [r3, r2]
    }

    TimerTime_t elapsed = TimerGetElapsedTime( nextChanParams->LastAggrTx );
 80178e8:	68fb      	ldr	r3, [r7, #12]
 80178ea:	685b      	ldr	r3, [r3, #4]
 80178ec:	0018      	movs	r0, r3
 80178ee:	f001 fde6 	bl	80194be <TimerGetElapsedTime>
 80178f2:	0003      	movs	r3, r0
 80178f4:	627b      	str	r3, [r7, #36]	; 0x24
    if( ( nextChanParams->LastAggrTx == 0 ) || ( nextChanParams->AggrTimeOff <= elapsed ) )
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	685b      	ldr	r3, [r3, #4]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d004      	beq.n	8017908 <RegionIN865NextChannel+0x74>
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	681b      	ldr	r3, [r3, #0]
 8017902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017904:	429a      	cmp	r2, r3
 8017906:	d324      	bcc.n	8017952 <RegionIN865NextChannel+0xbe>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8017908:	683b      	ldr	r3, [r7, #0]
 801790a:	2200      	movs	r2, #0
 801790c:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        nextTxDelay = RegionCommonUpdateBandTimeOff( nextChanParams->Joined, nextChanParams->DutyCycleEnabled, NvmCtx.Bands, IN865_MAX_NB_BANDS );
 801790e:	68fb      	ldr	r3, [r7, #12]
 8017910:	7a58      	ldrb	r0, [r3, #9]
 8017912:	68fb      	ldr	r3, [r7, #12]
 8017914:	7a99      	ldrb	r1, [r3, #10]
 8017916:	4a30      	ldr	r2, [pc, #192]	; (80179d8 <RegionIN865NextChannel+0x144>)
 8017918:	2301      	movs	r3, #1
 801791a:	f7fe fb4e 	bl	8015fba <RegionCommonUpdateBandTimeOff>
 801791e:	0003      	movs	r3, r0
 8017920:	62bb      	str	r3, [r7, #40]	; 0x28

        // Search how many channels are enabled
        nbEnabledChannels = CountNbOfEnabledChannels( nextChanParams->Joined, nextChanParams->Datarate,
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	7a58      	ldrb	r0, [r3, #9]
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	7a1b      	ldrb	r3, [r3, #8]
 801792a:	b25b      	sxtb	r3, r3
 801792c:	b2d9      	uxtb	r1, r3
 801792e:	232f      	movs	r3, #47	; 0x2f
 8017930:	18fc      	adds	r4, r7, r3
 8017932:	4d28      	ldr	r5, [pc, #160]	; (80179d4 <RegionIN865NextChannel+0x140>)
 8017934:	4a26      	ldr	r2, [pc, #152]	; (80179d0 <RegionIN865NextChannel+0x13c>)
 8017936:	2323      	movs	r3, #35	; 0x23
 8017938:	18fb      	adds	r3, r7, r3
 801793a:	9302      	str	r3, [sp, #8]
 801793c:	2310      	movs	r3, #16
 801793e:	18fb      	adds	r3, r7, r3
 8017940:	9301      	str	r3, [sp, #4]
 8017942:	4b25      	ldr	r3, [pc, #148]	; (80179d8 <RegionIN865NextChannel+0x144>)
 8017944:	9300      	str	r3, [sp, #0]
 8017946:	002b      	movs	r3, r5
 8017948:	f7fe ff2c 	bl	80167a4 <CountNbOfEnabledChannels>
 801794c:	0003      	movs	r3, r0
 801794e:	7023      	strb	r3, [r4, #0]
 8017950:	e00b      	b.n	801796a <RegionIN865NextChannel+0xd6>
                                                      NvmCtx.ChannelsMask, NvmCtx.Channels,
                                                      NvmCtx.Bands, enabledChannels, &delayTx );
    }
    else
    {
        delayTx++;
 8017952:	2123      	movs	r1, #35	; 0x23
 8017954:	187b      	adds	r3, r7, r1
 8017956:	781b      	ldrb	r3, [r3, #0]
 8017958:	3301      	adds	r3, #1
 801795a:	b2da      	uxtb	r2, r3
 801795c:	187b      	adds	r3, r7, r1
 801795e:	701a      	strb	r2, [r3, #0]
        nextTxDelay = nextChanParams->AggrTimeOff - elapsed;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	681a      	ldr	r2, [r3, #0]
 8017964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017966:	1ad3      	subs	r3, r2, r3
 8017968:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if( nbEnabledChannels > 0 )
 801796a:	232f      	movs	r3, #47	; 0x2f
 801796c:	18fb      	adds	r3, r7, r3
 801796e:	781b      	ldrb	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d012      	beq.n	801799a <RegionIN865NextChannel+0x106>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8017974:	232f      	movs	r3, #47	; 0x2f
 8017976:	18fb      	adds	r3, r7, r3
 8017978:	781b      	ldrb	r3, [r3, #0]
 801797a:	3b01      	subs	r3, #1
 801797c:	0019      	movs	r1, r3
 801797e:	2000      	movs	r0, #0
 8017980:	f001 ff50 	bl	8019824 <randr>
 8017984:	0002      	movs	r2, r0
 8017986:	2310      	movs	r3, #16
 8017988:	18fb      	adds	r3, r7, r3
 801798a:	5c9a      	ldrb	r2, [r3, r2]
 801798c:	68bb      	ldr	r3, [r7, #8]
 801798e:	701a      	strb	r2, [r3, #0]

        *time = 0;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	2200      	movs	r2, #0
 8017994:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8017996:	2300      	movs	r3, #0
 8017998:	e016      	b.n	80179c8 <RegionIN865NextChannel+0x134>
    }
    else
    {
        if( delayTx > 0 )
 801799a:	2323      	movs	r3, #35	; 0x23
 801799c:	18fb      	adds	r3, r7, r3
 801799e:	781b      	ldrb	r3, [r3, #0]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d004      	beq.n	80179ae <RegionIN865NextChannel+0x11a>
        {
            // Delay transmission due to AggregatedTimeOff or to a band time off
            *time = nextTxDelay;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80179a8:	601a      	str	r2, [r3, #0]
            return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80179aa:	230b      	movs	r3, #11
 80179ac:	e00c      	b.n	80179c8 <RegionIN865NextChannel+0x134>
        }
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80179ae:	4b09      	ldr	r3, [pc, #36]	; (80179d4 <RegionIN865NextChannel+0x140>)
 80179b0:	22d0      	movs	r2, #208	; 0xd0
 80179b2:	5a9b      	ldrh	r3, [r3, r2]
 80179b4:	2207      	movs	r2, #7
 80179b6:	4313      	orrs	r3, r2
 80179b8:	b299      	uxth	r1, r3
 80179ba:	4b06      	ldr	r3, [pc, #24]	; (80179d4 <RegionIN865NextChannel+0x140>)
 80179bc:	22d0      	movs	r2, #208	; 0xd0
 80179be:	5299      	strh	r1, [r3, r2]
        *time = 0;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2200      	movs	r2, #0
 80179c4:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80179c6:	230c      	movs	r3, #12
    }
}
 80179c8:	0018      	movs	r0, r3
 80179ca:	46bd      	mov	sp, r7
 80179cc:	b00c      	add	sp, #48	; 0x30
 80179ce:	bdb0      	pop	{r4, r5, r7, pc}
 80179d0:	20001194 	.word	0x20001194
 80179d4:	200010c4 	.word	0x200010c4
 80179d8:	20001184 	.word	0x20001184

080179dc <RegionIN865ChannelAdd>:

LoRaMacStatus_t RegionIN865ChannelAdd( ChannelAddParams_t* channelAdd )
{
 80179dc:	b590      	push	{r4, r7, lr}
 80179de:	b085      	sub	sp, #20
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	6078      	str	r0, [r7, #4]
    bool drInvalid = false;
 80179e4:	230f      	movs	r3, #15
 80179e6:	18fb      	adds	r3, r7, r3
 80179e8:	2200      	movs	r2, #0
 80179ea:	701a      	strb	r2, [r3, #0]
    bool freqInvalid = false;
 80179ec:	230e      	movs	r3, #14
 80179ee:	18fb      	adds	r3, r7, r3
 80179f0:	2200      	movs	r2, #0
 80179f2:	701a      	strb	r2, [r3, #0]
    uint8_t id = channelAdd->ChannelId;
 80179f4:	210d      	movs	r1, #13
 80179f6:	187b      	adds	r3, r7, r1
 80179f8:	687a      	ldr	r2, [r7, #4]
 80179fa:	7912      	ldrb	r2, [r2, #4]
 80179fc:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 80179fe:	187b      	adds	r3, r7, r1
 8017a00:	781b      	ldrb	r3, [r3, #0]
 8017a02:	2b02      	cmp	r3, #2
 8017a04:	d801      	bhi.n	8017a0a <RegionIN865ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017a06:	2306      	movs	r3, #6
 8017a08:	e09c      	b.n	8017b44 <RegionIN865ChannelAdd+0x168>
    }

    if( id >= IN865_MAX_NB_CHANNELS )
 8017a0a:	230d      	movs	r3, #13
 8017a0c:	18fb      	adds	r3, r7, r3
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	2b0f      	cmp	r3, #15
 8017a12:	d901      	bls.n	8017a18 <RegionIN865ChannelAdd+0x3c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8017a14:	2303      	movs	r3, #3
 8017a16:	e095      	b.n	8017b44 <RegionIN865ChannelAdd+0x168>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	7a1b      	ldrb	r3, [r3, #8]
 8017a1e:	011b      	lsls	r3, r3, #4
 8017a20:	b25b      	sxtb	r3, r3
 8017a22:	111b      	asrs	r3, r3, #4
 8017a24:	b25b      	sxtb	r3, r3
 8017a26:	2207      	movs	r2, #7
 8017a28:	2100      	movs	r1, #0
 8017a2a:	0018      	movs	r0, r3
 8017a2c:	f7fe f9d2 	bl	8015dd4 <RegionCommonValueInRange>
 8017a30:	1e03      	subs	r3, r0, #0
 8017a32:	d103      	bne.n	8017a3c <RegionIN865ChannelAdd+0x60>
    {
        drInvalid = true;
 8017a34:	230f      	movs	r3, #15
 8017a36:	18fb      	adds	r3, r7, r3
 8017a38:	2201      	movs	r2, #1
 8017a3a:	701a      	strb	r2, [r3, #0]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, IN865_TX_MIN_DATARATE, IN865_TX_MAX_DATARATE ) == false )
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	7a1b      	ldrb	r3, [r3, #8]
 8017a42:	b25b      	sxtb	r3, r3
 8017a44:	111b      	asrs	r3, r3, #4
 8017a46:	b25b      	sxtb	r3, r3
 8017a48:	2207      	movs	r2, #7
 8017a4a:	2100      	movs	r1, #0
 8017a4c:	0018      	movs	r0, r3
 8017a4e:	f7fe f9c1 	bl	8015dd4 <RegionCommonValueInRange>
 8017a52:	1e03      	subs	r3, r0, #0
 8017a54:	d103      	bne.n	8017a5e <RegionIN865ChannelAdd+0x82>
    {
        drInvalid = true;
 8017a56:	230f      	movs	r3, #15
 8017a58:	18fb      	adds	r3, r7, r3
 8017a5a:	2201      	movs	r2, #1
 8017a5c:	701a      	strb	r2, [r3, #0]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	681b      	ldr	r3, [r3, #0]
 8017a62:	7a1b      	ldrb	r3, [r3, #8]
 8017a64:	011b      	lsls	r3, r3, #4
 8017a66:	b25b      	sxtb	r3, r3
 8017a68:	111b      	asrs	r3, r3, #4
 8017a6a:	b25a      	sxtb	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	7a1b      	ldrb	r3, [r3, #8]
 8017a72:	b25b      	sxtb	r3, r3
 8017a74:	111b      	asrs	r3, r3, #4
 8017a76:	b25b      	sxtb	r3, r3
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	dd03      	ble.n	8017a84 <RegionIN865ChannelAdd+0xa8>
    {
        drInvalid = true;
 8017a7c:	230f      	movs	r3, #15
 8017a7e:	18fb      	adds	r3, r7, r3
 8017a80:	2201      	movs	r2, #1
 8017a82:	701a      	strb	r2, [r3, #0]
    }

    // Check frequency
    if( freqInvalid == false )
 8017a84:	230e      	movs	r3, #14
 8017a86:	18fb      	adds	r3, r7, r3
 8017a88:	781b      	ldrb	r3, [r3, #0]
 8017a8a:	2201      	movs	r2, #1
 8017a8c:	4053      	eors	r3, r2
 8017a8e:	b2db      	uxtb	r3, r3
 8017a90:	2b00      	cmp	r3, #0
 8017a92:	d010      	beq.n	8017ab6 <RegionIN865ChannelAdd+0xda>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	0018      	movs	r0, r3
 8017a9c:	f7fe fe5a 	bl	8016754 <VerifyRfFreq>
 8017aa0:	0003      	movs	r3, r0
 8017aa2:	001a      	movs	r2, r3
 8017aa4:	2301      	movs	r3, #1
 8017aa6:	4053      	eors	r3, r2
 8017aa8:	b2db      	uxtb	r3, r3
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d003      	beq.n	8017ab6 <RegionIN865ChannelAdd+0xda>
        {
            freqInvalid = true;
 8017aae:	230e      	movs	r3, #14
 8017ab0:	18fb      	adds	r3, r7, r3
 8017ab2:	2201      	movs	r2, #1
 8017ab4:	701a      	strb	r2, [r3, #0]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8017ab6:	230f      	movs	r3, #15
 8017ab8:	18fb      	adds	r3, r7, r3
 8017aba:	781b      	ldrb	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d006      	beq.n	8017ace <RegionIN865ChannelAdd+0xf2>
 8017ac0:	230e      	movs	r3, #14
 8017ac2:	18fb      	adds	r3, r7, r3
 8017ac4:	781b      	ldrb	r3, [r3, #0]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d001      	beq.n	8017ace <RegionIN865ChannelAdd+0xf2>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8017aca:	2306      	movs	r3, #6
 8017acc:	e03a      	b.n	8017b44 <RegionIN865ChannelAdd+0x168>
    }
    if( drInvalid == true )
 8017ace:	230f      	movs	r3, #15
 8017ad0:	18fb      	adds	r3, r7, r3
 8017ad2:	781b      	ldrb	r3, [r3, #0]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d001      	beq.n	8017adc <RegionIN865ChannelAdd+0x100>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8017ad8:	2305      	movs	r3, #5
 8017ada:	e033      	b.n	8017b44 <RegionIN865ChannelAdd+0x168>
    }
    if( freqInvalid == true )
 8017adc:	230e      	movs	r3, #14
 8017ade:	18fb      	adds	r3, r7, r3
 8017ae0:	781b      	ldrb	r3, [r3, #0]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d001      	beq.n	8017aea <RegionIN865ChannelAdd+0x10e>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8017ae6:	2304      	movs	r3, #4
 8017ae8:	e02c      	b.n	8017b44 <RegionIN865ChannelAdd+0x168>
    }

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 8017aea:	200d      	movs	r0, #13
 8017aec:	0004      	movs	r4, r0
 8017aee:	183b      	adds	r3, r7, r0
 8017af0:	781a      	ldrb	r2, [r3, #0]
 8017af2:	0013      	movs	r3, r2
 8017af4:	005b      	lsls	r3, r3, #1
 8017af6:	189b      	adds	r3, r3, r2
 8017af8:	009b      	lsls	r3, r3, #2
 8017afa:	4a14      	ldr	r2, [pc, #80]	; (8017b4c <RegionIN865ChannelAdd+0x170>)
 8017afc:	1898      	adds	r0, r3, r2
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	220c      	movs	r2, #12
 8017b04:	0019      	movs	r1, r3
 8017b06:	f001 fea3 	bl	8019850 <memcpy1>
    NvmCtx.Channels[id].Band = 0;
 8017b0a:	0020      	movs	r0, r4
 8017b0c:	183b      	adds	r3, r7, r0
 8017b0e:	781a      	ldrb	r2, [r3, #0]
 8017b10:	490e      	ldr	r1, [pc, #56]	; (8017b4c <RegionIN865ChannelAdd+0x170>)
 8017b12:	0013      	movs	r3, r2
 8017b14:	005b      	lsls	r3, r3, #1
 8017b16:	189b      	adds	r3, r3, r2
 8017b18:	009b      	lsls	r3, r3, #2
 8017b1a:	18cb      	adds	r3, r1, r3
 8017b1c:	3309      	adds	r3, #9
 8017b1e:	2200      	movs	r2, #0
 8017b20:	701a      	strb	r2, [r3, #0]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 8017b22:	4b0a      	ldr	r3, [pc, #40]	; (8017b4c <RegionIN865ChannelAdd+0x170>)
 8017b24:	22d0      	movs	r2, #208	; 0xd0
 8017b26:	5a9b      	ldrh	r3, [r3, r2]
 8017b28:	b21a      	sxth	r2, r3
 8017b2a:	183b      	adds	r3, r7, r0
 8017b2c:	781b      	ldrb	r3, [r3, #0]
 8017b2e:	2101      	movs	r1, #1
 8017b30:	4099      	lsls	r1, r3
 8017b32:	000b      	movs	r3, r1
 8017b34:	b21b      	sxth	r3, r3
 8017b36:	4313      	orrs	r3, r2
 8017b38:	b21b      	sxth	r3, r3
 8017b3a:	b299      	uxth	r1, r3
 8017b3c:	4b03      	ldr	r3, [pc, #12]	; (8017b4c <RegionIN865ChannelAdd+0x170>)
 8017b3e:	22d0      	movs	r2, #208	; 0xd0
 8017b40:	5299      	strh	r1, [r3, r2]
    return LORAMAC_STATUS_OK;
 8017b42:	2300      	movs	r3, #0
}
 8017b44:	0018      	movs	r0, r3
 8017b46:	46bd      	mov	sp, r7
 8017b48:	b005      	add	sp, #20
 8017b4a:	bd90      	pop	{r4, r7, pc}
 8017b4c:	200010c4 	.word	0x200010c4

08017b50 <RegionIN865ChannelsRemove>:

bool RegionIN865ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8017b50:	b590      	push	{r4, r7, lr}
 8017b52:	b085      	sub	sp, #20
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
    uint8_t id = channelRemove->ChannelId;
 8017b58:	210f      	movs	r1, #15
 8017b5a:	187b      	adds	r3, r7, r1
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	7812      	ldrb	r2, [r2, #0]
 8017b60:	701a      	strb	r2, [r3, #0]

    if( id < IN865_NUMB_DEFAULT_CHANNELS )
 8017b62:	187b      	adds	r3, r7, r1
 8017b64:	781b      	ldrb	r3, [r3, #0]
 8017b66:	2b02      	cmp	r3, #2
 8017b68:	d801      	bhi.n	8017b6e <RegionIN865ChannelsRemove+0x1e>
    {
        return false;
 8017b6a:	2300      	movs	r3, #0
 8017b6c:	e015      	b.n	8017b9a <RegionIN865ChannelsRemove+0x4a>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8017b6e:	240f      	movs	r4, #15
 8017b70:	193b      	adds	r3, r7, r4
 8017b72:	781a      	ldrb	r2, [r3, #0]
 8017b74:	490b      	ldr	r1, [pc, #44]	; (8017ba4 <RegionIN865ChannelsRemove+0x54>)
 8017b76:	0013      	movs	r3, r2
 8017b78:	005b      	lsls	r3, r3, #1
 8017b7a:	189b      	adds	r3, r3, r2
 8017b7c:	009b      	lsls	r3, r3, #2
 8017b7e:	18cb      	adds	r3, r1, r3
 8017b80:	220c      	movs	r2, #12
 8017b82:	2100      	movs	r1, #0
 8017b84:	0018      	movs	r0, r3
 8017b86:	f001 fee7 	bl	8019958 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, IN865_MAX_NB_CHANNELS );
 8017b8a:	193b      	adds	r3, r7, r4
 8017b8c:	7819      	ldrb	r1, [r3, #0]
 8017b8e:	4b06      	ldr	r3, [pc, #24]	; (8017ba8 <RegionIN865ChannelsRemove+0x58>)
 8017b90:	2210      	movs	r2, #16
 8017b92:	0018      	movs	r0, r3
 8017b94:	f7fe f944 	bl	8015e20 <RegionCommonChanDisable>
 8017b98:	0003      	movs	r3, r0
}
 8017b9a:	0018      	movs	r0, r3
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	b005      	add	sp, #20
 8017ba0:	bd90      	pop	{r4, r7, pc}
 8017ba2:	46c0      	nop			; (mov r8, r8)
 8017ba4:	200010c4 	.word	0x200010c4
 8017ba8:	20001194 	.word	0x20001194

08017bac <RegionIN865SetContinuousWave>:

void RegionIN865SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8017bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017bae:	b085      	sub	sp, #20
 8017bb0:	af00      	add	r7, sp, #0
 8017bb2:	6078      	str	r0, [r7, #4]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2002      	movs	r0, #2
 8017bb8:	5618      	ldrsb	r0, [r3, r0]
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	781b      	ldrb	r3, [r3, #0]
 8017bbe:	0019      	movs	r1, r3
 8017bc0:	4a21      	ldr	r2, [pc, #132]	; (8017c48 <RegionIN865SetContinuousWave+0x9c>)
 8017bc2:	000b      	movs	r3, r1
 8017bc4:	005b      	lsls	r3, r3, #1
 8017bc6:	185b      	adds	r3, r3, r1
 8017bc8:	009b      	lsls	r3, r3, #2
 8017bca:	18d3      	adds	r3, r2, r3
 8017bcc:	3309      	adds	r3, #9
 8017bce:	781b      	ldrb	r3, [r3, #0]
 8017bd0:	4a1d      	ldr	r2, [pc, #116]	; (8017c48 <RegionIN865SetContinuousWave+0x9c>)
 8017bd2:	330c      	adds	r3, #12
 8017bd4:	011b      	lsls	r3, r3, #4
 8017bd6:	18d3      	adds	r3, r2, r3
 8017bd8:	3302      	adds	r3, #2
 8017bda:	2100      	movs	r1, #0
 8017bdc:	5659      	ldrsb	r1, [r3, r1]
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	2201      	movs	r2, #1
 8017be2:	569a      	ldrsb	r2, [r3, r2]
 8017be4:	260f      	movs	r6, #15
 8017be6:	19bc      	adds	r4, r7, r6
 8017be8:	4b18      	ldr	r3, [pc, #96]	; (8017c4c <RegionIN865SetContinuousWave+0xa0>)
 8017bea:	f7fe fd8b 	bl	8016704 <LimitTxPower>
 8017bee:	0003      	movs	r3, r0
 8017bf0:	7023      	strb	r3, [r4, #0]
    int8_t phyTxPower = 0;
 8017bf2:	200e      	movs	r0, #14
 8017bf4:	183b      	adds	r3, r7, r0
 8017bf6:	2200      	movs	r2, #0
 8017bf8:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	781b      	ldrb	r3, [r3, #0]
 8017bfe:	0019      	movs	r1, r3
 8017c00:	4a11      	ldr	r2, [pc, #68]	; (8017c48 <RegionIN865SetContinuousWave+0x9c>)
 8017c02:	000b      	movs	r3, r1
 8017c04:	005b      	lsls	r3, r3, #1
 8017c06:	185b      	adds	r3, r3, r1
 8017c08:	009b      	lsls	r3, r3, #2
 8017c0a:	589b      	ldr	r3, [r3, r2]
 8017c0c:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	6859      	ldr	r1, [r3, #4]
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	689a      	ldr	r2, [r3, #8]
 8017c16:	0005      	movs	r5, r0
 8017c18:	183c      	adds	r4, r7, r0
 8017c1a:	19bb      	adds	r3, r7, r6
 8017c1c:	781b      	ldrb	r3, [r3, #0]
 8017c1e:	b25b      	sxtb	r3, r3
 8017c20:	0018      	movs	r0, r3
 8017c22:	f7fe fc59 	bl	80164d8 <RegionCommonComputeTxPower>
 8017c26:	0003      	movs	r3, r0
 8017c28:	7023      	strb	r3, [r4, #0]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8017c2a:	4b09      	ldr	r3, [pc, #36]	; (8017c50 <RegionIN865SetContinuousWave+0xa4>)
 8017c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	8994      	ldrh	r4, [r2, #12]
 8017c32:	0028      	movs	r0, r5
 8017c34:	183a      	adds	r2, r7, r0
 8017c36:	2100      	movs	r1, #0
 8017c38:	5651      	ldrsb	r1, [r2, r1]
 8017c3a:	68b8      	ldr	r0, [r7, #8]
 8017c3c:	0022      	movs	r2, r4
 8017c3e:	4798      	blx	r3
}
 8017c40:	46c0      	nop			; (mov r8, r8)
 8017c42:	46bd      	mov	sp, r7
 8017c44:	b005      	add	sp, #20
 8017c46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c48:	200010c4 	.word	0x200010c4
 8017c4c:	20001194 	.word	0x20001194
 8017c50:	0801acec 	.word	0x0801acec

08017c54 <RegionIN865ApplyDrOffset>:

uint8_t RegionIN865ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017c54:	b590      	push	{r4, r7, lr}
 8017c56:	b083      	sub	sp, #12
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	0004      	movs	r4, r0
 8017c5c:	0008      	movs	r0, r1
 8017c5e:	0011      	movs	r1, r2
 8017c60:	1dfb      	adds	r3, r7, #7
 8017c62:	1c22      	adds	r2, r4, #0
 8017c64:	701a      	strb	r2, [r3, #0]
 8017c66:	1dbb      	adds	r3, r7, #6
 8017c68:	1c02      	adds	r2, r0, #0
 8017c6a:	701a      	strb	r2, [r3, #0]
 8017c6c:	1d7b      	adds	r3, r7, #5
 8017c6e:	1c0a      	adds	r2, r1, #0
 8017c70:	701a      	strb	r2, [r3, #0]
    // Apply offset formula
    return MIN( DR_5, MAX( DR_0, dr - EffectiveRx1DrOffsetIN865[drOffset] ) );
 8017c72:	1dbb      	adds	r3, r7, #6
 8017c74:	781b      	ldrb	r3, [r3, #0]
 8017c76:	b25b      	sxtb	r3, r3
 8017c78:	1d7a      	adds	r2, r7, #5
 8017c7a:	7812      	ldrb	r2, [r2, #0]
 8017c7c:	b252      	sxtb	r2, r2
 8017c7e:	490b      	ldr	r1, [pc, #44]	; (8017cac <RegionIN865ApplyDrOffset+0x58>)
 8017c80:	568a      	ldrsb	r2, [r1, r2]
 8017c82:	1a9b      	subs	r3, r3, r2
 8017c84:	2b05      	cmp	r3, #5
 8017c86:	dc0c      	bgt.n	8017ca2 <RegionIN865ApplyDrOffset+0x4e>
 8017c88:	1dbb      	adds	r3, r7, #6
 8017c8a:	781b      	ldrb	r3, [r3, #0]
 8017c8c:	b25b      	sxtb	r3, r3
 8017c8e:	1d7a      	adds	r2, r7, #5
 8017c90:	7812      	ldrb	r2, [r2, #0]
 8017c92:	b252      	sxtb	r2, r2
 8017c94:	4905      	ldr	r1, [pc, #20]	; (8017cac <RegionIN865ApplyDrOffset+0x58>)
 8017c96:	568a      	ldrsb	r2, [r1, r2]
 8017c98:	1a9b      	subs	r3, r3, r2
 8017c9a:	d500      	bpl.n	8017c9e <RegionIN865ApplyDrOffset+0x4a>
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	b2db      	uxtb	r3, r3
 8017ca0:	e000      	b.n	8017ca4 <RegionIN865ApplyDrOffset+0x50>
 8017ca2:	2305      	movs	r3, #5
}
 8017ca4:	0018      	movs	r0, r3
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	b003      	add	sp, #12
 8017caa:	bd90      	pop	{r4, r7, pc}
 8017cac:	0801b47c 	.word	0x0801b47c

08017cb0 <certif_running>:
static void OnCertifTxNextPacketTimerEvent( void* context );
static bool certif_tx( void );

/* Exported functions definition---------------------------------------------------------*/
bool certif_running(void)
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	af00      	add	r7, sp, #0
    return certifParam.Running;
 8017cb4:	4b02      	ldr	r3, [pc, #8]	; (8017cc0 <certif_running+0x10>)
 8017cb6:	781b      	ldrb	r3, [r3, #0]
}
 8017cb8:	0018      	movs	r0, r3
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}
 8017cbe:	46c0      	nop			; (mov r8, r8)
 8017cc0:	200011b0 	.word	0x200011b0

08017cc4 <certif_DownLinkIncrement>:

void certif_DownLinkIncrement( void )
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	af00      	add	r7, sp, #0
    certifParam.DownLinkCounter++;
 8017cc8:	4b05      	ldr	r3, [pc, #20]	; (8017ce0 <certif_DownLinkIncrement+0x1c>)
 8017cca:	22f6      	movs	r2, #246	; 0xf6
 8017ccc:	5a9b      	ldrh	r3, [r3, r2]
 8017cce:	3301      	adds	r3, #1
 8017cd0:	b299      	uxth	r1, r3
 8017cd2:	4b03      	ldr	r3, [pc, #12]	; (8017ce0 <certif_DownLinkIncrement+0x1c>)
 8017cd4:	22f6      	movs	r2, #246	; 0xf6
 8017cd6:	5299      	strh	r1, [r3, r2]
}
 8017cd8:	46c0      	nop			; (mov r8, r8)
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	bd80      	pop	{r7, pc}
 8017cde:	46c0      	nop			; (mov r8, r8)
 8017ce0:	200011b0 	.word	0x200011b0

08017ce4 <certif_linkCheck>:

void certif_linkCheck(MlmeConfirm_t *mlmeConfirm)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	6078      	str	r0, [r7, #4]
  certifParam.LinkCheck = true;
 8017cec:	4b08      	ldr	r3, [pc, #32]	; (8017d10 <certif_linkCheck+0x2c>)
 8017cee:	22f8      	movs	r2, #248	; 0xf8
 8017cf0:	2101      	movs	r1, #1
 8017cf2:	5499      	strb	r1, [r3, r2]
  certifParam.DemodMargin = mlmeConfirm->DemodMargin;
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	7a19      	ldrb	r1, [r3, #8]
 8017cf8:	4b05      	ldr	r3, [pc, #20]	; (8017d10 <certif_linkCheck+0x2c>)
 8017cfa:	22f9      	movs	r2, #249	; 0xf9
 8017cfc:	5499      	strb	r1, [r3, r2]
  certifParam.NbGateways = mlmeConfirm->NbGateways;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	7a59      	ldrb	r1, [r3, #9]
 8017d02:	4b03      	ldr	r3, [pc, #12]	; (8017d10 <certif_linkCheck+0x2c>)
 8017d04:	22fa      	movs	r2, #250	; 0xfa
 8017d06:	5499      	strb	r1, [r3, r2]
}
 8017d08:	46c0      	nop			; (mov r8, r8)
 8017d0a:	46bd      	mov	sp, r7
 8017d0c:	b002      	add	sp, #8
 8017d0e:	bd80      	pop	{r7, pc}
 8017d10:	200011b0 	.word	0x200011b0

08017d14 <certif_tx>:

static bool certif_tx( void )
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b086      	sub	sp, #24
 8017d18:	af00      	add	r7, sp, #0
  McpsReq_t mcpsReq;
  LoRaMacTxInfo_t txInfo;
  
  if( certifParam.LinkCheck == true )
 8017d1a:	4b47      	ldr	r3, [pc, #284]	; (8017e38 <certif_tx+0x124>)
 8017d1c:	22f8      	movs	r2, #248	; 0xf8
 8017d1e:	5c9b      	ldrb	r3, [r3, r2]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d017      	beq.n	8017d54 <certif_tx+0x40>
  {
    certifParam.LinkCheck = false;
 8017d24:	4b44      	ldr	r3, [pc, #272]	; (8017e38 <certif_tx+0x124>)
 8017d26:	22f8      	movs	r2, #248	; 0xf8
 8017d28:	2100      	movs	r1, #0
 8017d2a:	5499      	strb	r1, [r3, r2]
    certifParam.DataBufferSize = 3;
 8017d2c:	4b42      	ldr	r3, [pc, #264]	; (8017e38 <certif_tx+0x124>)
 8017d2e:	2203      	movs	r2, #3
 8017d30:	70da      	strb	r2, [r3, #3]
    certifParam.DataBuffer[0] = 5;
 8017d32:	4b41      	ldr	r3, [pc, #260]	; (8017e38 <certif_tx+0x124>)
 8017d34:	2205      	movs	r2, #5
 8017d36:	711a      	strb	r2, [r3, #4]
    certifParam.DataBuffer[1] = certifParam.DemodMargin;
 8017d38:	4b3f      	ldr	r3, [pc, #252]	; (8017e38 <certif_tx+0x124>)
 8017d3a:	22f9      	movs	r2, #249	; 0xf9
 8017d3c:	5c9a      	ldrb	r2, [r3, r2]
 8017d3e:	4b3e      	ldr	r3, [pc, #248]	; (8017e38 <certif_tx+0x124>)
 8017d40:	715a      	strb	r2, [r3, #5]
    certifParam.DataBuffer[2] = certifParam.NbGateways;
 8017d42:	4b3d      	ldr	r3, [pc, #244]	; (8017e38 <certif_tx+0x124>)
 8017d44:	22fa      	movs	r2, #250	; 0xfa
 8017d46:	5c9a      	ldrb	r2, [r3, r2]
 8017d48:	4b3b      	ldr	r3, [pc, #236]	; (8017e38 <certif_tx+0x124>)
 8017d4a:	719a      	strb	r2, [r3, #6]
    certifParam.State = 1;
 8017d4c:	4b3a      	ldr	r3, [pc, #232]	; (8017e38 <certif_tx+0x124>)
 8017d4e:	2201      	movs	r2, #1
 8017d50:	705a      	strb	r2, [r3, #1]
 8017d52:	e01b      	b.n	8017d8c <certif_tx+0x78>
  }
  else
  {
    switch( certifParam.State )
 8017d54:	4b38      	ldr	r3, [pc, #224]	; (8017e38 <certif_tx+0x124>)
 8017d56:	785b      	ldrb	r3, [r3, #1]
 8017d58:	2b01      	cmp	r3, #1
 8017d5a:	d005      	beq.n	8017d68 <certif_tx+0x54>
 8017d5c:	2b04      	cmp	r3, #4
 8017d5e:	d115      	bne.n	8017d8c <certif_tx+0x78>
    {
    case 4:
      certifParam.State = 1;
 8017d60:	4b35      	ldr	r3, [pc, #212]	; (8017e38 <certif_tx+0x124>)
 8017d62:	2201      	movs	r2, #1
 8017d64:	705a      	strb	r2, [r3, #1]
      break;
 8017d66:	e011      	b.n	8017d8c <certif_tx+0x78>
    case 1:
      certifParam.DataBufferSize = 2;
 8017d68:	4b33      	ldr	r3, [pc, #204]	; (8017e38 <certif_tx+0x124>)
 8017d6a:	2202      	movs	r2, #2
 8017d6c:	70da      	strb	r2, [r3, #3]
      certifParam.DataBuffer[0] = certifParam.DownLinkCounter >> 8;
 8017d6e:	4b32      	ldr	r3, [pc, #200]	; (8017e38 <certif_tx+0x124>)
 8017d70:	22f6      	movs	r2, #246	; 0xf6
 8017d72:	5a9b      	ldrh	r3, [r3, r2]
 8017d74:	0a1b      	lsrs	r3, r3, #8
 8017d76:	b29b      	uxth	r3, r3
 8017d78:	b2da      	uxtb	r2, r3
 8017d7a:	4b2f      	ldr	r3, [pc, #188]	; (8017e38 <certif_tx+0x124>)
 8017d7c:	711a      	strb	r2, [r3, #4]
      certifParam.DataBuffer[1] = certifParam.DownLinkCounter;
 8017d7e:	4b2e      	ldr	r3, [pc, #184]	; (8017e38 <certif_tx+0x124>)
 8017d80:	22f6      	movs	r2, #246	; 0xf6
 8017d82:	5a9b      	ldrh	r3, [r3, r2]
 8017d84:	b2da      	uxtb	r2, r3
 8017d86:	4b2c      	ldr	r3, [pc, #176]	; (8017e38 <certif_tx+0x124>)
 8017d88:	715a      	strb	r2, [r3, #5]
      break;
 8017d8a:	46c0      	nop			; (mov r8, r8)
    }
  }
    
  if( LoRaMacQueryTxPossible( certifParam.DataBufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8017d8c:	4b2a      	ldr	r3, [pc, #168]	; (8017e38 <certif_tx+0x124>)
 8017d8e:	78db      	ldrb	r3, [r3, #3]
 8017d90:	1d3a      	adds	r2, r7, #4
 8017d92:	0011      	movs	r1, r2
 8017d94:	0018      	movs	r0, r3
 8017d96:	f7f9 ff93 	bl	8011cc0 <LoRaMacQueryTxPossible>
 8017d9a:	1e03      	subs	r3, r0, #0
 8017d9c:	d00d      	beq.n	8017dba <certif_tx+0xa6>
  {
      // Send empty frame in order to flush MAC commands
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8017d9e:	2108      	movs	r1, #8
 8017da0:	187b      	adds	r3, r7, r1
 8017da2:	2200      	movs	r2, #0
 8017da4:	701a      	strb	r2, [r3, #0]
      mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8017da6:	187b      	adds	r3, r7, r1
 8017da8:	2200      	movs	r2, #0
 8017daa:	609a      	str	r2, [r3, #8]
      mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8017dac:	187b      	adds	r3, r7, r1
 8017dae:	2200      	movs	r2, #0
 8017db0:	819a      	strh	r2, [r3, #12]
      mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8017db2:	187b      	adds	r3, r7, r1
 8017db4:	2200      	movs	r2, #0
 8017db6:	739a      	strb	r2, [r3, #14]
 8017db8:	e02b      	b.n	8017e12 <certif_tx+0xfe>
  }
  else
  {
      if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 8017dba:	4b20      	ldr	r3, [pc, #128]	; (8017e3c <certif_tx+0x128>)
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d112      	bne.n	8017de8 <certif_tx+0xd4>
      {
          mcpsReq.Type = MCPS_UNCONFIRMED;
 8017dc2:	2108      	movs	r1, #8
 8017dc4:	187b      	adds	r3, r7, r1
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Unconfirmed.fPort = CERTIF_PORT;
 8017dca:	187b      	adds	r3, r7, r1
 8017dcc:	22e0      	movs	r2, #224	; 0xe0
 8017dce:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Unconfirmed.fBufferSize = certifParam.DataBufferSize;
 8017dd0:	4b19      	ldr	r3, [pc, #100]	; (8017e38 <certif_tx+0x124>)
 8017dd2:	78db      	ldrb	r3, [r3, #3]
 8017dd4:	b29a      	uxth	r2, r3
 8017dd6:	187b      	adds	r3, r7, r1
 8017dd8:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Unconfirmed.fBuffer = &(certifParam.DataBuffer);
 8017dda:	187b      	adds	r3, r7, r1
 8017ddc:	4a18      	ldr	r2, [pc, #96]	; (8017e40 <certif_tx+0x12c>)
 8017dde:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Unconfirmed.Datarate = DR_0;
 8017de0:	187b      	adds	r3, r7, r1
 8017de2:	2200      	movs	r2, #0
 8017de4:	739a      	strb	r2, [r3, #14]
 8017de6:	e014      	b.n	8017e12 <certif_tx+0xfe>
      }
      else
      {
          mcpsReq.Type = MCPS_CONFIRMED;
 8017de8:	2108      	movs	r1, #8
 8017dea:	187b      	adds	r3, r7, r1
 8017dec:	2201      	movs	r2, #1
 8017dee:	701a      	strb	r2, [r3, #0]
          mcpsReq.Req.Confirmed.fPort = CERTIF_PORT;
 8017df0:	187b      	adds	r3, r7, r1
 8017df2:	22e0      	movs	r2, #224	; 0xe0
 8017df4:	711a      	strb	r2, [r3, #4]
          mcpsReq.Req.Confirmed.fBufferSize = certifParam.DataBufferSize;
 8017df6:	4b10      	ldr	r3, [pc, #64]	; (8017e38 <certif_tx+0x124>)
 8017df8:	78db      	ldrb	r3, [r3, #3]
 8017dfa:	b29a      	uxth	r2, r3
 8017dfc:	187b      	adds	r3, r7, r1
 8017dfe:	819a      	strh	r2, [r3, #12]
          mcpsReq.Req.Confirmed.fBuffer = &(certifParam.DataBuffer);
 8017e00:	187b      	adds	r3, r7, r1
 8017e02:	4a0f      	ldr	r2, [pc, #60]	; (8017e40 <certif_tx+0x12c>)
 8017e04:	609a      	str	r2, [r3, #8]
          mcpsReq.Req.Confirmed.NbTrials = 8;
 8017e06:	187b      	adds	r3, r7, r1
 8017e08:	2208      	movs	r2, #8
 8017e0a:	73da      	strb	r2, [r3, #15]
          mcpsReq.Req.Confirmed.Datarate = DR_0;
 8017e0c:	187b      	adds	r3, r7, r1
 8017e0e:	2200      	movs	r2, #0
 8017e10:	739a      	strb	r2, [r3, #14]
      }
  }

  /*cerification test on-going*/
  TimerStart( &CertifTxNextPacketTimer );
 8017e12:	4b0c      	ldr	r3, [pc, #48]	; (8017e44 <certif_tx+0x130>)
 8017e14:	0018      	movs	r0, r3
 8017e16:	f001 f9cb 	bl	80191b0 <TimerStart>
	
  if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 8017e1a:	2308      	movs	r3, #8
 8017e1c:	18fb      	adds	r3, r7, r3
 8017e1e:	0018      	movs	r0, r3
 8017e20:	f7fa ffaa 	bl	8012d78 <LoRaMacMcpsRequest>
 8017e24:	1e03      	subs	r3, r0, #0
 8017e26:	d101      	bne.n	8017e2c <certif_tx+0x118>
  {
      return false;
 8017e28:	2300      	movs	r3, #0
 8017e2a:	e000      	b.n	8017e2e <certif_tx+0x11a>
  }
    return true;
 8017e2c:	2301      	movs	r3, #1
}
 8017e2e:	0018      	movs	r0, r3
 8017e30:	46bd      	mov	sp, r7
 8017e32:	b006      	add	sp, #24
 8017e34:	bd80      	pop	{r7, pc}
 8017e36:	46c0      	nop			; (mov r8, r8)
 8017e38:	200011b0 	.word	0x200011b0
 8017e3c:	200012ac 	.word	0x200012ac
 8017e40:	200011b4 	.word	0x200011b4
 8017e44:	20001198 	.word	0x20001198

08017e48 <certif_rx>:

void certif_rx( McpsIndication_t *mcpsIndication, MlmeReqJoin_t* JoinParameters)
{
 8017e48:	b590      	push	{r4, r7, lr}
 8017e4a:	b0a1      	sub	sp, #132	; 0x84
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
 8017e50:	6039      	str	r1, [r7, #0]
  if( certifParam.Running == false )
 8017e52:	4bb2      	ldr	r3, [pc, #712]	; (801811c <certif_rx+0x2d4>)
 8017e54:	781b      	ldrb	r3, [r3, #0]
 8017e56:	2201      	movs	r2, #1
 8017e58:	4053      	eors	r3, r2
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d062      	beq.n	8017f26 <certif_rx+0xde>
  {
      // Check compliance test enable command (i)
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	7b1b      	ldrb	r3, [r3, #12]
 8017e64:	2b04      	cmp	r3, #4
 8017e66:	d000      	beq.n	8017e6a <certif_rx+0x22>
 8017e68:	e148      	b.n	80180fc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	689b      	ldr	r3, [r3, #8]
 8017e6e:	781b      	ldrb	r3, [r3, #0]
      if( ( mcpsIndication->BufferSize == 4 ) &&
 8017e70:	2b01      	cmp	r3, #1
 8017e72:	d000      	beq.n	8017e76 <certif_rx+0x2e>
 8017e74:	e142      	b.n	80180fc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	689b      	ldr	r3, [r3, #8]
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8017e7e:	2b01      	cmp	r3, #1
 8017e80:	d000      	beq.n	8017e84 <certif_rx+0x3c>
 8017e82:	e13b      	b.n	80180fc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	689b      	ldr	r3, [r3, #8]
 8017e88:	3302      	adds	r3, #2
 8017e8a:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8017e8c:	2b01      	cmp	r3, #1
 8017e8e:	d000      	beq.n	8017e92 <certif_rx+0x4a>
 8017e90:	e134      	b.n	80180fc <certif_rx+0x2b4>
          ( mcpsIndication->Buffer[3] == 0x01 ) )
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	689b      	ldr	r3, [r3, #8]
 8017e96:	3303      	adds	r3, #3
 8017e98:	781b      	ldrb	r3, [r3, #0]
          ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8017e9a:	2b01      	cmp	r3, #1
 8017e9c:	d000      	beq.n	8017ea0 <certif_rx+0x58>
 8017e9e:	e12d      	b.n	80180fc <certif_rx+0x2b4>
      {
          MibRequestConfirm_t mibReq;
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8017ea0:	4b9f      	ldr	r3, [pc, #636]	; (8018120 <certif_rx+0x2d8>)
 8017ea2:	2200      	movs	r2, #0
 8017ea4:	701a      	strb	r2, [r3, #0]
          certifParam.DataBufferSize = 2;
 8017ea6:	4b9d      	ldr	r3, [pc, #628]	; (801811c <certif_rx+0x2d4>)
 8017ea8:	2202      	movs	r2, #2
 8017eaa:	70da      	strb	r2, [r3, #3]
          certifParam.DownLinkCounter = 0;
 8017eac:	4b9b      	ldr	r3, [pc, #620]	; (801811c <certif_rx+0x2d4>)
 8017eae:	22f6      	movs	r2, #246	; 0xf6
 8017eb0:	2100      	movs	r1, #0
 8017eb2:	5299      	strh	r1, [r3, r2]
          certifParam.LinkCheck = false;
 8017eb4:	4b99      	ldr	r3, [pc, #612]	; (801811c <certif_rx+0x2d4>)
 8017eb6:	22f8      	movs	r2, #248	; 0xf8
 8017eb8:	2100      	movs	r1, #0
 8017eba:	5499      	strb	r1, [r3, r2]
          certifParam.DemodMargin = 0;
 8017ebc:	4b97      	ldr	r3, [pc, #604]	; (801811c <certif_rx+0x2d4>)
 8017ebe:	22f9      	movs	r2, #249	; 0xf9
 8017ec0:	2100      	movs	r1, #0
 8017ec2:	5499      	strb	r1, [r3, r2]
          certifParam.NbGateways = 0;
 8017ec4:	4b95      	ldr	r3, [pc, #596]	; (801811c <certif_rx+0x2d4>)
 8017ec6:	22fa      	movs	r2, #250	; 0xfa
 8017ec8:	2100      	movs	r1, #0
 8017eca:	5499      	strb	r1, [r3, r2]
          certifParam.Running = true;
 8017ecc:	4b93      	ldr	r3, [pc, #588]	; (801811c <certif_rx+0x2d4>)
 8017ece:	2201      	movs	r2, #1
 8017ed0:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8017ed2:	4b92      	ldr	r3, [pc, #584]	; (801811c <certif_rx+0x2d4>)
 8017ed4:	2201      	movs	r2, #1
 8017ed6:	705a      	strb	r2, [r3, #1]

          mibReq.Type = MIB_ADR;
 8017ed8:	210c      	movs	r1, #12
 8017eda:	187b      	adds	r3, r7, r1
 8017edc:	2204      	movs	r2, #4
 8017ede:	701a      	strb	r2, [r3, #0]

          LoRaMacMibGetRequestConfirm( &mibReq );
 8017ee0:	000c      	movs	r4, r1
 8017ee2:	187b      	adds	r3, r7, r1
 8017ee4:	0018      	movs	r0, r3
 8017ee6:	f7f9 ff99 	bl	8011e1c <LoRaMacMibGetRequestConfirm>
          AdrEnableInit=mibReq.Param.AdrEnable;
 8017eea:	0021      	movs	r1, r4
 8017eec:	187b      	adds	r3, r7, r1
 8017eee:	791a      	ldrb	r2, [r3, #4]
 8017ef0:	4b8c      	ldr	r3, [pc, #560]	; (8018124 <certif_rx+0x2dc>)
 8017ef2:	701a      	strb	r2, [r3, #0]
          
          mibReq.Type = MIB_ADR;
 8017ef4:	187b      	adds	r3, r7, r1
 8017ef6:	2204      	movs	r2, #4
 8017ef8:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = true;
 8017efa:	187b      	adds	r3, r7, r1
 8017efc:	2201      	movs	r2, #1
 8017efe:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8017f00:	187b      	adds	r3, r7, r1
 8017f02:	0018      	movs	r0, r3
 8017f04:	f7fa f8e6 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( false );
#endif

         
        TimerInit( &CertifTxNextPacketTimer, OnCertifTxNextPacketTimerEvent );
 8017f08:	4a87      	ldr	r2, [pc, #540]	; (8018128 <certif_rx+0x2e0>)
 8017f0a:	4b88      	ldr	r3, [pc, #544]	; (801812c <certif_rx+0x2e4>)
 8017f0c:	0011      	movs	r1, r2
 8017f0e:	0018      	movs	r0, r3
 8017f10:	f001 f92f 	bl	8019172 <TimerInit>
        TimerSetValue( &CertifTxNextPacketTimer,  TEST_TX_DUTYCYCLE); 
 8017f14:	4a86      	ldr	r2, [pc, #536]	; (8018130 <certif_rx+0x2e8>)
 8017f16:	4b85      	ldr	r3, [pc, #532]	; (801812c <certif_rx+0x2e4>)
 8017f18:	0011      	movs	r1, r2
 8017f1a:	0018      	movs	r0, r3
 8017f1c:	f001 fa9a 	bl	8019454 <TimerSetValue>
        
        /*confirm test mode activation */
        certif_tx( );
 8017f20:	f7ff fef8 	bl	8017d14 <certif_tx>
 8017f24:	e0ea      	b.n	80180fc <certif_rx+0x2b4>
      }
  }

  else
  {
      certifParam.State = mcpsIndication->Buffer[0];
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	689b      	ldr	r3, [r3, #8]
 8017f2a:	781a      	ldrb	r2, [r3, #0]
 8017f2c:	4b7b      	ldr	r3, [pc, #492]	; (801811c <certif_rx+0x2d4>)
 8017f2e:	705a      	strb	r2, [r3, #1]
      switch( certifParam.State )
 8017f30:	4b7a      	ldr	r3, [pc, #488]	; (801811c <certif_rx+0x2d4>)
 8017f32:	785b      	ldrb	r3, [r3, #1]
 8017f34:	2b08      	cmp	r3, #8
 8017f36:	d900      	bls.n	8017f3a <certif_rx+0xf2>
 8017f38:	e0df      	b.n	80180fa <certif_rx+0x2b2>
 8017f3a:	009a      	lsls	r2, r3, #2
 8017f3c:	4b7d      	ldr	r3, [pc, #500]	; (8018134 <certif_rx+0x2ec>)
 8017f3e:	18d3      	adds	r3, r2, r3
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	469f      	mov	pc, r3
      {
        case 0: // Check compliance test disable command (ii)
        {
          
          certifParam.DownLinkCounter = 0;
 8017f44:	4b75      	ldr	r3, [pc, #468]	; (801811c <certif_rx+0x2d4>)
 8017f46:	22f6      	movs	r2, #246	; 0xf6
 8017f48:	2100      	movs	r1, #0
 8017f4a:	5299      	strh	r1, [r3, r2]
          certifParam.Running = false;
 8017f4c:	4b73      	ldr	r3, [pc, #460]	; (801811c <certif_rx+0x2d4>)
 8017f4e:	2200      	movs	r2, #0
 8017f50:	701a      	strb	r2, [r3, #0]
          
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_ADR;
 8017f52:	210c      	movs	r1, #12
 8017f54:	187b      	adds	r3, r7, r1
 8017f56:	2204      	movs	r2, #4
 8017f58:	701a      	strb	r2, [r3, #0]
          mibReq.Param.AdrEnable = AdrEnableInit;
 8017f5a:	4b72      	ldr	r3, [pc, #456]	; (8018124 <certif_rx+0x2dc>)
 8017f5c:	781a      	ldrb	r2, [r3, #0]
 8017f5e:	187b      	adds	r3, r7, r1
 8017f60:	711a      	strb	r2, [r3, #4]
          LoRaMacMibSetRequestConfirm( &mibReq );
 8017f62:	187b      	adds	r3, r7, r1
 8017f64:	0018      	movs	r0, r3
 8017f66:	f7fa f8b5 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
          LoRaMacTestSetDutyCycleOn( true );
#endif
          
          break;
 8017f6a:	46c0      	nop			; (mov r8, r8)
 8017f6c:	e0c6      	b.n	80180fc <certif_rx+0x2b4>
        }
        case 1: // (iii, iv)
          certifParam.DataBufferSize = 2;
 8017f6e:	4b6b      	ldr	r3, [pc, #428]	; (801811c <certif_rx+0x2d4>)
 8017f70:	2202      	movs	r2, #2
 8017f72:	70da      	strb	r2, [r3, #3]
          break;
 8017f74:	e0c2      	b.n	80180fc <certif_rx+0x2b4>
        case 2: // Enable confirmed messages (v)
          IsTxConfirmed = LORAWAN_CONFIRMED_MSG;
 8017f76:	4b6a      	ldr	r3, [pc, #424]	; (8018120 <certif_rx+0x2d8>)
 8017f78:	2201      	movs	r2, #1
 8017f7a:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8017f7c:	4b67      	ldr	r3, [pc, #412]	; (801811c <certif_rx+0x2d4>)
 8017f7e:	2201      	movs	r2, #1
 8017f80:	705a      	strb	r2, [r3, #1]
          break;
 8017f82:	e0bb      	b.n	80180fc <certif_rx+0x2b4>
        case 3:  // Disable confirmed messages (vi)
          IsTxConfirmed = LORAWAN_UNCONFIRMED_MSG;
 8017f84:	4b66      	ldr	r3, [pc, #408]	; (8018120 <certif_rx+0x2d8>)
 8017f86:	2200      	movs	r2, #0
 8017f88:	701a      	strb	r2, [r3, #0]
          certifParam.State = 1;
 8017f8a:	4b64      	ldr	r3, [pc, #400]	; (801811c <certif_rx+0x2d4>)
 8017f8c:	2201      	movs	r2, #1
 8017f8e:	705a      	strb	r2, [r3, #1]
          break;
 8017f90:	e0b4      	b.n	80180fc <certif_rx+0x2b4>
        case 4: // (vii)
          certifParam.DataBufferSize = mcpsIndication->BufferSize;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	7b1a      	ldrb	r2, [r3, #12]
 8017f96:	4b61      	ldr	r3, [pc, #388]	; (801811c <certif_rx+0x2d4>)
 8017f98:	70da      	strb	r2, [r3, #3]

          certifParam.DataBuffer[0] = 4;
 8017f9a:	4b60      	ldr	r3, [pc, #384]	; (801811c <certif_rx+0x2d4>)
 8017f9c:	2204      	movs	r2, #4
 8017f9e:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8017fa0:	237f      	movs	r3, #127	; 0x7f
 8017fa2:	18fb      	adds	r3, r7, r3
 8017fa4:	2201      	movs	r2, #1
 8017fa6:	701a      	strb	r2, [r3, #0]
 8017fa8:	e013      	b.n	8017fd2 <certif_rx+0x18a>
          {
              certifParam.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	689a      	ldr	r2, [r3, #8]
 8017fae:	207f      	movs	r0, #127	; 0x7f
 8017fb0:	183b      	adds	r3, r7, r0
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	18d3      	adds	r3, r2, r3
 8017fb6:	781a      	ldrb	r2, [r3, #0]
 8017fb8:	183b      	adds	r3, r7, r0
 8017fba:	781b      	ldrb	r3, [r3, #0]
 8017fbc:	3201      	adds	r2, #1
 8017fbe:	b2d1      	uxtb	r1, r2
 8017fc0:	4a56      	ldr	r2, [pc, #344]	; (801811c <certif_rx+0x2d4>)
 8017fc2:	18d3      	adds	r3, r2, r3
 8017fc4:	1c0a      	adds	r2, r1, #0
 8017fc6:	711a      	strb	r2, [r3, #4]
          for( uint8_t i = 1; i < certifParam.DataBufferSize; i++ )
 8017fc8:	183b      	adds	r3, r7, r0
 8017fca:	781a      	ldrb	r2, [r3, #0]
 8017fcc:	183b      	adds	r3, r7, r0
 8017fce:	3201      	adds	r2, #1
 8017fd0:	701a      	strb	r2, [r3, #0]
 8017fd2:	4b52      	ldr	r3, [pc, #328]	; (801811c <certif_rx+0x2d4>)
 8017fd4:	78db      	ldrb	r3, [r3, #3]
 8017fd6:	227f      	movs	r2, #127	; 0x7f
 8017fd8:	18ba      	adds	r2, r7, r2
 8017fda:	7812      	ldrb	r2, [r2, #0]
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d3e4      	bcc.n	8017faa <certif_rx+0x162>
          }
          break;
 8017fe0:	e08c      	b.n	80180fc <certif_rx+0x2b4>
        case 5: // (viii)
        {
          MlmeReq_t mlmeReq;
          mlmeReq.Type = MLME_LINK_CHECK;
 8017fe2:	216c      	movs	r1, #108	; 0x6c
 8017fe4:	187b      	adds	r3, r7, r1
 8017fe6:	2203      	movs	r2, #3
 8017fe8:	701a      	strb	r2, [r3, #0]
          LoRaMacMlmeRequest( &mlmeReq );
 8017fea:	187b      	adds	r3, r7, r1
 8017fec:	0018      	movs	r0, r3
 8017fee:	f7fa fd6b 	bl	8012ac8 <LoRaMacMlmeRequest>
          break;
 8017ff2:	46c0      	nop			; (mov r8, r8)
 8017ff4:	e082      	b.n	80180fc <certif_rx+0x2b4>
        {
            MlmeReq_t mlmeReq;

            // Disable TestMode and revert back to normal operation

            certifParam.DownLinkCounter = 0;
 8017ff6:	4b49      	ldr	r3, [pc, #292]	; (801811c <certif_rx+0x2d4>)
 8017ff8:	22f6      	movs	r2, #246	; 0xf6
 8017ffa:	2100      	movs	r1, #0
 8017ffc:	5299      	strh	r1, [r3, r2]
            certifParam.Running = false;
 8017ffe:	4b47      	ldr	r3, [pc, #284]	; (801811c <certif_rx+0x2d4>)
 8018000:	2200      	movs	r2, #0
 8018002:	701a      	strb	r2, [r3, #0]

            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_ADR;
 8018004:	210c      	movs	r1, #12
 8018006:	187b      	adds	r3, r7, r1
 8018008:	2204      	movs	r2, #4
 801800a:	701a      	strb	r2, [r3, #0]
            mibReq.Param.AdrEnable = AdrEnableInit;
 801800c:	4b45      	ldr	r3, [pc, #276]	; (8018124 <certif_rx+0x2dc>)
 801800e:	781a      	ldrb	r2, [r3, #0]
 8018010:	187b      	adds	r3, r7, r1
 8018012:	711a      	strb	r2, [r3, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8018014:	187b      	adds	r3, r7, r1
 8018016:	0018      	movs	r0, r3
 8018018:	f7fa f85c 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

            mlmeReq.Type = MLME_JOIN;
 801801c:	215c      	movs	r1, #92	; 0x5c
 801801e:	187b      	adds	r3, r7, r1
 8018020:	2200      	movs	r2, #0
 8018022:	701a      	strb	r2, [r3, #0]
            mlmeReq.Req.Join = *JoinParameters;
 8018024:	187b      	adds	r3, r7, r1
 8018026:	683a      	ldr	r2, [r7, #0]
 8018028:	7812      	ldrb	r2, [r2, #0]
 801802a:	711a      	strb	r2, [r3, #4]

            LoRaMacMlmeRequest( &mlmeReq );
 801802c:	187b      	adds	r3, r7, r1
 801802e:	0018      	movs	r0, r3
 8018030:	f7fa fd4a 	bl	8012ac8 <LoRaMacMlmeRequest>
            break;
 8018034:	46c0      	nop			; (mov r8, r8)
 8018036:	e061      	b.n	80180fc <certif_rx+0x2b4>
        }

        case 7: // (x)
        {
          if( mcpsIndication->BufferSize == 3 )
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	7b1b      	ldrb	r3, [r3, #12]
 801803c:	2b03      	cmp	r3, #3
 801803e:	d118      	bne.n	8018072 <certif_rx+0x22a>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW;
 8018040:	214c      	movs	r1, #76	; 0x4c
 8018042:	187b      	adds	r3, r7, r1
 8018044:	2204      	movs	r2, #4
 8018046:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	689b      	ldr	r3, [r3, #8]
 801804c:	3301      	adds	r3, #1
 801804e:	781b      	ldrb	r3, [r3, #0]
 8018050:	021b      	lsls	r3, r3, #8
 8018052:	b21a      	sxth	r2, r3
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	689b      	ldr	r3, [r3, #8]
 8018058:	3302      	adds	r3, #2
 801805a:	781b      	ldrb	r3, [r3, #0]
 801805c:	b21b      	sxth	r3, r3
 801805e:	4313      	orrs	r3, r2
 8018060:	b21b      	sxth	r3, r3
 8018062:	b29a      	uxth	r2, r3
 8018064:	187b      	adds	r3, r7, r1
 8018066:	809a      	strh	r2, [r3, #4]
              LoRaMacMlmeRequest( &mlmeReq );
 8018068:	187b      	adds	r3, r7, r1
 801806a:	0018      	movs	r0, r3
 801806c:	f7fa fd2c 	bl	8012ac8 <LoRaMacMlmeRequest>
 8018070:	e035      	b.n	80180de <certif_rx+0x296>
          }
          else if( mcpsIndication->BufferSize == 7 )
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	7b1b      	ldrb	r3, [r3, #12]
 8018076:	2b07      	cmp	r3, #7
 8018078:	d131      	bne.n	80180de <certif_rx+0x296>
          {
              MlmeReq_t mlmeReq;
              mlmeReq.Type = MLME_TXCW_1;
 801807a:	213c      	movs	r1, #60	; 0x3c
 801807c:	187b      	adds	r3, r7, r1
 801807e:	2205      	movs	r2, #5
 8018080:	701a      	strb	r2, [r3, #0]
              mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	689b      	ldr	r3, [r3, #8]
 8018086:	3301      	adds	r3, #1
 8018088:	781b      	ldrb	r3, [r3, #0]
 801808a:	021b      	lsls	r3, r3, #8
 801808c:	b21a      	sxth	r2, r3
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	689b      	ldr	r3, [r3, #8]
 8018092:	3302      	adds	r3, #2
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	b21b      	sxth	r3, r3
 8018098:	4313      	orrs	r3, r2
 801809a:	b21b      	sxth	r3, r3
 801809c:	b29a      	uxth	r2, r3
 801809e:	187b      	adds	r3, r7, r1
 80180a0:	809a      	strh	r2, [r3, #4]
              mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	689b      	ldr	r3, [r3, #8]
 80180a6:	3303      	adds	r3, #3
 80180a8:	781b      	ldrb	r3, [r3, #0]
 80180aa:	041a      	lsls	r2, r3, #16
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	689b      	ldr	r3, [r3, #8]
 80180b0:	3304      	adds	r3, #4
 80180b2:	781b      	ldrb	r3, [r3, #0]
 80180b4:	021b      	lsls	r3, r3, #8
 80180b6:	431a      	orrs	r2, r3
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	689b      	ldr	r3, [r3, #8]
 80180bc:	3305      	adds	r3, #5
 80180be:	781b      	ldrb	r3, [r3, #0]
 80180c0:	4313      	orrs	r3, r2
 80180c2:	001a      	movs	r2, r3
 80180c4:	2364      	movs	r3, #100	; 0x64
 80180c6:	435a      	muls	r2, r3
 80180c8:	187b      	adds	r3, r7, r1
 80180ca:	609a      	str	r2, [r3, #8]
              mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	689b      	ldr	r3, [r3, #8]
 80180d0:	799a      	ldrb	r2, [r3, #6]
 80180d2:	187b      	adds	r3, r7, r1
 80180d4:	731a      	strb	r2, [r3, #12]
              LoRaMacMlmeRequest( &mlmeReq );
 80180d6:	187b      	adds	r3, r7, r1
 80180d8:	0018      	movs	r0, r3
 80180da:	f7fa fcf5 	bl	8012ac8 <LoRaMacMlmeRequest>
          }
          certifParam.State = 1;
 80180de:	4b0f      	ldr	r3, [pc, #60]	; (801811c <certif_rx+0x2d4>)
 80180e0:	2201      	movs	r2, #1
 80180e2:	705a      	strb	r2, [r3, #1]
          break;
 80180e4:	e00a      	b.n	80180fc <certif_rx+0x2b4>
		
        case 8: // Send DeviceTimeReq
        {
          MlmeReq_t mlmeReq;

          mlmeReq.Type = MLME_DEVICE_TIME;
 80180e6:	212c      	movs	r1, #44	; 0x2c
 80180e8:	187b      	adds	r3, r7, r1
 80180ea:	2209      	movs	r2, #9
 80180ec:	701a      	strb	r2, [r3, #0]

          LoRaMacMlmeRequest( &mlmeReq );
 80180ee:	187b      	adds	r3, r7, r1
 80180f0:	0018      	movs	r0, r3
 80180f2:	f7fa fce9 	bl	8012ac8 <LoRaMacMlmeRequest>
          break;
 80180f6:	46c0      	nop			; (mov r8, r8)
 80180f8:	e000      	b.n	80180fc <certif_rx+0x2b4>
          LoRaMacMlmeRequest( &mlmeReq );
          break;
        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:                  
          break;
 80180fa:	46c0      	nop			; (mov r8, r8)
        }
    }
  
    if ( certifParam.Running == false )
 80180fc:	4b07      	ldr	r3, [pc, #28]	; (801811c <certif_rx+0x2d4>)
 80180fe:	781b      	ldrb	r3, [r3, #0]
 8018100:	2201      	movs	r2, #1
 8018102:	4053      	eors	r3, r2
 8018104:	b2db      	uxtb	r3, r3
 8018106:	2b00      	cmp	r3, #0
 8018108:	d003      	beq.n	8018112 <certif_rx+0x2ca>
    {
      /*cerification test stops*/
      TimerStop( &CertifTxNextPacketTimer );
 801810a:	4b08      	ldr	r3, [pc, #32]	; (801812c <certif_rx+0x2e4>)
 801810c:	0018      	movs	r0, r3
 801810e:	f001 f927 	bl	8019360 <TimerStop>
    }
}
 8018112:	46c0      	nop			; (mov r8, r8)
 8018114:	46bd      	mov	sp, r7
 8018116:	b021      	add	sp, #132	; 0x84
 8018118:	bd90      	pop	{r4, r7, pc}
 801811a:	46c0      	nop			; (mov r8, r8)
 801811c:	200011b0 	.word	0x200011b0
 8018120:	200012ac 	.word	0x200012ac
 8018124:	200012ad 	.word	0x200012ad
 8018128:	08018139 	.word	0x08018139
 801812c:	20001198 	.word	0x20001198
 8018130:	00001388 	.word	0x00001388
 8018134:	0801b59c 	.word	0x0801b59c

08018138 <OnCertifTxNextPacketTimerEvent>:

/*!
 * \brief Function executed on TxNextPacket Timeout event
 */
static void OnCertifTxNextPacketTimerEvent( void* context )
{
 8018138:	b580      	push	{r7, lr}
 801813a:	b082      	sub	sp, #8
 801813c:	af00      	add	r7, sp, #0
 801813e:	6078      	str	r0, [r7, #4]
    certif_tx( );
 8018140:	f7ff fde8 	bl	8017d14 <certif_tx>

}
 8018144:	46c0      	nop			; (mov r8, r8)
 8018146:	46bd      	mov	sp, r7
 8018148:	b002      	add	sp, #8
 801814a:	bd80      	pop	{r7, pc}

0801814c <McpsConfirm>:
 *
 * \param   [IN] McpsConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b084      	sub	sp, #16
 8018150:	af00      	add	r7, sp, #0
 8018152:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsConfirm STATUS: %s\r\n", EventInfoStatusStrings[mcpsConfirm->Status] ); )
  
    if( mcpsConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	785b      	ldrb	r3, [r3, #1]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d108      	bne.n	801816e <McpsConfirm+0x22>
    {
        switch( mcpsConfirm->McpsRequest )
 801815c:	687b      	ldr	r3, [r7, #4]
 801815e:	781b      	ldrb	r3, [r3, #0]
 8018160:	2b01      	cmp	r3, #1
 8018162:	d006      	beq.n	8018172 <McpsConfirm+0x26>
 8018164:	2b03      	cmp	r3, #3
 8018166:	d006      	beq.n	8018176 <McpsConfirm+0x2a>
 8018168:	2b00      	cmp	r3, #0
 801816a:	d006      	beq.n	801817a <McpsConfirm+0x2e>
            case MCPS_PROPRIETARY:
            {
                break;
            }
            default:
                break;
 801816c:	e006      	b.n	801817c <McpsConfirm+0x30>
        }
    }
 801816e:	46c0      	nop			; (mov r8, r8)
 8018170:	e004      	b.n	801817c <McpsConfirm+0x30>
                break;
 8018172:	46c0      	nop			; (mov r8, r8)
 8018174:	e002      	b.n	801817c <McpsConfirm+0x30>
                break;
 8018176:	46c0      	nop			; (mov r8, r8)
 8018178:	e000      	b.n	801817c <McpsConfirm+0x30>
                break;
 801817a:	46c0      	nop			; (mov r8, r8)
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceUpLinkFrame(mcpsConfirm);
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	0018      	movs	r0, r3
 8018180:	f000 fbc0 	bl	8018904 <TraceUpLinkFrame>
}
 8018184:	46c0      	nop			; (mov r8, r8)
 8018186:	46bd      	mov	sp, r7
 8018188:	b004      	add	sp, #16
 801818a:	bd80      	pop	{r7, pc}

0801818c <McpsIndication>:
 *
 * \param   [IN] mcpsIndication - Pointer to the indication structure,
 *               containing indication attributes.
 */
static void McpsIndication( McpsIndication_t *mcpsIndication )
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b086      	sub	sp, #24
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
    TVL2( PRINTNOW(); PRINTF("APP> McpsInd STATUS: %s\r\n", EventInfoStatusStrings[mcpsIndication->Status] );)
    
    lora_AppData_t AppData;
    if( mcpsIndication->Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	785b      	ldrb	r3, [r3, #1]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d14a      	bne.n	8018232 <McpsIndication+0xa6>
    {
        return;
    }

    switch( mcpsIndication->McpsIndication )
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	781b      	ldrb	r3, [r3, #0]
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d008      	beq.n	80181b6 <McpsIndication+0x2a>
 80181a4:	dc02      	bgt.n	80181ac <McpsIndication+0x20>
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d007      	beq.n	80181ba <McpsIndication+0x2e>
        case MCPS_MULTICAST:
        {
            break;
        }
        default:
            break;
 80181aa:	e00b      	b.n	80181c4 <McpsIndication+0x38>
    switch( mcpsIndication->McpsIndication )
 80181ac:	2b02      	cmp	r3, #2
 80181ae:	d006      	beq.n	80181be <McpsIndication+0x32>
 80181b0:	2b03      	cmp	r3, #3
 80181b2:	d006      	beq.n	80181c2 <McpsIndication+0x36>
            break;
 80181b4:	e006      	b.n	80181c4 <McpsIndication+0x38>
            break;
 80181b6:	46c0      	nop			; (mov r8, r8)
 80181b8:	e004      	b.n	80181c4 <McpsIndication+0x38>
            break;
 80181ba:	46c0      	nop			; (mov r8, r8)
 80181bc:	e002      	b.n	80181c4 <McpsIndication+0x38>
            break;
 80181be:	46c0      	nop			; (mov r8, r8)
 80181c0:	e000      	b.n	80181c4 <McpsIndication+0x38>
            break;
 80181c2:	46c0      	nop			; (mov r8, r8)

    // Check Multicast
    // Check Port
    // Check Datarate
    // Check FramePending
    if( mcpsIndication->FramePending == true )
 80181c4:	687b      	ldr	r3, [r7, #4]
 80181c6:	795b      	ldrb	r3, [r3, #5]
 80181c8:	2b01      	cmp	r3, #1
 80181ca:	d103      	bne.n	80181d4 <McpsIndication+0x48>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        LoRaMainCallbacks->LORA_TxNeeded( );
 80181cc:	4b1b      	ldr	r3, [pc, #108]	; (801823c <McpsIndication+0xb0>)
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	69db      	ldr	r3, [r3, #28]
 80181d2:	4798      	blx	r3
    // Check Buffer
    // Check BufferSize
    // Check Rssi
    // Check Snr
    // Check RxSlot
    if (certif_running() == true )
 80181d4:	f7ff fd6c 	bl	8017cb0 <certif_running>
 80181d8:	1e03      	subs	r3, r0, #0
 80181da:	d001      	beq.n	80181e0 <McpsIndication+0x54>
    {
      certif_DownLinkIncrement( );
 80181dc:	f7ff fd72 	bl	8017cc4 <certif_DownLinkIncrement>
    }

    if( mcpsIndication->RxData == true )
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	7b5b      	ldrb	r3, [r3, #13]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d01e      	beq.n	8018226 <McpsIndication+0x9a>
    {
      switch( mcpsIndication->Port )
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	78db      	ldrb	r3, [r3, #3]
 80181ec:	2be0      	cmp	r3, #224	; 0xe0
 80181ee:	d106      	bne.n	80181fe <McpsIndication+0x72>
      {
        case CERTIF_PORT:
          certif_rx( mcpsIndication, &JoinParameters );
 80181f0:	4a13      	ldr	r2, [pc, #76]	; (8018240 <McpsIndication+0xb4>)
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	0011      	movs	r1, r2
 80181f6:	0018      	movs	r0, r3
 80181f8:	f7ff fe26 	bl	8017e48 <certif_rx>
          break;
 80181fc:	e014      	b.n	8018228 <McpsIndication+0x9c>
        default:
          
          AppData.Port = mcpsIndication->Port;
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	78da      	ldrb	r2, [r3, #3]
 8018202:	2110      	movs	r1, #16
 8018204:	187b      	adds	r3, r7, r1
 8018206:	715a      	strb	r2, [r3, #5]
          AppData.BuffSize = mcpsIndication->BufferSize;
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	7b1a      	ldrb	r2, [r3, #12]
 801820c:	187b      	adds	r3, r7, r1
 801820e:	711a      	strb	r2, [r3, #4]
          AppData.Buff = mcpsIndication->Buffer;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	689a      	ldr	r2, [r3, #8]
 8018214:	187b      	adds	r3, r7, r1
 8018216:	601a      	str	r2, [r3, #0]
        
          LoRaMainCallbacks->LORA_RxData( &AppData );
 8018218:	4b08      	ldr	r3, [pc, #32]	; (801823c <McpsIndication+0xb0>)
 801821a:	681b      	ldr	r3, [r3, #0]
 801821c:	691b      	ldr	r3, [r3, #16]
 801821e:	187a      	adds	r2, r7, r1
 8018220:	0010      	movs	r0, r2
 8018222:	4798      	blx	r3
          break;
 8018224:	e000      	b.n	8018228 <McpsIndication+0x9c>
      }
    }
 8018226:	46c0      	nop			; (mov r8, r8)
    
    /*implicitely desactivated when VERBOSE_LEVEL < 2*/
    TraceDownLinkFrame(mcpsIndication);
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	0018      	movs	r0, r3
 801822c:	f000 fb94 	bl	8018958 <TraceDownLinkFrame>
 8018230:	e000      	b.n	8018234 <McpsIndication+0xa8>
        return;
 8018232:	46c0      	nop			; (mov r8, r8)
}
 8018234:	46bd      	mov	sp, r7
 8018236:	b006      	add	sp, #24
 8018238:	bd80      	pop	{r7, pc}
 801823a:	46c0      	nop			; (mov r8, r8)
 801823c:	200012f8 	.word	0x200012f8
 8018240:	200012b0 	.word	0x200012b0

08018244 <MlmeConfirm>:
 *
 * \param   [IN] MlmeConfirm - Pointer to the confirm structure,
 *               containing confirm attributes.
 */
static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b084      	sub	sp, #16
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MlmeConfirm STATUS: %s\r\n", EventInfoStatusStrings[mlmeConfirm->Status] );)
    
    switch( mlmeConfirm->MlmeRequest )
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	781b      	ldrb	r3, [r3, #0]
 8018250:	2b00      	cmp	r3, #0
 8018252:	d002      	beq.n	801825a <MlmeConfirm+0x16>
 8018254:	2b03      	cmp	r3, #3
 8018256:	d00c      	beq.n	8018272 <MlmeConfirm+0x2e>
            }  
        }              
#endif /* USE_DEVICE_TIMING */
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 8018258:	e018      	b.n	801828c <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	785b      	ldrb	r3, [r3, #1]
 801825e:	2b00      	cmp	r3, #0
 8018260:	d104      	bne.n	801826c <MlmeConfirm+0x28>
              LoRaMainCallbacks->LORA_HasJoined();
 8018262:	4b0c      	ldr	r3, [pc, #48]	; (8018294 <MlmeConfirm+0x50>)
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	695b      	ldr	r3, [r3, #20]
 8018268:	4798      	blx	r3
            break;
 801826a:	e00f      	b.n	801828c <MlmeConfirm+0x48>
                LORA_Join();
 801826c:	f000 f9d0 	bl	8018610 <LORA_Join>
            break;
 8018270:	e00c      	b.n	801828c <MlmeConfirm+0x48>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	785b      	ldrb	r3, [r3, #1]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d107      	bne.n	801828a <MlmeConfirm+0x46>
                if (certif_running() == true )
 801827a:	f7ff fd19 	bl	8017cb0 <certif_running>
 801827e:	1e03      	subs	r3, r0, #0
 8018280:	d003      	beq.n	801828a <MlmeConfirm+0x46>
                     certif_linkCheck( mlmeConfirm);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	0018      	movs	r0, r3
 8018286:	f7ff fd2d 	bl	8017ce4 <certif_linkCheck>
            break;
 801828a:	46c0      	nop			; (mov r8, r8)
    }
}
 801828c:	46c0      	nop			; (mov r8, r8)
 801828e:	46bd      	mov	sp, r7
 8018290:	b004      	add	sp, #16
 8018292:	bd80      	pop	{r7, pc}
 8018294:	200012f8 	.word	0x200012f8

08018298 <MlmeIndication>:
 * \brief   MLME-Indication event function
 *
 * \param   [IN] MlmeIndication - Pointer to the indication structure.
 */
static void MlmeIndication( MlmeIndication_t *MlmeIndication )
{
 8018298:	b580      	push	{r7, lr}
 801829a:	b084      	sub	sp, #16
 801829c:	af00      	add	r7, sp, #0
 801829e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
#endif /* LORAMAC_CLASSB_ENABLED */

    TVL2( PRINTNOW(); PRINTF("APP> MLMEInd STATUS: %s\r\n", EventInfoStatusStrings[MlmeIndication->Status] );    )

    switch( MlmeIndication->MlmeIndication )
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	781b      	ldrb	r3, [r3, #0]
 80182a4:	2b06      	cmp	r3, #6
 80182a6:	d000      	beq.n	80182aa <MlmeIndication+0x12>
            break;

        }
#endif /* LORAMAC_CLASSB_ENABLED */
        default:
            break;
 80182a8:	e004      	b.n	80182b4 <MlmeIndication+0x1c>
            LoRaMainCallbacks->LORA_TxNeeded( );			
 80182aa:	4b04      	ldr	r3, [pc, #16]	; (80182bc <MlmeIndication+0x24>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	69db      	ldr	r3, [r3, #28]
 80182b0:	4798      	blx	r3
            break;
 80182b2:	46c0      	nop			; (mov r8, r8)
    }
}
 80182b4:	46c0      	nop			; (mov r8, r8)
 80182b6:	46bd      	mov	sp, r7
 80182b8:	b004      	add	sp, #16
 80182ba:	bd80      	pop	{r7, pc}
 80182bc:	200012f8 	.word	0x200012f8

080182c0 <LORA_Init>:
/**
 *  lora Init
 */
void LORA_Init (LoRaMainCallback_t *callbacks, LoRaParam_t* LoRaParam )
{
 80182c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182c2:	46de      	mov	lr, fp
 80182c4:	4657      	mov	r7, sl
 80182c6:	464e      	mov	r6, r9
 80182c8:	4645      	mov	r5, r8
 80182ca:	b5e0      	push	{r5, r6, r7, lr}
 80182cc:	b09b      	sub	sp, #108	; 0x6c
 80182ce:	af0e      	add	r7, sp, #56	; 0x38
 80182d0:	61f8      	str	r0, [r7, #28]
 80182d2:	61b9      	str	r1, [r7, #24]
  uint8_t devEui[] = LORAWAN_DEVICE_EUI;
 80182d4:	2310      	movs	r3, #16
 80182d6:	2218      	movs	r2, #24
 80182d8:	4694      	mov	ip, r2
 80182da:	44bc      	add	ip, r7
 80182dc:	4463      	add	r3, ip
 80182de:	4ab7      	ldr	r2, [pc, #732]	; (80185bc <LORA_Init+0x2fc>)
 80182e0:	ca03      	ldmia	r2!, {r0, r1}
 80182e2:	c303      	stmia	r3!, {r0, r1}
  uint8_t joinEui[] = LORAWAN_JOIN_EUI;
 80182e4:	2308      	movs	r3, #8
 80182e6:	2218      	movs	r2, #24
 80182e8:	4694      	mov	ip, r2
 80182ea:	44bc      	add	ip, r7
 80182ec:	4463      	add	r3, ip
 80182ee:	4ab4      	ldr	r2, [pc, #720]	; (80185c0 <LORA_Init+0x300>)
 80182f0:	ca03      	ldmia	r2!, {r0, r1}
 80182f2:	c303      	stmia	r3!, {r0, r1}
  
  /* init the Tx Duty Cycle*/
  LoRaParamInit = LoRaParam;
 80182f4:	4bb3      	ldr	r3, [pc, #716]	; (80185c4 <LORA_Init+0x304>)
 80182f6:	69ba      	ldr	r2, [r7, #24]
 80182f8:	601a      	str	r2, [r3, #0]
  
  /* init the main call backs*/
  LoRaMainCallbacks = callbacks;
 80182fa:	4bb3      	ldr	r3, [pc, #716]	; (80185c8 <LORA_Init+0x308>)
 80182fc:	69fa      	ldr	r2, [r7, #28]
 80182fe:	601a      	str	r2, [r3, #0]
  // Random seed initialization
  srand1( LoRaMainCallbacks->BoardGetRandomSeed( ) );
  // Choose a random device address
  DevAddr = randr( 0, 0x01FFFFFF );
#endif
  PPRINTF( "ABP\n\r"); 
 8018300:	4bb2      	ldr	r3, [pc, #712]	; (80185cc <LORA_Init+0x30c>)
 8018302:	0018      	movs	r0, r3
 8018304:	f001 f99c 	bl	8019640 <TraceSend>
 8018308:	1e03      	subs	r3, r0, #0
 801830a:	d1f9      	bne.n	8018300 <LORA_Init+0x40>
  PPRINTF( "DevEui= %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\n\r", HEX8(devEui));
 801830c:	2010      	movs	r0, #16
 801830e:	2518      	movs	r5, #24
 8018310:	197b      	adds	r3, r7, r5
 8018312:	181b      	adds	r3, r3, r0
 8018314:	781b      	ldrb	r3, [r3, #0]
 8018316:	001e      	movs	r6, r3
 8018318:	197b      	adds	r3, r7, r5
 801831a:	181b      	adds	r3, r3, r0
 801831c:	785b      	ldrb	r3, [r3, #1]
 801831e:	617b      	str	r3, [r7, #20]
 8018320:	197b      	adds	r3, r7, r5
 8018322:	181b      	adds	r3, r3, r0
 8018324:	789b      	ldrb	r3, [r3, #2]
 8018326:	613b      	str	r3, [r7, #16]
 8018328:	197b      	adds	r3, r7, r5
 801832a:	181b      	adds	r3, r3, r0
 801832c:	78db      	ldrb	r3, [r3, #3]
 801832e:	001a      	movs	r2, r3
 8018330:	197b      	adds	r3, r7, r5
 8018332:	181b      	adds	r3, r3, r0
 8018334:	791b      	ldrb	r3, [r3, #4]
 8018336:	0019      	movs	r1, r3
 8018338:	197b      	adds	r3, r7, r5
 801833a:	181b      	adds	r3, r3, r0
 801833c:	795b      	ldrb	r3, [r3, #5]
 801833e:	001c      	movs	r4, r3
 8018340:	002b      	movs	r3, r5
 8018342:	18fd      	adds	r5, r7, r3
 8018344:	182b      	adds	r3, r5, r0
 8018346:	799b      	ldrb	r3, [r3, #6]
 8018348:	001d      	movs	r5, r3
 801834a:	2318      	movs	r3, #24
 801834c:	18fb      	adds	r3, r7, r3
 801834e:	181b      	adds	r3, r3, r0
 8018350:	79db      	ldrb	r3, [r3, #7]
 8018352:	489f      	ldr	r0, [pc, #636]	; (80185d0 <LORA_Init+0x310>)
 8018354:	9304      	str	r3, [sp, #16]
 8018356:	9503      	str	r5, [sp, #12]
 8018358:	9402      	str	r4, [sp, #8]
 801835a:	9101      	str	r1, [sp, #4]
 801835c:	9200      	str	r2, [sp, #0]
 801835e:	693b      	ldr	r3, [r7, #16]
 8018360:	697a      	ldr	r2, [r7, #20]
 8018362:	0031      	movs	r1, r6
 8018364:	f001 f96c 	bl	8019640 <TraceSend>
 8018368:	1e03      	subs	r3, r0, #0
 801836a:	d1cf      	bne.n	801830c <LORA_Init+0x4c>
  PPRINTF( "DevAdd=  %08X\n\r", DevAddr) ;
 801836c:	4b99      	ldr	r3, [pc, #612]	; (80185d4 <LORA_Init+0x314>)
 801836e:	681a      	ldr	r2, [r3, #0]
 8018370:	4b99      	ldr	r3, [pc, #612]	; (80185d8 <LORA_Init+0x318>)
 8018372:	0011      	movs	r1, r2
 8018374:	0018      	movs	r0, r3
 8018376:	f001 f963 	bl	8019640 <TraceSend>
 801837a:	1e03      	subs	r3, r0, #0
 801837c:	d1f6      	bne.n	801836c <LORA_Init+0xac>
  PPRINTF( "NwkSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(NwkSEncKey));
 801837e:	4b97      	ldr	r3, [pc, #604]	; (80185dc <LORA_Init+0x31c>)
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	617b      	str	r3, [r7, #20]
 8018384:	4b95      	ldr	r3, [pc, #596]	; (80185dc <LORA_Init+0x31c>)
 8018386:	785b      	ldrb	r3, [r3, #1]
 8018388:	613b      	str	r3, [r7, #16]
 801838a:	4b94      	ldr	r3, [pc, #592]	; (80185dc <LORA_Init+0x31c>)
 801838c:	789b      	ldrb	r3, [r3, #2]
 801838e:	60fb      	str	r3, [r7, #12]
 8018390:	4b92      	ldr	r3, [pc, #584]	; (80185dc <LORA_Init+0x31c>)
 8018392:	78db      	ldrb	r3, [r3, #3]
 8018394:	001d      	movs	r5, r3
 8018396:	4b91      	ldr	r3, [pc, #580]	; (80185dc <LORA_Init+0x31c>)
 8018398:	791b      	ldrb	r3, [r3, #4]
 801839a:	001e      	movs	r6, r3
 801839c:	4b8f      	ldr	r3, [pc, #572]	; (80185dc <LORA_Init+0x31c>)
 801839e:	795b      	ldrb	r3, [r3, #5]
 80183a0:	469c      	mov	ip, r3
 80183a2:	4b8e      	ldr	r3, [pc, #568]	; (80185dc <LORA_Init+0x31c>)
 80183a4:	799b      	ldrb	r3, [r3, #6]
 80183a6:	4698      	mov	r8, r3
 80183a8:	4b8c      	ldr	r3, [pc, #560]	; (80185dc <LORA_Init+0x31c>)
 80183aa:	79db      	ldrb	r3, [r3, #7]
 80183ac:	4699      	mov	r9, r3
 80183ae:	4b8b      	ldr	r3, [pc, #556]	; (80185dc <LORA_Init+0x31c>)
 80183b0:	7a1b      	ldrb	r3, [r3, #8]
 80183b2:	469a      	mov	sl, r3
 80183b4:	4b89      	ldr	r3, [pc, #548]	; (80185dc <LORA_Init+0x31c>)
 80183b6:	7a5b      	ldrb	r3, [r3, #9]
 80183b8:	469b      	mov	fp, r3
 80183ba:	4b88      	ldr	r3, [pc, #544]	; (80185dc <LORA_Init+0x31c>)
 80183bc:	7a9b      	ldrb	r3, [r3, #10]
 80183be:	60bb      	str	r3, [r7, #8]
 80183c0:	4b86      	ldr	r3, [pc, #536]	; (80185dc <LORA_Init+0x31c>)
 80183c2:	7adb      	ldrb	r3, [r3, #11]
 80183c4:	607b      	str	r3, [r7, #4]
 80183c6:	4b85      	ldr	r3, [pc, #532]	; (80185dc <LORA_Init+0x31c>)
 80183c8:	7b1b      	ldrb	r3, [r3, #12]
 80183ca:	001c      	movs	r4, r3
 80183cc:	4b83      	ldr	r3, [pc, #524]	; (80185dc <LORA_Init+0x31c>)
 80183ce:	7b5b      	ldrb	r3, [r3, #13]
 80183d0:	0019      	movs	r1, r3
 80183d2:	4b82      	ldr	r3, [pc, #520]	; (80185dc <LORA_Init+0x31c>)
 80183d4:	7b9b      	ldrb	r3, [r3, #14]
 80183d6:	001a      	movs	r2, r3
 80183d8:	4b80      	ldr	r3, [pc, #512]	; (80185dc <LORA_Init+0x31c>)
 80183da:	7bdb      	ldrb	r3, [r3, #15]
 80183dc:	4880      	ldr	r0, [pc, #512]	; (80185e0 <LORA_Init+0x320>)
 80183de:	930c      	str	r3, [sp, #48]	; 0x30
 80183e0:	920b      	str	r2, [sp, #44]	; 0x2c
 80183e2:	910a      	str	r1, [sp, #40]	; 0x28
 80183e4:	9409      	str	r4, [sp, #36]	; 0x24
 80183e6:	687c      	ldr	r4, [r7, #4]
 80183e8:	9408      	str	r4, [sp, #32]
 80183ea:	68bc      	ldr	r4, [r7, #8]
 80183ec:	9407      	str	r4, [sp, #28]
 80183ee:	465c      	mov	r4, fp
 80183f0:	9406      	str	r4, [sp, #24]
 80183f2:	4654      	mov	r4, sl
 80183f4:	9405      	str	r4, [sp, #20]
 80183f6:	464c      	mov	r4, r9
 80183f8:	9404      	str	r4, [sp, #16]
 80183fa:	4644      	mov	r4, r8
 80183fc:	9403      	str	r4, [sp, #12]
 80183fe:	4664      	mov	r4, ip
 8018400:	9402      	str	r4, [sp, #8]
 8018402:	9601      	str	r6, [sp, #4]
 8018404:	9500      	str	r5, [sp, #0]
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	693a      	ldr	r2, [r7, #16]
 801840a:	6979      	ldr	r1, [r7, #20]
 801840c:	f001 f918 	bl	8019640 <TraceSend>
 8018410:	1e03      	subs	r3, r0, #0
 8018412:	d1b4      	bne.n	801837e <LORA_Init+0xbe>
  PPRINTF( "AppSKey= %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\n\r", HEX16(AppSKey));
 8018414:	4b73      	ldr	r3, [pc, #460]	; (80185e4 <LORA_Init+0x324>)
 8018416:	781b      	ldrb	r3, [r3, #0]
 8018418:	617b      	str	r3, [r7, #20]
 801841a:	4b72      	ldr	r3, [pc, #456]	; (80185e4 <LORA_Init+0x324>)
 801841c:	785b      	ldrb	r3, [r3, #1]
 801841e:	613b      	str	r3, [r7, #16]
 8018420:	4b70      	ldr	r3, [pc, #448]	; (80185e4 <LORA_Init+0x324>)
 8018422:	789b      	ldrb	r3, [r3, #2]
 8018424:	60fb      	str	r3, [r7, #12]
 8018426:	4b6f      	ldr	r3, [pc, #444]	; (80185e4 <LORA_Init+0x324>)
 8018428:	78db      	ldrb	r3, [r3, #3]
 801842a:	001d      	movs	r5, r3
 801842c:	4b6d      	ldr	r3, [pc, #436]	; (80185e4 <LORA_Init+0x324>)
 801842e:	791b      	ldrb	r3, [r3, #4]
 8018430:	001e      	movs	r6, r3
 8018432:	4b6c      	ldr	r3, [pc, #432]	; (80185e4 <LORA_Init+0x324>)
 8018434:	795b      	ldrb	r3, [r3, #5]
 8018436:	469c      	mov	ip, r3
 8018438:	4b6a      	ldr	r3, [pc, #424]	; (80185e4 <LORA_Init+0x324>)
 801843a:	799b      	ldrb	r3, [r3, #6]
 801843c:	4698      	mov	r8, r3
 801843e:	4b69      	ldr	r3, [pc, #420]	; (80185e4 <LORA_Init+0x324>)
 8018440:	79db      	ldrb	r3, [r3, #7]
 8018442:	4699      	mov	r9, r3
 8018444:	4b67      	ldr	r3, [pc, #412]	; (80185e4 <LORA_Init+0x324>)
 8018446:	7a1b      	ldrb	r3, [r3, #8]
 8018448:	469a      	mov	sl, r3
 801844a:	4b66      	ldr	r3, [pc, #408]	; (80185e4 <LORA_Init+0x324>)
 801844c:	7a5b      	ldrb	r3, [r3, #9]
 801844e:	469b      	mov	fp, r3
 8018450:	4b64      	ldr	r3, [pc, #400]	; (80185e4 <LORA_Init+0x324>)
 8018452:	7a9b      	ldrb	r3, [r3, #10]
 8018454:	60bb      	str	r3, [r7, #8]
 8018456:	4b63      	ldr	r3, [pc, #396]	; (80185e4 <LORA_Init+0x324>)
 8018458:	7adb      	ldrb	r3, [r3, #11]
 801845a:	607b      	str	r3, [r7, #4]
 801845c:	4b61      	ldr	r3, [pc, #388]	; (80185e4 <LORA_Init+0x324>)
 801845e:	7b1b      	ldrb	r3, [r3, #12]
 8018460:	001c      	movs	r4, r3
 8018462:	4b60      	ldr	r3, [pc, #384]	; (80185e4 <LORA_Init+0x324>)
 8018464:	7b5b      	ldrb	r3, [r3, #13]
 8018466:	0019      	movs	r1, r3
 8018468:	4b5e      	ldr	r3, [pc, #376]	; (80185e4 <LORA_Init+0x324>)
 801846a:	7b9b      	ldrb	r3, [r3, #14]
 801846c:	001a      	movs	r2, r3
 801846e:	4b5d      	ldr	r3, [pc, #372]	; (80185e4 <LORA_Init+0x324>)
 8018470:	7bdb      	ldrb	r3, [r3, #15]
 8018472:	485d      	ldr	r0, [pc, #372]	; (80185e8 <LORA_Init+0x328>)
 8018474:	930c      	str	r3, [sp, #48]	; 0x30
 8018476:	920b      	str	r2, [sp, #44]	; 0x2c
 8018478:	910a      	str	r1, [sp, #40]	; 0x28
 801847a:	9409      	str	r4, [sp, #36]	; 0x24
 801847c:	687c      	ldr	r4, [r7, #4]
 801847e:	9408      	str	r4, [sp, #32]
 8018480:	68bc      	ldr	r4, [r7, #8]
 8018482:	9407      	str	r4, [sp, #28]
 8018484:	465c      	mov	r4, fp
 8018486:	9406      	str	r4, [sp, #24]
 8018488:	4654      	mov	r4, sl
 801848a:	9405      	str	r4, [sp, #20]
 801848c:	464c      	mov	r4, r9
 801848e:	9404      	str	r4, [sp, #16]
 8018490:	4644      	mov	r4, r8
 8018492:	9403      	str	r4, [sp, #12]
 8018494:	4664      	mov	r4, ip
 8018496:	9402      	str	r4, [sp, #8]
 8018498:	9601      	str	r6, [sp, #4]
 801849a:	9500      	str	r5, [sp, #0]
 801849c:	68fb      	ldr	r3, [r7, #12]
 801849e:	693a      	ldr	r2, [r7, #16]
 80184a0:	6979      	ldr	r1, [r7, #20]
 80184a2:	f001 f8cd 	bl	8019640 <TraceSend>
 80184a6:	1e03      	subs	r3, r0, #0
 80184a8:	d1b4      	bne.n	8018414 <LORA_Init+0x154>
#endif
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 80184aa:	4b50      	ldr	r3, [pc, #320]	; (80185ec <LORA_Init+0x32c>)
 80184ac:	4a50      	ldr	r2, [pc, #320]	; (80185f0 <LORA_Init+0x330>)
 80184ae:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80184b0:	4b4e      	ldr	r3, [pc, #312]	; (80185ec <LORA_Init+0x32c>)
 80184b2:	4a50      	ldr	r2, [pc, #320]	; (80185f4 <LORA_Init+0x334>)
 80184b4:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80184b6:	4b4d      	ldr	r3, [pc, #308]	; (80185ec <LORA_Init+0x32c>)
 80184b8:	4a4f      	ldr	r2, [pc, #316]	; (80185f8 <LORA_Init+0x338>)
 80184ba:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80184bc:	4b4b      	ldr	r3, [pc, #300]	; (80185ec <LORA_Init+0x32c>)
 80184be:	4a4f      	ldr	r2, [pc, #316]	; (80185fc <LORA_Init+0x33c>)
 80184c0:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LoRaMainCallbacks->BoardGetBatteryLevel;
 80184c2:	4b41      	ldr	r3, [pc, #260]	; (80185c8 <LORA_Init+0x308>)
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	681a      	ldr	r2, [r3, #0]
 80184c8:	4b4d      	ldr	r3, [pc, #308]	; (8018600 <LORA_Init+0x340>)
 80184ca:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LoRaMainCallbacks->BoardGetTemperatureLevel;
 80184cc:	4b3e      	ldr	r3, [pc, #248]	; (80185c8 <LORA_Init+0x308>)
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	685a      	ldr	r2, [r3, #4]
 80184d2:	4b4b      	ldr	r3, [pc, #300]	; (8018600 <LORA_Init+0x340>)
 80184d4:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.MacProcessNotify = LoRaMainCallbacks->MacProcessNotify;
 80184d6:	4b3c      	ldr	r3, [pc, #240]	; (80185c8 <LORA_Init+0x308>)
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	6a1a      	ldr	r2, [r3, #32]
 80184dc:	4b48      	ldr	r3, [pc, #288]	; (8018600 <LORA_Init+0x340>)
 80184de:	60da      	str	r2, [r3, #12]
#elif defined( REGION_CN779 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_CN779 );
#elif defined( REGION_EU433 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_EU433 );
#elif defined( REGION_IN865 )
  LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LORAMAC_REGION_IN865 );
 80184e0:	4947      	ldr	r1, [pc, #284]	; (8018600 <LORA_Init+0x340>)
 80184e2:	4b42      	ldr	r3, [pc, #264]	; (80185ec <LORA_Init+0x32c>)
 80184e4:	2207      	movs	r2, #7
 80184e6:	0018      	movs	r0, r3
 80184e8:	f7f9 f834 	bl	8011554 <LoRaMacInitialization>
  mibReq.Param.ChannelsDefaultMask = channelMask;
  LoRaMacMibSetRequestConfirm( &mibReq );
#endif
#endif

  mibReq.Type = MIB_DEV_EUI;
 80184ec:	4b45      	ldr	r3, [pc, #276]	; (8018604 <LORA_Init+0x344>)
 80184ee:	2202      	movs	r2, #2
 80184f0:	701a      	strb	r2, [r3, #0]
  mibReq.Param.DevEui = devEui;
 80184f2:	4b44      	ldr	r3, [pc, #272]	; (8018604 <LORA_Init+0x344>)
 80184f4:	2210      	movs	r2, #16
 80184f6:	2118      	movs	r1, #24
 80184f8:	468c      	mov	ip, r1
 80184fa:	44bc      	add	ip, r7
 80184fc:	4462      	add	r2, ip
 80184fe:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8018500:	4b40      	ldr	r3, [pc, #256]	; (8018604 <LORA_Init+0x344>)
 8018502:	0018      	movs	r0, r3
 8018504:	f7f9 fde6 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_JOIN_EUI;
 8018508:	4b3e      	ldr	r3, [pc, #248]	; (8018604 <LORA_Init+0x344>)
 801850a:	2203      	movs	r2, #3
 801850c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.JoinEui = joinEui;
 801850e:	4b3d      	ldr	r3, [pc, #244]	; (8018604 <LORA_Init+0x344>)
 8018510:	2208      	movs	r2, #8
 8018512:	2118      	movs	r1, #24
 8018514:	468c      	mov	ip, r1
 8018516:	44bc      	add	ip, r7
 8018518:	4462      	add	r2, ip
 801851a:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801851c:	4b39      	ldr	r3, [pc, #228]	; (8018604 <LORA_Init+0x344>)
 801851e:	0018      	movs	r0, r3
 8018520:	f7f9 fdd8 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_ADR;
 8018524:	4b37      	ldr	r3, [pc, #220]	; (8018604 <LORA_Init+0x344>)
 8018526:	2204      	movs	r2, #4
 8018528:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AdrEnable = LoRaParamInit->AdrEnable;
 801852a:	4b26      	ldr	r3, [pc, #152]	; (80185c4 <LORA_Init+0x304>)
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	781a      	ldrb	r2, [r3, #0]
 8018530:	4b34      	ldr	r3, [pc, #208]	; (8018604 <LORA_Init+0x344>)
 8018532:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8018534:	4b33      	ldr	r3, [pc, #204]	; (8018604 <LORA_Init+0x344>)
 8018536:	0018      	movs	r0, r3
 8018538:	f7f9 fdcc 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_PUBLIC_NETWORK;
 801853c:	4b31      	ldr	r3, [pc, #196]	; (8018604 <LORA_Init+0x344>)
 801853e:	221d      	movs	r2, #29
 8018540:	701a      	strb	r2, [r3, #0]
  mibReq.Param.EnablePublicNetwork = LoRaParamInit->EnablePublicNetwork;
 8018542:	4b20      	ldr	r3, [pc, #128]	; (80185c4 <LORA_Init+0x304>)
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	789a      	ldrb	r2, [r3, #2]
 8018548:	4b2e      	ldr	r3, [pc, #184]	; (8018604 <LORA_Init+0x344>)
 801854a:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801854c:	4b2d      	ldr	r3, [pc, #180]	; (8018604 <LORA_Init+0x344>)
 801854e:	0018      	movs	r0, r3
 8018550:	f7f9 fdc0 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
  
  mibReq.Type = MIB_APP_KEY;
 8018554:	4b2b      	ldr	r3, [pc, #172]	; (8018604 <LORA_Init+0x344>)
 8018556:	2208      	movs	r2, #8
 8018558:	701a      	strb	r2, [r3, #0]
  mibReq.Param.AppKey = AppKey;
 801855a:	4b2a      	ldr	r3, [pc, #168]	; (8018604 <LORA_Init+0x344>)
 801855c:	4a2a      	ldr	r2, [pc, #168]	; (8018608 <LORA_Init+0x348>)
 801855e:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8018560:	4b28      	ldr	r3, [pc, #160]	; (8018604 <LORA_Init+0x344>)
 8018562:	0018      	movs	r0, r3
 8018564:	f7f9 fdb6 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

  mibReq.Type = MIB_NWK_KEY;
 8018568:	4b26      	ldr	r3, [pc, #152]	; (8018604 <LORA_Init+0x344>)
 801856a:	2209      	movs	r2, #9
 801856c:	701a      	strb	r2, [r3, #0]
  mibReq.Param.NwkKey = NwkKey;
 801856e:	4b25      	ldr	r3, [pc, #148]	; (8018604 <LORA_Init+0x344>)
 8018570:	4a26      	ldr	r2, [pc, #152]	; (801860c <LORA_Init+0x34c>)
 8018572:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8018574:	4b23      	ldr	r3, [pc, #140]	; (8018604 <LORA_Init+0x344>)
 8018576:	0018      	movs	r0, r3
 8018578:	f7f9 fdac 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
                      
  mibReq.Type = MIB_DEVICE_CLASS;
 801857c:	4b21      	ldr	r3, [pc, #132]	; (8018604 <LORA_Init+0x344>)
 801857e:	2200      	movs	r2, #0
 8018580:	701a      	strb	r2, [r3, #0]
  mibReq.Param.Class= CLASS_A;
 8018582:	4b20      	ldr	r3, [pc, #128]	; (8018604 <LORA_Init+0x344>)
 8018584:	2200      	movs	r2, #0
 8018586:	711a      	strb	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 8018588:	4b1e      	ldr	r3, [pc, #120]	; (8018604 <LORA_Init+0x344>)
 801858a:	0018      	movs	r0, r3
 801858c:	f7f9 fda2 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

#if defined( REGION_EU868 ) || defined( REGION_RU864 ) || defined( REGION_CN779 ) || defined( REGION_EU433 )
  LoRaMacTestSetDutyCycleOn( LORAWAN_DUTYCYCLE_ON );
#endif
      
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8018590:	4b1c      	ldr	r3, [pc, #112]	; (8018604 <LORA_Init+0x344>)
 8018592:	2230      	movs	r2, #48	; 0x30
 8018594:	701a      	strb	r2, [r3, #0]
  mibReq.Param.SystemMaxRxError = 20;
 8018596:	4b1b      	ldr	r3, [pc, #108]	; (8018604 <LORA_Init+0x344>)
 8018598:	2214      	movs	r2, #20
 801859a:	605a      	str	r2, [r3, #4]
  LoRaMacMibSetRequestConfirm( &mibReq );
 801859c:	4b19      	ldr	r3, [pc, #100]	; (8018604 <LORA_Init+0x344>)
 801859e:	0018      	movs	r0, r3
 80185a0:	f7f9 fd98 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

  /*set Mac statein Idle*/
  LoRaMacStart( );
 80185a4:	f7f9 fb7e 	bl	8011ca4 <LoRaMacStart>
}
 80185a8:	46c0      	nop			; (mov r8, r8)
 80185aa:	46bd      	mov	sp, r7
 80185ac:	b00d      	add	sp, #52	; 0x34
 80185ae:	bc3c      	pop	{r2, r3, r4, r5}
 80185b0:	4690      	mov	r8, r2
 80185b2:	4699      	mov	r9, r3
 80185b4:	46a2      	mov	sl, r4
 80185b6:	46ab      	mov	fp, r5
 80185b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185ba:	46c0      	nop			; (mov r8, r8)
 80185bc:	0801aad0 	.word	0x0801aad0
 80185c0:	0801aad8 	.word	0x0801aad8
 80185c4:	200012b4 	.word	0x200012b4
 80185c8:	200012f8 	.word	0x200012f8
 80185cc:	0801a9cc 	.word	0x0801a9cc
 80185d0:	0801a9d4 	.word	0x0801a9d4
 80185d4:	200000e8 	.word	0x200000e8
 80185d8:	0801aa08 	.word	0x0801aa08
 80185dc:	200000c8 	.word	0x200000c8
 80185e0:	0801aa18 	.word	0x0801aa18
 80185e4:	200000d8 	.word	0x200000d8
 80185e8:	0801aa74 	.word	0x0801aa74
 80185ec:	200012b8 	.word	0x200012b8
 80185f0:	0801814d 	.word	0x0801814d
 80185f4:	0801818d 	.word	0x0801818d
 80185f8:	08018245 	.word	0x08018245
 80185fc:	08018299 	.word	0x08018299
 8018600:	200012c8 	.word	0x200012c8
 8018604:	200012d8 	.word	0x200012d8
 8018608:	20000088 	.word	0x20000088
 801860c:	20000098 	.word	0x20000098

08018610 <LORA_Join>:


void LORA_Join( void)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b086      	sub	sp, #24
 8018614:	af00      	add	r7, sp, #0
    MlmeReq_t mlmeReq;
  
    mlmeReq.Type = MLME_JOIN;
 8018616:	2108      	movs	r1, #8
 8018618:	187b      	adds	r3, r7, r1
 801861a:	2200      	movs	r2, #0
 801861c:	701a      	strb	r2, [r3, #0]
    mlmeReq.Req.Join.Datarate = LoRaParamInit->TxDatarate;
 801861e:	4b38      	ldr	r3, [pc, #224]	; (8018700 <LORA_Join+0xf0>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	785b      	ldrb	r3, [r3, #1]
 8018624:	b25b      	sxtb	r3, r3
 8018626:	b2da      	uxtb	r2, r3
 8018628:	187b      	adds	r3, r7, r1
 801862a:	711a      	strb	r2, [r3, #4]
  
    JoinParameters = mlmeReq.Req.Join;
 801862c:	4b35      	ldr	r3, [pc, #212]	; (8018704 <LORA_Join+0xf4>)
 801862e:	187a      	adds	r2, r7, r1
 8018630:	7912      	ldrb	r2, [r2, #4]
 8018632:	701a      	strb	r2, [r3, #0]

#if( OVER_THE_AIR_ACTIVATION != 0 )
    LoRaMacMlmeRequest( &mlmeReq );
#else
    mibReq.Type = MIB_NET_ID;
 8018634:	4b34      	ldr	r3, [pc, #208]	; (8018708 <LORA_Join+0xf8>)
 8018636:	2205      	movs	r2, #5
 8018638:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 801863a:	4b33      	ldr	r3, [pc, #204]	; (8018708 <LORA_Join+0xf8>)
 801863c:	2200      	movs	r2, #0
 801863e:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8018640:	4b31      	ldr	r3, [pc, #196]	; (8018708 <LORA_Join+0xf8>)
 8018642:	0018      	movs	r0, r3
 8018644:	f7f9 fd46 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_ADDR;
 8018648:	4b2f      	ldr	r3, [pc, #188]	; (8018708 <LORA_Join+0xf8>)
 801864a:	2206      	movs	r2, #6
 801864c:	701a      	strb	r2, [r3, #0]
    mibReq.Param.DevAddr = DevAddr;
 801864e:	4b2f      	ldr	r3, [pc, #188]	; (801870c <LORA_Join+0xfc>)
 8018650:	681a      	ldr	r2, [r3, #0]
 8018652:	4b2d      	ldr	r3, [pc, #180]	; (8018708 <LORA_Join+0xf8>)
 8018654:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8018656:	4b2c      	ldr	r3, [pc, #176]	; (8018708 <LORA_Join+0xf8>)
 8018658:	0018      	movs	r0, r3
 801865a:	f7f9 fd3b 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_F_NWK_S_INT_KEY;
 801865e:	4b2a      	ldr	r3, [pc, #168]	; (8018708 <LORA_Join+0xf8>)
 8018660:	220c      	movs	r2, #12
 8018662:	701a      	strb	r2, [r3, #0]
    mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 8018664:	4b28      	ldr	r3, [pc, #160]	; (8018708 <LORA_Join+0xf8>)
 8018666:	4a2a      	ldr	r2, [pc, #168]	; (8018710 <LORA_Join+0x100>)
 8018668:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801866a:	4b27      	ldr	r3, [pc, #156]	; (8018708 <LORA_Join+0xf8>)
 801866c:	0018      	movs	r0, r3
 801866e:	f7f9 fd31 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_S_NWK_S_INT_KEY;
 8018672:	4b25      	ldr	r3, [pc, #148]	; (8018708 <LORA_Join+0xf8>)
 8018674:	220d      	movs	r2, #13
 8018676:	701a      	strb	r2, [r3, #0]
    mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 8018678:	4b23      	ldr	r3, [pc, #140]	; (8018708 <LORA_Join+0xf8>)
 801867a:	4a26      	ldr	r2, [pc, #152]	; (8018714 <LORA_Join+0x104>)
 801867c:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 801867e:	4b22      	ldr	r3, [pc, #136]	; (8018708 <LORA_Join+0xf8>)
 8018680:	0018      	movs	r0, r3
 8018682:	f7f9 fd27 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NWK_S_ENC_KEY;
 8018686:	4b20      	ldr	r3, [pc, #128]	; (8018708 <LORA_Join+0xf8>)
 8018688:	220e      	movs	r2, #14
 801868a:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NwkSEncKey = NwkSEncKey;
 801868c:	4b1e      	ldr	r3, [pc, #120]	; (8018708 <LORA_Join+0xf8>)
 801868e:	4a22      	ldr	r2, [pc, #136]	; (8018718 <LORA_Join+0x108>)
 8018690:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8018692:	4b1d      	ldr	r3, [pc, #116]	; (8018708 <LORA_Join+0xf8>)
 8018694:	0018      	movs	r0, r3
 8018696:	f7f9 fd1d 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_APP_S_KEY;
 801869a:	4b1b      	ldr	r3, [pc, #108]	; (8018708 <LORA_Join+0xf8>)
 801869c:	220f      	movs	r2, #15
 801869e:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AppSKey = AppSKey;
 80186a0:	4b19      	ldr	r3, [pc, #100]	; (8018708 <LORA_Join+0xf8>)
 80186a2:	4a1e      	ldr	r2, [pc, #120]	; (801871c <LORA_Join+0x10c>)
 80186a4:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80186a6:	4b18      	ldr	r3, [pc, #96]	; (8018708 <LORA_Join+0xf8>)
 80186a8:	0018      	movs	r0, r3
 80186aa:	f7f9 fd13 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80186ae:	4b16      	ldr	r3, [pc, #88]	; (8018708 <LORA_Join+0xf8>)
 80186b0:	2201      	movs	r2, #1
 80186b2:	701a      	strb	r2, [r3, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80186b4:	4b14      	ldr	r3, [pc, #80]	; (8018708 <LORA_Join+0xf8>)
 80186b6:	2201      	movs	r2, #1
 80186b8:	711a      	strb	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80186ba:	4b13      	ldr	r3, [pc, #76]	; (8018708 <LORA_Join+0xf8>)
 80186bc:	0018      	movs	r0, r3
 80186be:	f7f9 fd09 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
    
    // Enable legacy mode to operate according to LoRaWAN Spec. 1.0.3
    Version_t abpLrWanVersion;

    abpLrWanVersion.Fields.Major    = 1;
 80186c2:	1d3b      	adds	r3, r7, #4
 80186c4:	2201      	movs	r2, #1
 80186c6:	70da      	strb	r2, [r3, #3]
    abpLrWanVersion.Fields.Minor    = 0;
 80186c8:	1d3b      	adds	r3, r7, #4
 80186ca:	2200      	movs	r2, #0
 80186cc:	709a      	strb	r2, [r3, #2]
    abpLrWanVersion.Fields.Revision = 3;
 80186ce:	1d3b      	adds	r3, r7, #4
 80186d0:	2203      	movs	r2, #3
 80186d2:	705a      	strb	r2, [r3, #1]
    abpLrWanVersion.Fields.Rfu      = 0;
 80186d4:	1d3b      	adds	r3, r7, #4
 80186d6:	2200      	movs	r2, #0
 80186d8:	701a      	strb	r2, [r3, #0]

    mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80186da:	4b0b      	ldr	r3, [pc, #44]	; (8018708 <LORA_Join+0xf8>)
 80186dc:	2235      	movs	r2, #53	; 0x35
 80186de:	701a      	strb	r2, [r3, #0]
    mibReq.Param.AbpLrWanVersion = abpLrWanVersion;
 80186e0:	4b09      	ldr	r3, [pc, #36]	; (8018708 <LORA_Join+0xf8>)
 80186e2:	687a      	ldr	r2, [r7, #4]
 80186e4:	605a      	str	r2, [r3, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80186e6:	4b08      	ldr	r3, [pc, #32]	; (8018708 <LORA_Join+0xf8>)
 80186e8:	0018      	movs	r0, r3
 80186ea:	f7f9 fcf3 	bl	80120d4 <LoRaMacMibSetRequestConfirm>

    LoRaMainCallbacks->LORA_HasJoined();
 80186ee:	4b0c      	ldr	r3, [pc, #48]	; (8018720 <LORA_Join+0x110>)
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	695b      	ldr	r3, [r3, #20]
 80186f4:	4798      	blx	r3
#endif
}
 80186f6:	46c0      	nop			; (mov r8, r8)
 80186f8:	46bd      	mov	sp, r7
 80186fa:	b006      	add	sp, #24
 80186fc:	bd80      	pop	{r7, pc}
 80186fe:	46c0      	nop			; (mov r8, r8)
 8018700:	200012b4 	.word	0x200012b4
 8018704:	200012b0 	.word	0x200012b0
 8018708:	200012d8 	.word	0x200012d8
 801870c:	200000e8 	.word	0x200000e8
 8018710:	200000a8 	.word	0x200000a8
 8018714:	200000b8 	.word	0x200000b8
 8018718:	200000c8 	.word	0x200000c8
 801871c:	200000d8 	.word	0x200000d8
 8018720:	200012f8 	.word	0x200012f8

08018724 <LORA_JoinStatus>:

LoraFlagStatus LORA_JoinStatus( void)
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b088      	sub	sp, #32
 8018728:	af00      	add	r7, sp, #0
  MibRequestConfirm_t mibReq;

  mibReq.Type = MIB_NETWORK_ACTIVATION;
 801872a:	003b      	movs	r3, r7
 801872c:	2201      	movs	r2, #1
 801872e:	701a      	strb	r2, [r3, #0]
  
  LoRaMacMibGetRequestConfirm( &mibReq );
 8018730:	003b      	movs	r3, r7
 8018732:	0018      	movs	r0, r3
 8018734:	f7f9 fb72 	bl	8011e1c <LoRaMacMibGetRequestConfirm>

  if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8018738:	003b      	movs	r3, r7
 801873a:	791b      	ldrb	r3, [r3, #4]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d101      	bne.n	8018744 <LORA_JoinStatus+0x20>
  {
    return LORA_RESET;
 8018740:	2300      	movs	r3, #0
 8018742:	e000      	b.n	8018746 <LORA_JoinStatus+0x22>
  }
  else
  {
    return LORA_SET;
 8018744:	2301      	movs	r3, #1
  }
}
 8018746:	0018      	movs	r0, r3
 8018748:	46bd      	mov	sp, r7
 801874a:	b008      	add	sp, #32
 801874c:	bd80      	pop	{r7, pc}
	...

08018750 <LORA_send>:



bool LORA_send(lora_AppData_t* AppData, LoraConfirm_t IsTxConfirmed)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b088      	sub	sp, #32
 8018754:	af00      	add	r7, sp, #0
 8018756:	6078      	str	r0, [r7, #4]
 8018758:	000a      	movs	r2, r1
 801875a:	1cfb      	adds	r3, r7, #3
 801875c:	701a      	strb	r2, [r3, #0]
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;
  
    /*if certification test are on going, application data is not sent*/
    if (certif_running() == true)
 801875e:	f7ff faa7 	bl	8017cb0 <certif_running>
 8018762:	1e03      	subs	r3, r0, #0
 8018764:	d001      	beq.n	801876a <LORA_send+0x1a>
    {
      return false;
 8018766:	2300      	movs	r3, #0
 8018768:	e05a      	b.n	8018820 <LORA_send+0xd0>
    }
    
    if( LoRaMacQueryTxPossible( AppData->BuffSize, &txInfo ) != LORAMAC_STATUS_OK )
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	791b      	ldrb	r3, [r3, #4]
 801876e:	220c      	movs	r2, #12
 8018770:	18ba      	adds	r2, r7, r2
 8018772:	0011      	movs	r1, r2
 8018774:	0018      	movs	r0, r3
 8018776:	f7f9 faa3 	bl	8011cc0 <LoRaMacQueryTxPossible>
 801877a:	1e03      	subs	r3, r0, #0
 801877c:	d010      	beq.n	80187a0 <LORA_send+0x50>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 801877e:	2110      	movs	r1, #16
 8018780:	187b      	adds	r3, r7, r1
 8018782:	2200      	movs	r2, #0
 8018784:	701a      	strb	r2, [r3, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8018786:	187b      	adds	r3, r7, r1
 8018788:	2200      	movs	r2, #0
 801878a:	609a      	str	r2, [r3, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 801878c:	187b      	adds	r3, r7, r1
 801878e:	2200      	movs	r2, #0
 8018790:	819a      	strh	r2, [r3, #12]
        mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 8018792:	4b25      	ldr	r3, [pc, #148]	; (8018828 <LORA_send+0xd8>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	2201      	movs	r2, #1
 8018798:	569a      	ldrsb	r2, [r3, r2]
 801879a:	187b      	adds	r3, r7, r1
 801879c:	739a      	strb	r2, [r3, #14]
 801879e:	e035      	b.n	801880c <LORA_send+0xbc>
    }
    else
    {
        if( IsTxConfirmed == LORAWAN_UNCONFIRMED_MSG )
 80187a0:	1cfb      	adds	r3, r7, #3
 80187a2:	781b      	ldrb	r3, [r3, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d117      	bne.n	80187d8 <LORA_send+0x88>
        {
            mcpsReq.Type = MCPS_UNCONFIRMED;
 80187a8:	2110      	movs	r1, #16
 80187aa:	187b      	adds	r3, r7, r1
 80187ac:	2200      	movs	r2, #0
 80187ae:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Unconfirmed.fPort = AppData->Port;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	795a      	ldrb	r2, [r3, #5]
 80187b4:	187b      	adds	r3, r7, r1
 80187b6:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Unconfirmed.fBufferSize = AppData->BuffSize;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	791b      	ldrb	r3, [r3, #4]
 80187bc:	b29a      	uxth	r2, r3
 80187be:	187b      	adds	r3, r7, r1
 80187c0:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Unconfirmed.fBuffer = AppData->Buff;
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681a      	ldr	r2, [r3, #0]
 80187c6:	187b      	adds	r3, r7, r1
 80187c8:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Unconfirmed.Datarate = LoRaParamInit->TxDatarate;
 80187ca:	4b17      	ldr	r3, [pc, #92]	; (8018828 <LORA_send+0xd8>)
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	2201      	movs	r2, #1
 80187d0:	569a      	ldrsb	r2, [r3, r2]
 80187d2:	187b      	adds	r3, r7, r1
 80187d4:	739a      	strb	r2, [r3, #14]
 80187d6:	e019      	b.n	801880c <LORA_send+0xbc>
        }
        else
        {
            mcpsReq.Type = MCPS_CONFIRMED;
 80187d8:	2110      	movs	r1, #16
 80187da:	187b      	adds	r3, r7, r1
 80187dc:	2201      	movs	r2, #1
 80187de:	701a      	strb	r2, [r3, #0]
            mcpsReq.Req.Confirmed.fPort = AppData->Port;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	795a      	ldrb	r2, [r3, #5]
 80187e4:	187b      	adds	r3, r7, r1
 80187e6:	711a      	strb	r2, [r3, #4]
            mcpsReq.Req.Confirmed.fBufferSize = AppData->BuffSize;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	791b      	ldrb	r3, [r3, #4]
 80187ec:	b29a      	uxth	r2, r3
 80187ee:	187b      	adds	r3, r7, r1
 80187f0:	819a      	strh	r2, [r3, #12]
            mcpsReq.Req.Confirmed.fBuffer = AppData->Buff;
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681a      	ldr	r2, [r3, #0]
 80187f6:	187b      	adds	r3, r7, r1
 80187f8:	609a      	str	r2, [r3, #8]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 80187fa:	187b      	adds	r3, r7, r1
 80187fc:	2208      	movs	r2, #8
 80187fe:	73da      	strb	r2, [r3, #15]
            mcpsReq.Req.Confirmed.Datarate = LoRaParamInit->TxDatarate;
 8018800:	4b09      	ldr	r3, [pc, #36]	; (8018828 <LORA_send+0xd8>)
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	2201      	movs	r2, #1
 8018806:	569a      	ldrsb	r2, [r3, r2]
 8018808:	187b      	adds	r3, r7, r1
 801880a:	739a      	strb	r2, [r3, #14]
        }
    }
    if( LoRaMacMcpsRequest( &mcpsReq ) == LORAMAC_STATUS_OK )
 801880c:	2310      	movs	r3, #16
 801880e:	18fb      	adds	r3, r7, r3
 8018810:	0018      	movs	r0, r3
 8018812:	f7fa fab1 	bl	8012d78 <LoRaMacMcpsRequest>
 8018816:	1e03      	subs	r3, r0, #0
 8018818:	d101      	bne.n	801881e <LORA_send+0xce>
    {
        return false;
 801881a:	2300      	movs	r3, #0
 801881c:	e000      	b.n	8018820 <LORA_send+0xd0>
    }
    return true;
 801881e:	2301      	movs	r3, #1
}  
 8018820:	0018      	movs	r0, r3
 8018822:	46bd      	mov	sp, r7
 8018824:	b008      	add	sp, #32
 8018826:	bd80      	pop	{r7, pc}
 8018828:	200012b4 	.word	0x200012b4

0801882c <LORA_RequestClass>:
  }
}
#endif /* LORAMAC_CLASSB_ENABLED */

LoraErrorStatus LORA_RequestClass( DeviceClass_t newClass )
{
 801882c:	b590      	push	{r4, r7, lr}
 801882e:	b08d      	sub	sp, #52	; 0x34
 8018830:	af00      	add	r7, sp, #0
 8018832:	0002      	movs	r2, r0
 8018834:	1dfb      	adds	r3, r7, #7
 8018836:	701a      	strb	r2, [r3, #0]
  LoraErrorStatus Errorstatus = LORA_SUCCESS;
 8018838:	232f      	movs	r3, #47	; 0x2f
 801883a:	18fb      	adds	r3, r7, r3
 801883c:	2200      	movs	r2, #0
 801883e:	701a      	strb	r2, [r3, #0]
  MibRequestConfirm_t mibReq;
  DeviceClass_t currentClass;
  
  mibReq.Type = MIB_DEVICE_CLASS;
 8018840:	240c      	movs	r4, #12
 8018842:	193b      	adds	r3, r7, r4
 8018844:	2200      	movs	r2, #0
 8018846:	701a      	strb	r2, [r3, #0]
  LoRaMacMibGetRequestConfirm( &mibReq );
 8018848:	193b      	adds	r3, r7, r4
 801884a:	0018      	movs	r0, r3
 801884c:	f7f9 fae6 	bl	8011e1c <LoRaMacMibGetRequestConfirm>
  
  currentClass = mibReq.Param.Class;
 8018850:	212e      	movs	r1, #46	; 0x2e
 8018852:	187b      	adds	r3, r7, r1
 8018854:	193a      	adds	r2, r7, r4
 8018856:	7912      	ldrb	r2, [r2, #4]
 8018858:	701a      	strb	r2, [r3, #0]
  /*attempt to swicth only if class update*/
  if (currentClass != newClass)
 801885a:	187a      	adds	r2, r7, r1
 801885c:	1dfb      	adds	r3, r7, #7
 801885e:	7812      	ldrb	r2, [r2, #0]
 8018860:	781b      	ldrb	r3, [r3, #0]
 8018862:	429a      	cmp	r2, r3
 8018864:	d040      	beq.n	80188e8 <LORA_RequestClass+0xbc>
  {
    switch (newClass)
 8018866:	1dfb      	adds	r3, r7, #7
 8018868:	781b      	ldrb	r3, [r3, #0]
 801886a:	2b01      	cmp	r3, #1
 801886c:	d019      	beq.n	80188a2 <LORA_RequestClass+0x76>
 801886e:	2b02      	cmp	r3, #2
 8018870:	d01c      	beq.n	80188ac <LORA_RequestClass+0x80>
 8018872:	2b00      	cmp	r3, #0
 8018874:	d000      	beq.n	8018878 <LORA_RequestClass+0x4c>
            Errorstatus = LORA_ERROR;
        }
        break;
      }
      default:
        break;
 8018876:	e038      	b.n	80188ea <LORA_RequestClass+0xbe>
        mibReq.Param.Class = CLASS_A;
 8018878:	210c      	movs	r1, #12
 801887a:	187b      	adds	r3, r7, r1
 801887c:	2200      	movs	r2, #0
 801887e:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8018880:	187b      	adds	r3, r7, r1
 8018882:	0018      	movs	r0, r3
 8018884:	f7f9 fc26 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
 8018888:	1e03      	subs	r3, r0, #0
 801888a:	d105      	bne.n	8018898 <LORA_RequestClass+0x6c>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_A);
 801888c:	4b1b      	ldr	r3, [pc, #108]	; (80188fc <LORA_RequestClass+0xd0>)
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	699b      	ldr	r3, [r3, #24]
 8018892:	2000      	movs	r0, #0
 8018894:	4798      	blx	r3
        break;
 8018896:	e028      	b.n	80188ea <LORA_RequestClass+0xbe>
          Errorstatus = LORA_ERROR;
 8018898:	232f      	movs	r3, #47	; 0x2f
 801889a:	18fb      	adds	r3, r7, r3
 801889c:	22ff      	movs	r2, #255	; 0xff
 801889e:	701a      	strb	r2, [r3, #0]
        break;
 80188a0:	e023      	b.n	80188ea <LORA_RequestClass+0xbe>
        PRINTF( "warning: LORAMAC_CLASSB_ENABLED has not been defined at compilation\n\r");
 80188a2:	4b17      	ldr	r3, [pc, #92]	; (8018900 <LORA_RequestClass+0xd4>)
 80188a4:	0018      	movs	r0, r3
 80188a6:	f000 fecb 	bl	8019640 <TraceSend>
        break;
 80188aa:	e01e      	b.n	80188ea <LORA_RequestClass+0xbe>
        if (currentClass != CLASS_A)
 80188ac:	232e      	movs	r3, #46	; 0x2e
 80188ae:	18fb      	adds	r3, r7, r3
 80188b0:	781b      	ldrb	r3, [r3, #0]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d003      	beq.n	80188be <LORA_RequestClass+0x92>
          Errorstatus = LORA_ERROR;
 80188b6:	232f      	movs	r3, #47	; 0x2f
 80188b8:	18fb      	adds	r3, r7, r3
 80188ba:	22ff      	movs	r2, #255	; 0xff
 80188bc:	701a      	strb	r2, [r3, #0]
        mibReq.Param.Class = CLASS_C;
 80188be:	210c      	movs	r1, #12
 80188c0:	187b      	adds	r3, r7, r1
 80188c2:	2202      	movs	r2, #2
 80188c4:	711a      	strb	r2, [r3, #4]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80188c6:	187b      	adds	r3, r7, r1
 80188c8:	0018      	movs	r0, r3
 80188ca:	f7f9 fc03 	bl	80120d4 <LoRaMacMibSetRequestConfirm>
 80188ce:	1e03      	subs	r3, r0, #0
 80188d0:	d105      	bne.n	80188de <LORA_RequestClass+0xb2>
          LoRaMainCallbacks->LORA_ConfirmClass(CLASS_C);
 80188d2:	4b0a      	ldr	r3, [pc, #40]	; (80188fc <LORA_RequestClass+0xd0>)
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	699b      	ldr	r3, [r3, #24]
 80188d8:	2002      	movs	r0, #2
 80188da:	4798      	blx	r3
        break;
 80188dc:	e005      	b.n	80188ea <LORA_RequestClass+0xbe>
            Errorstatus = LORA_ERROR;
 80188de:	232f      	movs	r3, #47	; 0x2f
 80188e0:	18fb      	adds	r3, r7, r3
 80188e2:	22ff      	movs	r2, #255	; 0xff
 80188e4:	701a      	strb	r2, [r3, #0]
        break;
 80188e6:	e000      	b.n	80188ea <LORA_RequestClass+0xbe>
    } 
  }
 80188e8:	46c0      	nop			; (mov r8, r8)
  return Errorstatus;
 80188ea:	232f      	movs	r3, #47	; 0x2f
 80188ec:	18fb      	adds	r3, r7, r3
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	b25b      	sxtb	r3, r3
}
 80188f2:	0018      	movs	r0, r3
 80188f4:	46bd      	mov	sp, r7
 80188f6:	b00d      	add	sp, #52	; 0x34
 80188f8:	bd90      	pop	{r4, r7, pc}
 80188fa:	46c0      	nop			; (mov r8, r8)
 80188fc:	200012f8 	.word	0x200012f8
 8018900:	0801aae0 	.word	0x0801aae0

08018904 <TraceUpLinkFrame>:
  *currentClass = mibReq.Param.Class;
}


static void TraceUpLinkFrame(McpsConfirm_t *mcpsConfirm)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b096      	sub	sp, #88	; 0x58
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]

    MibRequestConfirm_t mibGet;
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_DEVICE_CLASS;
 801890c:	2114      	movs	r1, #20
 801890e:	187b      	adds	r3, r7, r1
 8018910:	2200      	movs	r2, #0
 8018912:	701a      	strb	r2, [r3, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8018914:	187b      	adds	r3, r7, r1
 8018916:	0018      	movs	r0, r3
 8018918:	f7f9 fa80 	bl	8011e1c <LoRaMacMibGetRequestConfirm>
                             "ABC"[mibReq.Param.Class], \
                             AppData.Port, \
                             AppData.BuffSize, \
                             mcpsConfirm->TxPower );)

    mibGet.Type  = MIB_CHANNELS_MASK;
 801891c:	2134      	movs	r1, #52	; 0x34
 801891e:	187b      	adds	r3, r7, r1
 8018920:	2224      	movs	r2, #36	; 0x24
 8018922:	701a      	strb	r2, [r3, #0]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 8018924:	187b      	adds	r3, r7, r1
 8018926:	0018      	movs	r0, r3
 8018928:	f7f9 fa78 	bl	8011e1c <LoRaMacMibGetRequestConfirm>
 801892c:	1e03      	subs	r3, r0, #0
 801892e:	d10f      	bne.n	8018950 <TraceUpLinkFrame+0x4c>
#if defined( REGION_AS923 ) || defined( REGION_CN779 ) || \
    defined( REGION_EU868 ) || defined( REGION_IN865 ) || \
    defined( REGION_KR920 ) || defined( REGION_EU433 ) || \
    defined( REGION_RU864 )

        for( uint8_t i = 0; i < 1; i++)
 8018930:	2357      	movs	r3, #87	; 0x57
 8018932:	18fb      	adds	r3, r7, r3
 8018934:	2200      	movs	r2, #0
 8018936:	701a      	strb	r2, [r3, #0]
 8018938:	e005      	b.n	8018946 <TraceUpLinkFrame+0x42>
 801893a:	2157      	movs	r1, #87	; 0x57
 801893c:	187b      	adds	r3, r7, r1
 801893e:	781a      	ldrb	r2, [r3, #0]
 8018940:	187b      	adds	r3, r7, r1
 8018942:	3201      	adds	r2, #1
 8018944:	701a      	strb	r2, [r3, #0]
 8018946:	2357      	movs	r3, #87	; 0x57
 8018948:	18fb      	adds	r3, r7, r3
 801894a:	781b      	ldrb	r3, [r3, #0]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d0f4      	beq.n	801893a <TraceUpLinkFrame+0x36>
            TVL2( PRINTF( "%04X ", mibGet.Param.ChannelsMask[i] );)
        }
    }

    TVL2( PRINTF("\r\n\r\n" );)
} 
 8018950:	46c0      	nop			; (mov r8, r8)
 8018952:	46bd      	mov	sp, r7
 8018954:	b016      	add	sp, #88	; 0x58
 8018956:	bd80      	pop	{r7, pc}

08018958 <TraceDownLinkFrame>:


static void TraceDownLinkFrame(McpsIndication_t *mcpsIndication)
{
 8018958:	b590      	push	{r4, r7, lr}
 801895a:	b08b      	sub	sp, #44	; 0x2c
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
    const char *slotStrings[] = { "1", "2", "C", "Ping-Slot", "Multicast Ping-Slot" };
 8018960:	2314      	movs	r3, #20
 8018962:	18fb      	adds	r3, r7, r3
 8018964:	4a04      	ldr	r2, [pc, #16]	; (8018978 <TraceDownLinkFrame+0x20>)
 8018966:	ca13      	ldmia	r2!, {r0, r1, r4}
 8018968:	c313      	stmia	r3!, {r0, r1, r4}
 801896a:	ca03      	ldmia	r2!, {r0, r1}
 801896c:	c303      	stmia	r3!, {r0, r1}
                             slotStrings[mcpsIndication->RxSlot], \
                             mcpsIndication->Port, \
                             mcpsIndication->BufferSize, \
                             mcpsIndication->Rssi, \
                             mcpsIndication->Snr );)
}  
 801896e:	46c0      	nop			; (mov r8, r8)
 8018970:	46bd      	mov	sp, r7
 8018972:	b00b      	add	sp, #44	; 0x2c
 8018974:	bd90      	pop	{r4, r7, pc}
 8018976:	46c0      	nop			; (mov r8, r8)
 8018978:	0801ab54 	.word	0x0801ab54

0801897c <LPM_SetOffMode>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/
void LPM_SetOffMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b086      	sub	sp, #24
 8018980:	af00      	add	r7, sp, #0
 8018982:	0002      	movs	r2, r0
 8018984:	1dfb      	adds	r3, r7, #7
 8018986:	701a      	strb	r2, [r3, #0]
 8018988:	1dbb      	adds	r3, r7, #6
 801898a:	1c0a      	adds	r2, r1, #0
 801898c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801898e:	f3ef 8310 	mrs	r3, PRIMASK
 8018992:	613b      	str	r3, [r7, #16]
  return(result);
 8018994:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8018996:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018998:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 801899a:	1dbb      	adds	r3, r7, #6
 801899c:	781b      	ldrb	r3, [r3, #0]
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d00a      	beq.n	80189b8 <LPM_SetOffMode+0x3c>
 80189a2:	2b01      	cmp	r3, #1
 80189a4:	d000      	beq.n	80189a8 <LPM_SetOffMode+0x2c>
    {
      OffModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 80189a6:	e010      	b.n	80189ca <LPM_SetOffMode+0x4e>
      OffModeDisable |= (uint32_t)id;
 80189a8:	1dfb      	adds	r3, r7, #7
 80189aa:	781a      	ldrb	r2, [r3, #0]
 80189ac:	4b0b      	ldr	r3, [pc, #44]	; (80189dc <LPM_SetOffMode+0x60>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	431a      	orrs	r2, r3
 80189b2:	4b0a      	ldr	r3, [pc, #40]	; (80189dc <LPM_SetOffMode+0x60>)
 80189b4:	601a      	str	r2, [r3, #0]
      break;
 80189b6:	e008      	b.n	80189ca <LPM_SetOffMode+0x4e>
      OffModeDisable &= ~(uint32_t)id;
 80189b8:	1dfb      	adds	r3, r7, #7
 80189ba:	781b      	ldrb	r3, [r3, #0]
 80189bc:	43da      	mvns	r2, r3
 80189be:	4b07      	ldr	r3, [pc, #28]	; (80189dc <LPM_SetOffMode+0x60>)
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	401a      	ands	r2, r3
 80189c4:	4b05      	ldr	r3, [pc, #20]	; (80189dc <LPM_SetOffMode+0x60>)
 80189c6:	601a      	str	r2, [r3, #0]
      break;
 80189c8:	46c0      	nop			; (mov r8, r8)
 80189ca:	697b      	ldr	r3, [r7, #20]
 80189cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	f383 8810 	msr	PRIMASK, r3
  }
  
  RESTORE_PRIMASK( );

  return;
 80189d4:	46c0      	nop			; (mov r8, r8)
}
 80189d6:	46bd      	mov	sp, r7
 80189d8:	b006      	add	sp, #24
 80189da:	bd80      	pop	{r7, pc}
 80189dc:	20001300 	.word	0x20001300

080189e0 <LPM_SetStopMode>:

void LPM_SetStopMode(LPM_Id_t id, LPM_SetMode_t mode)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b086      	sub	sp, #24
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	0002      	movs	r2, r0
 80189e8:	1dfb      	adds	r3, r7, #7
 80189ea:	701a      	strb	r2, [r3, #0]
 80189ec:	1dbb      	adds	r3, r7, #6
 80189ee:	1c0a      	adds	r2, r1, #0
 80189f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80189f2:	f3ef 8310 	mrs	r3, PRIMASK
 80189f6:	613b      	str	r3, [r7, #16]
  return(result);
 80189f8:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 80189fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80189fc:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  
  switch(mode)
 80189fe:	1dbb      	adds	r3, r7, #6
 8018a00:	781b      	ldrb	r3, [r3, #0]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d00a      	beq.n	8018a1c <LPM_SetStopMode+0x3c>
 8018a06:	2b01      	cmp	r3, #1
 8018a08:	d000      	beq.n	8018a0c <LPM_SetStopMode+0x2c>
    {
      StopModeDisable &= ~(uint32_t)id;
      break;
    }
    default:
      break;
 8018a0a:	e010      	b.n	8018a2e <LPM_SetStopMode+0x4e>
      StopModeDisable |= (uint32_t)id;
 8018a0c:	1dfb      	adds	r3, r7, #7
 8018a0e:	781a      	ldrb	r2, [r3, #0]
 8018a10:	4b0b      	ldr	r3, [pc, #44]	; (8018a40 <LPM_SetStopMode+0x60>)
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	431a      	orrs	r2, r3
 8018a16:	4b0a      	ldr	r3, [pc, #40]	; (8018a40 <LPM_SetStopMode+0x60>)
 8018a18:	601a      	str	r2, [r3, #0]
      break;
 8018a1a:	e008      	b.n	8018a2e <LPM_SetStopMode+0x4e>
      StopModeDisable &= ~(uint32_t)id;
 8018a1c:	1dfb      	adds	r3, r7, #7
 8018a1e:	781b      	ldrb	r3, [r3, #0]
 8018a20:	43da      	mvns	r2, r3
 8018a22:	4b07      	ldr	r3, [pc, #28]	; (8018a40 <LPM_SetStopMode+0x60>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	401a      	ands	r2, r3
 8018a28:	4b05      	ldr	r3, [pc, #20]	; (8018a40 <LPM_SetStopMode+0x60>)
 8018a2a:	601a      	str	r2, [r3, #0]
      break;
 8018a2c:	46c0      	nop			; (mov r8, r8)
 8018a2e:	697b      	ldr	r3, [r7, #20]
 8018a30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	f383 8810 	msr	PRIMASK, r3
  }
  RESTORE_PRIMASK( );

  return;
 8018a38:	46c0      	nop			; (mov r8, r8)
}
 8018a3a:	46bd      	mov	sp, r7
 8018a3c:	b006      	add	sp, #24
 8018a3e:	bd80      	pop	{r7, pc}
 8018a40:	200012fc 	.word	0x200012fc

08018a44 <LPM_GetMode>:

  return;
}

LPM_GetMode_t LPM_GetMode(void)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b084      	sub	sp, #16
 8018a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8018a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8018a4e:	607b      	str	r3, [r7, #4]
  return(result);
 8018a50:	687b      	ldr	r3, [r7, #4]
  LPM_GetMode_t mode_selected;

  BACKUP_PRIMASK();
 8018a52:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8018a54:	b672      	cpsid	i
  
  DISABLE_IRQ( );

  if(StopModeDisable )
 8018a56:	4b11      	ldr	r3, [pc, #68]	; (8018a9c <LPM_GetMode+0x58>)
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d004      	beq.n	8018a68 <LPM_GetMode+0x24>
  {
    mode_selected = LPM_SleepMode;
 8018a5e:	230f      	movs	r3, #15
 8018a60:	18fb      	adds	r3, r7, r3
 8018a62:	2200      	movs	r2, #0
 8018a64:	701a      	strb	r2, [r3, #0]
 8018a66:	e00c      	b.n	8018a82 <LPM_GetMode+0x3e>
  }
  else
  {
    if(OffModeDisable)
 8018a68:	4b0d      	ldr	r3, [pc, #52]	; (8018aa0 <LPM_GetMode+0x5c>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d004      	beq.n	8018a7a <LPM_GetMode+0x36>
    {
      mode_selected = LPM_StopMode;
 8018a70:	230f      	movs	r3, #15
 8018a72:	18fb      	adds	r3, r7, r3
 8018a74:	2201      	movs	r2, #1
 8018a76:	701a      	strb	r2, [r3, #0]
 8018a78:	e003      	b.n	8018a82 <LPM_GetMode+0x3e>
    }
    else
    {
      mode_selected = LPM_OffMode;
 8018a7a:	230f      	movs	r3, #15
 8018a7c:	18fb      	adds	r3, r7, r3
 8018a7e:	2202      	movs	r2, #2
 8018a80:	701a      	strb	r2, [r3, #0]
 8018a82:	68bb      	ldr	r3, [r7, #8]
 8018a84:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	f383 8810 	msr	PRIMASK, r3
    }
  }

  RESTORE_PRIMASK( );

  return mode_selected;
 8018a8c:	230f      	movs	r3, #15
 8018a8e:	18fb      	adds	r3, r7, r3
 8018a90:	781b      	ldrb	r3, [r3, #0]
}
 8018a92:	0018      	movs	r0, r3
 8018a94:	46bd      	mov	sp, r7
 8018a96:	b004      	add	sp, #16
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	46c0      	nop			; (mov r8, r8)
 8018a9c:	200012fc 	.word	0x200012fc
 8018aa0:	20001300 	.word	0x20001300

08018aa4 <circular_queue_init>:
static int16_t circular_queue_get_free_size(queue_param_t* queue);
static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size);

/* Public functions ----------------------------------------------------------*/
void circular_queue_init(queue_param_t* queue, uint8_t* queue_buff, uint16_t queue_size)
{
 8018aa4:	b580      	push	{r7, lr}
 8018aa6:	b084      	sub	sp, #16
 8018aa8:	af00      	add	r7, sp, #0
 8018aaa:	60f8      	str	r0, [r7, #12]
 8018aac:	60b9      	str	r1, [r7, #8]
 8018aae:	1dbb      	adds	r3, r7, #6
 8018ab0:	801a      	strh	r2, [r3, #0]
  queue->queue_read_idx=0;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	2200      	movs	r2, #0
 8018ab6:	801a      	strh	r2, [r3, #0]
  queue->queue_write_idx=0;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	2200      	movs	r2, #0
 8018abc:	805a      	strh	r2, [r3, #2]
  queue->queue_nb_element=0;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	2200      	movs	r2, #0
 8018ac2:	809a      	strh	r2, [r3, #4]
  queue->queue_buff=queue_buff;
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	68ba      	ldr	r2, [r7, #8]
 8018ac8:	609a      	str	r2, [r3, #8]
  queue->queue_size=queue_size;
 8018aca:	68fb      	ldr	r3, [r7, #12]
 8018acc:	1dba      	adds	r2, r7, #6
 8018ace:	8812      	ldrh	r2, [r2, #0]
 8018ad0:	80da      	strh	r2, [r3, #6]
  queue->queue_full=0;
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	731a      	strb	r2, [r3, #12]
}
 8018ad8:	46c0      	nop			; (mov r8, r8)
 8018ada:	46bd      	mov	sp, r7
 8018adc:	b004      	add	sp, #16
 8018ade:	bd80      	pop	{r7, pc}

08018ae0 <circular_queue_add>:

int circular_queue_add(queue_param_t* queue, uint8_t* buff, uint16_t buff_size)
{
 8018ae0:	b5b0      	push	{r4, r5, r7, lr}
 8018ae2:	b086      	sub	sp, #24
 8018ae4:	af00      	add	r7, sp, #0
 8018ae6:	60f8      	str	r0, [r7, #12]
 8018ae8:	60b9      	str	r1, [r7, #8]
 8018aea:	1dbb      	adds	r3, r7, #6
 8018aec:	801a      	strh	r2, [r3, #0]
  int status;  
  int16_t free_buff_len=circular_queue_get_free_size(queue);
 8018aee:	2512      	movs	r5, #18
 8018af0:	197c      	adds	r4, r7, r5
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	0018      	movs	r0, r3
 8018af6:	f000 f985 	bl	8018e04 <circular_queue_get_free_size>
 8018afa:	0003      	movs	r3, r0
 8018afc:	8023      	strh	r3, [r4, #0]
  
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 8018afe:	1dbb      	adds	r3, r7, #6
 8018b00:	881b      	ldrh	r3, [r3, #0]
 8018b02:	1c9a      	adds	r2, r3, #2
 8018b04:	197b      	adds	r3, r7, r5
 8018b06:	2100      	movs	r1, #0
 8018b08:	5e5b      	ldrsh	r3, [r3, r1]
 8018b0a:	429a      	cmp	r2, r3
 8018b0c:	dc47      	bgt.n	8018b9e <circular_queue_add+0xbe>
      ((queue->queue_write_idx+buff_size+ELEMENT_SIZE_LEN<=queue->queue_size) 
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	885b      	ldrh	r3, [r3, #2]
 8018b12:	001a      	movs	r2, r3
 8018b14:	1dbb      	adds	r3, r7, #6
 8018b16:	881b      	ldrh	r3, [r3, #0]
 8018b18:	18d3      	adds	r3, r2, r3
 8018b1a:	3302      	adds	r3, #2
 8018b1c:	68fa      	ldr	r2, [r7, #12]
 8018b1e:	88d2      	ldrh	r2, [r2, #6]
  if ((buff_size+ELEMENT_SIZE_LEN<=free_buff_len)&& 
 8018b20:	4293      	cmp	r3, r2
 8018b22:	dd07      	ble.n	8018b34 <circular_queue_add+0x54>
        || (queue->queue_write_idx>=queue->queue_size-ELEMENT_SIZE_LEN))) /*elementSize cut in 2 or elementSize at Top*/
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	885b      	ldrh	r3, [r3, #2]
 8018b28:	001a      	movs	r2, r3
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	88db      	ldrh	r3, [r3, #6]
 8018b2e:	3b02      	subs	r3, #2
 8018b30:	429a      	cmp	r2, r3
 8018b32:	db34      	blt.n	8018b9e <circular_queue_add+0xbe>
  {
    //add in one element
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8018b34:	1dbb      	adds	r3, r7, #6
 8018b36:	881a      	ldrh	r2, [r3, #0]
 8018b38:	68fb      	ldr	r3, [r7, #12]
 8018b3a:	0011      	movs	r1, r2
 8018b3c:	0018      	movs	r0, r3
 8018b3e:	f000 f9ad 	bl	8018e9c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,buff_size);
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	689b      	ldr	r3, [r3, #8]
 8018b46:	68fa      	ldr	r2, [r7, #12]
 8018b48:	8852      	ldrh	r2, [r2, #2]
 8018b4a:	1898      	adds	r0, r3, r2
 8018b4c:	1dbb      	adds	r3, r7, #6
 8018b4e:	881a      	ldrh	r2, [r3, #0]
 8018b50:	68bb      	ldr	r3, [r7, #8]
 8018b52:	0019      	movs	r1, r3
 8018b54:	f000 f987 	bl	8018e66 <queue_copy>
    queue->queue_write_idx+=buff_size;
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	885a      	ldrh	r2, [r3, #2]
 8018b5c:	1dbb      	adds	r3, r7, #6
 8018b5e:	881b      	ldrh	r3, [r3, #0]
 8018b60:	18d3      	adds	r3, r2, r3
 8018b62:	b29a      	uxth	r2, r3
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	805a      	strh	r2, [r3, #2]
    /*modulo queue_size*/
    if (queue->queue_write_idx==queue->queue_size)
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	885a      	ldrh	r2, [r3, #2]
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	88db      	ldrh	r3, [r3, #6]
 8018b70:	429a      	cmp	r2, r3
 8018b72:	d102      	bne.n	8018b7a <circular_queue_add+0x9a>
    {
        queue->queue_write_idx=0;
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	2200      	movs	r2, #0
 8018b78:	805a      	strh	r2, [r3, #2]
    }
    //add one element
    queue->queue_nb_element++; 
 8018b7a:	68fb      	ldr	r3, [r7, #12]
 8018b7c:	889b      	ldrh	r3, [r3, #4]
 8018b7e:	3301      	adds	r3, #1
 8018b80:	b29a      	uxth	r2, r3
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	885a      	ldrh	r2, [r3, #2]
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	881b      	ldrh	r3, [r3, #0]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d102      	bne.n	8018b98 <circular_queue_add+0xb8>
    {
      queue->queue_full=1;
 8018b92:	68fb      	ldr	r3, [r7, #12]
 8018b94:	2201      	movs	r2, #1
 8018b96:	731a      	strb	r2, [r3, #12]
    }
    status=0;
 8018b98:	2300      	movs	r3, #0
 8018b9a:	617b      	str	r3, [r7, #20]
 8018b9c:	e060      	b.n	8018c60 <circular_queue_add+0x180>
  }
  else if (buff_size+2*ELEMENT_SIZE_LEN<=free_buff_len)
 8018b9e:	1dbb      	adds	r3, r7, #6
 8018ba0:	881b      	ldrh	r3, [r3, #0]
 8018ba2:	1d1a      	adds	r2, r3, #4
 8018ba4:	2312      	movs	r3, #18
 8018ba6:	18fb      	adds	r3, r7, r3
 8018ba8:	2100      	movs	r1, #0
 8018baa:	5e5b      	ldrsh	r3, [r3, r1]
 8018bac:	429a      	cmp	r2, r3
 8018bae:	dc54      	bgt.n	8018c5a <circular_queue_add+0x17a>
  {
    //split buffer in two elements
    /*fill top of queue with first element of size top_size*/
    uint16_t top_size = queue->queue_size-(queue->queue_write_idx+ELEMENT_SIZE_LEN);
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	88da      	ldrh	r2, [r3, #6]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	885b      	ldrh	r3, [r3, #2]
 8018bb8:	1ad3      	subs	r3, r2, r3
 8018bba:	b29a      	uxth	r2, r3
 8018bbc:	2410      	movs	r4, #16
 8018bbe:	193b      	adds	r3, r7, r4
 8018bc0:	3a02      	subs	r2, #2
 8018bc2:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue,top_size);
 8018bc4:	193b      	adds	r3, r7, r4
 8018bc6:	881a      	ldrh	r2, [r3, #0]
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	0011      	movs	r1, r2
 8018bcc:	0018      	movs	r0, r3
 8018bce:	f000 f965 	bl	8018e9c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff,top_size);
 8018bd2:	68fb      	ldr	r3, [r7, #12]
 8018bd4:	689b      	ldr	r3, [r3, #8]
 8018bd6:	68fa      	ldr	r2, [r7, #12]
 8018bd8:	8852      	ldrh	r2, [r2, #2]
 8018bda:	1898      	adds	r0, r3, r2
 8018bdc:	193b      	adds	r3, r7, r4
 8018bde:	881a      	ldrh	r2, [r3, #0]
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	0019      	movs	r1, r3
 8018be4:	f000 f93f 	bl	8018e66 <queue_copy>
    queue->queue_write_idx=0;
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	2200      	movs	r2, #0
 8018bec:	805a      	strh	r2, [r3, #2]

    /*fill bottom of queue with second element of size buff_size-top_size*/
    buff_size-=top_size;
 8018bee:	1dbb      	adds	r3, r7, #6
 8018bf0:	1db9      	adds	r1, r7, #6
 8018bf2:	193a      	adds	r2, r7, r4
 8018bf4:	8809      	ldrh	r1, [r1, #0]
 8018bf6:	8812      	ldrh	r2, [r2, #0]
 8018bf8:	1a8a      	subs	r2, r1, r2
 8018bfa:	801a      	strh	r2, [r3, #0]
    add_elementSize_and_inc_writeIdx(queue, buff_size);
 8018bfc:	1dbb      	adds	r3, r7, #6
 8018bfe:	881a      	ldrh	r2, [r3, #0]
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	0011      	movs	r1, r2
 8018c04:	0018      	movs	r0, r3
 8018c06:	f000 f949 	bl	8018e9c <add_elementSize_and_inc_writeIdx>
    queue_copy(queue->queue_buff+queue->queue_write_idx,buff+top_size,buff_size);
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	689b      	ldr	r3, [r3, #8]
 8018c0e:	68fa      	ldr	r2, [r7, #12]
 8018c10:	8852      	ldrh	r2, [r2, #2]
 8018c12:	1898      	adds	r0, r3, r2
 8018c14:	193b      	adds	r3, r7, r4
 8018c16:	881b      	ldrh	r3, [r3, #0]
 8018c18:	68ba      	ldr	r2, [r7, #8]
 8018c1a:	18d1      	adds	r1, r2, r3
 8018c1c:	1dbb      	adds	r3, r7, #6
 8018c1e:	881b      	ldrh	r3, [r3, #0]
 8018c20:	001a      	movs	r2, r3
 8018c22:	f000 f920 	bl	8018e66 <queue_copy>
    queue->queue_write_idx+=buff_size;
 8018c26:	68fb      	ldr	r3, [r7, #12]
 8018c28:	885a      	ldrh	r2, [r3, #2]
 8018c2a:	1dbb      	adds	r3, r7, #6
 8018c2c:	881b      	ldrh	r3, [r3, #0]
 8018c2e:	18d3      	adds	r3, r2, r3
 8018c30:	b29a      	uxth	r2, r3
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	805a      	strh	r2, [r3, #2]
    // add two elements
    queue->queue_nb_element+=2;
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	889b      	ldrh	r3, [r3, #4]
 8018c3a:	3302      	adds	r3, #2
 8018c3c:	b29a      	uxth	r2, r3
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	809a      	strh	r2, [r3, #4]
    /*in case que is full*/
    if (queue->queue_write_idx== queue->queue_read_idx)
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	885a      	ldrh	r2, [r3, #2]
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	881b      	ldrh	r3, [r3, #0]
 8018c4a:	429a      	cmp	r2, r3
 8018c4c:	d102      	bne.n	8018c54 <circular_queue_add+0x174>
    {
      queue->queue_full=1;
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	2201      	movs	r2, #1
 8018c52:	731a      	strb	r2, [r3, #12]
    }    
    status =0;
 8018c54:	2300      	movs	r3, #0
 8018c56:	617b      	str	r3, [r7, #20]
 8018c58:	e002      	b.n	8018c60 <circular_queue_add+0x180>
  }
  else
  {
    status=-1;
 8018c5a:	2301      	movs	r3, #1
 8018c5c:	425b      	negs	r3, r3
 8018c5e:	617b      	str	r3, [r7, #20]
  }
  return status;
 8018c60:	697b      	ldr	r3, [r7, #20]
}
 8018c62:	0018      	movs	r0, r3
 8018c64:	46bd      	mov	sp, r7
 8018c66:	b006      	add	sp, #24
 8018c68:	bdb0      	pop	{r4, r5, r7, pc}

08018c6a <circular_queue_get>:

int circular_queue_get(queue_param_t* queue, uint8_t** buff, uint16_t* buff_size)
{
 8018c6a:	b590      	push	{r4, r7, lr}
 8018c6c:	b087      	sub	sp, #28
 8018c6e:	af00      	add	r7, sp, #0
 8018c70:	60f8      	str	r0, [r7, #12]
 8018c72:	60b9      	str	r1, [r7, #8]
 8018c74:	607a      	str	r2, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	889b      	ldrh	r3, [r3, #4]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d103      	bne.n	8018c86 <circular_queue_get+0x1c>
  {
    status=-1;
 8018c7e:	2301      	movs	r3, #1
 8018c80:	425b      	negs	r3, r3
 8018c82:	617b      	str	r3, [r7, #20]
 8018c84:	e046      	b.n	8018d14 <circular_queue_get+0xaa>
  }
  else
  {
    uint16_t size;
    uint16_t read_idx=queue->queue_read_idx;
 8018c86:	2412      	movs	r4, #18
 8018c88:	193b      	adds	r3, r7, r4
 8018c8a:	68fa      	ldr	r2, [r7, #12]
 8018c8c:	8812      	ldrh	r2, [r2, #0]
 8018c8e:	801a      	strh	r2, [r3, #0]
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[read_idx++]<<8;
 8018c90:	68fb      	ldr	r3, [r7, #12]
 8018c92:	689a      	ldr	r2, [r3, #8]
 8018c94:	193b      	adds	r3, r7, r4
 8018c96:	881b      	ldrh	r3, [r3, #0]
 8018c98:	1939      	adds	r1, r7, r4
 8018c9a:	1c58      	adds	r0, r3, #1
 8018c9c:	8008      	strh	r0, [r1, #0]
 8018c9e:	18d3      	adds	r3, r2, r3
 8018ca0:	781b      	ldrb	r3, [r3, #0]
 8018ca2:	b29a      	uxth	r2, r3
 8018ca4:	2310      	movs	r3, #16
 8018ca6:	18fb      	adds	r3, r7, r3
 8018ca8:	0212      	lsls	r2, r2, #8
 8018caa:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	88db      	ldrh	r3, [r3, #6]
 8018cb0:	193a      	adds	r2, r7, r4
 8018cb2:	8812      	ldrh	r2, [r2, #0]
 8018cb4:	429a      	cmp	r2, r3
 8018cb6:	d103      	bne.n	8018cc0 <circular_queue_get+0x56>
    {
      read_idx=0;
 8018cb8:	2312      	movs	r3, #18
 8018cba:	18fb      	adds	r3, r7, r3
 8018cbc:	2200      	movs	r2, #0
 8018cbe:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[read_idx++];
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	689a      	ldr	r2, [r3, #8]
 8018cc4:	2412      	movs	r4, #18
 8018cc6:	193b      	adds	r3, r7, r4
 8018cc8:	881b      	ldrh	r3, [r3, #0]
 8018cca:	1939      	adds	r1, r7, r4
 8018ccc:	1c58      	adds	r0, r3, #1
 8018cce:	8008      	strh	r0, [r1, #0]
 8018cd0:	18d3      	adds	r3, r2, r3
 8018cd2:	781b      	ldrb	r3, [r3, #0]
 8018cd4:	b299      	uxth	r1, r3
 8018cd6:	2210      	movs	r2, #16
 8018cd8:	18bb      	adds	r3, r7, r2
 8018cda:	18ba      	adds	r2, r7, r2
 8018cdc:	8812      	ldrh	r2, [r2, #0]
 8018cde:	430a      	orrs	r2, r1
 8018ce0:	801a      	strh	r2, [r3, #0]
    /*wrap if needed*/
    if (read_idx==queue->queue_size)
 8018ce2:	68fb      	ldr	r3, [r7, #12]
 8018ce4:	88db      	ldrh	r3, [r3, #6]
 8018ce6:	193a      	adds	r2, r7, r4
 8018ce8:	8812      	ldrh	r2, [r2, #0]
 8018cea:	429a      	cmp	r2, r3
 8018cec:	d103      	bne.n	8018cf6 <circular_queue_get+0x8c>
    {
      read_idx=0;
 8018cee:	2312      	movs	r3, #18
 8018cf0:	18fb      	adds	r3, r7, r3
 8018cf2:	2200      	movs	r2, #0
 8018cf4:	801a      	strh	r2, [r3, #0]
    }
    *buff= queue->queue_buff+read_idx;
 8018cf6:	68fb      	ldr	r3, [r7, #12]
 8018cf8:	689a      	ldr	r2, [r3, #8]
 8018cfa:	2312      	movs	r3, #18
 8018cfc:	18fb      	adds	r3, r7, r3
 8018cfe:	881b      	ldrh	r3, [r3, #0]
 8018d00:	18d2      	adds	r2, r2, r3
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	601a      	str	r2, [r3, #0]

    * buff_size=size;
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	2210      	movs	r2, #16
 8018d0a:	18ba      	adds	r2, r7, r2
 8018d0c:	8812      	ldrh	r2, [r2, #0]
 8018d0e:	801a      	strh	r2, [r3, #0]
    status=0;
 8018d10:	2300      	movs	r3, #0
 8018d12:	617b      	str	r3, [r7, #20]
  }
  return status;
 8018d14:	697b      	ldr	r3, [r7, #20]
}
 8018d16:	0018      	movs	r0, r3
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	b007      	add	sp, #28
 8018d1c:	bd90      	pop	{r4, r7, pc}

08018d1e <circular_queue_remove>:

int circular_queue_remove(queue_param_t* queue)
{
 8018d1e:	b580      	push	{r7, lr}
 8018d20:	b084      	sub	sp, #16
 8018d22:	af00      	add	r7, sp, #0
 8018d24:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	889b      	ldrh	r3, [r3, #4]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d103      	bne.n	8018d36 <circular_queue_remove+0x18>
  {
      status=-1;
 8018d2e:	2301      	movs	r3, #1
 8018d30:	425b      	negs	r3, r3
 8018d32:	60fb      	str	r3, [r7, #12]
 8018d34:	e04e      	b.n	8018dd4 <circular_queue_remove+0xb6>
  }
  else
  {
    uint16_t size;
    /*retreive and remove 1st element' size and content*/
    size=(uint16_t) queue->queue_buff[queue->queue_read_idx++]<<8;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	689a      	ldr	r2, [r3, #8]
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	881b      	ldrh	r3, [r3, #0]
 8018d3e:	1c59      	adds	r1, r3, #1
 8018d40:	b288      	uxth	r0, r1
 8018d42:	6879      	ldr	r1, [r7, #4]
 8018d44:	8008      	strh	r0, [r1, #0]
 8018d46:	18d3      	adds	r3, r2, r3
 8018d48:	781b      	ldrb	r3, [r3, #0]
 8018d4a:	b29a      	uxth	r2, r3
 8018d4c:	230a      	movs	r3, #10
 8018d4e:	18fb      	adds	r3, r7, r3
 8018d50:	0212      	lsls	r2, r2, #8
 8018d52:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	881a      	ldrh	r2, [r3, #0]
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	88db      	ldrh	r3, [r3, #6]
 8018d5c:	429a      	cmp	r2, r3
 8018d5e:	d102      	bne.n	8018d66 <circular_queue_remove+0x48>
    {
      queue->queue_read_idx=0;
 8018d60:	687b      	ldr	r3, [r7, #4]
 8018d62:	2200      	movs	r2, #0
 8018d64:	801a      	strh	r2, [r3, #0]
    }
    size|=(uint16_t) queue->queue_buff[queue->queue_read_idx++];
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	689a      	ldr	r2, [r3, #8]
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	881b      	ldrh	r3, [r3, #0]
 8018d6e:	1c59      	adds	r1, r3, #1
 8018d70:	b288      	uxth	r0, r1
 8018d72:	6879      	ldr	r1, [r7, #4]
 8018d74:	8008      	strh	r0, [r1, #0]
 8018d76:	18d3      	adds	r3, r2, r3
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	b299      	uxth	r1, r3
 8018d7c:	220a      	movs	r2, #10
 8018d7e:	18bb      	adds	r3, r7, r2
 8018d80:	18ba      	adds	r2, r7, r2
 8018d82:	8812      	ldrh	r2, [r2, #0]
 8018d84:	430a      	orrs	r2, r1
 8018d86:	801a      	strh	r2, [r3, #0]
    if (queue->queue_read_idx==queue->queue_size)
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	881a      	ldrh	r2, [r3, #0]
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	88db      	ldrh	r3, [r3, #6]
 8018d90:	429a      	cmp	r2, r3
 8018d92:	d102      	bne.n	8018d9a <circular_queue_remove+0x7c>
    {
      queue->queue_read_idx=0;
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	2200      	movs	r2, #0
 8018d98:	801a      	strh	r2, [r3, #0]
    }
    /* increment read index*/
    queue->queue_read_idx+=size;
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	881a      	ldrh	r2, [r3, #0]
 8018d9e:	230a      	movs	r3, #10
 8018da0:	18fb      	adds	r3, r7, r3
 8018da2:	881b      	ldrh	r3, [r3, #0]
 8018da4:	18d3      	adds	r3, r2, r3
 8018da6:	b29a      	uxth	r2, r3
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	801a      	strh	r2, [r3, #0]
    /*modulo queue_size*/
    if (queue->queue_read_idx==queue->queue_size)
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	881a      	ldrh	r2, [r3, #0]
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	88db      	ldrh	r3, [r3, #6]
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d102      	bne.n	8018dbe <circular_queue_remove+0xa0>
    {
        queue->queue_read_idx=0;
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	2200      	movs	r2, #0
 8018dbc:	801a      	strh	r2, [r3, #0]
    }
    /* decrement number of element*/
    queue->queue_nb_element--;
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	889b      	ldrh	r3, [r3, #4]
 8018dc2:	3b01      	subs	r3, #1
 8018dc4:	b29a      	uxth	r2, r3
 8018dc6:	687b      	ldr	r3, [r7, #4]
 8018dc8:	809a      	strh	r2, [r3, #4]
    queue->queue_full=0;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	731a      	strb	r2, [r3, #12]
    status=0;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	60fb      	str	r3, [r7, #12]
  }
  return status;
 8018dd4:	68fb      	ldr	r3, [r7, #12]
}
 8018dd6:	0018      	movs	r0, r3
 8018dd8:	46bd      	mov	sp, r7
 8018dda:	b004      	add	sp, #16
 8018ddc:	bd80      	pop	{r7, pc}

08018dde <circular_queue_sense>:

int circular_queue_sense(queue_param_t* queue)
{
 8018dde:	b580      	push	{r7, lr}
 8018de0:	b084      	sub	sp, #16
 8018de2:	af00      	add	r7, sp, #0
 8018de4:	6078      	str	r0, [r7, #4]
  int status;
  if (queue->queue_nb_element==0)
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	889b      	ldrh	r3, [r3, #4]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d103      	bne.n	8018df6 <circular_queue_sense+0x18>
  {
    status=-1;
 8018dee:	2301      	movs	r3, #1
 8018df0:	425b      	negs	r3, r3
 8018df2:	60fb      	str	r3, [r7, #12]
 8018df4:	e001      	b.n	8018dfa <circular_queue_sense+0x1c>
  }
  else
  {
    status=0;
 8018df6:	2300      	movs	r3, #0
 8018df8:	60fb      	str	r3, [r7, #12]
  }
  return status;
 8018dfa:	68fb      	ldr	r3, [r7, #12]
}
 8018dfc:	0018      	movs	r0, r3
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	b004      	add	sp, #16
 8018e02:	bd80      	pop	{r7, pc}

08018e04 <circular_queue_get_free_size>:

/* Private functions ---------------------------------------------------------*/
static int16_t circular_queue_get_free_size(queue_param_t* queue)
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b084      	sub	sp, #16
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
  int16_t free_size;
  if (queue->queue_write_idx>=queue->queue_read_idx)
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	885a      	ldrh	r2, [r3, #2]
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	881b      	ldrh	r3, [r3, #0]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d30d      	bcc.n	8018e34 <circular_queue_get_free_size+0x30>
  {
    free_size=queue->queue_size-(queue->queue_write_idx-queue->queue_read_idx); 
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	88da      	ldrh	r2, [r3, #6]
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	8819      	ldrh	r1, [r3, #0]
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	885b      	ldrh	r3, [r3, #2]
 8018e24:	1acb      	subs	r3, r1, r3
 8018e26:	b29b      	uxth	r3, r3
 8018e28:	18d3      	adds	r3, r2, r3
 8018e2a:	b29a      	uxth	r2, r3
 8018e2c:	230e      	movs	r3, #14
 8018e2e:	18fb      	adds	r3, r7, r3
 8018e30:	801a      	strh	r2, [r3, #0]
 8018e32:	e008      	b.n	8018e46 <circular_queue_get_free_size+0x42>
  }
  else
  {
    free_size=(queue->queue_read_idx-queue->queue_write_idx); 
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	881a      	ldrh	r2, [r3, #0]
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	885b      	ldrh	r3, [r3, #2]
 8018e3c:	1ad3      	subs	r3, r2, r3
 8018e3e:	b29a      	uxth	r2, r3
 8018e40:	230e      	movs	r3, #14
 8018e42:	18fb      	adds	r3, r7, r3
 8018e44:	801a      	strh	r2, [r3, #0]
  }
  if ( queue->queue_full==1)
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	7b1b      	ldrb	r3, [r3, #12]
 8018e4a:	2b01      	cmp	r3, #1
 8018e4c:	d103      	bne.n	8018e56 <circular_queue_get_free_size+0x52>
  {
    free_size=0;
 8018e4e:	230e      	movs	r3, #14
 8018e50:	18fb      	adds	r3, r7, r3
 8018e52:	2200      	movs	r2, #0
 8018e54:	801a      	strh	r2, [r3, #0]
  }
  return free_size;
 8018e56:	230e      	movs	r3, #14
 8018e58:	18fb      	adds	r3, r7, r3
 8018e5a:	2200      	movs	r2, #0
 8018e5c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8018e5e:	0018      	movs	r0, r3
 8018e60:	46bd      	mov	sp, r7
 8018e62:	b004      	add	sp, #16
 8018e64:	bd80      	pop	{r7, pc}

08018e66 <queue_copy>:

static void queue_copy(uint8_t* out, const uint8_t* in, uint16_t size)
{
 8018e66:	b580      	push	{r7, lr}
 8018e68:	b084      	sub	sp, #16
 8018e6a:	af00      	add	r7, sp, #0
 8018e6c:	60f8      	str	r0, [r7, #12]
 8018e6e:	60b9      	str	r1, [r7, #8]
 8018e70:	1dbb      	adds	r3, r7, #6
 8018e72:	801a      	strh	r2, [r3, #0]
  while(size--)
 8018e74:	e007      	b.n	8018e86 <queue_copy+0x20>
  {
    *out++= *in++;
 8018e76:	68ba      	ldr	r2, [r7, #8]
 8018e78:	1c53      	adds	r3, r2, #1
 8018e7a:	60bb      	str	r3, [r7, #8]
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	1c59      	adds	r1, r3, #1
 8018e80:	60f9      	str	r1, [r7, #12]
 8018e82:	7812      	ldrb	r2, [r2, #0]
 8018e84:	701a      	strb	r2, [r3, #0]
  while(size--)
 8018e86:	1dbb      	adds	r3, r7, #6
 8018e88:	881b      	ldrh	r3, [r3, #0]
 8018e8a:	1dba      	adds	r2, r7, #6
 8018e8c:	1e59      	subs	r1, r3, #1
 8018e8e:	8011      	strh	r1, [r2, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d1f0      	bne.n	8018e76 <queue_copy+0x10>
  }
}
 8018e94:	46c0      	nop			; (mov r8, r8)
 8018e96:	46bd      	mov	sp, r7
 8018e98:	b004      	add	sp, #16
 8018e9a:	bd80      	pop	{r7, pc}

08018e9c <add_elementSize_and_inc_writeIdx>:

static void add_elementSize_and_inc_writeIdx(queue_param_t* queue,uint16_t element_size)
{
 8018e9c:	b590      	push	{r4, r7, lr}
 8018e9e:	b083      	sub	sp, #12
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	6078      	str	r0, [r7, #4]
 8018ea4:	000a      	movs	r2, r1
 8018ea6:	1cbb      	adds	r3, r7, #2
 8018ea8:	801a      	strh	r2, [r3, #0]
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size>>8);
 8018eaa:	1cbb      	adds	r3, r7, #2
 8018eac:	881b      	ldrh	r3, [r3, #0]
 8018eae:	0a1b      	lsrs	r3, r3, #8
 8018eb0:	b298      	uxth	r0, r3
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	689a      	ldr	r2, [r3, #8]
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	885b      	ldrh	r3, [r3, #2]
 8018eba:	1c59      	adds	r1, r3, #1
 8018ebc:	b28c      	uxth	r4, r1
 8018ebe:	6879      	ldr	r1, [r7, #4]
 8018ec0:	804c      	strh	r4, [r1, #2]
 8018ec2:	18d3      	adds	r3, r2, r3
 8018ec4:	b2c2      	uxtb	r2, r0
 8018ec6:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	885a      	ldrh	r2, [r3, #2]
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	88db      	ldrh	r3, [r3, #6]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d102      	bne.n	8018eda <add_elementSize_and_inc_writeIdx+0x3e>
  {
    queue->queue_write_idx=0;
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	2200      	movs	r2, #0
 8018ed8:	805a      	strh	r2, [r3, #2]
  }
  queue->queue_buff[queue->queue_write_idx++]=(uint8_t) (element_size);
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	689a      	ldr	r2, [r3, #8]
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	885b      	ldrh	r3, [r3, #2]
 8018ee2:	1c59      	adds	r1, r3, #1
 8018ee4:	b288      	uxth	r0, r1
 8018ee6:	6879      	ldr	r1, [r7, #4]
 8018ee8:	8048      	strh	r0, [r1, #2]
 8018eea:	18d3      	adds	r3, r2, r3
 8018eec:	1cba      	adds	r2, r7, #2
 8018eee:	8812      	ldrh	r2, [r2, #0]
 8018ef0:	b2d2      	uxtb	r2, r2
 8018ef2:	701a      	strb	r2, [r3, #0]
  /*wrap if needed*/
  if ( queue->queue_write_idx == queue->queue_size)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	885a      	ldrh	r2, [r3, #2]
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	88db      	ldrh	r3, [r3, #6]
 8018efc:	429a      	cmp	r2, r3
 8018efe:	d102      	bne.n	8018f06 <add_elementSize_and_inc_writeIdx+0x6a>
  {
    queue->queue_write_idx=0;
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	2200      	movs	r2, #0
 8018f04:	805a      	strh	r2, [r3, #2]
  }
}
 8018f06:	46c0      	nop			; (mov r8, r8)
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	b003      	add	sp, #12
 8018f0c:	bd90      	pop	{r4, r7, pc}
	...

08018f10 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8018f10:	b082      	sub	sp, #8
 8018f12:	b580      	push	{r7, lr}
 8018f14:	b086      	sub	sp, #24
 8018f16:	af00      	add	r7, sp, #0
 8018f18:	60f8      	str	r0, [r7, #12]
 8018f1a:	1d38      	adds	r0, r7, #4
 8018f1c:	6001      	str	r1, [r0, #0]
 8018f1e:	6042      	str	r2, [r0, #4]
 8018f20:	2204      	movs	r2, #4
 8018f22:	2120      	movs	r1, #32
 8018f24:	468c      	mov	ip, r1
 8018f26:	44bc      	add	ip, r7
 8018f28:	4462      	add	r2, ip
 8018f2a:	6013      	str	r3, [r2, #0]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8018f2c:	2110      	movs	r1, #16
 8018f2e:	187b      	adds	r3, r7, r1
 8018f30:	2200      	movs	r2, #0
 8018f32:	601a      	str	r2, [r3, #0]
 8018f34:	187b      	adds	r3, r7, r1
 8018f36:	2200      	movs	r2, #0
 8018f38:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds + b.Seconds;
 8018f3a:	1d3b      	adds	r3, r7, #4
 8018f3c:	681a      	ldr	r2, [r3, #0]
 8018f3e:	2304      	movs	r3, #4
 8018f40:	2020      	movs	r0, #32
 8018f42:	4684      	mov	ip, r0
 8018f44:	44bc      	add	ip, r7
 8018f46:	4463      	add	r3, ip
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	18d2      	adds	r2, r2, r3
 8018f4c:	187b      	adds	r3, r7, r1
 8018f4e:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8018f50:	1d3b      	adds	r3, r7, #4
 8018f52:	2204      	movs	r2, #4
 8018f54:	5e9b      	ldrsh	r3, [r3, r2]
 8018f56:	b29a      	uxth	r2, r3
 8018f58:	2304      	movs	r3, #4
 8018f5a:	2020      	movs	r0, #32
 8018f5c:	4684      	mov	ip, r0
 8018f5e:	44bc      	add	ip, r7
 8018f60:	4463      	add	r3, ip
 8018f62:	2004      	movs	r0, #4
 8018f64:	5e1b      	ldrsh	r3, [r3, r0]
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	18d3      	adds	r3, r2, r3
 8018f6a:	b29b      	uxth	r3, r3
 8018f6c:	b21a      	sxth	r2, r3
 8018f6e:	187b      	adds	r3, r7, r1
 8018f70:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds >= 1000 )
 8018f72:	187b      	adds	r3, r7, r1
 8018f74:	2204      	movs	r2, #4
 8018f76:	5e9b      	ldrsh	r3, [r3, r2]
 8018f78:	4a0f      	ldr	r2, [pc, #60]	; (8018fb8 <SysTimeAdd+0xa8>)
 8018f7a:	4293      	cmp	r3, r2
 8018f7c:	dd10      	ble.n	8018fa0 <SysTimeAdd+0x90>
    {
        c.Seconds++;
 8018f7e:	2110      	movs	r1, #16
 8018f80:	187b      	adds	r3, r7, r1
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	1c5a      	adds	r2, r3, #1
 8018f86:	187b      	adds	r3, r7, r1
 8018f88:	601a      	str	r2, [r3, #0]
        c.SubSeconds -= 1000;
 8018f8a:	187b      	adds	r3, r7, r1
 8018f8c:	2204      	movs	r2, #4
 8018f8e:	5e9b      	ldrsh	r3, [r3, r2]
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	4a0a      	ldr	r2, [pc, #40]	; (8018fbc <SysTimeAdd+0xac>)
 8018f94:	4694      	mov	ip, r2
 8018f96:	4463      	add	r3, ip
 8018f98:	b29b      	uxth	r3, r3
 8018f9a:	b21a      	sxth	r2, r3
 8018f9c:	187b      	adds	r3, r7, r1
 8018f9e:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	2210      	movs	r2, #16
 8018fa4:	18ba      	adds	r2, r7, r2
 8018fa6:	ca03      	ldmia	r2!, {r0, r1}
 8018fa8:	c303      	stmia	r3!, {r0, r1}
}
 8018faa:	68f8      	ldr	r0, [r7, #12]
 8018fac:	46bd      	mov	sp, r7
 8018fae:	b006      	add	sp, #24
 8018fb0:	bc80      	pop	{r7}
 8018fb2:	bc08      	pop	{r3}
 8018fb4:	b002      	add	sp, #8
 8018fb6:	4718      	bx	r3
 8018fb8:	000003e7 	.word	0x000003e7
 8018fbc:	fffffc18 	.word	0xfffffc18

08018fc0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8018fc0:	b082      	sub	sp, #8
 8018fc2:	b580      	push	{r7, lr}
 8018fc4:	b086      	sub	sp, #24
 8018fc6:	af00      	add	r7, sp, #0
 8018fc8:	60f8      	str	r0, [r7, #12]
 8018fca:	1d38      	adds	r0, r7, #4
 8018fcc:	6001      	str	r1, [r0, #0]
 8018fce:	6042      	str	r2, [r0, #4]
 8018fd0:	2204      	movs	r2, #4
 8018fd2:	2120      	movs	r1, #32
 8018fd4:	468c      	mov	ip, r1
 8018fd6:	44bc      	add	ip, r7
 8018fd8:	4462      	add	r2, ip
 8018fda:	6013      	str	r3, [r2, #0]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8018fdc:	2110      	movs	r1, #16
 8018fde:	187b      	adds	r3, r7, r1
 8018fe0:	2200      	movs	r2, #0
 8018fe2:	601a      	str	r2, [r3, #0]
 8018fe4:	187b      	adds	r3, r7, r1
 8018fe6:	2200      	movs	r2, #0
 8018fe8:	809a      	strh	r2, [r3, #4]

    c.Seconds = a.Seconds - b.Seconds;
 8018fea:	1d3b      	adds	r3, r7, #4
 8018fec:	681a      	ldr	r2, [r3, #0]
 8018fee:	2304      	movs	r3, #4
 8018ff0:	2020      	movs	r0, #32
 8018ff2:	4684      	mov	ip, r0
 8018ff4:	44bc      	add	ip, r7
 8018ff6:	4463      	add	r3, ip
 8018ff8:	681b      	ldr	r3, [r3, #0]
 8018ffa:	1ad2      	subs	r2, r2, r3
 8018ffc:	187b      	adds	r3, r7, r1
 8018ffe:	601a      	str	r2, [r3, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019000:	1d3b      	adds	r3, r7, #4
 8019002:	2204      	movs	r2, #4
 8019004:	5e9b      	ldrsh	r3, [r3, r2]
 8019006:	b29a      	uxth	r2, r3
 8019008:	2304      	movs	r3, #4
 801900a:	2020      	movs	r0, #32
 801900c:	4684      	mov	ip, r0
 801900e:	44bc      	add	ip, r7
 8019010:	4463      	add	r3, ip
 8019012:	2004      	movs	r0, #4
 8019014:	5e1b      	ldrsh	r3, [r3, r0]
 8019016:	b29b      	uxth	r3, r3
 8019018:	1ad3      	subs	r3, r2, r3
 801901a:	b29b      	uxth	r3, r3
 801901c:	b21a      	sxth	r2, r3
 801901e:	187b      	adds	r3, r7, r1
 8019020:	809a      	strh	r2, [r3, #4]
    if( c.SubSeconds < 0 )
 8019022:	187b      	adds	r3, r7, r1
 8019024:	2204      	movs	r2, #4
 8019026:	5e9b      	ldrsh	r3, [r3, r2]
 8019028:	2b00      	cmp	r3, #0
 801902a:	da11      	bge.n	8019050 <SysTimeSub+0x90>
    {
        c.Seconds--;
 801902c:	2110      	movs	r1, #16
 801902e:	187b      	adds	r3, r7, r1
 8019030:	681b      	ldr	r3, [r3, #0]
 8019032:	1e5a      	subs	r2, r3, #1
 8019034:	187b      	adds	r3, r7, r1
 8019036:	601a      	str	r2, [r3, #0]
        c.SubSeconds += 1000;
 8019038:	187b      	adds	r3, r7, r1
 801903a:	2204      	movs	r2, #4
 801903c:	5e9b      	ldrsh	r3, [r3, r2]
 801903e:	b29b      	uxth	r3, r3
 8019040:	22fa      	movs	r2, #250	; 0xfa
 8019042:	0092      	lsls	r2, r2, #2
 8019044:	4694      	mov	ip, r2
 8019046:	4463      	add	r3, ip
 8019048:	b29b      	uxth	r3, r3
 801904a:	b21a      	sxth	r2, r3
 801904c:	187b      	adds	r3, r7, r1
 801904e:	809a      	strh	r2, [r3, #4]
    }
    return c;
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	2210      	movs	r2, #16
 8019054:	18ba      	adds	r2, r7, r2
 8019056:	ca03      	ldmia	r2!, {r0, r1}
 8019058:	c303      	stmia	r3!, {r0, r1}
}
 801905a:	68f8      	ldr	r0, [r7, #12]
 801905c:	46bd      	mov	sp, r7
 801905e:	b006      	add	sp, #24
 8019060:	bc80      	pop	{r7}
 8019062:	bc08      	pop	{r3}
 8019064:	b002      	add	sp, #8
 8019066:	4718      	bx	r3

08019068 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019068:	b5b0      	push	{r4, r5, r7, lr}
 801906a:	b088      	sub	sp, #32
 801906c:	af02      	add	r7, sp, #8
 801906e:	003b      	movs	r3, r7
 8019070:	6018      	str	r0, [r3, #0]
 8019072:	6059      	str	r1, [r3, #4]
    SysTime_t DeltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019074:	2108      	movs	r1, #8
 8019076:	187b      	adds	r3, r7, r1
 8019078:	2200      	movs	r2, #0
 801907a:	601a      	str	r2, [r3, #0]
 801907c:	187b      	adds	r3, r7, r1
 801907e:	2200      	movs	r2, #0
 8019080:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019082:	000c      	movs	r4, r1
 8019084:	187b      	adds	r3, r7, r1
 8019086:	3304      	adds	r3, #4
 8019088:	0018      	movs	r0, r3
 801908a:	f7ea fc77 	bl	800397c <HW_RTC_GetCalendarTime>
 801908e:	0002      	movs	r2, r0
 8019090:	0021      	movs	r1, r4
 8019092:	187b      	adds	r3, r7, r1
 8019094:	601a      	str	r2, [r3, #0]

    // sysTime is epoch
    DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019096:	2510      	movs	r5, #16
 8019098:	197c      	adds	r4, r7, r5
 801909a:	187b      	adds	r3, r7, r1
 801909c:	003a      	movs	r2, r7
 801909e:	4669      	mov	r1, sp
 80190a0:	6858      	ldr	r0, [r3, #4]
 80190a2:	6008      	str	r0, [r1, #0]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	6811      	ldr	r1, [r2, #0]
 80190a8:	6852      	ldr	r2, [r2, #4]
 80190aa:	0020      	movs	r0, r4
 80190ac:	f7ff ff88 	bl	8018fc0 <SysTimeSub>

    HW_RTC_BKUPWrite( DeltaTime.Seconds, ( uint32_t )DeltaTime.SubSeconds );
 80190b0:	197b      	adds	r3, r7, r5
 80190b2:	681a      	ldr	r2, [r3, #0]
 80190b4:	197b      	adds	r3, r7, r5
 80190b6:	2104      	movs	r1, #4
 80190b8:	5e5b      	ldrsh	r3, [r3, r1]
 80190ba:	0019      	movs	r1, r3
 80190bc:	0010      	movs	r0, r2
 80190be:	f7ea fc87 	bl	80039d0 <HW_RTC_BKUPWrite>
}
 80190c2:	46c0      	nop			; (mov r8, r8)
 80190c4:	46bd      	mov	sp, r7
 80190c6:	b006      	add	sp, #24
 80190c8:	bdb0      	pop	{r4, r5, r7, pc}

080190ca <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 80190ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190cc:	b08b      	sub	sp, #44	; 0x2c
 80190ce:	af02      	add	r7, sp, #8
 80190d0:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80190d2:	2518      	movs	r5, #24
 80190d4:	197b      	adds	r3, r7, r5
 80190d6:	2200      	movs	r2, #0
 80190d8:	601a      	str	r2, [r3, #0]
 80190da:	197b      	adds	r3, r7, r5
 80190dc:	2200      	movs	r2, #0
 80190de:	809a      	strh	r2, [r3, #4]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 80190e0:	2410      	movs	r4, #16
 80190e2:	193b      	adds	r3, r7, r4
 80190e4:	2200      	movs	r2, #0
 80190e6:	601a      	str	r2, [r3, #0]
 80190e8:	193b      	adds	r3, r7, r4
 80190ea:	2200      	movs	r2, #0
 80190ec:	809a      	strh	r2, [r3, #4]
    SysTime_t DeltaTime;

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80190ee:	197b      	adds	r3, r7, r5
 80190f0:	3304      	adds	r3, #4
 80190f2:	0018      	movs	r0, r3
 80190f4:	f7ea fc42 	bl	800397c <HW_RTC_GetCalendarTime>
 80190f8:	0002      	movs	r2, r0
 80190fa:	197b      	adds	r3, r7, r5
 80190fc:	601a      	str	r2, [r3, #0]

    HW_RTC_BKUPRead( &DeltaTime.Seconds, ( uint32_t* )&DeltaTime.SubSeconds );
 80190fe:	2108      	movs	r1, #8
 8019100:	187b      	adds	r3, r7, r1
 8019102:	1d1a      	adds	r2, r3, #4
 8019104:	187b      	adds	r3, r7, r1
 8019106:	0011      	movs	r1, r2
 8019108:	0018      	movs	r0, r3
 801910a:	f7ea fc79 	bl	8003a00 <HW_RTC_BKUPRead>

    sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801910e:	0026      	movs	r6, r4
 8019110:	193c      	adds	r4, r7, r4
 8019112:	197b      	adds	r3, r7, r5
 8019114:	2108      	movs	r1, #8
 8019116:	187a      	adds	r2, r7, r1
 8019118:	4669      	mov	r1, sp
 801911a:	6858      	ldr	r0, [r3, #4]
 801911c:	6008      	str	r0, [r1, #0]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	6811      	ldr	r1, [r2, #0]
 8019122:	6852      	ldr	r2, [r2, #4]
 8019124:	0020      	movs	r0, r4
 8019126:	f7ff fef3 	bl	8018f10 <SysTimeAdd>

    return sysTime;
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	0034      	movs	r4, r6
 801912e:	193a      	adds	r2, r7, r4
 8019130:	ca03      	ldmia	r2!, {r0, r1}
 8019132:	c303      	stmia	r3!, {r0, r1}
}
 8019134:	6878      	ldr	r0, [r7, #4]
 8019136:	46bd      	mov	sp, r7
 8019138:	b009      	add	sp, #36	; 0x24
 801913a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801913c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801913c:	b590      	push	{r4, r7, lr}
 801913e:	b085      	sub	sp, #20
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019144:	2408      	movs	r4, #8
 8019146:	193b      	adds	r3, r7, r4
 8019148:	2200      	movs	r2, #0
 801914a:	601a      	str	r2, [r3, #0]
 801914c:	193b      	adds	r3, r7, r4
 801914e:	2200      	movs	r2, #0
 8019150:	809a      	strh	r2, [r3, #4]

    calendarTime.Seconds = HW_RTC_GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019152:	193b      	adds	r3, r7, r4
 8019154:	3304      	adds	r3, #4
 8019156:	0018      	movs	r0, r3
 8019158:	f7ea fc10 	bl	800397c <HW_RTC_GetCalendarTime>
 801915c:	0002      	movs	r2, r0
 801915e:	193b      	adds	r3, r7, r4
 8019160:	601a      	str	r2, [r3, #0]
    
    return calendarTime;
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	193a      	adds	r2, r7, r4
 8019166:	ca03      	ldmia	r2!, {r0, r1}
 8019168:	c303      	stmia	r3!, {r0, r1}
}
 801916a:	6878      	ldr	r0, [r7, #4]
 801916c:	46bd      	mov	sp, r7
 801916e:	b005      	add	sp, #20
 8019170:	bd90      	pop	{r4, r7, pc}

08019172 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8019172:	b580      	push	{r7, lr}
 8019174:	b082      	sub	sp, #8
 8019176:	af00      	add	r7, sp, #0
 8019178:	6078      	str	r0, [r7, #4]
 801917a:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	2200      	movs	r2, #0
 8019180:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	2200      	movs	r2, #0
 8019186:	605a      	str	r2, [r3, #4]
  obj->IsStarted = false;
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	2200      	movs	r2, #0
 801918c:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	2200      	movs	r2, #0
 8019192:	725a      	strb	r2, [r3, #9]
  obj->Callback = callback;
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	683a      	ldr	r2, [r7, #0]
 8019198:	60da      	str	r2, [r3, #12]
  obj->Context = NULL;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	2200      	movs	r2, #0
 801919e:	611a      	str	r2, [r3, #16]
  obj->Next = NULL;
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	2200      	movs	r2, #0
 80191a4:	615a      	str	r2, [r3, #20]
}
 80191a6:	46c0      	nop			; (mov r8, r8)
 80191a8:	46bd      	mov	sp, r7
 80191aa:	b002      	add	sp, #8
 80191ac:	bd80      	pop	{r7, pc}
	...

080191b0 <TimerStart>:
{
  obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b088      	sub	sp, #32
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
  uint32_t elapsedTime = 0;
 80191b8:	2300      	movs	r3, #0
 80191ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80191bc:	f3ef 8310 	mrs	r3, PRIMASK
 80191c0:	617b      	str	r3, [r7, #20]
  return(result);
 80191c2:	697b      	ldr	r3, [r7, #20]
  
  BACKUP_PRIMASK();
 80191c4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80191c6:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  

  if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	d005      	beq.n	80191da <TimerStart+0x2a>
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	0018      	movs	r0, r3
 80191d2:	f000 f993 	bl	80194fc <TimerExists>
 80191d6:	1e03      	subs	r3, r0, #0
 80191d8:	d005      	beq.n	80191e6 <TimerStart+0x36>
 80191da:	69bb      	ldr	r3, [r7, #24]
 80191dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80191de:	693b      	ldr	r3, [r7, #16]
 80191e0:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 80191e4:	e033      	b.n	801924e <TimerStart+0x9e>
  }
  obj->Timestamp = obj->ReloadValue;
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	685a      	ldr	r2, [r3, #4]
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	601a      	str	r2, [r3, #0]
  obj->IsStarted = true;
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	2201      	movs	r2, #1
 80191f2:	721a      	strb	r2, [r3, #8]
  obj->IsNext2Expire = false;
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	2200      	movs	r2, #0
 80191f8:	725a      	strb	r2, [r3, #9]

  if( TimerListHead == NULL )
 80191fa:	4b16      	ldr	r3, [pc, #88]	; (8019254 <TimerStart+0xa4>)
 80191fc:	681b      	ldr	r3, [r3, #0]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d106      	bne.n	8019210 <TimerStart+0x60>
  {
    HW_RTC_SetTimerContext( );
 8019202:	f7ea f971 	bl	80034e8 <HW_RTC_SetTimerContext>
    TimerInsertNewHeadTimer( obj ); // insert a timeout at now+obj->Timestamp
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	0018      	movs	r0, r3
 801920a:	f000 f9e5 	bl	80195d8 <TimerInsertNewHeadTimer>
 801920e:	e019      	b.n	8019244 <TimerStart+0x94>
  }
  else 
  {
    elapsedTime = HW_RTC_GetTimerElapsedTime( );
 8019210:	f7ea f8cc 	bl	80033ac <HW_RTC_GetTimerElapsedTime>
 8019214:	0003      	movs	r3, r0
 8019216:	61fb      	str	r3, [r7, #28]
    obj->Timestamp += elapsedTime;
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681a      	ldr	r2, [r3, #0]
 801921c:	69fb      	ldr	r3, [r7, #28]
 801921e:	18d2      	adds	r2, r2, r3
 8019220:	687b      	ldr	r3, [r7, #4]
 8019222:	601a      	str	r2, [r3, #0]
  
    if( obj->Timestamp < TimerListHead->Timestamp )
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	681a      	ldr	r2, [r3, #0]
 8019228:	4b0a      	ldr	r3, [pc, #40]	; (8019254 <TimerStart+0xa4>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	429a      	cmp	r2, r3
 8019230:	d204      	bcs.n	801923c <TimerStart+0x8c>
    {
      TimerInsertNewHeadTimer( obj);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	0018      	movs	r0, r3
 8019236:	f000 f9cf 	bl	80195d8 <TimerInsertNewHeadTimer>
 801923a:	e003      	b.n	8019244 <TimerStart+0x94>
    }
    else
    {
      TimerInsertTimer( obj);
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	0018      	movs	r0, r3
 8019240:	f000 f99c 	bl	801957c <TimerInsertTimer>
 8019244:	69bb      	ldr	r3, [r7, #24]
 8019246:	60fb      	str	r3, [r7, #12]
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	f383 8810 	msr	PRIMASK, r3
    }
  }
  RESTORE_PRIMASK( );
}
 801924e:	46bd      	mov	sp, r7
 8019250:	b008      	add	sp, #32
 8019252:	bd80      	pop	{r7, pc}
 8019254:	20001304 	.word	0x20001304

08019258 <TimerIrqHandler>:
{
  return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8019258:	b590      	push	{r4, r7, lr}
 801925a:	b087      	sub	sp, #28
 801925c:	af00      	add	r7, sp, #0
  TimerEvent_t* cur;
  TimerEvent_t* next;
  

  
  uint32_t old =  HW_RTC_GetTimerContext( );
 801925e:	f7ea f95b 	bl	8003518 <HW_RTC_GetTimerContext>
 8019262:	0003      	movs	r3, r0
 8019264:	613b      	str	r3, [r7, #16]
  uint32_t now =  HW_RTC_SetTimerContext( );
 8019266:	f7ea f93f 	bl	80034e8 <HW_RTC_SetTimerContext>
 801926a:	0003      	movs	r3, r0
 801926c:	60fb      	str	r3, [r7, #12]
  uint32_t DeltaContext = now - old; //intentionnal wrap around
 801926e:	68fa      	ldr	r2, [r7, #12]
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	1ad3      	subs	r3, r2, r3
 8019274:	60bb      	str	r3, [r7, #8]
  
  /* Update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8019276:	4b39      	ldr	r3, [pc, #228]	; (801935c <TimerIrqHandler+0x104>)
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d01c      	beq.n	80192b8 <TimerIrqHandler+0x60>
  {
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 801927e:	4b37      	ldr	r3, [pc, #220]	; (801935c <TimerIrqHandler+0x104>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	617b      	str	r3, [r7, #20]
 8019284:	e014      	b.n	80192b0 <TimerIrqHandler+0x58>
    {
      next =cur->Next;
 8019286:	697b      	ldr	r3, [r7, #20]
 8019288:	695b      	ldr	r3, [r3, #20]
 801928a:	607b      	str	r3, [r7, #4]
      if (next->Timestamp > DeltaContext)
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	68ba      	ldr	r2, [r7, #8]
 8019292:	429a      	cmp	r2, r3
 8019294:	d206      	bcs.n	80192a4 <TimerIrqHandler+0x4c>
      {
        next->Timestamp -= DeltaContext;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	681a      	ldr	r2, [r3, #0]
 801929a:	68bb      	ldr	r3, [r7, #8]
 801929c:	1ad2      	subs	r2, r2, r3
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	601a      	str	r2, [r3, #0]
 80192a2:	e002      	b.n	80192aa <TimerIrqHandler+0x52>
      }
      else
      {
        next->Timestamp = 0 ;
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	2200      	movs	r2, #0
 80192a8:	601a      	str	r2, [r3, #0]
    for (cur=TimerListHead; cur->Next != NULL; cur= cur->Next)
 80192aa:	697b      	ldr	r3, [r7, #20]
 80192ac:	695b      	ldr	r3, [r3, #20]
 80192ae:	617b      	str	r3, [r7, #20]
 80192b0:	697b      	ldr	r3, [r7, #20]
 80192b2:	695b      	ldr	r3, [r3, #20]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d1e6      	bne.n	8019286 <TimerIrqHandler+0x2e>
      }
    }
  }
  
  /* execute imediately the alarm callback */
  if ( TimerListHead != NULL )
 80192b8:	4b28      	ldr	r3, [pc, #160]	; (801935c <TimerIrqHandler+0x104>)
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d02c      	beq.n	801931a <TimerIrqHandler+0xc2>
  {
    cur = TimerListHead;
 80192c0:	4b26      	ldr	r3, [pc, #152]	; (801935c <TimerIrqHandler+0x104>)
 80192c2:	681b      	ldr	r3, [r3, #0]
 80192c4:	617b      	str	r3, [r7, #20]
    TimerListHead = TimerListHead->Next;
 80192c6:	4b25      	ldr	r3, [pc, #148]	; (801935c <TimerIrqHandler+0x104>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	695a      	ldr	r2, [r3, #20]
 80192cc:	4b23      	ldr	r3, [pc, #140]	; (801935c <TimerIrqHandler+0x104>)
 80192ce:	601a      	str	r2, [r3, #0]
    cur->IsStarted = false;
 80192d0:	697b      	ldr	r3, [r7, #20]
 80192d2:	2200      	movs	r2, #0
 80192d4:	721a      	strb	r2, [r3, #8]
    exec_cb( cur->Callback, cur->Context );
 80192d6:	697b      	ldr	r3, [r7, #20]
 80192d8:	68db      	ldr	r3, [r3, #12]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d100      	bne.n	80192e0 <TimerIrqHandler+0x88>
 80192de:	e7fe      	b.n	80192de <TimerIrqHandler+0x86>
 80192e0:	697b      	ldr	r3, [r7, #20]
 80192e2:	68da      	ldr	r2, [r3, #12]
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	691b      	ldr	r3, [r3, #16]
 80192e8:	0018      	movs	r0, r3
 80192ea:	4790      	blx	r2
  }


  // remove all the expired object from the list
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 80192ec:	e015      	b.n	801931a <TimerIrqHandler+0xc2>
  {
   cur = TimerListHead;
 80192ee:	4b1b      	ldr	r3, [pc, #108]	; (801935c <TimerIrqHandler+0x104>)
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	617b      	str	r3, [r7, #20]
   TimerListHead = TimerListHead->Next;
 80192f4:	4b19      	ldr	r3, [pc, #100]	; (801935c <TimerIrqHandler+0x104>)
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	695a      	ldr	r2, [r3, #20]
 80192fa:	4b18      	ldr	r3, [pc, #96]	; (801935c <TimerIrqHandler+0x104>)
 80192fc:	601a      	str	r2, [r3, #0]
   cur->IsStarted = false;
 80192fe:	697b      	ldr	r3, [r7, #20]
 8019300:	2200      	movs	r2, #0
 8019302:	721a      	strb	r2, [r3, #8]
   exec_cb( cur->Callback, cur->Context );
 8019304:	697b      	ldr	r3, [r7, #20]
 8019306:	68db      	ldr	r3, [r3, #12]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d100      	bne.n	801930e <TimerIrqHandler+0xb6>
 801930c:	e7fe      	b.n	801930c <TimerIrqHandler+0xb4>
 801930e:	697b      	ldr	r3, [r7, #20]
 8019310:	68da      	ldr	r2, [r3, #12]
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	691b      	ldr	r3, [r3, #16]
 8019316:	0018      	movs	r0, r3
 8019318:	4790      	blx	r2
  while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < HW_RTC_GetTimerElapsedTime(  )  ))
 801931a:	4b10      	ldr	r3, [pc, #64]	; (801935c <TimerIrqHandler+0x104>)
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	2b00      	cmp	r3, #0
 8019320:	d007      	beq.n	8019332 <TimerIrqHandler+0xda>
 8019322:	4b0e      	ldr	r3, [pc, #56]	; (801935c <TimerIrqHandler+0x104>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	681c      	ldr	r4, [r3, #0]
 8019328:	f7ea f840 	bl	80033ac <HW_RTC_GetTimerElapsedTime>
 801932c:	0003      	movs	r3, r0
 801932e:	429c      	cmp	r4, r3
 8019330:	d3dd      	bcc.n	80192ee <TimerIrqHandler+0x96>
  }

  /* start the next TimerListHead if it exists AND NOT running */
  if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8019332:	4b0a      	ldr	r3, [pc, #40]	; (801935c <TimerIrqHandler+0x104>)
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d00c      	beq.n	8019354 <TimerIrqHandler+0xfc>
 801933a:	4b08      	ldr	r3, [pc, #32]	; (801935c <TimerIrqHandler+0x104>)
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	7a5b      	ldrb	r3, [r3, #9]
 8019340:	2201      	movs	r2, #1
 8019342:	4053      	eors	r3, r2
 8019344:	b2db      	uxtb	r3, r3
 8019346:	2b00      	cmp	r3, #0
 8019348:	d004      	beq.n	8019354 <TimerIrqHandler+0xfc>
  {
    TimerSetTimeout( TimerListHead );
 801934a:	4b04      	ldr	r3, [pc, #16]	; (801935c <TimerIrqHandler+0x104>)
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	0018      	movs	r0, r3
 8019350:	f000 f8f0 	bl	8019534 <TimerSetTimeout>
  }
}
 8019354:	46c0      	nop			; (mov r8, r8)
 8019356:	46bd      	mov	sp, r7
 8019358:	b007      	add	sp, #28
 801935a:	bd90      	pop	{r4, r7, pc}
 801935c:	20001304 	.word	0x20001304

08019360 <TimerStop>:

void TimerStop( TimerEvent_t *obj ) 
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b088      	sub	sp, #32
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019368:	f3ef 8310 	mrs	r3, PRIMASK
 801936c:	613b      	str	r3, [r7, #16]
  return(result);
 801936e:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8019370:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019372:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 8019374:	4b36      	ldr	r3, [pc, #216]	; (8019450 <TimerStop+0xf0>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 801937a:	4b35      	ldr	r3, [pc, #212]	; (8019450 <TimerStop+0xf0>)
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8019380:	4b33      	ldr	r3, [pc, #204]	; (8019450 <TimerStop+0xf0>)
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	2b00      	cmp	r3, #0
 8019386:	d002      	beq.n	801938e <TimerStop+0x2e>
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	2b00      	cmp	r3, #0
 801938c:	d105      	bne.n	801939a <TimerStop+0x3a>
 801938e:	697b      	ldr	r3, [r7, #20]
 8019390:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8019398:	e057      	b.n	801944a <TimerStop+0xea>
  }

  obj->IsStarted = false;
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	2200      	movs	r2, #0
 801939e:	721a      	strb	r2, [r3, #8]

  if( TimerListHead == obj ) // Stop the Head                  
 80193a0:	4b2b      	ldr	r3, [pc, #172]	; (8019450 <TimerStop+0xf0>)
 80193a2:	681b      	ldr	r3, [r3, #0]
 80193a4:	687a      	ldr	r2, [r7, #4]
 80193a6:	429a      	cmp	r2, r3
 80193a8:	d147      	bne.n	801943a <TimerStop+0xda>
  {
    if( TimerListHead->IsNext2Expire == true ) // The head is already running 
 80193aa:	4b29      	ldr	r3, [pc, #164]	; (8019450 <TimerStop+0xf0>)
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	7a5b      	ldrb	r3, [r3, #9]
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d019      	beq.n	80193e8 <TimerStop+0x88>
    {  
	  
      TimerListHead->IsNext2Expire = false;
 80193b4:	4b26      	ldr	r3, [pc, #152]	; (8019450 <TimerStop+0xf0>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	2200      	movs	r2, #0
 80193ba:	725a      	strb	r2, [r3, #9]
      if( TimerListHead->Next != NULL )
 80193bc:	4b24      	ldr	r3, [pc, #144]	; (8019450 <TimerStop+0xf0>)
 80193be:	681b      	ldr	r3, [r3, #0]
 80193c0:	695b      	ldr	r3, [r3, #20]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d00a      	beq.n	80193dc <TimerStop+0x7c>
      {
        TimerListHead = TimerListHead->Next;
 80193c6:	4b22      	ldr	r3, [pc, #136]	; (8019450 <TimerStop+0xf0>)
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	695a      	ldr	r2, [r3, #20]
 80193cc:	4b20      	ldr	r3, [pc, #128]	; (8019450 <TimerStop+0xf0>)
 80193ce:	601a      	str	r2, [r3, #0]
        TimerSetTimeout( TimerListHead );
 80193d0:	4b1f      	ldr	r3, [pc, #124]	; (8019450 <TimerStop+0xf0>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	0018      	movs	r0, r3
 80193d6:	f000 f8ad 	bl	8019534 <TimerSetTimeout>
 80193da:	e031      	b.n	8019440 <TimerStop+0xe0>
      }
      else
      {
        HW_RTC_StopAlarm( );
 80193dc:	f7ea f810 	bl	8003400 <HW_RTC_StopAlarm>
        TimerListHead = NULL;
 80193e0:	4b1b      	ldr	r3, [pc, #108]	; (8019450 <TimerStop+0xf0>)
 80193e2:	2200      	movs	r2, #0
 80193e4:	601a      	str	r2, [r3, #0]
 80193e6:	e02b      	b.n	8019440 <TimerStop+0xe0>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 80193e8:	4b19      	ldr	r3, [pc, #100]	; (8019450 <TimerStop+0xf0>)
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	695b      	ldr	r3, [r3, #20]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d005      	beq.n	80193fe <TimerStop+0x9e>
      {
        TimerListHead = TimerListHead->Next;
 80193f2:	4b17      	ldr	r3, [pc, #92]	; (8019450 <TimerStop+0xf0>)
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	695a      	ldr	r2, [r3, #20]
 80193f8:	4b15      	ldr	r3, [pc, #84]	; (8019450 <TimerStop+0xf0>)
 80193fa:	601a      	str	r2, [r3, #0]
 80193fc:	e020      	b.n	8019440 <TimerStop+0xe0>
      }
      else
      {
        TimerListHead = NULL;
 80193fe:	4b14      	ldr	r3, [pc, #80]	; (8019450 <TimerStop+0xf0>)
 8019400:	2200      	movs	r2, #0
 8019402:	601a      	str	r2, [r3, #0]
 8019404:	e01c      	b.n	8019440 <TimerStop+0xe0>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 8019406:	69ba      	ldr	r2, [r7, #24]
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	429a      	cmp	r2, r3
 801940c:	d110      	bne.n	8019430 <TimerStop+0xd0>
      {
        if( cur->Next != NULL )
 801940e:	69bb      	ldr	r3, [r7, #24]
 8019410:	695b      	ldr	r3, [r3, #20]
 8019412:	2b00      	cmp	r3, #0
 8019414:	d006      	beq.n	8019424 <TimerStop+0xc4>
        {
          cur = cur->Next;
 8019416:	69bb      	ldr	r3, [r7, #24]
 8019418:	695b      	ldr	r3, [r3, #20]
 801941a:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 801941c:	69fb      	ldr	r3, [r7, #28]
 801941e:	69ba      	ldr	r2, [r7, #24]
 8019420:	615a      	str	r2, [r3, #20]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 8019422:	e00d      	b.n	8019440 <TimerStop+0xe0>
          cur = NULL;
 8019424:	2300      	movs	r3, #0
 8019426:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8019428:	69fb      	ldr	r3, [r7, #28]
 801942a:	69ba      	ldr	r2, [r7, #24]
 801942c:	615a      	str	r2, [r3, #20]
        break;
 801942e:	e007      	b.n	8019440 <TimerStop+0xe0>
      }
      else
      {
        prev = cur;
 8019430:	69bb      	ldr	r3, [r7, #24]
 8019432:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8019434:	69bb      	ldr	r3, [r7, #24]
 8019436:	695b      	ldr	r3, [r3, #20]
 8019438:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 801943a:	69bb      	ldr	r3, [r7, #24]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d1e2      	bne.n	8019406 <TimerStop+0xa6>
 8019440:	697b      	ldr	r3, [r7, #20]
 8019442:	60bb      	str	r3, [r7, #8]
 8019444:	68bb      	ldr	r3, [r7, #8]
 8019446:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 801944a:	46bd      	mov	sp, r7
 801944c:	b008      	add	sp, #32
 801944e:	bd80      	pop	{r7, pc}
 8019450:	20001304 	.word	0x20001304

08019454 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b084      	sub	sp, #16
 8019458:	af00      	add	r7, sp, #0
 801945a:	6078      	str	r0, [r7, #4]
 801945c:	6039      	str	r1, [r7, #0]
  uint32_t minValue = 0;
 801945e:	2300      	movs	r3, #0
 8019460:	60bb      	str	r3, [r7, #8]
  uint32_t ticks = HW_RTC_ms2Tick( value );
 8019462:	683b      	ldr	r3, [r7, #0]
 8019464:	0018      	movs	r0, r3
 8019466:	f7e9 ff39 	bl	80032dc <HW_RTC_ms2Tick>
 801946a:	0003      	movs	r3, r0
 801946c:	60fb      	str	r3, [r7, #12]

  TimerStop( obj );
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	0018      	movs	r0, r3
 8019472:	f7ff ff75 	bl	8019360 <TimerStop>

  minValue = HW_RTC_GetMinimumTimeout( );
 8019476:	f7e9 ff2b 	bl	80032d0 <HW_RTC_GetMinimumTimeout>
 801947a:	0003      	movs	r3, r0
 801947c:	60bb      	str	r3, [r7, #8]
  
  if( ticks < minValue )
 801947e:	68fa      	ldr	r2, [r7, #12]
 8019480:	68bb      	ldr	r3, [r7, #8]
 8019482:	429a      	cmp	r2, r3
 8019484:	d201      	bcs.n	801948a <TimerSetValue+0x36>
  {
    ticks = minValue;
 8019486:	68bb      	ldr	r3, [r7, #8]
 8019488:	60fb      	str	r3, [r7, #12]
  }

  obj->Timestamp = ticks;
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	68fa      	ldr	r2, [r7, #12]
 801948e:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = ticks;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	68fa      	ldr	r2, [r7, #12]
 8019494:	605a      	str	r2, [r3, #4]
}
 8019496:	46c0      	nop			; (mov r8, r8)
 8019498:	46bd      	mov	sp, r7
 801949a:	b004      	add	sp, #16
 801949c:	bd80      	pop	{r7, pc}

0801949e <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 801949e:	b580      	push	{r7, lr}
 80194a0:	b082      	sub	sp, #8
 80194a2:	af00      	add	r7, sp, #0
  uint32_t now = HW_RTC_GetTimerValue( );
 80194a4:	f7e9 ff9a 	bl	80033dc <HW_RTC_GetTimerValue>
 80194a8:	0003      	movs	r3, r0
 80194aa:	607b      	str	r3, [r7, #4]
  return  HW_RTC_Tick2ms(now);
 80194ac:	687b      	ldr	r3, [r7, #4]
 80194ae:	0018      	movs	r0, r3
 80194b0:	f7e9 ff2c 	bl	800330c <HW_RTC_Tick2ms>
 80194b4:	0003      	movs	r3, r0
}
 80194b6:	0018      	movs	r0, r3
 80194b8:	46bd      	mov	sp, r7
 80194ba:	b002      	add	sp, #8
 80194bc:	bd80      	pop	{r7, pc}

080194be <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 80194be:	b580      	push	{r7, lr}
 80194c0:	b084      	sub	sp, #16
 80194c2:	af00      	add	r7, sp, #0
 80194c4:	6078      	str	r0, [r7, #4]
  if ( past == 0 )
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d101      	bne.n	80194d0 <TimerGetElapsedTime+0x12>
  {
    return 0;
 80194cc:	2300      	movs	r3, #0
 80194ce:	e010      	b.n	80194f2 <TimerGetElapsedTime+0x34>
  }
  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
 80194d0:	f7e9 ff84 	bl	80033dc <HW_RTC_GetTimerValue>
 80194d4:	0003      	movs	r3, r0
 80194d6:	60fb      	str	r3, [r7, #12]
  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	0018      	movs	r0, r3
 80194dc:	f7e9 fefe 	bl	80032dc <HW_RTC_ms2Tick>
 80194e0:	0003      	movs	r3, r0
 80194e2:	60bb      	str	r3, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
 80194e4:	68fa      	ldr	r2, [r7, #12]
 80194e6:	68bb      	ldr	r3, [r7, #8]
 80194e8:	1ad3      	subs	r3, r2, r3
 80194ea:	0018      	movs	r0, r3
 80194ec:	f7e9 ff0e 	bl	800330c <HW_RTC_Tick2ms>
 80194f0:	0003      	movs	r3, r0
}
 80194f2:	0018      	movs	r0, r3
 80194f4:	46bd      	mov	sp, r7
 80194f6:	b004      	add	sp, #16
 80194f8:	bd80      	pop	{r7, pc}
	...

080194fc <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b084      	sub	sp, #16
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8019504:	4b0a      	ldr	r3, [pc, #40]	; (8019530 <TimerExists+0x34>)
 8019506:	681b      	ldr	r3, [r3, #0]
 8019508:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801950a:	e008      	b.n	801951e <TimerExists+0x22>
  {
    if( cur == obj )
 801950c:	68fa      	ldr	r2, [r7, #12]
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	429a      	cmp	r2, r3
 8019512:	d101      	bne.n	8019518 <TimerExists+0x1c>
    {
      return true;
 8019514:	2301      	movs	r3, #1
 8019516:	e006      	b.n	8019526 <TimerExists+0x2a>
    }
    cur = cur->Next;
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	695b      	ldr	r3, [r3, #20]
 801951c:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d1f3      	bne.n	801950c <TimerExists+0x10>
  }
  return false;
 8019524:	2300      	movs	r3, #0
}
 8019526:	0018      	movs	r0, r3
 8019528:	46bd      	mov	sp, r7
 801952a:	b004      	add	sp, #16
 801952c:	bd80      	pop	{r7, pc}
 801952e:	46c0      	nop			; (mov r8, r8)
 8019530:	20001304 	.word	0x20001304

08019534 <TimerSetTimeout>:
static void TimerSetTimeout( TimerEvent_t *obj )
{
 8019534:	b590      	push	{r4, r7, lr}
 8019536:	b085      	sub	sp, #20
 8019538:	af00      	add	r7, sp, #0
 801953a:	6078      	str	r0, [r7, #4]
  int32_t minTicks= HW_RTC_GetMinimumTimeout( );
 801953c:	f7e9 fec8 	bl	80032d0 <HW_RTC_GetMinimumTimeout>
 8019540:	0003      	movs	r3, r0
 8019542:	60fb      	str	r3, [r7, #12]
  obj->IsNext2Expire = true; 
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	2201      	movs	r2, #1
 8019548:	725a      	strb	r2, [r3, #9]

  // In case deadline too soon
  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	681c      	ldr	r4, [r3, #0]
 801954e:	f7e9 ff2d 	bl	80033ac <HW_RTC_GetTimerElapsedTime>
 8019552:	0002      	movs	r2, r0
 8019554:	68fb      	ldr	r3, [r7, #12]
 8019556:	18d3      	adds	r3, r2, r3
 8019558:	429c      	cmp	r4, r3
 801955a:	d206      	bcs.n	801956a <TimerSetTimeout+0x36>
  {
    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
 801955c:	f7e9 ff26 	bl	80033ac <HW_RTC_GetTimerElapsedTime>
 8019560:	0002      	movs	r2, r0
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	18d2      	adds	r2, r2, r3
 8019566:	687b      	ldr	r3, [r7, #4]
 8019568:	601a      	str	r2, [r3, #0]
  }
  HW_RTC_SetAlarm( obj->Timestamp );
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	0018      	movs	r0, r3
 8019570:	f7e9 feec 	bl	800334c <HW_RTC_SetAlarm>
}
 8019574:	46c0      	nop			; (mov r8, r8)
 8019576:	46bd      	mov	sp, r7
 8019578:	b005      	add	sp, #20
 801957a:	bd90      	pop	{r4, r7, pc}

0801957c <TimerInsertTimer>:
    return RtcTempCompensation( period, temperature );
}


static void TimerInsertTimer( TimerEvent_t *obj)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b084      	sub	sp, #16
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 8019584:	4b13      	ldr	r3, [pc, #76]	; (80195d4 <TimerInsertTimer+0x58>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	60fb      	str	r3, [r7, #12]
  TimerEvent_t* next = TimerListHead->Next;
 801958a:	4b12      	ldr	r3, [pc, #72]	; (80195d4 <TimerInsertTimer+0x58>)
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	695b      	ldr	r3, [r3, #20]
 8019590:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8019592:	e012      	b.n	80195ba <TimerInsertTimer+0x3e>
  {  
    if( obj->Timestamp  > next->Timestamp )
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	681a      	ldr	r2, [r3, #0]
 8019598:	68bb      	ldr	r3, [r7, #8]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	429a      	cmp	r2, r3
 801959e:	d905      	bls.n	80195ac <TimerInsertTimer+0x30>
    {
        cur = next;
 80195a0:	68bb      	ldr	r3, [r7, #8]
 80195a2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	695b      	ldr	r3, [r3, #20]
 80195a8:	60bb      	str	r3, [r7, #8]
 80195aa:	e006      	b.n	80195ba <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = obj;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	687a      	ldr	r2, [r7, #4]
 80195b0:	615a      	str	r2, [r3, #20]
        obj->Next = next;
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	68ba      	ldr	r2, [r7, #8]
 80195b6:	615a      	str	r2, [r3, #20]
        return;
 80195b8:	e009      	b.n	80195ce <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 80195ba:	68fb      	ldr	r3, [r7, #12]
 80195bc:	695b      	ldr	r3, [r3, #20]
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d1e8      	bne.n	8019594 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = obj;
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	687a      	ldr	r2, [r7, #4]
 80195c6:	615a      	str	r2, [r3, #20]
  obj->Next = NULL;
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	2200      	movs	r2, #0
 80195cc:	615a      	str	r2, [r3, #20]
}
 80195ce:	46bd      	mov	sp, r7
 80195d0:	b004      	add	sp, #16
 80195d2:	bd80      	pop	{r7, pc}
 80195d4:	20001304 	.word	0x20001304

080195d8 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 80195d8:	b580      	push	{r7, lr}
 80195da:	b084      	sub	sp, #16
 80195dc:	af00      	add	r7, sp, #0
 80195de:	6078      	str	r0, [r7, #4]
  TimerEvent_t* cur = TimerListHead;
 80195e0:	4b0b      	ldr	r3, [pc, #44]	; (8019610 <TimerInsertNewHeadTimer+0x38>)
 80195e2:	681b      	ldr	r3, [r3, #0]
 80195e4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d002      	beq.n	80195f2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsNext2Expire = false;
 80195ec:	68fb      	ldr	r3, [r7, #12]
 80195ee:	2200      	movs	r2, #0
 80195f0:	725a      	strb	r2, [r3, #9]
  }

  obj->Next = cur;
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	68fa      	ldr	r2, [r7, #12]
 80195f6:	615a      	str	r2, [r3, #20]
  TimerListHead = obj;
 80195f8:	4b05      	ldr	r3, [pc, #20]	; (8019610 <TimerInsertNewHeadTimer+0x38>)
 80195fa:	687a      	ldr	r2, [r7, #4]
 80195fc:	601a      	str	r2, [r3, #0]
  TimerSetTimeout( TimerListHead );
 80195fe:	4b04      	ldr	r3, [pc, #16]	; (8019610 <TimerInsertNewHeadTimer+0x38>)
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	0018      	movs	r0, r3
 8019604:	f7ff ff96 	bl	8019534 <TimerSetTimeout>
}
 8019608:	46c0      	nop			; (mov r8, r8)
 801960a:	46bd      	mov	sp, r7
 801960c:	b004      	add	sp, #16
 801960e:	bd80      	pop	{r7, pc}
 8019610:	20001304 	.word	0x20001304

08019614 <TraceInit>:
 */
static void Trace_TxCpltCallback(void);

/* Functions Definition ------------------------------------------------------*/
void TraceInit( void )
{
 8019614:	b580      	push	{r7, lr}
 8019616:	af00      	add	r7, sp, #0
  OutputInit(Trace_TxCpltCallback);
 8019618:	4b06      	ldr	r3, [pc, #24]	; (8019634 <TraceInit+0x20>)
 801961a:	0018      	movs	r0, r3
 801961c:	f7eb fa8e 	bl	8004b3c <vcom_Init>

  circular_queue_init(&MsgTraceQueue, MsgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE);
 8019620:	2380      	movs	r3, #128	; 0x80
 8019622:	005a      	lsls	r2, r3, #1
 8019624:	4904      	ldr	r1, [pc, #16]	; (8019638 <TraceInit+0x24>)
 8019626:	4b05      	ldr	r3, [pc, #20]	; (801963c <TraceInit+0x28>)
 8019628:	0018      	movs	r0, r3
 801962a:	f7ff fa3b 	bl	8018aa4 <circular_queue_init>

  return;
 801962e:	46c0      	nop			; (mov r8, r8)
}
 8019630:	46bd      	mov	sp, r7
 8019632:	bd80      	pop	{r7, pc}
 8019634:	08019755 	.word	0x08019755
 8019638:	20001318 	.word	0x20001318
 801963c:	20001308 	.word	0x20001308

08019640 <TraceSend>:

int32_t TraceSend( const char *strFormat, ...)
{
 8019640:	b40f      	push	{r0, r1, r2, r3}
 8019642:	b5b0      	push	{r4, r5, r7, lr}
 8019644:	b0c8      	sub	sp, #288	; 0x120
 8019646:	af00      	add	r7, sp, #0
  char buf[TEMPBUFSIZE];
  va_list vaArgs;
  uint8_t* buffer;
  va_start( vaArgs, strFormat);
 8019648:	239a      	movs	r3, #154	; 0x9a
 801964a:	005b      	lsls	r3, r3, #1
 801964c:	18fb      	adds	r3, r7, r3
 801964e:	60bb      	str	r3, [r7, #8]
  uint16_t bufSize=vsnprintf(buf,TEMPBUFSIZE,strFormat, vaArgs);
 8019650:	68bc      	ldr	r4, [r7, #8]
 8019652:	2398      	movs	r3, #152	; 0x98
 8019654:	005b      	lsls	r3, r3, #1
 8019656:	18fb      	adds	r3, r7, r3
 8019658:	681a      	ldr	r2, [r3, #0]
 801965a:	2380      	movs	r3, #128	; 0x80
 801965c:	0059      	lsls	r1, r3, #1
 801965e:	250c      	movs	r5, #12
 8019660:	1978      	adds	r0, r7, r5
 8019662:	0023      	movs	r3, r4
 8019664:	f000 f9cc 	bl	8019a00 <vsniprintf>
 8019668:	0003      	movs	r3, r0
 801966a:	b29a      	uxth	r2, r3
 801966c:	4b36      	ldr	r3, [pc, #216]	; (8019748 <TraceSend+0x108>)
 801966e:	2190      	movs	r1, #144	; 0x90
 8019670:	0049      	lsls	r1, r1, #1
 8019672:	468c      	mov	ip, r1
 8019674:	44bc      	add	ip, r7
 8019676:	4463      	add	r3, ip
 8019678:	801a      	strh	r2, [r3, #0]
  va_end(vaArgs);
  int status=0;
 801967a:	2300      	movs	r3, #0
 801967c:	248e      	movs	r4, #142	; 0x8e
 801967e:	0064      	lsls	r4, r4, #1
 8019680:	193a      	adds	r2, r7, r4
 8019682:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8019684:	f3ef 8310 	mrs	r3, PRIMASK
 8019688:	228a      	movs	r2, #138	; 0x8a
 801968a:	0052      	lsls	r2, r2, #1
 801968c:	18b9      	adds	r1, r7, r2
 801968e:	600b      	str	r3, [r1, #0]
  return(result);
 8019690:	18bb      	adds	r3, r7, r2
 8019692:	681b      	ldr	r3, [r3, #0]
  
  BACKUP_PRIMASK();
 8019694:	228c      	movs	r2, #140	; 0x8c
 8019696:	0052      	lsls	r2, r2, #1
 8019698:	18ba      	adds	r2, r7, r2
 801969a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 801969c:	b672      	cpsid	i
  
  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_15);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_15);
  status =circular_queue_add(&MsgTraceQueue,(uint8_t*)buf, bufSize);
 801969e:	4b2a      	ldr	r3, [pc, #168]	; (8019748 <TraceSend+0x108>)
 80196a0:	2290      	movs	r2, #144	; 0x90
 80196a2:	0052      	lsls	r2, r2, #1
 80196a4:	4694      	mov	ip, r2
 80196a6:	44bc      	add	ip, r7
 80196a8:	4463      	add	r3, ip
 80196aa:	881a      	ldrh	r2, [r3, #0]
 80196ac:	1979      	adds	r1, r7, r5
 80196ae:	4b27      	ldr	r3, [pc, #156]	; (801974c <TraceSend+0x10c>)
 80196b0:	0018      	movs	r0, r3
 80196b2:	f7ff fa15 	bl	8018ae0 <circular_queue_add>
 80196b6:	0003      	movs	r3, r0
 80196b8:	193a      	adds	r2, r7, r4
 80196ba:	6013      	str	r3, [r2, #0]
  
  if ((status==0 ) && (TracePeripheralReady==SET))
 80196bc:	193b      	adds	r3, r7, r4
 80196be:	681b      	ldr	r3, [r3, #0]
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d12a      	bne.n	801971a <TraceSend+0xda>
 80196c4:	4b22      	ldr	r3, [pc, #136]	; (8019750 <TraceSend+0x110>)
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	b2db      	uxtb	r3, r3
 80196ca:	2b01      	cmp	r3, #1
 80196cc:	d125      	bne.n	801971a <TraceSend+0xda>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 80196ce:	1cba      	adds	r2, r7, #2
 80196d0:	1d39      	adds	r1, r7, #4
 80196d2:	4b1e      	ldr	r3, [pc, #120]	; (801974c <TraceSend+0x10c>)
 80196d4:	0018      	movs	r0, r3
 80196d6:	f7ff fac8 	bl	8018c6a <circular_queue_get>
    TracePeripheralReady = RESET;
 80196da:	4b1d      	ldr	r3, [pc, #116]	; (8019750 <TraceSend+0x110>)
 80196dc:	2200      	movs	r2, #0
 80196de:	701a      	strb	r2, [r3, #0]
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_12);
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Disable );
 80196e0:	2101      	movs	r1, #1
 80196e2:	2020      	movs	r0, #32
 80196e4:	f7ff f97c 	bl	80189e0 <LPM_SetStopMode>
 80196e8:	238c      	movs	r3, #140	; 0x8c
 80196ea:	005b      	lsls	r3, r3, #1
 80196ec:	18fb      	adds	r3, r7, r3
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	2288      	movs	r2, #136	; 0x88
 80196f2:	0052      	lsls	r2, r2, #1
 80196f4:	18b9      	adds	r1, r7, r2
 80196f6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196f8:	18bb      	adds	r3, r7, r2
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	f383 8810 	msr	PRIMASK, r3

    RESTORE_PRIMASK();
    OutputTrace(buffer, bufSize);
 8019700:	687a      	ldr	r2, [r7, #4]
 8019702:	4b11      	ldr	r3, [pc, #68]	; (8019748 <TraceSend+0x108>)
 8019704:	2190      	movs	r1, #144	; 0x90
 8019706:	0049      	lsls	r1, r1, #1
 8019708:	468c      	mov	ip, r1
 801970a:	44bc      	add	ip, r7
 801970c:	4463      	add	r3, ip
 801970e:	881b      	ldrh	r3, [r3, #0]
 8019710:	0019      	movs	r1, r3
 8019712:	0010      	movs	r0, r2
 8019714:	f7eb fa42 	bl	8004b9c <vcom_Trace>
 8019718:	e00b      	b.n	8019732 <TraceSend+0xf2>
 801971a:	238c      	movs	r3, #140	; 0x8c
 801971c:	005b      	lsls	r3, r3, #1
 801971e:	18fb      	adds	r3, r7, r3
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	2286      	movs	r2, #134	; 0x86
 8019724:	0052      	lsls	r2, r2, #1
 8019726:	18b9      	adds	r1, r7, r2
 8019728:	600b      	str	r3, [r1, #0]
 801972a:	18bb      	adds	r3, r7, r2
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	f383 8810 	msr	PRIMASK, r3
  else
  {
    RESTORE_PRIMASK();
  }
  
  return status;
 8019732:	238e      	movs	r3, #142	; 0x8e
 8019734:	005b      	lsls	r3, r3, #1
 8019736:	18fb      	adds	r3, r7, r3
 8019738:	681b      	ldr	r3, [r3, #0]
}
 801973a:	0018      	movs	r0, r3
 801973c:	46bd      	mov	sp, r7
 801973e:	b048      	add	sp, #288	; 0x120
 8019740:	bcb0      	pop	{r4, r5, r7}
 8019742:	bc08      	pop	{r3}
 8019744:	b004      	add	sp, #16
 8019746:	4718      	bx	r3
 8019748:	fffffee2 	.word	0xfffffee2
 801974c:	20001308 	.word	0x20001308
 8019750:	200000ec 	.word	0x200000ec

08019754 <Trace_TxCpltCallback>:
}

/* Private Functions Definition ------------------------------------------------------*/

static void Trace_TxCpltCallback(void)
{
 8019754:	b580      	push	{r7, lr}
 8019756:	b088      	sub	sp, #32
 8019758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 801975a:	f3ef 8310 	mrs	r3, PRIMASK
 801975e:	617b      	str	r3, [r7, #20]
  return(result);
 8019760:	697b      	ldr	r3, [r7, #20]
  int status;
  uint8_t* buffer;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8019762:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019764:	b672      	cpsid	i

  DISABLE_IRQ(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  circular_queue_remove(&MsgTraceQueue);
 8019766:	4b18      	ldr	r3, [pc, #96]	; (80197c8 <Trace_TxCpltCallback+0x74>)
 8019768:	0018      	movs	r0, r3
 801976a:	f7ff fad8 	bl	8018d1e <circular_queue_remove>
  //DBG_GPIO_SET(GPIOB, GPIO_PIN_13);
  //DBG_GPIO_RST(GPIOB, GPIO_PIN_13);
  /* Sense if new data to be sent */
  status=circular_queue_sense(&MsgTraceQueue);
 801976e:	4b16      	ldr	r3, [pc, #88]	; (80197c8 <Trace_TxCpltCallback+0x74>)
 8019770:	0018      	movs	r0, r3
 8019772:	f7ff fb34 	bl	8018dde <circular_queue_sense>
 8019776:	0003      	movs	r3, r0
 8019778:	61bb      	str	r3, [r7, #24]

  if ( status == 0) 
 801977a:	69bb      	ldr	r3, [r7, #24]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d113      	bne.n	80197a8 <Trace_TxCpltCallback+0x54>
  {
    circular_queue_get(&MsgTraceQueue,&buffer,&bufSize);
 8019780:	1dba      	adds	r2, r7, #6
 8019782:	2308      	movs	r3, #8
 8019784:	18f9      	adds	r1, r7, r3
 8019786:	4b10      	ldr	r3, [pc, #64]	; (80197c8 <Trace_TxCpltCallback+0x74>)
 8019788:	0018      	movs	r0, r3
 801978a:	f7ff fa6e 	bl	8018c6a <circular_queue_get>
 801978e:	69fb      	ldr	r3, [r7, #28]
 8019790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019792:	693b      	ldr	r3, [r7, #16]
 8019794:	f383 8810 	msr	PRIMASK, r3
    RESTORE_PRIMASK();
    //DBG_GPIO_SET(GPIOB, GPIO_PIN_14);
    //DBG_GPIO_RST(GPIOB, GPIO_PIN_14);
    OutputTrace(buffer, bufSize);
 8019798:	68ba      	ldr	r2, [r7, #8]
 801979a:	1dbb      	adds	r3, r7, #6
 801979c:	881b      	ldrh	r3, [r3, #0]
 801979e:	0019      	movs	r1, r3
 80197a0:	0010      	movs	r0, r2
 80197a2:	f7eb f9fb 	bl	8004b9c <vcom_Trace>

    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
    TracePeripheralReady = SET;
    RESTORE_PRIMASK();
  }
}
 80197a6:	e00b      	b.n	80197c0 <Trace_TxCpltCallback+0x6c>
    LPM_SetStopMode(LPM_UART_TX_Id , LPM_Enable );
 80197a8:	2100      	movs	r1, #0
 80197aa:	2020      	movs	r0, #32
 80197ac:	f7ff f918 	bl	80189e0 <LPM_SetStopMode>
    TracePeripheralReady = SET;
 80197b0:	4b06      	ldr	r3, [pc, #24]	; (80197cc <Trace_TxCpltCallback+0x78>)
 80197b2:	2201      	movs	r2, #1
 80197b4:	701a      	strb	r2, [r3, #0]
 80197b6:	69fb      	ldr	r3, [r7, #28]
 80197b8:	60fb      	str	r3, [r7, #12]
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	f383 8810 	msr	PRIMASK, r3
}
 80197c0:	46c0      	nop			; (mov r8, r8)
 80197c2:	46bd      	mov	sp, r7
 80197c4:	b008      	add	sp, #32
 80197c6:	bd80      	pop	{r7, pc}
 80197c8:	20001308 	.word	0x20001308
 80197cc:	200000ec 	.word	0x200000ec

080197d0 <rand1>:
#define RAND_LOCAL_MAX 2147483647L

static uint32_t next = 1;

int32_t rand1( void )
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80197d4:	4b08      	ldr	r3, [pc, #32]	; (80197f8 <rand1+0x28>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	4a08      	ldr	r2, [pc, #32]	; (80197fc <rand1+0x2c>)
 80197da:	4353      	muls	r3, r2
 80197dc:	4a08      	ldr	r2, [pc, #32]	; (8019800 <rand1+0x30>)
 80197de:	189a      	adds	r2, r3, r2
 80197e0:	4b05      	ldr	r3, [pc, #20]	; (80197f8 <rand1+0x28>)
 80197e2:	601a      	str	r2, [r3, #0]
 80197e4:	4b04      	ldr	r3, [pc, #16]	; (80197f8 <rand1+0x28>)
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	4906      	ldr	r1, [pc, #24]	; (8019804 <rand1+0x34>)
 80197ea:	0018      	movs	r0, r3
 80197ec:	f7e6 fd12 	bl	8000214 <__aeabi_uidivmod>
 80197f0:	000b      	movs	r3, r1
}
 80197f2:	0018      	movs	r0, r3
 80197f4:	46bd      	mov	sp, r7
 80197f6:	bd80      	pop	{r7, pc}
 80197f8:	200000f0 	.word	0x200000f0
 80197fc:	41c64e6d 	.word	0x41c64e6d
 8019800:	00003039 	.word	0x00003039
 8019804:	7fffffff 	.word	0x7fffffff

08019808 <srand1>:

void srand1( uint32_t seed )
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b082      	sub	sp, #8
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
    next = seed;
 8019810:	4b03      	ldr	r3, [pc, #12]	; (8019820 <srand1+0x18>)
 8019812:	687a      	ldr	r2, [r7, #4]
 8019814:	601a      	str	r2, [r3, #0]
}
 8019816:	46c0      	nop			; (mov r8, r8)
 8019818:	46bd      	mov	sp, r7
 801981a:	b002      	add	sp, #8
 801981c:	bd80      	pop	{r7, pc}
 801981e:	46c0      	nop			; (mov r8, r8)
 8019820:	200000f0 	.word	0x200000f0

08019824 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b082      	sub	sp, #8
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
 801982c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 801982e:	f7ff ffcf 	bl	80197d0 <rand1>
 8019832:	683a      	ldr	r2, [r7, #0]
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	1ad3      	subs	r3, r2, r3
 8019838:	3301      	adds	r3, #1
 801983a:	0019      	movs	r1, r3
 801983c:	f7e6 fdd4 	bl	80003e8 <__aeabi_idivmod>
 8019840:	000b      	movs	r3, r1
 8019842:	001a      	movs	r2, r3
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	18d3      	adds	r3, r2, r3
}
 8019848:	0018      	movs	r0, r3
 801984a:	46bd      	mov	sp, r7
 801984c:	b002      	add	sp, #8
 801984e:	bd80      	pop	{r7, pc}

08019850 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019850:	b580      	push	{r7, lr}
 8019852:	b084      	sub	sp, #16
 8019854:	af00      	add	r7, sp, #0
 8019856:	60f8      	str	r0, [r7, #12]
 8019858:	60b9      	str	r1, [r7, #8]
 801985a:	1dbb      	adds	r3, r7, #6
 801985c:	801a      	strh	r2, [r3, #0]
    while( size-- )
 801985e:	e007      	b.n	8019870 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019860:	68ba      	ldr	r2, [r7, #8]
 8019862:	1c53      	adds	r3, r2, #1
 8019864:	60bb      	str	r3, [r7, #8]
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	1c59      	adds	r1, r3, #1
 801986a:	60f9      	str	r1, [r7, #12]
 801986c:	7812      	ldrb	r2, [r2, #0]
 801986e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019870:	1dbb      	adds	r3, r7, #6
 8019872:	881b      	ldrh	r3, [r3, #0]
 8019874:	1dba      	adds	r2, r7, #6
 8019876:	1e59      	subs	r1, r3, #1
 8019878:	8011      	strh	r1, [r2, #0]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d1f0      	bne.n	8019860 <memcpy1+0x10>
    }
}
 801987e:	46c0      	nop			; (mov r8, r8)
 8019880:	46bd      	mov	sp, r7
 8019882:	b004      	add	sp, #16
 8019884:	bd80      	pop	{r7, pc}

08019886 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019886:	b580      	push	{r7, lr}
 8019888:	b084      	sub	sp, #16
 801988a:	af00      	add	r7, sp, #0
 801988c:	60f8      	str	r0, [r7, #12]
 801988e:	60b9      	str	r1, [r7, #8]
 8019890:	1dbb      	adds	r3, r7, #6
 8019892:	801a      	strh	r2, [r3, #0]
    dst = dst + ( size - 1 );
 8019894:	1dbb      	adds	r3, r7, #6
 8019896:	881b      	ldrh	r3, [r3, #0]
 8019898:	3b01      	subs	r3, #1
 801989a:	68fa      	ldr	r2, [r7, #12]
 801989c:	18d3      	adds	r3, r2, r3
 801989e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 80198a0:	e007      	b.n	80198b2 <memcpyr+0x2c>
    {
        *dst-- = *src++;
 80198a2:	68ba      	ldr	r2, [r7, #8]
 80198a4:	1c53      	adds	r3, r2, #1
 80198a6:	60bb      	str	r3, [r7, #8]
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	1e59      	subs	r1, r3, #1
 80198ac:	60f9      	str	r1, [r7, #12]
 80198ae:	7812      	ldrb	r2, [r2, #0]
 80198b0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198b2:	1dbb      	adds	r3, r7, #6
 80198b4:	881b      	ldrh	r3, [r3, #0]
 80198b6:	1dba      	adds	r2, r7, #6
 80198b8:	1e59      	subs	r1, r3, #1
 80198ba:	8011      	strh	r1, [r2, #0]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d1f0      	bne.n	80198a2 <memcpyr+0x1c>
    }
}
 80198c0:	46c0      	nop			; (mov r8, r8)
 80198c2:	46bd      	mov	sp, r7
 80198c4:	b004      	add	sp, #16
 80198c6:	bd80      	pop	{r7, pc}

080198c8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 80198c8:	b580      	push	{r7, lr}
 80198ca:	b082      	sub	sp, #8
 80198cc:	af00      	add	r7, sp, #0
 80198ce:	6078      	str	r0, [r7, #4]
 80198d0:	0008      	movs	r0, r1
 80198d2:	0011      	movs	r1, r2
 80198d4:	1cfb      	adds	r3, r7, #3
 80198d6:	1c02      	adds	r2, r0, #0
 80198d8:	701a      	strb	r2, [r3, #0]
 80198da:	003b      	movs	r3, r7
 80198dc:	1c0a      	adds	r2, r1, #0
 80198de:	801a      	strh	r2, [r3, #0]
    while( size-- )
 80198e0:	e005      	b.n	80198ee <memset1+0x26>
    {
        *dst++ = value;
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	1c5a      	adds	r2, r3, #1
 80198e6:	607a      	str	r2, [r7, #4]
 80198e8:	1cfa      	adds	r2, r7, #3
 80198ea:	7812      	ldrb	r2, [r2, #0]
 80198ec:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80198ee:	003b      	movs	r3, r7
 80198f0:	881b      	ldrh	r3, [r3, #0]
 80198f2:	003a      	movs	r2, r7
 80198f4:	1e59      	subs	r1, r3, #1
 80198f6:	8011      	strh	r1, [r2, #0]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d1f2      	bne.n	80198e2 <memset1+0x1a>
    }
}
 80198fc:	46c0      	nop			; (mov r8, r8)
 80198fe:	46bd      	mov	sp, r7
 8019900:	b002      	add	sp, #8
 8019902:	bd80      	pop	{r7, pc}

08019904 <__errno>:
 8019904:	4b01      	ldr	r3, [pc, #4]	; (801990c <__errno+0x8>)
 8019906:	6818      	ldr	r0, [r3, #0]
 8019908:	4770      	bx	lr
 801990a:	46c0      	nop			; (mov r8, r8)
 801990c:	200000f4 	.word	0x200000f4

08019910 <__libc_init_array>:
 8019910:	b570      	push	{r4, r5, r6, lr}
 8019912:	2600      	movs	r6, #0
 8019914:	4d0c      	ldr	r5, [pc, #48]	; (8019948 <__libc_init_array+0x38>)
 8019916:	4c0d      	ldr	r4, [pc, #52]	; (801994c <__libc_init_array+0x3c>)
 8019918:	1b64      	subs	r4, r4, r5
 801991a:	10a4      	asrs	r4, r4, #2
 801991c:	42a6      	cmp	r6, r4
 801991e:	d109      	bne.n	8019934 <__libc_init_array+0x24>
 8019920:	2600      	movs	r6, #0
 8019922:	f000 fdaf 	bl	801a484 <_init>
 8019926:	4d0a      	ldr	r5, [pc, #40]	; (8019950 <__libc_init_array+0x40>)
 8019928:	4c0a      	ldr	r4, [pc, #40]	; (8019954 <__libc_init_array+0x44>)
 801992a:	1b64      	subs	r4, r4, r5
 801992c:	10a4      	asrs	r4, r4, #2
 801992e:	42a6      	cmp	r6, r4
 8019930:	d105      	bne.n	801993e <__libc_init_array+0x2e>
 8019932:	bd70      	pop	{r4, r5, r6, pc}
 8019934:	00b3      	lsls	r3, r6, #2
 8019936:	58eb      	ldr	r3, [r5, r3]
 8019938:	4798      	blx	r3
 801993a:	3601      	adds	r6, #1
 801993c:	e7ee      	b.n	801991c <__libc_init_array+0xc>
 801993e:	00b3      	lsls	r3, r6, #2
 8019940:	58eb      	ldr	r3, [r5, r3]
 8019942:	4798      	blx	r3
 8019944:	3601      	adds	r6, #1
 8019946:	e7f2      	b.n	801992e <__libc_init_array+0x1e>
 8019948:	0801b65c 	.word	0x0801b65c
 801994c:	0801b65c 	.word	0x0801b65c
 8019950:	0801b65c 	.word	0x0801b65c
 8019954:	0801b660 	.word	0x0801b660

08019958 <memset>:
 8019958:	0003      	movs	r3, r0
 801995a:	1812      	adds	r2, r2, r0
 801995c:	4293      	cmp	r3, r2
 801995e:	d100      	bne.n	8019962 <memset+0xa>
 8019960:	4770      	bx	lr
 8019962:	7019      	strb	r1, [r3, #0]
 8019964:	3301      	adds	r3, #1
 8019966:	e7f9      	b.n	801995c <memset+0x4>

08019968 <siprintf>:
 8019968:	b40e      	push	{r1, r2, r3}
 801996a:	b500      	push	{lr}
 801996c:	490b      	ldr	r1, [pc, #44]	; (801999c <siprintf+0x34>)
 801996e:	b09c      	sub	sp, #112	; 0x70
 8019970:	ab1d      	add	r3, sp, #116	; 0x74
 8019972:	9002      	str	r0, [sp, #8]
 8019974:	9006      	str	r0, [sp, #24]
 8019976:	9107      	str	r1, [sp, #28]
 8019978:	9104      	str	r1, [sp, #16]
 801997a:	4809      	ldr	r0, [pc, #36]	; (80199a0 <siprintf+0x38>)
 801997c:	4909      	ldr	r1, [pc, #36]	; (80199a4 <siprintf+0x3c>)
 801997e:	cb04      	ldmia	r3!, {r2}
 8019980:	9105      	str	r1, [sp, #20]
 8019982:	6800      	ldr	r0, [r0, #0]
 8019984:	a902      	add	r1, sp, #8
 8019986:	9301      	str	r3, [sp, #4]
 8019988:	f000 f906 	bl	8019b98 <_svfiprintf_r>
 801998c:	2300      	movs	r3, #0
 801998e:	9a02      	ldr	r2, [sp, #8]
 8019990:	7013      	strb	r3, [r2, #0]
 8019992:	b01c      	add	sp, #112	; 0x70
 8019994:	bc08      	pop	{r3}
 8019996:	b003      	add	sp, #12
 8019998:	4718      	bx	r3
 801999a:	46c0      	nop			; (mov r8, r8)
 801999c:	7fffffff 	.word	0x7fffffff
 80199a0:	200000f4 	.word	0x200000f4
 80199a4:	ffff0208 	.word	0xffff0208

080199a8 <_vsniprintf_r>:
 80199a8:	b530      	push	{r4, r5, lr}
 80199aa:	0014      	movs	r4, r2
 80199ac:	b09b      	sub	sp, #108	; 0x6c
 80199ae:	0005      	movs	r5, r0
 80199b0:	001a      	movs	r2, r3
 80199b2:	2c00      	cmp	r4, #0
 80199b4:	da05      	bge.n	80199c2 <_vsniprintf_r+0x1a>
 80199b6:	238b      	movs	r3, #139	; 0x8b
 80199b8:	6003      	str	r3, [r0, #0]
 80199ba:	2001      	movs	r0, #1
 80199bc:	4240      	negs	r0, r0
 80199be:	b01b      	add	sp, #108	; 0x6c
 80199c0:	bd30      	pop	{r4, r5, pc}
 80199c2:	2382      	movs	r3, #130	; 0x82
 80199c4:	4668      	mov	r0, sp
 80199c6:	009b      	lsls	r3, r3, #2
 80199c8:	8183      	strh	r3, [r0, #12]
 80199ca:	2300      	movs	r3, #0
 80199cc:	9100      	str	r1, [sp, #0]
 80199ce:	9104      	str	r1, [sp, #16]
 80199d0:	429c      	cmp	r4, r3
 80199d2:	d000      	beq.n	80199d6 <_vsniprintf_r+0x2e>
 80199d4:	1e63      	subs	r3, r4, #1
 80199d6:	9302      	str	r3, [sp, #8]
 80199d8:	9305      	str	r3, [sp, #20]
 80199da:	2301      	movs	r3, #1
 80199dc:	4669      	mov	r1, sp
 80199de:	425b      	negs	r3, r3
 80199e0:	81cb      	strh	r3, [r1, #14]
 80199e2:	0028      	movs	r0, r5
 80199e4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80199e6:	f000 f8d7 	bl	8019b98 <_svfiprintf_r>
 80199ea:	1c43      	adds	r3, r0, #1
 80199ec:	da01      	bge.n	80199f2 <_vsniprintf_r+0x4a>
 80199ee:	238b      	movs	r3, #139	; 0x8b
 80199f0:	602b      	str	r3, [r5, #0]
 80199f2:	2c00      	cmp	r4, #0
 80199f4:	d0e3      	beq.n	80199be <_vsniprintf_r+0x16>
 80199f6:	2300      	movs	r3, #0
 80199f8:	9a00      	ldr	r2, [sp, #0]
 80199fa:	7013      	strb	r3, [r2, #0]
 80199fc:	e7df      	b.n	80199be <_vsniprintf_r+0x16>
	...

08019a00 <vsniprintf>:
 8019a00:	b507      	push	{r0, r1, r2, lr}
 8019a02:	9300      	str	r3, [sp, #0]
 8019a04:	0013      	movs	r3, r2
 8019a06:	000a      	movs	r2, r1
 8019a08:	0001      	movs	r1, r0
 8019a0a:	4802      	ldr	r0, [pc, #8]	; (8019a14 <vsniprintf+0x14>)
 8019a0c:	6800      	ldr	r0, [r0, #0]
 8019a0e:	f7ff ffcb 	bl	80199a8 <_vsniprintf_r>
 8019a12:	bd0e      	pop	{r1, r2, r3, pc}
 8019a14:	200000f4 	.word	0x200000f4

08019a18 <_malloc_r>:
 8019a18:	2303      	movs	r3, #3
 8019a1a:	b570      	push	{r4, r5, r6, lr}
 8019a1c:	1ccd      	adds	r5, r1, #3
 8019a1e:	439d      	bics	r5, r3
 8019a20:	3508      	adds	r5, #8
 8019a22:	0006      	movs	r6, r0
 8019a24:	2d0c      	cmp	r5, #12
 8019a26:	d21e      	bcs.n	8019a66 <_malloc_r+0x4e>
 8019a28:	250c      	movs	r5, #12
 8019a2a:	42a9      	cmp	r1, r5
 8019a2c:	d81d      	bhi.n	8019a6a <_malloc_r+0x52>
 8019a2e:	0030      	movs	r0, r6
 8019a30:	f000 fb5f 	bl	801a0f2 <__malloc_lock>
 8019a34:	4a25      	ldr	r2, [pc, #148]	; (8019acc <_malloc_r+0xb4>)
 8019a36:	6814      	ldr	r4, [r2, #0]
 8019a38:	0021      	movs	r1, r4
 8019a3a:	2900      	cmp	r1, #0
 8019a3c:	d119      	bne.n	8019a72 <_malloc_r+0x5a>
 8019a3e:	4c24      	ldr	r4, [pc, #144]	; (8019ad0 <_malloc_r+0xb8>)
 8019a40:	6823      	ldr	r3, [r4, #0]
 8019a42:	2b00      	cmp	r3, #0
 8019a44:	d103      	bne.n	8019a4e <_malloc_r+0x36>
 8019a46:	0030      	movs	r0, r6
 8019a48:	f000 fb1a 	bl	801a080 <_sbrk_r>
 8019a4c:	6020      	str	r0, [r4, #0]
 8019a4e:	0029      	movs	r1, r5
 8019a50:	0030      	movs	r0, r6
 8019a52:	f000 fb15 	bl	801a080 <_sbrk_r>
 8019a56:	1c43      	adds	r3, r0, #1
 8019a58:	d12b      	bne.n	8019ab2 <_malloc_r+0x9a>
 8019a5a:	230c      	movs	r3, #12
 8019a5c:	0030      	movs	r0, r6
 8019a5e:	6033      	str	r3, [r6, #0]
 8019a60:	f000 fb48 	bl	801a0f4 <__malloc_unlock>
 8019a64:	e003      	b.n	8019a6e <_malloc_r+0x56>
 8019a66:	2d00      	cmp	r5, #0
 8019a68:	dadf      	bge.n	8019a2a <_malloc_r+0x12>
 8019a6a:	230c      	movs	r3, #12
 8019a6c:	6033      	str	r3, [r6, #0]
 8019a6e:	2000      	movs	r0, #0
 8019a70:	bd70      	pop	{r4, r5, r6, pc}
 8019a72:	680b      	ldr	r3, [r1, #0]
 8019a74:	1b5b      	subs	r3, r3, r5
 8019a76:	d419      	bmi.n	8019aac <_malloc_r+0x94>
 8019a78:	2b0b      	cmp	r3, #11
 8019a7a:	d903      	bls.n	8019a84 <_malloc_r+0x6c>
 8019a7c:	600b      	str	r3, [r1, #0]
 8019a7e:	18cc      	adds	r4, r1, r3
 8019a80:	6025      	str	r5, [r4, #0]
 8019a82:	e003      	b.n	8019a8c <_malloc_r+0x74>
 8019a84:	684b      	ldr	r3, [r1, #4]
 8019a86:	428c      	cmp	r4, r1
 8019a88:	d10d      	bne.n	8019aa6 <_malloc_r+0x8e>
 8019a8a:	6013      	str	r3, [r2, #0]
 8019a8c:	0030      	movs	r0, r6
 8019a8e:	f000 fb31 	bl	801a0f4 <__malloc_unlock>
 8019a92:	0020      	movs	r0, r4
 8019a94:	2207      	movs	r2, #7
 8019a96:	300b      	adds	r0, #11
 8019a98:	1d23      	adds	r3, r4, #4
 8019a9a:	4390      	bics	r0, r2
 8019a9c:	1ac3      	subs	r3, r0, r3
 8019a9e:	d0e7      	beq.n	8019a70 <_malloc_r+0x58>
 8019aa0:	425a      	negs	r2, r3
 8019aa2:	50e2      	str	r2, [r4, r3]
 8019aa4:	e7e4      	b.n	8019a70 <_malloc_r+0x58>
 8019aa6:	6063      	str	r3, [r4, #4]
 8019aa8:	000c      	movs	r4, r1
 8019aaa:	e7ef      	b.n	8019a8c <_malloc_r+0x74>
 8019aac:	000c      	movs	r4, r1
 8019aae:	6849      	ldr	r1, [r1, #4]
 8019ab0:	e7c3      	b.n	8019a3a <_malloc_r+0x22>
 8019ab2:	2303      	movs	r3, #3
 8019ab4:	1cc4      	adds	r4, r0, #3
 8019ab6:	439c      	bics	r4, r3
 8019ab8:	42a0      	cmp	r0, r4
 8019aba:	d0e1      	beq.n	8019a80 <_malloc_r+0x68>
 8019abc:	1a21      	subs	r1, r4, r0
 8019abe:	0030      	movs	r0, r6
 8019ac0:	f000 fade 	bl	801a080 <_sbrk_r>
 8019ac4:	1c43      	adds	r3, r0, #1
 8019ac6:	d1db      	bne.n	8019a80 <_malloc_r+0x68>
 8019ac8:	e7c7      	b.n	8019a5a <_malloc_r+0x42>
 8019aca:	46c0      	nop			; (mov r8, r8)
 8019acc:	20001418 	.word	0x20001418
 8019ad0:	2000141c 	.word	0x2000141c

08019ad4 <__ssputs_r>:
 8019ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad6:	688e      	ldr	r6, [r1, #8]
 8019ad8:	b085      	sub	sp, #20
 8019ada:	0007      	movs	r7, r0
 8019adc:	000c      	movs	r4, r1
 8019ade:	9203      	str	r2, [sp, #12]
 8019ae0:	9301      	str	r3, [sp, #4]
 8019ae2:	429e      	cmp	r6, r3
 8019ae4:	d83c      	bhi.n	8019b60 <__ssputs_r+0x8c>
 8019ae6:	2390      	movs	r3, #144	; 0x90
 8019ae8:	898a      	ldrh	r2, [r1, #12]
 8019aea:	00db      	lsls	r3, r3, #3
 8019aec:	421a      	tst	r2, r3
 8019aee:	d034      	beq.n	8019b5a <__ssputs_r+0x86>
 8019af0:	2503      	movs	r5, #3
 8019af2:	6909      	ldr	r1, [r1, #16]
 8019af4:	6823      	ldr	r3, [r4, #0]
 8019af6:	1a5b      	subs	r3, r3, r1
 8019af8:	9302      	str	r3, [sp, #8]
 8019afa:	6963      	ldr	r3, [r4, #20]
 8019afc:	9802      	ldr	r0, [sp, #8]
 8019afe:	435d      	muls	r5, r3
 8019b00:	0feb      	lsrs	r3, r5, #31
 8019b02:	195d      	adds	r5, r3, r5
 8019b04:	9b01      	ldr	r3, [sp, #4]
 8019b06:	106d      	asrs	r5, r5, #1
 8019b08:	3301      	adds	r3, #1
 8019b0a:	181b      	adds	r3, r3, r0
 8019b0c:	42ab      	cmp	r3, r5
 8019b0e:	d900      	bls.n	8019b12 <__ssputs_r+0x3e>
 8019b10:	001d      	movs	r5, r3
 8019b12:	0553      	lsls	r3, r2, #21
 8019b14:	d532      	bpl.n	8019b7c <__ssputs_r+0xa8>
 8019b16:	0029      	movs	r1, r5
 8019b18:	0038      	movs	r0, r7
 8019b1a:	f7ff ff7d 	bl	8019a18 <_malloc_r>
 8019b1e:	1e06      	subs	r6, r0, #0
 8019b20:	d109      	bne.n	8019b36 <__ssputs_r+0x62>
 8019b22:	230c      	movs	r3, #12
 8019b24:	603b      	str	r3, [r7, #0]
 8019b26:	2340      	movs	r3, #64	; 0x40
 8019b28:	2001      	movs	r0, #1
 8019b2a:	89a2      	ldrh	r2, [r4, #12]
 8019b2c:	4240      	negs	r0, r0
 8019b2e:	4313      	orrs	r3, r2
 8019b30:	81a3      	strh	r3, [r4, #12]
 8019b32:	b005      	add	sp, #20
 8019b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b36:	9a02      	ldr	r2, [sp, #8]
 8019b38:	6921      	ldr	r1, [r4, #16]
 8019b3a:	f000 fabe 	bl	801a0ba <memcpy>
 8019b3e:	89a3      	ldrh	r3, [r4, #12]
 8019b40:	4a14      	ldr	r2, [pc, #80]	; (8019b94 <__ssputs_r+0xc0>)
 8019b42:	401a      	ands	r2, r3
 8019b44:	2380      	movs	r3, #128	; 0x80
 8019b46:	4313      	orrs	r3, r2
 8019b48:	81a3      	strh	r3, [r4, #12]
 8019b4a:	9b02      	ldr	r3, [sp, #8]
 8019b4c:	6126      	str	r6, [r4, #16]
 8019b4e:	18f6      	adds	r6, r6, r3
 8019b50:	6026      	str	r6, [r4, #0]
 8019b52:	6165      	str	r5, [r4, #20]
 8019b54:	9e01      	ldr	r6, [sp, #4]
 8019b56:	1aed      	subs	r5, r5, r3
 8019b58:	60a5      	str	r5, [r4, #8]
 8019b5a:	9b01      	ldr	r3, [sp, #4]
 8019b5c:	429e      	cmp	r6, r3
 8019b5e:	d900      	bls.n	8019b62 <__ssputs_r+0x8e>
 8019b60:	9e01      	ldr	r6, [sp, #4]
 8019b62:	0032      	movs	r2, r6
 8019b64:	9903      	ldr	r1, [sp, #12]
 8019b66:	6820      	ldr	r0, [r4, #0]
 8019b68:	f000 fab0 	bl	801a0cc <memmove>
 8019b6c:	68a3      	ldr	r3, [r4, #8]
 8019b6e:	2000      	movs	r0, #0
 8019b70:	1b9b      	subs	r3, r3, r6
 8019b72:	60a3      	str	r3, [r4, #8]
 8019b74:	6823      	ldr	r3, [r4, #0]
 8019b76:	199e      	adds	r6, r3, r6
 8019b78:	6026      	str	r6, [r4, #0]
 8019b7a:	e7da      	b.n	8019b32 <__ssputs_r+0x5e>
 8019b7c:	002a      	movs	r2, r5
 8019b7e:	0038      	movs	r0, r7
 8019b80:	f000 fb04 	bl	801a18c <_realloc_r>
 8019b84:	1e06      	subs	r6, r0, #0
 8019b86:	d1e0      	bne.n	8019b4a <__ssputs_r+0x76>
 8019b88:	6921      	ldr	r1, [r4, #16]
 8019b8a:	0038      	movs	r0, r7
 8019b8c:	f000 fab4 	bl	801a0f8 <_free_r>
 8019b90:	e7c7      	b.n	8019b22 <__ssputs_r+0x4e>
 8019b92:	46c0      	nop			; (mov r8, r8)
 8019b94:	fffffb7f 	.word	0xfffffb7f

08019b98 <_svfiprintf_r>:
 8019b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019b9a:	b0a1      	sub	sp, #132	; 0x84
 8019b9c:	9003      	str	r0, [sp, #12]
 8019b9e:	001d      	movs	r5, r3
 8019ba0:	898b      	ldrh	r3, [r1, #12]
 8019ba2:	000f      	movs	r7, r1
 8019ba4:	0016      	movs	r6, r2
 8019ba6:	061b      	lsls	r3, r3, #24
 8019ba8:	d511      	bpl.n	8019bce <_svfiprintf_r+0x36>
 8019baa:	690b      	ldr	r3, [r1, #16]
 8019bac:	2b00      	cmp	r3, #0
 8019bae:	d10e      	bne.n	8019bce <_svfiprintf_r+0x36>
 8019bb0:	2140      	movs	r1, #64	; 0x40
 8019bb2:	f7ff ff31 	bl	8019a18 <_malloc_r>
 8019bb6:	6038      	str	r0, [r7, #0]
 8019bb8:	6138      	str	r0, [r7, #16]
 8019bba:	2800      	cmp	r0, #0
 8019bbc:	d105      	bne.n	8019bca <_svfiprintf_r+0x32>
 8019bbe:	230c      	movs	r3, #12
 8019bc0:	9a03      	ldr	r2, [sp, #12]
 8019bc2:	3801      	subs	r0, #1
 8019bc4:	6013      	str	r3, [r2, #0]
 8019bc6:	b021      	add	sp, #132	; 0x84
 8019bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bca:	2340      	movs	r3, #64	; 0x40
 8019bcc:	617b      	str	r3, [r7, #20]
 8019bce:	2300      	movs	r3, #0
 8019bd0:	ac08      	add	r4, sp, #32
 8019bd2:	6163      	str	r3, [r4, #20]
 8019bd4:	3320      	adds	r3, #32
 8019bd6:	7663      	strb	r3, [r4, #25]
 8019bd8:	3310      	adds	r3, #16
 8019bda:	76a3      	strb	r3, [r4, #26]
 8019bdc:	9507      	str	r5, [sp, #28]
 8019bde:	0035      	movs	r5, r6
 8019be0:	782b      	ldrb	r3, [r5, #0]
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d001      	beq.n	8019bea <_svfiprintf_r+0x52>
 8019be6:	2b25      	cmp	r3, #37	; 0x25
 8019be8:	d146      	bne.n	8019c78 <_svfiprintf_r+0xe0>
 8019bea:	1bab      	subs	r3, r5, r6
 8019bec:	9305      	str	r3, [sp, #20]
 8019bee:	d00c      	beq.n	8019c0a <_svfiprintf_r+0x72>
 8019bf0:	0032      	movs	r2, r6
 8019bf2:	0039      	movs	r1, r7
 8019bf4:	9803      	ldr	r0, [sp, #12]
 8019bf6:	f7ff ff6d 	bl	8019ad4 <__ssputs_r>
 8019bfa:	1c43      	adds	r3, r0, #1
 8019bfc:	d100      	bne.n	8019c00 <_svfiprintf_r+0x68>
 8019bfe:	e0ae      	b.n	8019d5e <_svfiprintf_r+0x1c6>
 8019c00:	6962      	ldr	r2, [r4, #20]
 8019c02:	9b05      	ldr	r3, [sp, #20]
 8019c04:	4694      	mov	ip, r2
 8019c06:	4463      	add	r3, ip
 8019c08:	6163      	str	r3, [r4, #20]
 8019c0a:	782b      	ldrb	r3, [r5, #0]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d100      	bne.n	8019c12 <_svfiprintf_r+0x7a>
 8019c10:	e0a5      	b.n	8019d5e <_svfiprintf_r+0x1c6>
 8019c12:	2201      	movs	r2, #1
 8019c14:	2300      	movs	r3, #0
 8019c16:	4252      	negs	r2, r2
 8019c18:	6062      	str	r2, [r4, #4]
 8019c1a:	a904      	add	r1, sp, #16
 8019c1c:	3254      	adds	r2, #84	; 0x54
 8019c1e:	1852      	adds	r2, r2, r1
 8019c20:	1c6e      	adds	r6, r5, #1
 8019c22:	6023      	str	r3, [r4, #0]
 8019c24:	60e3      	str	r3, [r4, #12]
 8019c26:	60a3      	str	r3, [r4, #8]
 8019c28:	7013      	strb	r3, [r2, #0]
 8019c2a:	65a3      	str	r3, [r4, #88]	; 0x58
 8019c2c:	7831      	ldrb	r1, [r6, #0]
 8019c2e:	2205      	movs	r2, #5
 8019c30:	4853      	ldr	r0, [pc, #332]	; (8019d80 <_svfiprintf_r+0x1e8>)
 8019c32:	f000 fa37 	bl	801a0a4 <memchr>
 8019c36:	1c75      	adds	r5, r6, #1
 8019c38:	2800      	cmp	r0, #0
 8019c3a:	d11f      	bne.n	8019c7c <_svfiprintf_r+0xe4>
 8019c3c:	6822      	ldr	r2, [r4, #0]
 8019c3e:	06d3      	lsls	r3, r2, #27
 8019c40:	d504      	bpl.n	8019c4c <_svfiprintf_r+0xb4>
 8019c42:	2353      	movs	r3, #83	; 0x53
 8019c44:	a904      	add	r1, sp, #16
 8019c46:	185b      	adds	r3, r3, r1
 8019c48:	2120      	movs	r1, #32
 8019c4a:	7019      	strb	r1, [r3, #0]
 8019c4c:	0713      	lsls	r3, r2, #28
 8019c4e:	d504      	bpl.n	8019c5a <_svfiprintf_r+0xc2>
 8019c50:	2353      	movs	r3, #83	; 0x53
 8019c52:	a904      	add	r1, sp, #16
 8019c54:	185b      	adds	r3, r3, r1
 8019c56:	212b      	movs	r1, #43	; 0x2b
 8019c58:	7019      	strb	r1, [r3, #0]
 8019c5a:	7833      	ldrb	r3, [r6, #0]
 8019c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8019c5e:	d016      	beq.n	8019c8e <_svfiprintf_r+0xf6>
 8019c60:	0035      	movs	r5, r6
 8019c62:	2100      	movs	r1, #0
 8019c64:	200a      	movs	r0, #10
 8019c66:	68e3      	ldr	r3, [r4, #12]
 8019c68:	782a      	ldrb	r2, [r5, #0]
 8019c6a:	1c6e      	adds	r6, r5, #1
 8019c6c:	3a30      	subs	r2, #48	; 0x30
 8019c6e:	2a09      	cmp	r2, #9
 8019c70:	d94e      	bls.n	8019d10 <_svfiprintf_r+0x178>
 8019c72:	2900      	cmp	r1, #0
 8019c74:	d018      	beq.n	8019ca8 <_svfiprintf_r+0x110>
 8019c76:	e010      	b.n	8019c9a <_svfiprintf_r+0x102>
 8019c78:	3501      	adds	r5, #1
 8019c7a:	e7b1      	b.n	8019be0 <_svfiprintf_r+0x48>
 8019c7c:	4b40      	ldr	r3, [pc, #256]	; (8019d80 <_svfiprintf_r+0x1e8>)
 8019c7e:	6822      	ldr	r2, [r4, #0]
 8019c80:	1ac0      	subs	r0, r0, r3
 8019c82:	2301      	movs	r3, #1
 8019c84:	4083      	lsls	r3, r0
 8019c86:	4313      	orrs	r3, r2
 8019c88:	6023      	str	r3, [r4, #0]
 8019c8a:	002e      	movs	r6, r5
 8019c8c:	e7ce      	b.n	8019c2c <_svfiprintf_r+0x94>
 8019c8e:	9b07      	ldr	r3, [sp, #28]
 8019c90:	1d19      	adds	r1, r3, #4
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	9107      	str	r1, [sp, #28]
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	db01      	blt.n	8019c9e <_svfiprintf_r+0x106>
 8019c9a:	930b      	str	r3, [sp, #44]	; 0x2c
 8019c9c:	e004      	b.n	8019ca8 <_svfiprintf_r+0x110>
 8019c9e:	425b      	negs	r3, r3
 8019ca0:	60e3      	str	r3, [r4, #12]
 8019ca2:	2302      	movs	r3, #2
 8019ca4:	4313      	orrs	r3, r2
 8019ca6:	6023      	str	r3, [r4, #0]
 8019ca8:	782b      	ldrb	r3, [r5, #0]
 8019caa:	2b2e      	cmp	r3, #46	; 0x2e
 8019cac:	d10a      	bne.n	8019cc4 <_svfiprintf_r+0x12c>
 8019cae:	786b      	ldrb	r3, [r5, #1]
 8019cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8019cb2:	d135      	bne.n	8019d20 <_svfiprintf_r+0x188>
 8019cb4:	9b07      	ldr	r3, [sp, #28]
 8019cb6:	3502      	adds	r5, #2
 8019cb8:	1d1a      	adds	r2, r3, #4
 8019cba:	681b      	ldr	r3, [r3, #0]
 8019cbc:	9207      	str	r2, [sp, #28]
 8019cbe:	2b00      	cmp	r3, #0
 8019cc0:	db2b      	blt.n	8019d1a <_svfiprintf_r+0x182>
 8019cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8019cc4:	4e2f      	ldr	r6, [pc, #188]	; (8019d84 <_svfiprintf_r+0x1ec>)
 8019cc6:	7829      	ldrb	r1, [r5, #0]
 8019cc8:	2203      	movs	r2, #3
 8019cca:	0030      	movs	r0, r6
 8019ccc:	f000 f9ea 	bl	801a0a4 <memchr>
 8019cd0:	2800      	cmp	r0, #0
 8019cd2:	d006      	beq.n	8019ce2 <_svfiprintf_r+0x14a>
 8019cd4:	2340      	movs	r3, #64	; 0x40
 8019cd6:	1b80      	subs	r0, r0, r6
 8019cd8:	4083      	lsls	r3, r0
 8019cda:	6822      	ldr	r2, [r4, #0]
 8019cdc:	3501      	adds	r5, #1
 8019cde:	4313      	orrs	r3, r2
 8019ce0:	6023      	str	r3, [r4, #0]
 8019ce2:	7829      	ldrb	r1, [r5, #0]
 8019ce4:	2206      	movs	r2, #6
 8019ce6:	4828      	ldr	r0, [pc, #160]	; (8019d88 <_svfiprintf_r+0x1f0>)
 8019ce8:	1c6e      	adds	r6, r5, #1
 8019cea:	7621      	strb	r1, [r4, #24]
 8019cec:	f000 f9da 	bl	801a0a4 <memchr>
 8019cf0:	2800      	cmp	r0, #0
 8019cf2:	d03c      	beq.n	8019d6e <_svfiprintf_r+0x1d6>
 8019cf4:	4b25      	ldr	r3, [pc, #148]	; (8019d8c <_svfiprintf_r+0x1f4>)
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d125      	bne.n	8019d46 <_svfiprintf_r+0x1ae>
 8019cfa:	2207      	movs	r2, #7
 8019cfc:	9b07      	ldr	r3, [sp, #28]
 8019cfe:	3307      	adds	r3, #7
 8019d00:	4393      	bics	r3, r2
 8019d02:	3308      	adds	r3, #8
 8019d04:	9307      	str	r3, [sp, #28]
 8019d06:	6963      	ldr	r3, [r4, #20]
 8019d08:	9a04      	ldr	r2, [sp, #16]
 8019d0a:	189b      	adds	r3, r3, r2
 8019d0c:	6163      	str	r3, [r4, #20]
 8019d0e:	e766      	b.n	8019bde <_svfiprintf_r+0x46>
 8019d10:	4343      	muls	r3, r0
 8019d12:	2101      	movs	r1, #1
 8019d14:	189b      	adds	r3, r3, r2
 8019d16:	0035      	movs	r5, r6
 8019d18:	e7a6      	b.n	8019c68 <_svfiprintf_r+0xd0>
 8019d1a:	2301      	movs	r3, #1
 8019d1c:	425b      	negs	r3, r3
 8019d1e:	e7d0      	b.n	8019cc2 <_svfiprintf_r+0x12a>
 8019d20:	2300      	movs	r3, #0
 8019d22:	200a      	movs	r0, #10
 8019d24:	001a      	movs	r2, r3
 8019d26:	3501      	adds	r5, #1
 8019d28:	6063      	str	r3, [r4, #4]
 8019d2a:	7829      	ldrb	r1, [r5, #0]
 8019d2c:	1c6e      	adds	r6, r5, #1
 8019d2e:	3930      	subs	r1, #48	; 0x30
 8019d30:	2909      	cmp	r1, #9
 8019d32:	d903      	bls.n	8019d3c <_svfiprintf_r+0x1a4>
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d0c5      	beq.n	8019cc4 <_svfiprintf_r+0x12c>
 8019d38:	9209      	str	r2, [sp, #36]	; 0x24
 8019d3a:	e7c3      	b.n	8019cc4 <_svfiprintf_r+0x12c>
 8019d3c:	4342      	muls	r2, r0
 8019d3e:	2301      	movs	r3, #1
 8019d40:	1852      	adds	r2, r2, r1
 8019d42:	0035      	movs	r5, r6
 8019d44:	e7f1      	b.n	8019d2a <_svfiprintf_r+0x192>
 8019d46:	ab07      	add	r3, sp, #28
 8019d48:	9300      	str	r3, [sp, #0]
 8019d4a:	003a      	movs	r2, r7
 8019d4c:	4b10      	ldr	r3, [pc, #64]	; (8019d90 <_svfiprintf_r+0x1f8>)
 8019d4e:	0021      	movs	r1, r4
 8019d50:	9803      	ldr	r0, [sp, #12]
 8019d52:	e000      	b.n	8019d56 <_svfiprintf_r+0x1be>
 8019d54:	bf00      	nop
 8019d56:	9004      	str	r0, [sp, #16]
 8019d58:	9b04      	ldr	r3, [sp, #16]
 8019d5a:	3301      	adds	r3, #1
 8019d5c:	d1d3      	bne.n	8019d06 <_svfiprintf_r+0x16e>
 8019d5e:	89bb      	ldrh	r3, [r7, #12]
 8019d60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019d62:	065b      	lsls	r3, r3, #25
 8019d64:	d400      	bmi.n	8019d68 <_svfiprintf_r+0x1d0>
 8019d66:	e72e      	b.n	8019bc6 <_svfiprintf_r+0x2e>
 8019d68:	2001      	movs	r0, #1
 8019d6a:	4240      	negs	r0, r0
 8019d6c:	e72b      	b.n	8019bc6 <_svfiprintf_r+0x2e>
 8019d6e:	ab07      	add	r3, sp, #28
 8019d70:	9300      	str	r3, [sp, #0]
 8019d72:	003a      	movs	r2, r7
 8019d74:	4b06      	ldr	r3, [pc, #24]	; (8019d90 <_svfiprintf_r+0x1f8>)
 8019d76:	0021      	movs	r1, r4
 8019d78:	9803      	ldr	r0, [sp, #12]
 8019d7a:	f000 f879 	bl	8019e70 <_printf_i>
 8019d7e:	e7ea      	b.n	8019d56 <_svfiprintf_r+0x1be>
 8019d80:	0801b620 	.word	0x0801b620
 8019d84:	0801b626 	.word	0x0801b626
 8019d88:	0801b62a 	.word	0x0801b62a
 8019d8c:	00000000 	.word	0x00000000
 8019d90:	08019ad5 	.word	0x08019ad5

08019d94 <_printf_common>:
 8019d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019d96:	0015      	movs	r5, r2
 8019d98:	9301      	str	r3, [sp, #4]
 8019d9a:	688a      	ldr	r2, [r1, #8]
 8019d9c:	690b      	ldr	r3, [r1, #16]
 8019d9e:	9000      	str	r0, [sp, #0]
 8019da0:	000c      	movs	r4, r1
 8019da2:	4293      	cmp	r3, r2
 8019da4:	da00      	bge.n	8019da8 <_printf_common+0x14>
 8019da6:	0013      	movs	r3, r2
 8019da8:	0022      	movs	r2, r4
 8019daa:	602b      	str	r3, [r5, #0]
 8019dac:	3243      	adds	r2, #67	; 0x43
 8019dae:	7812      	ldrb	r2, [r2, #0]
 8019db0:	2a00      	cmp	r2, #0
 8019db2:	d001      	beq.n	8019db8 <_printf_common+0x24>
 8019db4:	3301      	adds	r3, #1
 8019db6:	602b      	str	r3, [r5, #0]
 8019db8:	6823      	ldr	r3, [r4, #0]
 8019dba:	069b      	lsls	r3, r3, #26
 8019dbc:	d502      	bpl.n	8019dc4 <_printf_common+0x30>
 8019dbe:	682b      	ldr	r3, [r5, #0]
 8019dc0:	3302      	adds	r3, #2
 8019dc2:	602b      	str	r3, [r5, #0]
 8019dc4:	2706      	movs	r7, #6
 8019dc6:	6823      	ldr	r3, [r4, #0]
 8019dc8:	401f      	ands	r7, r3
 8019dca:	d027      	beq.n	8019e1c <_printf_common+0x88>
 8019dcc:	0023      	movs	r3, r4
 8019dce:	3343      	adds	r3, #67	; 0x43
 8019dd0:	781b      	ldrb	r3, [r3, #0]
 8019dd2:	1e5a      	subs	r2, r3, #1
 8019dd4:	4193      	sbcs	r3, r2
 8019dd6:	6822      	ldr	r2, [r4, #0]
 8019dd8:	0692      	lsls	r2, r2, #26
 8019dda:	d430      	bmi.n	8019e3e <_printf_common+0xaa>
 8019ddc:	0022      	movs	r2, r4
 8019dde:	9901      	ldr	r1, [sp, #4]
 8019de0:	3243      	adds	r2, #67	; 0x43
 8019de2:	9800      	ldr	r0, [sp, #0]
 8019de4:	9e08      	ldr	r6, [sp, #32]
 8019de6:	47b0      	blx	r6
 8019de8:	1c43      	adds	r3, r0, #1
 8019dea:	d025      	beq.n	8019e38 <_printf_common+0xa4>
 8019dec:	2306      	movs	r3, #6
 8019dee:	6820      	ldr	r0, [r4, #0]
 8019df0:	682a      	ldr	r2, [r5, #0]
 8019df2:	68e1      	ldr	r1, [r4, #12]
 8019df4:	4003      	ands	r3, r0
 8019df6:	2500      	movs	r5, #0
 8019df8:	2b04      	cmp	r3, #4
 8019dfa:	d103      	bne.n	8019e04 <_printf_common+0x70>
 8019dfc:	1a8d      	subs	r5, r1, r2
 8019dfe:	43eb      	mvns	r3, r5
 8019e00:	17db      	asrs	r3, r3, #31
 8019e02:	401d      	ands	r5, r3
 8019e04:	68a3      	ldr	r3, [r4, #8]
 8019e06:	6922      	ldr	r2, [r4, #16]
 8019e08:	4293      	cmp	r3, r2
 8019e0a:	dd01      	ble.n	8019e10 <_printf_common+0x7c>
 8019e0c:	1a9b      	subs	r3, r3, r2
 8019e0e:	18ed      	adds	r5, r5, r3
 8019e10:	2700      	movs	r7, #0
 8019e12:	42bd      	cmp	r5, r7
 8019e14:	d120      	bne.n	8019e58 <_printf_common+0xc4>
 8019e16:	2000      	movs	r0, #0
 8019e18:	e010      	b.n	8019e3c <_printf_common+0xa8>
 8019e1a:	3701      	adds	r7, #1
 8019e1c:	68e3      	ldr	r3, [r4, #12]
 8019e1e:	682a      	ldr	r2, [r5, #0]
 8019e20:	1a9b      	subs	r3, r3, r2
 8019e22:	42bb      	cmp	r3, r7
 8019e24:	ddd2      	ble.n	8019dcc <_printf_common+0x38>
 8019e26:	0022      	movs	r2, r4
 8019e28:	2301      	movs	r3, #1
 8019e2a:	3219      	adds	r2, #25
 8019e2c:	9901      	ldr	r1, [sp, #4]
 8019e2e:	9800      	ldr	r0, [sp, #0]
 8019e30:	9e08      	ldr	r6, [sp, #32]
 8019e32:	47b0      	blx	r6
 8019e34:	1c43      	adds	r3, r0, #1
 8019e36:	d1f0      	bne.n	8019e1a <_printf_common+0x86>
 8019e38:	2001      	movs	r0, #1
 8019e3a:	4240      	negs	r0, r0
 8019e3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019e3e:	2030      	movs	r0, #48	; 0x30
 8019e40:	18e1      	adds	r1, r4, r3
 8019e42:	3143      	adds	r1, #67	; 0x43
 8019e44:	7008      	strb	r0, [r1, #0]
 8019e46:	0021      	movs	r1, r4
 8019e48:	1c5a      	adds	r2, r3, #1
 8019e4a:	3145      	adds	r1, #69	; 0x45
 8019e4c:	7809      	ldrb	r1, [r1, #0]
 8019e4e:	18a2      	adds	r2, r4, r2
 8019e50:	3243      	adds	r2, #67	; 0x43
 8019e52:	3302      	adds	r3, #2
 8019e54:	7011      	strb	r1, [r2, #0]
 8019e56:	e7c1      	b.n	8019ddc <_printf_common+0x48>
 8019e58:	0022      	movs	r2, r4
 8019e5a:	2301      	movs	r3, #1
 8019e5c:	321a      	adds	r2, #26
 8019e5e:	9901      	ldr	r1, [sp, #4]
 8019e60:	9800      	ldr	r0, [sp, #0]
 8019e62:	9e08      	ldr	r6, [sp, #32]
 8019e64:	47b0      	blx	r6
 8019e66:	1c43      	adds	r3, r0, #1
 8019e68:	d0e6      	beq.n	8019e38 <_printf_common+0xa4>
 8019e6a:	3701      	adds	r7, #1
 8019e6c:	e7d1      	b.n	8019e12 <_printf_common+0x7e>
	...

08019e70 <_printf_i>:
 8019e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e72:	b089      	sub	sp, #36	; 0x24
 8019e74:	9204      	str	r2, [sp, #16]
 8019e76:	000a      	movs	r2, r1
 8019e78:	3243      	adds	r2, #67	; 0x43
 8019e7a:	9305      	str	r3, [sp, #20]
 8019e7c:	9003      	str	r0, [sp, #12]
 8019e7e:	9202      	str	r2, [sp, #8]
 8019e80:	7e0a      	ldrb	r2, [r1, #24]
 8019e82:	000c      	movs	r4, r1
 8019e84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e86:	2a6e      	cmp	r2, #110	; 0x6e
 8019e88:	d100      	bne.n	8019e8c <_printf_i+0x1c>
 8019e8a:	e086      	b.n	8019f9a <_printf_i+0x12a>
 8019e8c:	d81f      	bhi.n	8019ece <_printf_i+0x5e>
 8019e8e:	2a63      	cmp	r2, #99	; 0x63
 8019e90:	d033      	beq.n	8019efa <_printf_i+0x8a>
 8019e92:	d808      	bhi.n	8019ea6 <_printf_i+0x36>
 8019e94:	2a00      	cmp	r2, #0
 8019e96:	d100      	bne.n	8019e9a <_printf_i+0x2a>
 8019e98:	e08c      	b.n	8019fb4 <_printf_i+0x144>
 8019e9a:	2a58      	cmp	r2, #88	; 0x58
 8019e9c:	d04d      	beq.n	8019f3a <_printf_i+0xca>
 8019e9e:	0025      	movs	r5, r4
 8019ea0:	3542      	adds	r5, #66	; 0x42
 8019ea2:	702a      	strb	r2, [r5, #0]
 8019ea4:	e030      	b.n	8019f08 <_printf_i+0x98>
 8019ea6:	2a64      	cmp	r2, #100	; 0x64
 8019ea8:	d001      	beq.n	8019eae <_printf_i+0x3e>
 8019eaa:	2a69      	cmp	r2, #105	; 0x69
 8019eac:	d1f7      	bne.n	8019e9e <_printf_i+0x2e>
 8019eae:	6819      	ldr	r1, [r3, #0]
 8019eb0:	6825      	ldr	r5, [r4, #0]
 8019eb2:	1d0a      	adds	r2, r1, #4
 8019eb4:	0628      	lsls	r0, r5, #24
 8019eb6:	d529      	bpl.n	8019f0c <_printf_i+0x9c>
 8019eb8:	6808      	ldr	r0, [r1, #0]
 8019eba:	601a      	str	r2, [r3, #0]
 8019ebc:	2800      	cmp	r0, #0
 8019ebe:	da03      	bge.n	8019ec8 <_printf_i+0x58>
 8019ec0:	232d      	movs	r3, #45	; 0x2d
 8019ec2:	9a02      	ldr	r2, [sp, #8]
 8019ec4:	4240      	negs	r0, r0
 8019ec6:	7013      	strb	r3, [r2, #0]
 8019ec8:	4e6b      	ldr	r6, [pc, #428]	; (801a078 <_printf_i+0x208>)
 8019eca:	270a      	movs	r7, #10
 8019ecc:	e04f      	b.n	8019f6e <_printf_i+0xfe>
 8019ece:	2a73      	cmp	r2, #115	; 0x73
 8019ed0:	d074      	beq.n	8019fbc <_printf_i+0x14c>
 8019ed2:	d808      	bhi.n	8019ee6 <_printf_i+0x76>
 8019ed4:	2a6f      	cmp	r2, #111	; 0x6f
 8019ed6:	d01f      	beq.n	8019f18 <_printf_i+0xa8>
 8019ed8:	2a70      	cmp	r2, #112	; 0x70
 8019eda:	d1e0      	bne.n	8019e9e <_printf_i+0x2e>
 8019edc:	2220      	movs	r2, #32
 8019ede:	6809      	ldr	r1, [r1, #0]
 8019ee0:	430a      	orrs	r2, r1
 8019ee2:	6022      	str	r2, [r4, #0]
 8019ee4:	e003      	b.n	8019eee <_printf_i+0x7e>
 8019ee6:	2a75      	cmp	r2, #117	; 0x75
 8019ee8:	d016      	beq.n	8019f18 <_printf_i+0xa8>
 8019eea:	2a78      	cmp	r2, #120	; 0x78
 8019eec:	d1d7      	bne.n	8019e9e <_printf_i+0x2e>
 8019eee:	0022      	movs	r2, r4
 8019ef0:	2178      	movs	r1, #120	; 0x78
 8019ef2:	3245      	adds	r2, #69	; 0x45
 8019ef4:	7011      	strb	r1, [r2, #0]
 8019ef6:	4e61      	ldr	r6, [pc, #388]	; (801a07c <_printf_i+0x20c>)
 8019ef8:	e022      	b.n	8019f40 <_printf_i+0xd0>
 8019efa:	0025      	movs	r5, r4
 8019efc:	681a      	ldr	r2, [r3, #0]
 8019efe:	3542      	adds	r5, #66	; 0x42
 8019f00:	1d11      	adds	r1, r2, #4
 8019f02:	6019      	str	r1, [r3, #0]
 8019f04:	6813      	ldr	r3, [r2, #0]
 8019f06:	702b      	strb	r3, [r5, #0]
 8019f08:	2301      	movs	r3, #1
 8019f0a:	e065      	b.n	8019fd8 <_printf_i+0x168>
 8019f0c:	6808      	ldr	r0, [r1, #0]
 8019f0e:	601a      	str	r2, [r3, #0]
 8019f10:	0669      	lsls	r1, r5, #25
 8019f12:	d5d3      	bpl.n	8019ebc <_printf_i+0x4c>
 8019f14:	b200      	sxth	r0, r0
 8019f16:	e7d1      	b.n	8019ebc <_printf_i+0x4c>
 8019f18:	6819      	ldr	r1, [r3, #0]
 8019f1a:	6825      	ldr	r5, [r4, #0]
 8019f1c:	1d08      	adds	r0, r1, #4
 8019f1e:	6018      	str	r0, [r3, #0]
 8019f20:	6808      	ldr	r0, [r1, #0]
 8019f22:	062e      	lsls	r6, r5, #24
 8019f24:	d505      	bpl.n	8019f32 <_printf_i+0xc2>
 8019f26:	4e54      	ldr	r6, [pc, #336]	; (801a078 <_printf_i+0x208>)
 8019f28:	2708      	movs	r7, #8
 8019f2a:	2a6f      	cmp	r2, #111	; 0x6f
 8019f2c:	d01b      	beq.n	8019f66 <_printf_i+0xf6>
 8019f2e:	270a      	movs	r7, #10
 8019f30:	e019      	b.n	8019f66 <_printf_i+0xf6>
 8019f32:	066d      	lsls	r5, r5, #25
 8019f34:	d5f7      	bpl.n	8019f26 <_printf_i+0xb6>
 8019f36:	b280      	uxth	r0, r0
 8019f38:	e7f5      	b.n	8019f26 <_printf_i+0xb6>
 8019f3a:	3145      	adds	r1, #69	; 0x45
 8019f3c:	4e4e      	ldr	r6, [pc, #312]	; (801a078 <_printf_i+0x208>)
 8019f3e:	700a      	strb	r2, [r1, #0]
 8019f40:	6818      	ldr	r0, [r3, #0]
 8019f42:	6822      	ldr	r2, [r4, #0]
 8019f44:	1d01      	adds	r1, r0, #4
 8019f46:	6800      	ldr	r0, [r0, #0]
 8019f48:	6019      	str	r1, [r3, #0]
 8019f4a:	0615      	lsls	r5, r2, #24
 8019f4c:	d521      	bpl.n	8019f92 <_printf_i+0x122>
 8019f4e:	07d3      	lsls	r3, r2, #31
 8019f50:	d502      	bpl.n	8019f58 <_printf_i+0xe8>
 8019f52:	2320      	movs	r3, #32
 8019f54:	431a      	orrs	r2, r3
 8019f56:	6022      	str	r2, [r4, #0]
 8019f58:	2710      	movs	r7, #16
 8019f5a:	2800      	cmp	r0, #0
 8019f5c:	d103      	bne.n	8019f66 <_printf_i+0xf6>
 8019f5e:	2320      	movs	r3, #32
 8019f60:	6822      	ldr	r2, [r4, #0]
 8019f62:	439a      	bics	r2, r3
 8019f64:	6022      	str	r2, [r4, #0]
 8019f66:	0023      	movs	r3, r4
 8019f68:	2200      	movs	r2, #0
 8019f6a:	3343      	adds	r3, #67	; 0x43
 8019f6c:	701a      	strb	r2, [r3, #0]
 8019f6e:	6863      	ldr	r3, [r4, #4]
 8019f70:	60a3      	str	r3, [r4, #8]
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	db58      	blt.n	801a028 <_printf_i+0x1b8>
 8019f76:	2204      	movs	r2, #4
 8019f78:	6821      	ldr	r1, [r4, #0]
 8019f7a:	4391      	bics	r1, r2
 8019f7c:	6021      	str	r1, [r4, #0]
 8019f7e:	2800      	cmp	r0, #0
 8019f80:	d154      	bne.n	801a02c <_printf_i+0x1bc>
 8019f82:	9d02      	ldr	r5, [sp, #8]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d05a      	beq.n	801a03e <_printf_i+0x1ce>
 8019f88:	0025      	movs	r5, r4
 8019f8a:	7833      	ldrb	r3, [r6, #0]
 8019f8c:	3542      	adds	r5, #66	; 0x42
 8019f8e:	702b      	strb	r3, [r5, #0]
 8019f90:	e055      	b.n	801a03e <_printf_i+0x1ce>
 8019f92:	0655      	lsls	r5, r2, #25
 8019f94:	d5db      	bpl.n	8019f4e <_printf_i+0xde>
 8019f96:	b280      	uxth	r0, r0
 8019f98:	e7d9      	b.n	8019f4e <_printf_i+0xde>
 8019f9a:	681a      	ldr	r2, [r3, #0]
 8019f9c:	680d      	ldr	r5, [r1, #0]
 8019f9e:	1d10      	adds	r0, r2, #4
 8019fa0:	6949      	ldr	r1, [r1, #20]
 8019fa2:	6018      	str	r0, [r3, #0]
 8019fa4:	6813      	ldr	r3, [r2, #0]
 8019fa6:	062e      	lsls	r6, r5, #24
 8019fa8:	d501      	bpl.n	8019fae <_printf_i+0x13e>
 8019faa:	6019      	str	r1, [r3, #0]
 8019fac:	e002      	b.n	8019fb4 <_printf_i+0x144>
 8019fae:	066d      	lsls	r5, r5, #25
 8019fb0:	d5fb      	bpl.n	8019faa <_printf_i+0x13a>
 8019fb2:	8019      	strh	r1, [r3, #0]
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	9d02      	ldr	r5, [sp, #8]
 8019fb8:	6123      	str	r3, [r4, #16]
 8019fba:	e04f      	b.n	801a05c <_printf_i+0x1ec>
 8019fbc:	681a      	ldr	r2, [r3, #0]
 8019fbe:	1d11      	adds	r1, r2, #4
 8019fc0:	6019      	str	r1, [r3, #0]
 8019fc2:	6815      	ldr	r5, [r2, #0]
 8019fc4:	2100      	movs	r1, #0
 8019fc6:	6862      	ldr	r2, [r4, #4]
 8019fc8:	0028      	movs	r0, r5
 8019fca:	f000 f86b 	bl	801a0a4 <memchr>
 8019fce:	2800      	cmp	r0, #0
 8019fd0:	d001      	beq.n	8019fd6 <_printf_i+0x166>
 8019fd2:	1b40      	subs	r0, r0, r5
 8019fd4:	6060      	str	r0, [r4, #4]
 8019fd6:	6863      	ldr	r3, [r4, #4]
 8019fd8:	6123      	str	r3, [r4, #16]
 8019fda:	2300      	movs	r3, #0
 8019fdc:	9a02      	ldr	r2, [sp, #8]
 8019fde:	7013      	strb	r3, [r2, #0]
 8019fe0:	e03c      	b.n	801a05c <_printf_i+0x1ec>
 8019fe2:	6923      	ldr	r3, [r4, #16]
 8019fe4:	002a      	movs	r2, r5
 8019fe6:	9904      	ldr	r1, [sp, #16]
 8019fe8:	9803      	ldr	r0, [sp, #12]
 8019fea:	9d05      	ldr	r5, [sp, #20]
 8019fec:	47a8      	blx	r5
 8019fee:	1c43      	adds	r3, r0, #1
 8019ff0:	d03e      	beq.n	801a070 <_printf_i+0x200>
 8019ff2:	6823      	ldr	r3, [r4, #0]
 8019ff4:	079b      	lsls	r3, r3, #30
 8019ff6:	d415      	bmi.n	801a024 <_printf_i+0x1b4>
 8019ff8:	9b07      	ldr	r3, [sp, #28]
 8019ffa:	68e0      	ldr	r0, [r4, #12]
 8019ffc:	4298      	cmp	r0, r3
 8019ffe:	da39      	bge.n	801a074 <_printf_i+0x204>
 801a000:	0018      	movs	r0, r3
 801a002:	e037      	b.n	801a074 <_printf_i+0x204>
 801a004:	0022      	movs	r2, r4
 801a006:	2301      	movs	r3, #1
 801a008:	3219      	adds	r2, #25
 801a00a:	9904      	ldr	r1, [sp, #16]
 801a00c:	9803      	ldr	r0, [sp, #12]
 801a00e:	9e05      	ldr	r6, [sp, #20]
 801a010:	47b0      	blx	r6
 801a012:	1c43      	adds	r3, r0, #1
 801a014:	d02c      	beq.n	801a070 <_printf_i+0x200>
 801a016:	3501      	adds	r5, #1
 801a018:	68e3      	ldr	r3, [r4, #12]
 801a01a:	9a07      	ldr	r2, [sp, #28]
 801a01c:	1a9b      	subs	r3, r3, r2
 801a01e:	42ab      	cmp	r3, r5
 801a020:	dcf0      	bgt.n	801a004 <_printf_i+0x194>
 801a022:	e7e9      	b.n	8019ff8 <_printf_i+0x188>
 801a024:	2500      	movs	r5, #0
 801a026:	e7f7      	b.n	801a018 <_printf_i+0x1a8>
 801a028:	2800      	cmp	r0, #0
 801a02a:	d0ad      	beq.n	8019f88 <_printf_i+0x118>
 801a02c:	9d02      	ldr	r5, [sp, #8]
 801a02e:	0039      	movs	r1, r7
 801a030:	f7e6 f8f0 	bl	8000214 <__aeabi_uidivmod>
 801a034:	5c73      	ldrb	r3, [r6, r1]
 801a036:	3d01      	subs	r5, #1
 801a038:	702b      	strb	r3, [r5, #0]
 801a03a:	2800      	cmp	r0, #0
 801a03c:	d1f7      	bne.n	801a02e <_printf_i+0x1be>
 801a03e:	2f08      	cmp	r7, #8
 801a040:	d109      	bne.n	801a056 <_printf_i+0x1e6>
 801a042:	6823      	ldr	r3, [r4, #0]
 801a044:	07db      	lsls	r3, r3, #31
 801a046:	d506      	bpl.n	801a056 <_printf_i+0x1e6>
 801a048:	6863      	ldr	r3, [r4, #4]
 801a04a:	6922      	ldr	r2, [r4, #16]
 801a04c:	4293      	cmp	r3, r2
 801a04e:	dc02      	bgt.n	801a056 <_printf_i+0x1e6>
 801a050:	2330      	movs	r3, #48	; 0x30
 801a052:	3d01      	subs	r5, #1
 801a054:	702b      	strb	r3, [r5, #0]
 801a056:	9b02      	ldr	r3, [sp, #8]
 801a058:	1b5b      	subs	r3, r3, r5
 801a05a:	6123      	str	r3, [r4, #16]
 801a05c:	9b05      	ldr	r3, [sp, #20]
 801a05e:	aa07      	add	r2, sp, #28
 801a060:	9300      	str	r3, [sp, #0]
 801a062:	0021      	movs	r1, r4
 801a064:	9b04      	ldr	r3, [sp, #16]
 801a066:	9803      	ldr	r0, [sp, #12]
 801a068:	f7ff fe94 	bl	8019d94 <_printf_common>
 801a06c:	1c43      	adds	r3, r0, #1
 801a06e:	d1b8      	bne.n	8019fe2 <_printf_i+0x172>
 801a070:	2001      	movs	r0, #1
 801a072:	4240      	negs	r0, r0
 801a074:	b009      	add	sp, #36	; 0x24
 801a076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a078:	0801b631 	.word	0x0801b631
 801a07c:	0801b642 	.word	0x0801b642

0801a080 <_sbrk_r>:
 801a080:	2300      	movs	r3, #0
 801a082:	b570      	push	{r4, r5, r6, lr}
 801a084:	4c06      	ldr	r4, [pc, #24]	; (801a0a0 <_sbrk_r+0x20>)
 801a086:	0005      	movs	r5, r0
 801a088:	0008      	movs	r0, r1
 801a08a:	6023      	str	r3, [r4, #0]
 801a08c:	f7ea fcec 	bl	8004a68 <_sbrk>
 801a090:	1c43      	adds	r3, r0, #1
 801a092:	d103      	bne.n	801a09c <_sbrk_r+0x1c>
 801a094:	6823      	ldr	r3, [r4, #0]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d000      	beq.n	801a09c <_sbrk_r+0x1c>
 801a09a:	602b      	str	r3, [r5, #0]
 801a09c:	bd70      	pop	{r4, r5, r6, pc}
 801a09e:	46c0      	nop			; (mov r8, r8)
 801a0a0:	20001690 	.word	0x20001690

0801a0a4 <memchr>:
 801a0a4:	b2c9      	uxtb	r1, r1
 801a0a6:	1882      	adds	r2, r0, r2
 801a0a8:	4290      	cmp	r0, r2
 801a0aa:	d101      	bne.n	801a0b0 <memchr+0xc>
 801a0ac:	2000      	movs	r0, #0
 801a0ae:	4770      	bx	lr
 801a0b0:	7803      	ldrb	r3, [r0, #0]
 801a0b2:	428b      	cmp	r3, r1
 801a0b4:	d0fb      	beq.n	801a0ae <memchr+0xa>
 801a0b6:	3001      	adds	r0, #1
 801a0b8:	e7f6      	b.n	801a0a8 <memchr+0x4>

0801a0ba <memcpy>:
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	b510      	push	{r4, lr}
 801a0be:	429a      	cmp	r2, r3
 801a0c0:	d100      	bne.n	801a0c4 <memcpy+0xa>
 801a0c2:	bd10      	pop	{r4, pc}
 801a0c4:	5ccc      	ldrb	r4, [r1, r3]
 801a0c6:	54c4      	strb	r4, [r0, r3]
 801a0c8:	3301      	adds	r3, #1
 801a0ca:	e7f8      	b.n	801a0be <memcpy+0x4>

0801a0cc <memmove>:
 801a0cc:	b510      	push	{r4, lr}
 801a0ce:	4288      	cmp	r0, r1
 801a0d0:	d902      	bls.n	801a0d8 <memmove+0xc>
 801a0d2:	188b      	adds	r3, r1, r2
 801a0d4:	4298      	cmp	r0, r3
 801a0d6:	d303      	bcc.n	801a0e0 <memmove+0x14>
 801a0d8:	2300      	movs	r3, #0
 801a0da:	e007      	b.n	801a0ec <memmove+0x20>
 801a0dc:	5c8b      	ldrb	r3, [r1, r2]
 801a0de:	5483      	strb	r3, [r0, r2]
 801a0e0:	3a01      	subs	r2, #1
 801a0e2:	d2fb      	bcs.n	801a0dc <memmove+0x10>
 801a0e4:	bd10      	pop	{r4, pc}
 801a0e6:	5ccc      	ldrb	r4, [r1, r3]
 801a0e8:	54c4      	strb	r4, [r0, r3]
 801a0ea:	3301      	adds	r3, #1
 801a0ec:	429a      	cmp	r2, r3
 801a0ee:	d1fa      	bne.n	801a0e6 <memmove+0x1a>
 801a0f0:	e7f8      	b.n	801a0e4 <memmove+0x18>

0801a0f2 <__malloc_lock>:
 801a0f2:	4770      	bx	lr

0801a0f4 <__malloc_unlock>:
 801a0f4:	4770      	bx	lr
	...

0801a0f8 <_free_r>:
 801a0f8:	b570      	push	{r4, r5, r6, lr}
 801a0fa:	0005      	movs	r5, r0
 801a0fc:	2900      	cmp	r1, #0
 801a0fe:	d010      	beq.n	801a122 <_free_r+0x2a>
 801a100:	1f0c      	subs	r4, r1, #4
 801a102:	6823      	ldr	r3, [r4, #0]
 801a104:	2b00      	cmp	r3, #0
 801a106:	da00      	bge.n	801a10a <_free_r+0x12>
 801a108:	18e4      	adds	r4, r4, r3
 801a10a:	0028      	movs	r0, r5
 801a10c:	f7ff fff1 	bl	801a0f2 <__malloc_lock>
 801a110:	4a1d      	ldr	r2, [pc, #116]	; (801a188 <_free_r+0x90>)
 801a112:	6813      	ldr	r3, [r2, #0]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d105      	bne.n	801a124 <_free_r+0x2c>
 801a118:	6063      	str	r3, [r4, #4]
 801a11a:	6014      	str	r4, [r2, #0]
 801a11c:	0028      	movs	r0, r5
 801a11e:	f7ff ffe9 	bl	801a0f4 <__malloc_unlock>
 801a122:	bd70      	pop	{r4, r5, r6, pc}
 801a124:	42a3      	cmp	r3, r4
 801a126:	d909      	bls.n	801a13c <_free_r+0x44>
 801a128:	6821      	ldr	r1, [r4, #0]
 801a12a:	1860      	adds	r0, r4, r1
 801a12c:	4283      	cmp	r3, r0
 801a12e:	d1f3      	bne.n	801a118 <_free_r+0x20>
 801a130:	6818      	ldr	r0, [r3, #0]
 801a132:	685b      	ldr	r3, [r3, #4]
 801a134:	1841      	adds	r1, r0, r1
 801a136:	6021      	str	r1, [r4, #0]
 801a138:	e7ee      	b.n	801a118 <_free_r+0x20>
 801a13a:	0013      	movs	r3, r2
 801a13c:	685a      	ldr	r2, [r3, #4]
 801a13e:	2a00      	cmp	r2, #0
 801a140:	d001      	beq.n	801a146 <_free_r+0x4e>
 801a142:	42a2      	cmp	r2, r4
 801a144:	d9f9      	bls.n	801a13a <_free_r+0x42>
 801a146:	6819      	ldr	r1, [r3, #0]
 801a148:	1858      	adds	r0, r3, r1
 801a14a:	42a0      	cmp	r0, r4
 801a14c:	d10b      	bne.n	801a166 <_free_r+0x6e>
 801a14e:	6820      	ldr	r0, [r4, #0]
 801a150:	1809      	adds	r1, r1, r0
 801a152:	1858      	adds	r0, r3, r1
 801a154:	6019      	str	r1, [r3, #0]
 801a156:	4282      	cmp	r2, r0
 801a158:	d1e0      	bne.n	801a11c <_free_r+0x24>
 801a15a:	6810      	ldr	r0, [r2, #0]
 801a15c:	6852      	ldr	r2, [r2, #4]
 801a15e:	1841      	adds	r1, r0, r1
 801a160:	6019      	str	r1, [r3, #0]
 801a162:	605a      	str	r2, [r3, #4]
 801a164:	e7da      	b.n	801a11c <_free_r+0x24>
 801a166:	42a0      	cmp	r0, r4
 801a168:	d902      	bls.n	801a170 <_free_r+0x78>
 801a16a:	230c      	movs	r3, #12
 801a16c:	602b      	str	r3, [r5, #0]
 801a16e:	e7d5      	b.n	801a11c <_free_r+0x24>
 801a170:	6821      	ldr	r1, [r4, #0]
 801a172:	1860      	adds	r0, r4, r1
 801a174:	4282      	cmp	r2, r0
 801a176:	d103      	bne.n	801a180 <_free_r+0x88>
 801a178:	6810      	ldr	r0, [r2, #0]
 801a17a:	6852      	ldr	r2, [r2, #4]
 801a17c:	1841      	adds	r1, r0, r1
 801a17e:	6021      	str	r1, [r4, #0]
 801a180:	6062      	str	r2, [r4, #4]
 801a182:	605c      	str	r4, [r3, #4]
 801a184:	e7ca      	b.n	801a11c <_free_r+0x24>
 801a186:	46c0      	nop			; (mov r8, r8)
 801a188:	20001418 	.word	0x20001418

0801a18c <_realloc_r>:
 801a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a18e:	0007      	movs	r7, r0
 801a190:	000d      	movs	r5, r1
 801a192:	0016      	movs	r6, r2
 801a194:	2900      	cmp	r1, #0
 801a196:	d105      	bne.n	801a1a4 <_realloc_r+0x18>
 801a198:	0011      	movs	r1, r2
 801a19a:	f7ff fc3d 	bl	8019a18 <_malloc_r>
 801a19e:	0004      	movs	r4, r0
 801a1a0:	0020      	movs	r0, r4
 801a1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a1a4:	2a00      	cmp	r2, #0
 801a1a6:	d103      	bne.n	801a1b0 <_realloc_r+0x24>
 801a1a8:	f7ff ffa6 	bl	801a0f8 <_free_r>
 801a1ac:	0034      	movs	r4, r6
 801a1ae:	e7f7      	b.n	801a1a0 <_realloc_r+0x14>
 801a1b0:	f000 f812 	bl	801a1d8 <_malloc_usable_size_r>
 801a1b4:	002c      	movs	r4, r5
 801a1b6:	42b0      	cmp	r0, r6
 801a1b8:	d2f2      	bcs.n	801a1a0 <_realloc_r+0x14>
 801a1ba:	0031      	movs	r1, r6
 801a1bc:	0038      	movs	r0, r7
 801a1be:	f7ff fc2b 	bl	8019a18 <_malloc_r>
 801a1c2:	1e04      	subs	r4, r0, #0
 801a1c4:	d0ec      	beq.n	801a1a0 <_realloc_r+0x14>
 801a1c6:	0029      	movs	r1, r5
 801a1c8:	0032      	movs	r2, r6
 801a1ca:	f7ff ff76 	bl	801a0ba <memcpy>
 801a1ce:	0029      	movs	r1, r5
 801a1d0:	0038      	movs	r0, r7
 801a1d2:	f7ff ff91 	bl	801a0f8 <_free_r>
 801a1d6:	e7e3      	b.n	801a1a0 <_realloc_r+0x14>

0801a1d8 <_malloc_usable_size_r>:
 801a1d8:	1f0b      	subs	r3, r1, #4
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	1f18      	subs	r0, r3, #4
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	da01      	bge.n	801a1e6 <_malloc_usable_size_r+0xe>
 801a1e2:	580b      	ldr	r3, [r1, r0]
 801a1e4:	18c0      	adds	r0, r0, r3
 801a1e6:	4770      	bx	lr

0801a1e8 <ceil>:
 801a1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a1ea:	004b      	lsls	r3, r1, #1
 801a1ec:	4a39      	ldr	r2, [pc, #228]	; (801a2d4 <ceil+0xec>)
 801a1ee:	0d5b      	lsrs	r3, r3, #21
 801a1f0:	b085      	sub	sp, #20
 801a1f2:	189e      	adds	r6, r3, r2
 801a1f4:	000c      	movs	r4, r1
 801a1f6:	0005      	movs	r5, r0
 801a1f8:	9003      	str	r0, [sp, #12]
 801a1fa:	2e13      	cmp	r6, #19
 801a1fc:	dc32      	bgt.n	801a264 <ceil+0x7c>
 801a1fe:	2e00      	cmp	r6, #0
 801a200:	da13      	bge.n	801a22a <ceil+0x42>
 801a202:	4a35      	ldr	r2, [pc, #212]	; (801a2d8 <ceil+0xf0>)
 801a204:	4b35      	ldr	r3, [pc, #212]	; (801a2dc <ceil+0xf4>)
 801a206:	f7e6 ffb3 	bl	8001170 <__aeabi_dadd>
 801a20a:	2200      	movs	r2, #0
 801a20c:	2300      	movs	r3, #0
 801a20e:	f7e6 f91b 	bl	8000448 <__aeabi_dcmpgt>
 801a212:	2800      	cmp	r0, #0
 801a214:	d006      	beq.n	801a224 <ceil+0x3c>
 801a216:	2c00      	cmp	r4, #0
 801a218:	db57      	blt.n	801a2ca <ceil+0xe2>
 801a21a:	432c      	orrs	r4, r5
 801a21c:	2500      	movs	r5, #0
 801a21e:	42ac      	cmp	r4, r5
 801a220:	d000      	beq.n	801a224 <ceil+0x3c>
 801a222:	4c2f      	ldr	r4, [pc, #188]	; (801a2e0 <ceil+0xf8>)
 801a224:	0028      	movs	r0, r5
 801a226:	0021      	movs	r1, r4
 801a228:	e026      	b.n	801a278 <ceil+0x90>
 801a22a:	4f2e      	ldr	r7, [pc, #184]	; (801a2e4 <ceil+0xfc>)
 801a22c:	4137      	asrs	r7, r6
 801a22e:	003b      	movs	r3, r7
 801a230:	400b      	ands	r3, r1
 801a232:	4303      	orrs	r3, r0
 801a234:	d020      	beq.n	801a278 <ceil+0x90>
 801a236:	9000      	str	r0, [sp, #0]
 801a238:	9101      	str	r1, [sp, #4]
 801a23a:	4a27      	ldr	r2, [pc, #156]	; (801a2d8 <ceil+0xf0>)
 801a23c:	4b27      	ldr	r3, [pc, #156]	; (801a2dc <ceil+0xf4>)
 801a23e:	9800      	ldr	r0, [sp, #0]
 801a240:	9901      	ldr	r1, [sp, #4]
 801a242:	f7e6 ff95 	bl	8001170 <__aeabi_dadd>
 801a246:	2200      	movs	r2, #0
 801a248:	2300      	movs	r3, #0
 801a24a:	f7e6 f8fd 	bl	8000448 <__aeabi_dcmpgt>
 801a24e:	2800      	cmp	r0, #0
 801a250:	d0e8      	beq.n	801a224 <ceil+0x3c>
 801a252:	2c00      	cmp	r4, #0
 801a254:	dd03      	ble.n	801a25e <ceil+0x76>
 801a256:	2380      	movs	r3, #128	; 0x80
 801a258:	035b      	lsls	r3, r3, #13
 801a25a:	4133      	asrs	r3, r6
 801a25c:	18e4      	adds	r4, r4, r3
 801a25e:	43bc      	bics	r4, r7
 801a260:	2500      	movs	r5, #0
 801a262:	e7df      	b.n	801a224 <ceil+0x3c>
 801a264:	2e33      	cmp	r6, #51	; 0x33
 801a266:	dd09      	ble.n	801a27c <ceil+0x94>
 801a268:	2380      	movs	r3, #128	; 0x80
 801a26a:	00db      	lsls	r3, r3, #3
 801a26c:	429e      	cmp	r6, r3
 801a26e:	d103      	bne.n	801a278 <ceil+0x90>
 801a270:	0002      	movs	r2, r0
 801a272:	000b      	movs	r3, r1
 801a274:	f7e6 ff7c 	bl	8001170 <__aeabi_dadd>
 801a278:	b005      	add	sp, #20
 801a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a27c:	2701      	movs	r7, #1
 801a27e:	4a1a      	ldr	r2, [pc, #104]	; (801a2e8 <ceil+0x100>)
 801a280:	427f      	negs	r7, r7
 801a282:	189b      	adds	r3, r3, r2
 801a284:	40df      	lsrs	r7, r3
 801a286:	4238      	tst	r0, r7
 801a288:	d0f6      	beq.n	801a278 <ceil+0x90>
 801a28a:	9000      	str	r0, [sp, #0]
 801a28c:	9101      	str	r1, [sp, #4]
 801a28e:	4a12      	ldr	r2, [pc, #72]	; (801a2d8 <ceil+0xf0>)
 801a290:	4b12      	ldr	r3, [pc, #72]	; (801a2dc <ceil+0xf4>)
 801a292:	9800      	ldr	r0, [sp, #0]
 801a294:	9901      	ldr	r1, [sp, #4]
 801a296:	f7e6 ff6b 	bl	8001170 <__aeabi_dadd>
 801a29a:	2200      	movs	r2, #0
 801a29c:	2300      	movs	r3, #0
 801a29e:	f7e6 f8d3 	bl	8000448 <__aeabi_dcmpgt>
 801a2a2:	2800      	cmp	r0, #0
 801a2a4:	d0be      	beq.n	801a224 <ceil+0x3c>
 801a2a6:	2c00      	cmp	r4, #0
 801a2a8:	dd02      	ble.n	801a2b0 <ceil+0xc8>
 801a2aa:	2e14      	cmp	r6, #20
 801a2ac:	d102      	bne.n	801a2b4 <ceil+0xcc>
 801a2ae:	3401      	adds	r4, #1
 801a2b0:	43bd      	bics	r5, r7
 801a2b2:	e7b7      	b.n	801a224 <ceil+0x3c>
 801a2b4:	2334      	movs	r3, #52	; 0x34
 801a2b6:	1b9e      	subs	r6, r3, r6
 801a2b8:	3b33      	subs	r3, #51	; 0x33
 801a2ba:	40b3      	lsls	r3, r6
 801a2bc:	18ed      	adds	r5, r5, r3
 801a2be:	9b03      	ldr	r3, [sp, #12]
 801a2c0:	429d      	cmp	r5, r3
 801a2c2:	419b      	sbcs	r3, r3
 801a2c4:	425b      	negs	r3, r3
 801a2c6:	18e4      	adds	r4, r4, r3
 801a2c8:	e7f2      	b.n	801a2b0 <ceil+0xc8>
 801a2ca:	2480      	movs	r4, #128	; 0x80
 801a2cc:	2500      	movs	r5, #0
 801a2ce:	0624      	lsls	r4, r4, #24
 801a2d0:	e7a8      	b.n	801a224 <ceil+0x3c>
 801a2d2:	46c0      	nop			; (mov r8, r8)
 801a2d4:	fffffc01 	.word	0xfffffc01
 801a2d8:	8800759c 	.word	0x8800759c
 801a2dc:	7e37e43c 	.word	0x7e37e43c
 801a2e0:	3ff00000 	.word	0x3ff00000
 801a2e4:	000fffff 	.word	0x000fffff
 801a2e8:	fffffbed 	.word	0xfffffbed

0801a2ec <floor>:
 801a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ee:	004b      	lsls	r3, r1, #1
 801a2f0:	4a39      	ldr	r2, [pc, #228]	; (801a3d8 <floor+0xec>)
 801a2f2:	0d5b      	lsrs	r3, r3, #21
 801a2f4:	b085      	sub	sp, #20
 801a2f6:	189e      	adds	r6, r3, r2
 801a2f8:	000c      	movs	r4, r1
 801a2fa:	0005      	movs	r5, r0
 801a2fc:	9003      	str	r0, [sp, #12]
 801a2fe:	2e13      	cmp	r6, #19
 801a300:	dc34      	bgt.n	801a36c <floor+0x80>
 801a302:	2e00      	cmp	r6, #0
 801a304:	da15      	bge.n	801a332 <floor+0x46>
 801a306:	4a35      	ldr	r2, [pc, #212]	; (801a3dc <floor+0xf0>)
 801a308:	4b35      	ldr	r3, [pc, #212]	; (801a3e0 <floor+0xf4>)
 801a30a:	f7e6 ff31 	bl	8001170 <__aeabi_dadd>
 801a30e:	2200      	movs	r2, #0
 801a310:	2300      	movs	r3, #0
 801a312:	f7e6 f899 	bl	8000448 <__aeabi_dcmpgt>
 801a316:	2800      	cmp	r0, #0
 801a318:	d008      	beq.n	801a32c <floor+0x40>
 801a31a:	2c00      	cmp	r4, #0
 801a31c:	da59      	bge.n	801a3d2 <floor+0xe6>
 801a31e:	0063      	lsls	r3, r4, #1
 801a320:	085b      	lsrs	r3, r3, #1
 801a322:	432b      	orrs	r3, r5
 801a324:	2500      	movs	r5, #0
 801a326:	42ab      	cmp	r3, r5
 801a328:	d000      	beq.n	801a32c <floor+0x40>
 801a32a:	4c2e      	ldr	r4, [pc, #184]	; (801a3e4 <floor+0xf8>)
 801a32c:	0028      	movs	r0, r5
 801a32e:	0021      	movs	r1, r4
 801a330:	e026      	b.n	801a380 <floor+0x94>
 801a332:	4f2d      	ldr	r7, [pc, #180]	; (801a3e8 <floor+0xfc>)
 801a334:	4137      	asrs	r7, r6
 801a336:	003b      	movs	r3, r7
 801a338:	400b      	ands	r3, r1
 801a33a:	4303      	orrs	r3, r0
 801a33c:	d020      	beq.n	801a380 <floor+0x94>
 801a33e:	9000      	str	r0, [sp, #0]
 801a340:	9101      	str	r1, [sp, #4]
 801a342:	4a26      	ldr	r2, [pc, #152]	; (801a3dc <floor+0xf0>)
 801a344:	4b26      	ldr	r3, [pc, #152]	; (801a3e0 <floor+0xf4>)
 801a346:	9800      	ldr	r0, [sp, #0]
 801a348:	9901      	ldr	r1, [sp, #4]
 801a34a:	f7e6 ff11 	bl	8001170 <__aeabi_dadd>
 801a34e:	2200      	movs	r2, #0
 801a350:	2300      	movs	r3, #0
 801a352:	f7e6 f879 	bl	8000448 <__aeabi_dcmpgt>
 801a356:	2800      	cmp	r0, #0
 801a358:	d0e8      	beq.n	801a32c <floor+0x40>
 801a35a:	2c00      	cmp	r4, #0
 801a35c:	da03      	bge.n	801a366 <floor+0x7a>
 801a35e:	2380      	movs	r3, #128	; 0x80
 801a360:	035b      	lsls	r3, r3, #13
 801a362:	4133      	asrs	r3, r6
 801a364:	18e4      	adds	r4, r4, r3
 801a366:	43bc      	bics	r4, r7
 801a368:	2500      	movs	r5, #0
 801a36a:	e7df      	b.n	801a32c <floor+0x40>
 801a36c:	2e33      	cmp	r6, #51	; 0x33
 801a36e:	dd09      	ble.n	801a384 <floor+0x98>
 801a370:	2380      	movs	r3, #128	; 0x80
 801a372:	00db      	lsls	r3, r3, #3
 801a374:	429e      	cmp	r6, r3
 801a376:	d103      	bne.n	801a380 <floor+0x94>
 801a378:	0002      	movs	r2, r0
 801a37a:	000b      	movs	r3, r1
 801a37c:	f7e6 fef8 	bl	8001170 <__aeabi_dadd>
 801a380:	b005      	add	sp, #20
 801a382:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a384:	2701      	movs	r7, #1
 801a386:	4a19      	ldr	r2, [pc, #100]	; (801a3ec <floor+0x100>)
 801a388:	427f      	negs	r7, r7
 801a38a:	189b      	adds	r3, r3, r2
 801a38c:	40df      	lsrs	r7, r3
 801a38e:	4238      	tst	r0, r7
 801a390:	d0f6      	beq.n	801a380 <floor+0x94>
 801a392:	9000      	str	r0, [sp, #0]
 801a394:	9101      	str	r1, [sp, #4]
 801a396:	4a11      	ldr	r2, [pc, #68]	; (801a3dc <floor+0xf0>)
 801a398:	4b11      	ldr	r3, [pc, #68]	; (801a3e0 <floor+0xf4>)
 801a39a:	9800      	ldr	r0, [sp, #0]
 801a39c:	9901      	ldr	r1, [sp, #4]
 801a39e:	f7e6 fee7 	bl	8001170 <__aeabi_dadd>
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	f7e6 f84f 	bl	8000448 <__aeabi_dcmpgt>
 801a3aa:	2800      	cmp	r0, #0
 801a3ac:	d0be      	beq.n	801a32c <floor+0x40>
 801a3ae:	2c00      	cmp	r4, #0
 801a3b0:	da02      	bge.n	801a3b8 <floor+0xcc>
 801a3b2:	2e14      	cmp	r6, #20
 801a3b4:	d102      	bne.n	801a3bc <floor+0xd0>
 801a3b6:	3401      	adds	r4, #1
 801a3b8:	43bd      	bics	r5, r7
 801a3ba:	e7b7      	b.n	801a32c <floor+0x40>
 801a3bc:	2334      	movs	r3, #52	; 0x34
 801a3be:	1b9e      	subs	r6, r3, r6
 801a3c0:	3b33      	subs	r3, #51	; 0x33
 801a3c2:	40b3      	lsls	r3, r6
 801a3c4:	18ed      	adds	r5, r5, r3
 801a3c6:	9b03      	ldr	r3, [sp, #12]
 801a3c8:	429d      	cmp	r5, r3
 801a3ca:	419b      	sbcs	r3, r3
 801a3cc:	425b      	negs	r3, r3
 801a3ce:	18e4      	adds	r4, r4, r3
 801a3d0:	e7f2      	b.n	801a3b8 <floor+0xcc>
 801a3d2:	2500      	movs	r5, #0
 801a3d4:	002c      	movs	r4, r5
 801a3d6:	e7a9      	b.n	801a32c <floor+0x40>
 801a3d8:	fffffc01 	.word	0xfffffc01
 801a3dc:	8800759c 	.word	0x8800759c
 801a3e0:	7e37e43c 	.word	0x7e37e43c
 801a3e4:	bff00000 	.word	0xbff00000
 801a3e8:	000fffff 	.word	0x000fffff
 801a3ec:	fffffbed 	.word	0xfffffbed

0801a3f0 <round>:
 801a3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3f2:	004a      	lsls	r2, r1, #1
 801a3f4:	0007      	movs	r7, r0
 801a3f6:	481f      	ldr	r0, [pc, #124]	; (801a474 <round+0x84>)
 801a3f8:	0d52      	lsrs	r2, r2, #21
 801a3fa:	1815      	adds	r5, r2, r0
 801a3fc:	000e      	movs	r6, r1
 801a3fe:	2d13      	cmp	r5, #19
 801a400:	dc18      	bgt.n	801a434 <round+0x44>
 801a402:	2d00      	cmp	r5, #0
 801a404:	da09      	bge.n	801a41a <round+0x2a>
 801a406:	0fcb      	lsrs	r3, r1, #31
 801a408:	07db      	lsls	r3, r3, #31
 801a40a:	2200      	movs	r2, #0
 801a40c:	1c69      	adds	r1, r5, #1
 801a40e:	d101      	bne.n	801a414 <round+0x24>
 801a410:	4919      	ldr	r1, [pc, #100]	; (801a478 <round+0x88>)
 801a412:	430b      	orrs	r3, r1
 801a414:	0019      	movs	r1, r3
 801a416:	0010      	movs	r0, r2
 801a418:	e017      	b.n	801a44a <round+0x5a>
 801a41a:	4a18      	ldr	r2, [pc, #96]	; (801a47c <round+0x8c>)
 801a41c:	412a      	asrs	r2, r5
 801a41e:	420a      	tst	r2, r1
 801a420:	d101      	bne.n	801a426 <round+0x36>
 801a422:	2f00      	cmp	r7, #0
 801a424:	d012      	beq.n	801a44c <round+0x5c>
 801a426:	2380      	movs	r3, #128	; 0x80
 801a428:	031b      	lsls	r3, r3, #12
 801a42a:	412b      	asrs	r3, r5
 801a42c:	199b      	adds	r3, r3, r6
 801a42e:	4393      	bics	r3, r2
 801a430:	2200      	movs	r2, #0
 801a432:	e7ef      	b.n	801a414 <round+0x24>
 801a434:	2d33      	cmp	r5, #51	; 0x33
 801a436:	dd0b      	ble.n	801a450 <round+0x60>
 801a438:	2380      	movs	r3, #128	; 0x80
 801a43a:	00db      	lsls	r3, r3, #3
 801a43c:	429d      	cmp	r5, r3
 801a43e:	d105      	bne.n	801a44c <round+0x5c>
 801a440:	003a      	movs	r2, r7
 801a442:	000b      	movs	r3, r1
 801a444:	0038      	movs	r0, r7
 801a446:	f7e6 fe93 	bl	8001170 <__aeabi_dadd>
 801a44a:	0007      	movs	r7, r0
 801a44c:	0038      	movs	r0, r7
 801a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a450:	2601      	movs	r6, #1
 801a452:	480b      	ldr	r0, [pc, #44]	; (801a480 <round+0x90>)
 801a454:	4276      	negs	r6, r6
 801a456:	1812      	adds	r2, r2, r0
 801a458:	40d6      	lsrs	r6, r2
 801a45a:	423e      	tst	r6, r7
 801a45c:	d0f6      	beq.n	801a44c <round+0x5c>
 801a45e:	2233      	movs	r2, #51	; 0x33
 801a460:	1b55      	subs	r5, r2, r5
 801a462:	3a32      	subs	r2, #50	; 0x32
 801a464:	40aa      	lsls	r2, r5
 801a466:	19d2      	adds	r2, r2, r7
 801a468:	42ba      	cmp	r2, r7
 801a46a:	41a4      	sbcs	r4, r4
 801a46c:	4264      	negs	r4, r4
 801a46e:	190b      	adds	r3, r1, r4
 801a470:	43b2      	bics	r2, r6
 801a472:	e7cf      	b.n	801a414 <round+0x24>
 801a474:	fffffc01 	.word	0xfffffc01
 801a478:	3ff00000 	.word	0x3ff00000
 801a47c:	000fffff 	.word	0x000fffff
 801a480:	fffffbed 	.word	0xfffffbed

0801a484 <_init>:
 801a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a486:	46c0      	nop			; (mov r8, r8)
 801a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a48a:	bc08      	pop	{r3}
 801a48c:	469e      	mov	lr, r3
 801a48e:	4770      	bx	lr

0801a490 <_fini>:
 801a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a492:	46c0      	nop			; (mov r8, r8)
 801a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a496:	bc08      	pop	{r3}
 801a498:	469e      	mov	lr, r3
 801a49a:	4770      	bx	lr
